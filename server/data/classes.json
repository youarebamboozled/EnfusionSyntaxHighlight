{
    "classes": [
      {
        "class_name": "ParamEnum",
        "methods": [
          "ParamEnum",
          "FromEnum"
        ]
      },
      {
        "class_name": "Attribute",
        "methods": [
          "Attribute"
        ]
      },
      {
        "class_name": "CommonEditorProps",
        "methods": [
          "CommonEditorProps"
        ]
      },
      {
        "class_name": "EntityEditorProps",
        "methods": [
          "EntityEditorProps"
        ]
      },
      {
        "class_name": "BaseContainerProps",
        "methods": [
          "BaseContainerProps"
        ]
      },
      {
        "class_name": "MyCustomTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "BaseContainerCustomTitle",
        "methods": [
          "_WB_GetCustomTitle",
          "_WB_GetCustomClassTitle"
        ]
      },
      {
        "class_name": "BaseContainerCustomTitleField",
        "methods": [
          "BaseContainerCustomTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "MyManager",
        "methods": [
          "DoSomething",
          "DoSomethingElse",
          "GetMyManager",
          "DoSomething",
          "DoSomethingElse",
          "GetMyManager"
        ]
      },
      {
        "class_name": "SampleObject",
        "methods": [
          "SampleObject",
          "Test"
        ]
      },
      {
        "class_name": "AudioSystem",
        "methods": [
          "AudioSystem",
          "PlaySound",
          "PlayEventInitialize",
          "PlayEvent",
          "IsSoundPlayed",
          "TerminateSound",
          "SetSoundTransformation",
          "IsAudible",
          "SetBoundingVolumeParams",
          "OutputVolume",
          "SetMasterVolume",
          "GetMasterVolume",
          "CreateOutputState",
          "GetOutpuStateSignalIdx",
          "SetOutputStateSignal",
          "GetVariableIDByName",
          "GetVariableNameByID",
          "GetVariableValue",
          "GetVariableByID",
          "SetVariableByName",
          "SetVariableByID",
          "ResetVariables"
        ]
      },
      {
        "class_name": "BaseContainer",
        "methods": [
          "Cast",
          "SafeCastType",
          "GetClassName",
          "GetName",
          "SetName",
          "GetAncestor",
          "SetAncestor",
          "ClearVariable",
          "ClearVariables",
          "IsVariableSet",
          "IsVariableSetDirectly",
          "IsType",
          "GetVarIndex",
          "GetVarName",
          "GetNumVars",
          "GetDataVarType",
          "GetUIWidget",
          "GetLimits",
          "GetEnumValues",
          "Get",
          "GetDefaultAsString",
          "GetObject",
          "SetObject",
          "GetObjectArray",
          "SetObjectArray",
          "Set",
          "GetSourceAddons",
          "GetChild",
          "GetNumChildren",
          "GetParent"
        ]
      },
      {
        "class_name": "BaseContainerList",
        "methods": [
          "BaseContainerList",
          "Get",
          "Set",
          "Insert",
          "Remove",
          "Count"
        ]
      },
      {
        "class_name": "BaseContainerTools",
        "methods": [
          "BaseContainerTools",
          "WriteToWidget",
          "ReadFromWidget",
          "WriteToInstance",
          "ReadFromInstance",
          "LoadContainer"
        ]
      },
      {
        "class_name": "TestingClass",
        "methods": [
          "CreateContainer",
          "SaveContainer",
          "CreateContainerFromInstance",
          "CreateInstanceFromContainer"
        ]
      },
      {
        "class_name": "IEntitySource",
        "methods": [
          "GetSubScene",
          "GetLayerID",
          "GetComponentCount",
          "GetComponent",
          "GetID"
        ]
      },
      {
        "class_name": "UserSettings",
        "methods": [
          "GetModule"
        ]
      },
      {
        "class_name": "DbgUI",
        "methods": [
          "OnUpdate",
          "OnEvent",
          "DbgUI",
          "DoUnitTest",
          "Text",
          "SameLine",
          "SameSpot",
          "PlotLive",
          "PlotLiveClamped",
          "Check",
          "Combo",
          "List",
          "SliderFloat",
          "Spacer",
          "Panel",
          "Button",
          "InputText",
          "InputInt",
          "InputFloat",
          "BeginCleanupScope",
          "EndCleanupScope",
          "Begin",
          "End",
          "PushID",
          "PopID"
        ]
      },
      {
        "class_name": "Debug",
        "methods": [
          "Debug",
          "DumpStack",
          "DumpInstances",
          "Error2",
          "Error",
          "BeginTimeMeasure",
          "EndTimeMeasure",
          "DPrint",
          "Break",
          "CompileBreak",
          "KeyState",
          "GetMouseState",
          "ClearKey"
        ]
      },
      {
        "class_name": "DebugText",
        "methods": [
          "DebugText",
          "GetText",
          "GetFontSize",
          "GetTextColor",
          "GetBackgroundColor",
          "GetPriority",
          "SetText",
          "SetTextColor",
          "SetFontSize",
          "SetBackgroundColor",
          "SetPriority"
        ]
      },
      {
        "class_name": "DebugTextScreenSpace",
        "methods": [
          "DebugTextScreenSpace",
          "SetPosition",
          "GetPosition",
          "Create"
        ]
      },
      {
        "class_name": "DebugTextWorldSpace",
        "methods": [
          "DebugTextWorldSpace",
          "GetPosition",
          "SetPosition",
          "SetTransform",
          "GetTransform",
          "Create",
          "CreateInWorld"
        ]
      },
      {
        "class_name": "DiagMenu",
        "methods": [
          "DiagMenu",
          "RegisterMenu",
          "RegisterItem",
          "Unregister",
          "RegisterBool",
          "RegisterRange",
          "GetBool",
          "GetValue",
          "SetValue",
          "GetRangeValue",
          "SetRangeValue",
          "SetEngineValue",
          "GetEngineValue",
          "SetEngineRangeValue",
          "GetEngineRangeValue",
          "SelectMenuByName",
          "SelectMenuById"
        ]
      },
      {
        "class_name": "Shape",
        "methods": [
          "Shape",
          "Create",
          "CreateLines",
          "CreateTris",
          "CreateSphere",
          "CreateCylinder",
          "CreateArrow",
          "SetMatrix",
          "GetMatrix",
          "SetColor",
          "SetFlags"
        ]
      },
      {
        "class_name": "EntityPrefabData",
        "methods": [
          "GetPrefabName",
          "GetPrefab",
          "FindComponentData"
        ]
      },
      {
        "class_name": "IEntity",
        "methods": [
          "EOnTouch",
          "EOnInit",
          "EOnVisible",
          "EOnFrame",
          "EOnPostFrame",
          "EOnAnimEvent",
          "EOnSimulate",
          "EOnPostSimulate",
          "EOnJointBreak",
          "EOnPhysicsMove",
          "EOnContact",
          "EOnPhysicsActive",
          "EOnFixedFrame",
          "EOnFixedPostFrame",
          "EOnUser0",
          "EOnUser1",
          "EOnUser2",
          "EOnUser3",
          "EOnUser4",
          "EOnDummy018",
          "EOnDummy019",
          "EOnDummy020",
          "EOnDummy021",
          "EOnDummy022",
          "EOnDummy023",
          "EOnDummy024",
          "EOnDummy025",
          "EOnDummy026",
          "EOnDummy027",
          "EOnDummy028",
          "EOnDummy029",
          "EOnDummy030",
          "EOnDummy031",
          "IEntity",
          "GetID",
          "GetParent",
          "GetRootParent",
          "GetChildren",
          "GetSibling",
          "GetVObject",
          "GetPrefabData",
          "FindComponentData",
          "GetWorld",
          "SetFixedLOD",
          "GetTransform",
          "GetWorldTransform",
          "GetLocalTransform",
          "VectorToParent",
          "CoordToParent",
          "VectorToLocal",
          "CoordToLocal",
          "GetYawPitchRoll",
          "SetYawPitchRoll",
          "GetWorldTransformAxis",
          "GetTransformAxis",
          "GetLocalTransformAxis",
          "SetLocalTransform",
          "SetWorldTransform",
          "GetPivot",
          "SetTransform",
          "GetLocalAngles",
          "GetLocalYawPitchRoll",
          "GetAngles",
          "SetAngles",
          "GetOrigin",
          "SetOrigin",
          "SetScale",
          "GetScale",
          "GetBounds",
          "GetWorldBounds",
          "SendEvent",
          "GetName",
          "SetVComponentFlags",
          "SetObject",
          "SetFlags",
          "ClearFlags",
          "GetFlags",
          "SetEventMask",
          "ClearEventMask",
          "GetEventMask",
          "IsLoaded",
          "IsRemoved",
          "IsDeleted",
          "Update",
          "AddChild",
          "RemoveChild",
          "SetName",
          "SetCameraMask",
          "GetPhysics",
          "GetParticles",
          "GetAnimation",
          "Animate",
          "AnimateEx",
          "SetBone",
          "SetBoneMatrix",
          "GetBoneMatrix",
          "GetBoneIndex",
          "GetBoneNames",
          "GetBoneLocalMatrix",
          "FindComponent",
          "FindComponents"
        ]
      },
      {
        "class_name": "Event",
        "methods": [
          "AddCallback",
          "Remove",
          "RemoveByOwner",
          "Emit"
        ]
      },
      {
        "class_name": "Math",
        "methods": [
          "Math",
          "Round",
          "Floor",
          "Ceil",
          "Min",
          "Max",
          "Sin",
          "Cos",
          "Tan",
          "Asin",
          "Acos",
          "Atan2",
          "Pow",
          "Mod",
          "AbsFloat",
          "AbsInt",
          "Sqrt",
          "Log2",
          "Log10",
          "Log",
          "SmoothCD",
          "SmoothCDPI2PI",
          "SmoothSpring",
          "PerlinNoise",
          "PerlinNoise01",
          "SimplexNoise1D",
          "RandomInt",
          "Randomize",
          "RandomFloat",
          "RandomGaussFloat",
          "RandomIntInclusive",
          "RandomFloatInclusive",
          "RandomFloat01",
          "Repeat",
          "Map",
          "MapAngle",
          "IsInRange",
          "IsInRangeSharp",
          "Clamp",
          "ClampInt",
          "Lerp",
          "InverseLerp"
        ]
      },
      {
        "class_name": "Math2D",
        "methods": [
          "Math2D",
          "IsPointInPolygonXZ",
          "IsPointInTriangleXZ",
          "IsPointInPolygon",
          "TriangleWindingXZ"
        ]
      },
      {
        "class_name": "Math3D",
        "methods": [
          "Math3D",
          "IntersectionRayBox",
          "IntersectionRaySphere",
          "IntersectionSphereCone",
          "IntersectionWholeSphereCone",
          "IntersectionPointCylinder",
          "IntersectionSphereAABB",
          "IntersectionBoxBox",
          "DirectionAndUpMatrix",
          "DirectionAndUpMatrix",
          "MatrixMultiply3",
          "MatrixMultiply4",
          "MatrixGetInverse3",
          "MatrixGetInverse4",
          "MatrixInvMultiply3",
          "MatrixInvMultiply4",
          "MatrixToQuat",
          "MatrixToAngles",
          "MatrixToAnglesAndScale",
          "MatrixFromForwardVec",
          "MatrixFromUpVec",
          "AnglesToMatrix",
          "MatrixIdentity4",
          "MatrixIdentity3",
          "MatrixCopy",
          "MatrixNormalize",
          "MatrixScale",
          "QuatIdentity",
          "QuatCopy",
          "QuatToMatrix",
          "QuatNormalize",
          "QuatLerp",
          "QuatMultiply",
          "QuatAngle",
          "QuatDot",
          "QuatRotateTowards",
          "QuatNorm",
          "QuatLength",
          "QuatInverse",
          "QuatScale",
          "QuatConjugate",
          "QuatToAngles",
          "Curve",
          "Curve3",
          "TessellateBezierSpline",
          "TessellateHermiteSpline",
          "PolyToTriangles",
          "PointLineSegmentDistanceSqr",
          "PointLineSegmentDistance",
          "PointLineDistance",
          "IntersectionLineSegments"
        ]
      },
      {
        "class_name": "Contact",
        "methods": [
          "GetRelativeNormalVelocityBefore",
          "GetRelativeNormalVelocityAfter"
        ]
      },
      {
        "class_name": "Physics",
        "methods": [
          "Destroy",
          "SetInteractionLayer",
          "GetWorldTransform",
          "GetDirectWorldTransform",
          "SetGeomInteractionLayer",
          "GetInteractionLayer",
          "GetGeomInteractionLayer",
          "EnableCCD",
          "ChangeSimulationState",
          "GetSimulationState",
          "GetCenterOfMass",
          "SetActive",
          "IsActive",
          "IsDynamic",
          "IsKinematic",
          "EnableGravity",
          "SetDamping",
          "GetMass",
          "SetMass",
          "SetInertiaTensorV",
          "GetAngularVelocity",
          "GetVelocityAt",
          "SetSleepingTreshold",
          "SetLinearFactor",
          "GetVelocity",
          "SetVelocity",
          "SetAngularVelocity",
          "SetTargetMatrix",
          "ApplyImpulse",
          "ApplyImpulseAt",
          "ApplyForce",
          "ApplyForceAt",
          "ApplyTorque",
          "ClearForces",
          "GetTotalForce",
          "GetTotalTorque",
          "SetResponseIndex",
          "GetResponseIndex",
          "AddGeom",
          "GetGeom",
          "GetNumGeoms",
          "UpdateGeometries",
          "GetGeomWorldTransform",
          "GetGeomTransform",
          "GetGeomDirectTransform",
          "GetGeomWorldPosition",
          "GetGeomPosition",
          "GetGeomDirectPosition",
          "GetGeomWorldBounds",
          "GetGeomDirectBounds",
          "GetGeomSurfaces",
          "CreateStatic",
          "CreateStaticEx",
          "CreateDynamic",
          "CreateDynamicEx",
          "CreateGhostEx"
        ]
      },
      {
        "class_name": "Physics6DOFJoint",
        "methods": [
          "SetLinearLimits",
          "SetAngularLimits",
          "SetLimit"
        ]
      },
      {
        "class_name": "Physics6DOFSpringJoint",
        "methods": [
          "SetSpring"
        ]
      },
      {
        "class_name": "PhysicsBlock",
        "methods": [
          "Create",
          "Remove"
        ]
      },
      {
        "class_name": "PhysicsConeTwistJoint",
        "methods": [
          "SetLimit",
          "SetLimits"
        ]
      },
      {
        "class_name": "PhysicsGeom",
        "methods": [
          "Destroy",
          "CreateBox",
          "CreateSphere",
          "CreateCapsule",
          "CreateCylinder",
          "CreateTriMesh"
        ]
      },
      {
        "class_name": "PhysicsGeomDef",
        "methods": [
          "PhysicsGeomDef"
        ]
      },
      {
        "class_name": "PhysicsHingeJoint",
        "methods": [
          "SetLimits",
          "SetMotorTargetAngle",
          "SetMotor",
          "SetAxis"
        ]
      },
      {
        "class_name": "PhysicsJoint",
        "methods": [
          "CreateHinge",
          "CreateHinge2",
          "CreateBallSocket",
          "CreateFixed",
          "CreateConeTwist",
          "CreateSlider",
          "Create6DOF",
          "Create6DOFSpring",
          "Destroy"
        ]
      },
      {
        "class_name": "PhysicsRagdoll",
        "methods": [
          "SetActive",
          "Destroy",
          "Enable",
          "Disable",
          "GetBoneRigidBodyByNodeIndex",
          "GetBoneRigidBody",
          "GetNumBones",
          "CreateRagdoll",
          "GetRagdoll"
        ]
      },
      {
        "class_name": "PhysicsSliderJoint",
        "methods": [
          "SetLinearLimits",
          "GetLinearPos",
          "GetAngularPos",
          "SetAngularLimits",
          "SetDirLinear",
          "SetDirAngular",
          "SetLimLinear",
          "SetLimAngular",
          "SetOrthoLinear",
          "SetOrthoAngular",
          "SetLinearMotor",
          "SetAngularMotor"
        ]
      },
      {
        "class_name": "PhysicsWorld",
        "methods": [
          "PhysicsWorld",
          "SetInteractionLayer",
          "GetGravity",
          "SetGravity",
          "GetTimeSlice",
          "GetUpdateRate",
          "SetUpdateRate",
          "GetNumDynamicBodies",
          "GetDynamicBody"
        ]
      },
      {
        "class_name": "SurfaceProperties",
        "methods": [
          "GetPhysics"
        ]
      },
      {
        "class_name": "Replication",
        "methods": [
          "Replication",
          "FindId",
          "FindItem",
          "FindOwner",
          "IsRunning",
          "Runtime",
          "Loadtime",
          "BumpMe",
          "SetNumVirtualConnections",
          "IsServer",
          "IsClient",
          "GetConnectionStats"
        ]
      },
      {
        "class_name": "RplConnectionStats",
        "methods": [
          "RplConnectionStats",
          "GetRoundTripTimeInMs",
          "GetPacketLoss"
        ]
      },
      {
        "class_name": "RplId",
        "methods": [
          "RplId",
          "Invalid",
          "IsValid"
        ]
      },
      {
        "class_name": "RplIdentity",
        "methods": [
          "RplIdentity",
          "Local",
          "Invalid",
          "IsValid"
        ]
      },
      {
        "class_name": "RplNode",
        "methods": [
          "GetId",
          "GetRole",
          "IsLocked",
          "SetParent"
        ]
      },
      {
        "class_name": "AnimationSource",
        "methods": [
          "GetNumAnimFrames"
        ]
      },
      {
        "class_name": "BaseResourceObject",
        "methods": [
          "ToBaseContainer",
          "ToEntitySource",
          "ToMeshObject",
          "ToAnimation",
          "ToVObject",
          "Release",
          "GetResourceName"
        ]
      },
      {
        "class_name": "MeshObject",
        "methods": [
          "GenerateModel",
          "Create",
          "UpdateVerts",
          "UpdateIndices",
          "GetNumGeoms",
          "HasValidMask",
          "HasLayerMask"
        ]
      },
      {
        "class_name": "Resource",
        "methods": [
          "Resource",
          "GetResource",
          "IsValid",
          "Load"
        ]
      },
      {
        "class_name": "ResourceDatabase",
        "methods": [
          "ResourceDatabase",
          "SearchResources"
        ]
      },
      {
        "class_name": "VObject",
        "methods": [
          "GetMaterials"
        ]
      },
      {
        "class_name": "FileHandle",
        "methods": [
          "FileHandle",
          "Read",
          "ReadLine",
          "ReadArray",
          "Write",
          "WriteLine",
          "WriteArray",
          "Seek",
          "GetPos",
          "GetLength",
          "Close",
          "IsOpen",
          "IsEOF"
        ]
      },
      {
        "class_name": "FileIO",
        "methods": [
          "FileIO",
          "OpenFile",
          "BeginParse",
          "FileExists",
          "MakeDirectory",
          "DeleteFile",
          "CopyFile",
          "FindFiles"
        ]
      },
      {
        "class_name": "FilePath",
        "methods": [
          "FilePath",
          "IsDelimiter",
          "IsSystemDelimiter",
          "ToSystemDelimiter",
          "StripExtension",
          "Concat",
          "StripFileName",
          "StripPath",
          "ToSystemFormat",
          "ToInternalFormat",
          "ReplaceExtension",
          "AppendExtension",
          "IsAbsolutePath",
          "MatchesPattern",
          "FileSystemNameFromFileName"
        ]
      },
      {
        "class_name": "GameProject",
        "methods": [
          "GameProject",
          "GetAvailableAddons",
          "GetLoadedAddons",
          "GetAddonID",
          "GetAddonTitle",
          "IsVanillaAddon",
          "GetModuleConfig",
          "GetGameProjectSettings"
        ]
      },
      {
        "class_name": "GameSessionStorage",
        "methods": [
          "GameSessionStorage"
        ]
      },
      {
        "class_name": "ParseHandle",
        "methods": [
          "ParseLine",
          "EndParse"
        ]
      },
      {
        "class_name": "RandomGenerator",
        "methods": [
          "SetSeed",
          "GenerateRandomPoint",
          "GenerateRandomPointInRadius",
          "RandFloat01",
          "RandFloatXY",
          "RandGaussFloat",
          "RandInt",
          "RandIntInclusive"
        ]
      },
      {
        "class_name": "System",
        "methods": [
          "System",
          "MemoryValidation",
          "MemoryAllocationCount",
          "MemoryAllocationKB",
          "GetCLIParam",
          "IsCLIParam",
          "ImportFromClipboard",
          "ExportToClipboard",
          "GetProfileName",
          "GetMachineName",
          "GetUnixTime",
          "GetHourMinuteSecond",
          "GetHourMinuteSecondUTC",
          "GetYearMonthDay",
          "GetYearMonthDayUTC",
          "GetProfileData",
          "GetTickCount",
          "GetAdapterName",
          "GetNativeResolution",
          "GetRenderingResolution",
          "GetSupportedResolutions",
          "MakeScreenshot",
          "MakeScreenshotExt",
          "GetFPS",
          "GetFrameTimeS",
          "FindFiles",
          "GetPlatform",
          "IsConsoleApp"
        ]
      },
      {
        "class_name": "bool",
        "methods": [
          "bool",
          "ToString"
        ]
      },
      {
        "class_name": "float",
        "methods": [
          "float",
          "ToString",
          "AlmostEqual",
          "Sign"
        ]
      },
      {
        "class_name": "int",
        "methods": [
          "int",
          "AsciiToString",
          "ToString",
          "Sign"
        ]
      },
      {
        "class_name": "ResourceName",
        "methods": [
          "GetPath"
        ]
      },
      {
        "class_name": "SharedItemRef",
        "methods": [
          "SharedItemRef",
          "GetRef",
          "IsValid"
        ]
      },
      {
        "class_name": "StaticArray",
        "methods": [
          "StaticArray",
          "Sort",
          "Reverse",
          "Copy",
          "Length"
        ]
      },
      {
        "class_name": "string",
        "methods": [
          "string",
          "ToAscii",
          "ToFloat",
          "ToInt",
          "ToVector",
          "Substring",
          "Trim",
          "Format",
          "TrimInPlace",
          "Length",
          "IsEmpty",
          "Hash",
          "IndexOf",
          "LastIndexOf",
          "IndexOfFrom",
          "Contains",
          "ContainsAt",
          "StartsWith",
          "EndsWith",
          "Compare",
          "Replace",
          "ToLower",
          "ToUpper",
          "Split",
          "ToString",
          "Get",
          "IsDigitAt",
          "IsSpaceAt",
          "ToType"
        ]
      },
      {
        "class_name": "typename",
        "methods": [
          "typename",
          "ToString",
          "IsInherited",
          "Spawn",
          "GetVariableCount",
          "GetVariableName",
          "GetVariableType",
          "GetVariableValue",
          "EnumToString",
          "StringToEnum"
        ]
      },
      {
        "class_name": "vector",
        "methods": [
          "vector",
          "Normalize",
          "NormalizeSize",
          "Normalized",
          "Length",
          "LengthSq",
          "Distance",
          "DistanceXZ",
          "DistanceSq",
          "DistanceSqXZ",
          "Perpend",
          "Direction",
          "Dot",
          "DotXZ",
          "MapAngles",
          "ToYaw",
          "FromYaw",
          "VectorToAngles",
          "AnglesToVector",
          "QuatFromAngles",
          "Multiply4",
          "Multiply3",
          "InvMultiply4",
          "InvMultiply3",
          "Lerp",
          "ToString"
        ]
      },
      {
        "class_name": "AlignableSlot",
        "methods": [
          "AlignableSlot",
          "GetPadding",
          "GetHorizontalAlign",
          "GetVerticalAlign",
          "SetPadding",
          "SetHorizontalAlign",
          "SetVerticalAlign"
        ]
      },
      {
        "class_name": "BaseListboxWidget",
        "methods": [
          "ClearItems",
          "RemoveRow",
          "EnsureVisible",
          "GetSelectedRow",
          "SelectRow"
        ]
      },
      {
        "class_name": "BlurWidget",
        "methods": [
          "GetIntensity",
          "SetIntensity",
          "IsTintBlendModeAdd",
          "SetTintBlendModeAdd",
          "SetMask",
          "SetSmoothBorder"
        ]
      },
      {
        "class_name": "ButtonWidget",
        "methods": [
          "GetState",
          "SetState"
        ]
      },
      {
        "class_name": "CanvasWidget",
        "methods": [
          "SetDrawCommands",
          "LoadTexture"
        ]
      },
      {
        "class_name": "CanvasWidgetBase",
        "methods": [
          "PixelPerUnit",
          "ScaleByZoom",
          "GetZoom",
          "SetZoom",
          "PosToPixels",
          "SizeToPixels",
          "ZoomAt",
          "GetOffsetPx",
          "SetOffsetPx",
          "GetSizeInUnits",
          "SetSizeInUnits"
        ]
      },
      {
        "class_name": "CheckBoxWidget",
        "methods": [
          "SetText",
          "IsChecked",
          "SetChecked"
        ]
      },
      {
        "class_name": "EditBoxWidget",
        "methods": [
          "IsInWriteMode",
          "SetText",
          "SetPlaceholderText",
          "SetVirtualKeyboardTitle",
          "SetVirtualKeyboardDesc",
          "ActivateWriteMode",
          "GetObfuscationChar",
          "SetObfuscationChar",
          "GetText",
          "GetPlaceholderText"
        ]
      },
      {
        "class_name": "FrameSlot",
        "methods": [
          "FrameSlot",
          "GetOffsets",
          "GetPosX",
          "GetPos",
          "GetPosY",
          "GetSize",
          "GetSizeX",
          "GetSizeY",
          "GetAnchorMin",
          "GetAnchorMax",
          "GetAlignment",
          "IsSizeToContent",
          "SetOffsets",
          "SetPos",
          "SetPosX",
          "SetPosY",
          "SetSize",
          "SetSizeX",
          "SetSizeY",
          "SetAnchor",
          "SetAnchorMin",
          "SetAnchorMax",
          "SetAlignment",
          "SetSizeToContent",
          "Move"
        ]
      },
      {
        "class_name": "GridLayoutWidget",
        "methods": [
          "GetRowFillWeight",
          "GetColumnFillWeight",
          "SetRowFillWeight",
          "SetColumnFillWeight"
        ]
      },
      {
        "class_name": "GridSlot",
        "methods": [
          "GetRow",
          "GetColumn",
          "GetRowSpan",
          "GetColumnSpan",
          "SetRow",
          "SetColumn",
          "SetRowSpan",
          "SetColumnSpan"
        ]
      },
      {
        "class_name": "HorizontalLayoutWidget",
        "methods": [
          "GetFillOrigin",
          "SetFillOrigin"
        ]
      },
      {
        "class_name": "ImageWidget",
        "methods": [
          "SetImage",
          "GetImage",
          "LoadImageFromSet",
          "SetImageTexture",
          "LoadMaskTexture",
          "LoadMaskFromSet",
          "SetUV",
          "SetRotation",
          "GetRotation",
          "SetPivot",
          "GetMaskProgress",
          "SetMaskProgress",
          "GetMaskTransitionWidth",
          "SetMaskTransitionWidth",
          "GetMaskMode",
          "SetMaskMode",
          "GetMaskRange",
          "SetMaskRange",
          "GetSaturation",
          "SetSaturation",
          "LoadImageTexture",
          "GetShadowOffset",
          "SetShadowOffset",
          "GetShadowColor",
          "SetShadowColor",
          "GetImageSize",
          "GetSize",
          "SetSize"
        ]
      },
      {
        "class_name": "LayoutSlot",
        "methods": [
          "GetFillWeight",
          "GetSizeMode",
          "SetFillWeight",
          "SetSizeMode"
        ]
      },
      {
        "class_name": "MultilineEditBoxWidget",
        "methods": [
          "ActivateWriteMode",
          "SetVirtualKeyboardTitle",
          "SetVirtualKeyboardDesc",
          "IsInWriteMode"
        ]
      },
      {
        "class_name": "ProgressBarWidget",
        "methods": [
          "GetMin",
          "GetMax",
          "GetCurrent",
          "GetDrawBackground",
          "SetMin",
          "SetMax",
          "SetCurrent",
          "SetDrawBackground"
        ]
      },
      {
        "class_name": "RenderTargetWidget",
        "methods": [
          "SetRefresh",
          "GetRefreshPeriod",
          "SetResolutionScale",
          "SetClearColor",
          "SetBlendMode",
          "SetFormat",
          "AllowMSAAFromSetup",
          "SetWorld"
        ]
      },
      {
        "class_name": "RichTextWidget",
        "methods": [
          "GetContentHeight",
          "GetLineWidth",
          "GetNumLines",
          "SetLinesVisibility",
          "ElideText"
        ]
      },
      {
        "class_name": "RTTextureWidget",
        "methods": [
          "SetGUIWidget"
        ]
      },
      {
        "class_name": "ScaleWidget",
        "methods": [
          "SetScaleMode",
          "GetScaleMode",
          "SetScale",
          "GetScale"
        ]
      },
      {
        "class_name": "ScriptedWidgetEventHandler",
        "methods": [
          "OnClick",
          "OnModalResult",
          "OnDoubleClick",
          "OnSelect",
          "OnItemSelected",
          "OnFocus",
          "OnFocusLost",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnMouseWheel",
          "OnMouseButtonDown",
          "OnMouseButtonUp",
          "OnController",
          "OnKeyDown",
          "OnKeyUp",
          "OnKeyPress",
          "OnChange",
          "OnNeedScroll",
          "OnResize",
          "OnChildAdd",
          "OnChildRemove",
          "OnUpdate",
          "OnEvent",
          "OnModalClickOut",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "ScrollLayoutWidget",
        "methods": [
          "ScrollToView",
          "GetSliderPos",
          "SetSliderPos",
          "GetSliderPosPixels",
          "SetSliderPosPixels"
        ]
      },
      {
        "class_name": "SizeLayoutWidget",
        "methods": [
          "EnableWidthOverride",
          "EnableHeightOverride",
          "EnableMinDesiredWidth",
          "EnableMinDesiredHeight",
          "EnableMaxDesiredWidth",
          "EnableMaxDesiredHeight",
          "EnableAspectRatio",
          "SetWidthOverride",
          "SetHeightOverride",
          "SetMinDesiredWidth",
          "SetMinDesiredHeight",
          "SetMaxDesiredWidth",
          "SetMaxDesiredHeight",
          "SetAspectRatio",
          "GetWidthOverride",
          "GetHeightOverride",
          "GetMinDesiredWidth",
          "GetMinDesiredHeight",
          "GetMaxDesiredWidth",
          "GetMaxDesiredHeight",
          "GetAspectRatio",
          "IsWidthOverride",
          "IsHeightOverride",
          "IsMinDesiredWidth",
          "IsMinDesiredHeight",
          "IsMaxDesiredWidth",
          "IsMaxDesiredHeight",
          "IsAspectRatio",
          "IsChildDesiredWidthClamped",
          "IsChildDesiredHeightClamped"
        ]
      },
      {
        "class_name": "SliderWidget",
        "methods": [
          "SetRange",
          "SetMin",
          "SetMax",
          "GetMax",
          "GetMin",
          "SetStep",
          "GetStep",
          "GetCurrent",
          "SetCurrent"
        ]
      },
      {
        "class_name": "TextListboxWidget",
        "methods": [
          "SetItemColor",
          "SetItem",
          "GetItemData",
          "AddItem",
          "GetItemText"
        ]
      },
      {
        "class_name": "TextWidget",
        "methods": [
          "SetRotation",
          "GetRotation",
          "SetPivot",
          "SetText",
          "SetTextOffset",
          "SetLineSpacing",
          "SetDesiredFontSize",
          "SetMinFontSize",
          "SetExactFontSize",
          "GetTextWrapping",
          "SetTextWrapping",
          "SetOutline",
          "GetOutlineSize",
          "GetOutlineColor",
          "SetShadow",
          "GetShadowSize",
          "GetShadowColor",
          "GetShadowOpacity",
          "SetItalic",
          "GetItalic",
          "SetBold",
          "GetBold",
          "SetForceFont",
          "GetForceFont",
          "SetFont",
          "GetText",
          "SetTextFormat",
          "GetTextSize",
          "GetShadowOffset"
        ]
      },
      {
        "class_name": "UIWidget",
        "methods": [
          "SetTextColor",
          "SetTextOutline",
          "GetTextOutlineSize",
          "GetTextOutlineColor",
          "SetTextShadow",
          "GetTextShadowSize",
          "GetTextShadowColor",
          "GetTextShadowOpacity",
          "GetTextShadowOffsetX",
          "GetTextShadowOffsetY",
          "SetTextItalic",
          "GetTextItalic",
          "SetTextBold",
          "GetTextBold"
        ]
      },
      {
        "class_name": "UniformGridSlot",
        "methods": [
          "UniformGridSlot",
          "GetRow",
          "GetColumn",
          "GetHorizontalAlign",
          "GetVerticalAlign",
          "SetRow",
          "SetColumn",
          "SetHorizontalAlign",
          "SetVerticalAlign"
        ]
      },
      {
        "class_name": "VerticalLayoutWidget",
        "methods": [
          "GetFillOrigin",
          "SetFillOrigin"
        ]
      },
      {
        "class_name": "VideoWidget",
        "methods": [
          "LoadVideo",
          "Play"
        ]
      },
      {
        "class_name": "Widget",
        "methods": [
          "Widget",
          "Update",
          "GetParent",
          "GetChildren",
          "GetSibling",
          "AddChild",
          "RemoveChild",
          "SetName",
          "GetName",
          "SetUserID",
          "GetUserID",
          "IsFocusable",
          "AddHandler",
          "RemoveHandler",
          "GetNumHandlers",
          "GetHandler",
          "FindHandler",
          "SetVisible",
          "SetEnabled",
          "IsVisible",
          "IsVisibleInHierarchy",
          "IsEnabled",
          "IsEnabledInHierarchy",
          "IsClippingChildren",
          "GetIsColorInherited",
          "SetIsColorInherited",
          "SetColor",
          "SetColorInt",
          "GetColorInt",
          "SetOpacity",
          "GetOpacity",
          "SetZOrder",
          "GetZOrder",
          "RemoveFromHierarchy",
          "FindWidget",
          "FindAnyWidget",
          "FindAnyWidgetById",
          "GetStyleName",
          "RemoveCallback",
          "RemoveCallbackByOwner",
          "EmitCallback",
          "GetWorkspace",
          "GetColor",
          "GetNavigation",
          "SetNavigation",
          "GetTypeName",
          "GetFlags",
          "SetFlags",
          "ClearFlags",
          "GetTypeID",
          "GetScreenPos",
          "GetScreenSize",
          "AddCallback"
        ]
      },
      {
        "class_name": "WidgetManager",
        "methods": [
          "WidgetManager",
          "TraceWidgets",
          "SetLanguage",
          "GetLanguage",
          "SetCursor",
          "ReportMouse",
          "GetReferenceScreenSize",
          "GetMousePos",
          "GetWidgetUnderCursor",
          "GetTextCursorBlinkTime",
          "SetTextCursorBlinkTime",
          "Translate",
          "SearchLocalized"
        ]
      },
      {
        "class_name": "WorkspaceWidget",
        "methods": [
          "SetFocusedWidget",
          "GetFocusedWidget",
          "GetModal",
          "AddModal",
          "RemoveModal",
          "GetWidth",
          "GetHeight",
          "ProjWorldToScreen",
          "ProjScreenToWorld",
          "ProjWorldToScreenNative",
          "ProjScreenToWorldNative",
          "DPIScale",
          "DPIUnscale",
          "CreateWidget",
          "CreateWidgetInWorkspace",
          "CreateWidgets"
        ]
      },
      {
        "class_name": "XComboBoxWidget",
        "methods": [
          "GetCurrentItem",
          "SetCurrentItem",
          "GetNumItems",
          "AddItem",
          "SetItem",
          "ClearAll",
          "RemoveItem"
        ]
      },
      {
        "class_name": "Animation",
        "methods": [
          "SetBone",
          "SetBoneMatrix",
          "GetBoneMatrix",
          "GetBoneIndex",
          "GetBoneNames",
          "GetBoneLocalMatrix",
          "SetMorphState"
        ]
      },
      {
        "class_name": "Color",
        "methods": [
          "Color",
          "FromInt",
          "FromVector",
          "FromRGBA",
          "FromIntSRGB",
          "FromSRGBA",
          "R",
          "G",
          "B",
          "A",
          "SetR",
          "SetG",
          "SetB",
          "SetA",
          "SetFromInt",
          "Add",
          "AddNew",
          "Sub",
          "SubNew",
          "Mul",
          "MulNew",
          "Div",
          "DivNew",
          "Scale",
          "GetLuminance",
          "Saturate",
          "Clamp",
          "Lerp",
          "LerpNew",
          "PackToInt",
          "UnpackInt",
          "SRGBToLinear",
          "LinearToSRGB",
          "IsZero",
          "IsEqual"
        ]
      },
      {
        "class_name": "Material",
        "methods": [
          "GetMaterial",
          "GetOrLoadMaterial",
          "Create",
          "SetParam",
          "ResetParam",
          "GetParamIndex",
          "SetParamByIndex",
          "Release",
          "GetName"
        ]
      },
      {
        "class_name": "Particles",
        "methods": [
          "SetVelocitySource",
          "Restart",
          "InvalidatePrevPos",
          "OverridePrevPos",
          "Simulate",
          "SimulateMultiStep",
          "GetNumEmitters",
          "GetNumParticles",
          "SetParam",
          "GetParam",
          "GetParamOrig",
          "MultParam",
          "GetEmitterNames"
        ]
      },
      {
        "class_name": "BuildResourceContext",
        "methods": [
          "IsWorking"
        ]
      },
      {
        "class_name": "GeneratedResources",
        "methods": [
          "RegisterResource"
        ]
      },
      {
        "class_name": "GeoAttribCollection",
        "methods": [
          "GeoAttribCollection",
          "Count",
          "GetName",
          "GetType",
          "IsAttribSet",
          "GetInt",
          "GetFloat",
          "GetString",
          "GetIndexByName",
          "HasAttrib",
          "IsAttribSetByName",
          "GetIntByName",
          "GetFloatByName",
          "GetStringByName"
        ]
      },
      {
        "class_name": "GeoMultiPoint",
        "methods": [
          "GetPoints"
        ]
      },
      {
        "class_name": "GeoPoint",
        "methods": [
          "GetCoords"
        ]
      },
      {
        "class_name": "GeoPolygon",
        "methods": [
          "PartsCount",
          "GetPart"
        ]
      },
      {
        "class_name": "GeoPolyline",
        "methods": [
          "GetVertices"
        ]
      },
      {
        "class_name": "GeoShape",
        "methods": [
          "GeoShape",
          "GetType",
          "GetAttributes"
        ]
      },
      {
        "class_name": "GeoShapeCollection",
        "methods": [
          "Count",
          "Get"
        ]
      },
      {
        "class_name": "GeoShapeLoader",
        "methods": [
          "GeoShapeLoader",
          "LoadShapeFile"
        ]
      },
      {
        "class_name": "GeoVertexCollection",
        "methods": [
          "GeoVertexCollection",
          "Count",
          "Get"
        ]
      },
      {
        "class_name": "MetaFile",
        "methods": [
          "GetResourceID",
          "GetSourceFilePath",
          "Save"
        ]
      },
      {
        "class_name": "LocalizationEditor",
        "methods": [
          "BeginModify",
          "ModifyProperty",
          "EndModify",
          "RefreshUI",
          "GetTable",
          "GetFilteredRows",
          "GetSelectedRows",
          "AddUserFilter"
        ]
      },
      {
        "class_name": "ResourceManager",
        "methods": [
          "GetMetaFile",
          "RegisterResourceFile",
          "RebuildResourceFile",
          "RebuildResourceFiles",
          "WaitForFile",
          "GetResourceBrowserSelection"
        ]
      },
      {
        "class_name": "ScriptEditor",
        "methods": [
          "GetCurrentFile",
          "GetCurrentLine",
          "GetLinesCount",
          "GetLineText",
          "SetLineText",
          "InsertLine",
          "RemoveLine"
        ]
      },
      {
        "class_name": "WBModuleDef",
        "methods": [
          "SetOpenedResource",
          "GetContainer",
          "GetNumContainers",
          "Save",
          "GetCmdLine",
          "Close",
          "GetPlugin"
        ]
      },
      {
        "class_name": "WorldEditor",
        "methods": [
          "GetApi",
          "GetTerrainBounds",
          "SwitchToGameMode",
          "SwitchToEditMode",
          "IsPrefabEditMode",
          "GetResourceBrowserSelection"
        ]
      },
      {
        "class_name": "LocalizationEditorPlugin",
        "methods": [
          "OnSave",
          "OnChange",
          "OnImport",
          "OnExport",
          "OnSelectionChanged",
          "IsReadOnly",
          "GetExportColumn"
        ]
      },
      {
        "class_name": "ResourceManagerPlugin",
        "methods": [
          "OnRegisterResource",
          "OnBuildResource",
          "OnRenameResource",
          "OnGetMaterialGenerateDir",
          "OnGetMaterialClassName",
          "OnMaterialCreated"
        ]
      },
      {
        "class_name": "WorkbenchPlugin",
        "methods": [
          "WorkbenchPlugin",
          "Run",
          "RunCommandline",
          "Configure",
          "OnResourceContextMenu"
        ]
      },
      {
        "class_name": "WorldEditorPlugin",
        "methods": [
          "OnGameModeStarted",
          "OnGameModeEnded",
          "OnWorldEditWindowDataDropped"
        ]
      },
      {
        "class_name": "WorldEditorTool",
        "methods": [
          "WorldEditorTool",
          "GetModifierKeyState",
          "UpdatePropertyPanel",
          "OnKeyPressEvent",
          "OnKeyReleaseEvent",
          "OnEnterEvent",
          "OnLeaveEvent",
          "OnMouseMoveEvent",
          "OnMouseDoubleClickEvent",
          "OnMousePressEvent",
          "OnMouseReleaseEvent",
          "OnWheelEvent",
          "OnActivate",
          "OnDeActivate",
          "OnAfterLoadWorld",
          "OnBeforeUnloadWorld"
        ]
      },
      {
        "class_name": "TexTools",
        "methods": [
          "TexTools",
          "SaveImageData",
          "RepairTerrainTextureBorders"
        ]
      },
      {
        "class_name": "WBProgressDialog",
        "methods": [
          "WBProgressDialog",
          "SetProgress"
        ]
      },
      {
        "class_name": "Workbench",
        "methods": [
          "Workbench",
          "GetModule",
          "OpenModule",
          "CloseModule",
          "Dialog",
          "ScriptDialog",
          "SearchResources",
          "RunCmd",
          "RunProcess",
          "KillProcess",
          "IsRunningProcess",
          "WaitProcess",
          "FinishProcess",
          "GetCwd",
          "GetUserName",
          "GetAbsolutePath",
          "GetCurrentGameProjectFile",
          "GetGameProjectSettings",
          "GenerateGloballyUniqueID64",
          "Exit",
          "GetPackedUtcTime",
          "GetResourceName",
          "OpenResource"
        ]
      },
      {
        "class_name": "WorldEditorAPI",
        "methods": [
          "WorldEditorAPI",
          "BeginEntityAction",
          "EndEntityAction",
          "IsDoingEditAction",
          "BeginEditSequence",
          "EndEditSequence",
          "IsEditSequenceActive",
          "UndoOrRedoIsRestoring",
          "IsCreatingEntityInWindow",
          "IsModifyingData",
          "IsPrefabEditMode",
          "SourceToEntity",
          "EntityToSource",
          "FindEntityByName",
          "FindEntityByID",
          "GetEditorEntityCount",
          "GetEditorEntity",
          "ParentEntity",
          "RemoveEntityFromParent",
          "CreateComponent",
          "DeleteComponent",
          "GetSelectedEntitiesCount",
          "GetSelectedEntity",
          "ClearEntitySelection",
          "RemoveFromEntitySelection",
          "SetPropertySelection",
          "UpdateSelectionGui",
          "CreateEntityTemplate",
          "SaveEntityTemplate",
          "GetEntityUnderCursor",
          "RenameEntity",
          "GetCurrentSubScene",
          "GetNumSubScenes",
          "GetEntityLayerId",
          "GetCurrentEntityLayerId",
          "SetCurrentEntityLayerId",
          "IsEntityLayerVisible",
          "DeleteEntityLayer",
          "GetScreenWidth",
          "GetScreenHeight",
          "GetMousePosX",
          "GetMousePosY",
          "ToggleGeneratorEvents",
          "AreGeneratorEventsEnabled",
          "ModifyHeightMap",
          "ModifyHeightMapUserShape",
          "ModifyLayers",
          "ModifyLayersUserShape",
          "BeginTerrainAction",
          "EndTerrainAction",
          "GetTerrainSurfaceY",
          "GetTerrainSurfaceTile",
          "SetTerrainSurfaceTile",
          "GetTerrainResolutionX",
          "GetTerrainResolutionY",
          "GetTerrainTilesX",
          "GetTerrainTilesY",
          "GetTerrainUnitScale",
          "RemoveTerrainFlatterEntity",
          "RegenerateFlowMaps",
          "BuildShoreMap",
          "IsEntityVisible",
          "SetEntityVisible",
          "IsEntitySelected",
          "IsEntitySelectedAsMain",
          "IsEditMode",
          "IsGameMode",
          "SetCamera",
          "AddTerrainFlatterEntity",
          "TryGetTerrainSurfaceY",
          "AddToEntitySelection",
          "SetEntitySelection",
          "ModifyEntityKey",
          "ModifyComponentKey",
          "CreateEntity",
          "CreateEntityExt",
          "CreateClonedEntity",
          "CreateEntityInWindow",
          "CreateEntityInWindowEx",
          "DeleteEntity",
          "DeleteEntities",
          "TraceWorldPos",
          "GetWorldPath",
          "GetEntityNiceName",
          "GenerateDefaultEntityName",
          "CreateSubsceneLayer",
          "GetSelectedEntityLayers",
          "SetVariableValue",
          "ClearVariableValue",
          "CreateObjectVariableMember",
          "CreateObjectArrayVariableMember",
          "RemoveObjectArrayVariableMember",
          "ShowItemListDialog",
          "AddPrefabMembers",
          "RemovePrefabMembers",
          "MoveEntitiesToPrefab",
          "GetCurrentToolName",
          "GetWorld"
        ]
      },
      {
        "class_name": "BaseWorld",
        "methods": [
          "GetSurfaceY",
          "GetActiveEntities",
          "QueryEntitiesByLine",
          "QueryEntitiesByAABB",
          "QueryEntitiesBySphere",
          "QueryEntitiesByBeveledLine",
          "QueryEntitiesByOBB",
          "SchedulePreload",
          "GetBoundBox",
          "IsOcean",
          "GetOceanHeight",
          "GetOceanHeightAndDisplace",
          "GetOceanBaseHeight",
          "IsOceanEnabledInCamera",
          "EnabledOceanInCamera",
          "RegisterWaterBody",
          "RemoveWaterBody",
          "RemoveDecal",
          "CreateTrackDecal",
          "GetCurrentCameraId",
          "SetCamera",
          "GetCamera",
          "GetCurrentCamera",
          "SetCameraEx",
          "SetCameraVerticalFOV",
          "SetCameraNearPlane",
          "SetCameraFarPlane",
          "SetCameraHDRBrightness",
          "AdjustCameraEV",
          "GetCameraHDRBrightness",
          "GetCameraSceneMiddleBrightness",
          "SetCameraPostProcessEffect",
          "SetCameraType",
          "SetCameraLensFlareSet",
          "ProjectWorldToViewport",
          "ProjectViewportToWorld",
          "TraceLineToEntity",
          "TracePosition",
          "TraceMove",
          "GetWorldTime",
          "GetTimestamp",
          "GetFrameNumber",
          "GetTimeScale",
          "GetTimeSlice",
          "GetFixedTimeSlice",
          "GetPhysicsTimeSlice",
          "FindEntityByName",
          "FindEntityByID",
          "IsEditMode",
          "UpdateEntities",
          "CreateWorld"
        ]
      },
      {
        "class_name": "LightHandle",
        "methods": [
          "AddStaticLight",
          "AddDynamicLight",
          "SetFlags",
          "ClearFlags",
          "RemoveLight",
          "Set",
          "SetIntensityEVClip",
          "SetCone",
          "SetLightDistanceAtt",
          "SetTexture",
          "SetNearPlane",
          "SetVolumeEffect",
          "SetLensFlareType",
          "SetLensFlareIndex",
          "SetLensFlareScale",
          "SetLensFlareOffset",
          "SetPosition",
          "SetDirection",
          "SetTransform"
        ]
      },
      {
        "class_name": "TrackDecal",
        "methods": [
          "CanAddToTrackDecal",
          "AddPointToTrackDecal",
          "FinalizeTrackDecal",
          "GetLastTrackPoint",
          "IsTrackFinalized",
          "SetGlobalTrackParams"
        ]
      },
      {
        "class_name": "WorldTimestamp",
        "methods": [
          "PlusSeconds",
          "PlusMilliseconds",
          "DiffMilliseconds",
          "Compare",
          "Equals",
          "Greater",
          "GreaterEqual",
          "Less",
          "LessEqual"
        ]
      },
      {
        "class_name": "EntityID",
        "methods": [
          "FromInt"
        ]
      },
      {
        "class_name": "CustomClass",
        "methods": [
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject"
        ]
      },
      {
        "class_name": "RplProp",
        "methods": [
          "RplProp"
        ]
      },
      {
        "class_name": "RplRpc",
        "methods": [
          "RplRpc",
          "OnInjected"
        ]
      },
      {
        "class_name": "ScriptBitWriter",
        "methods": [
          "Write",
          "WriteRplId",
          "WriteEntityId",
          "WriteInt",
          "WriteIntRange",
          "WriteHalf",
          "WriteFloat01",
          "WriteRadian",
          "WriteQuaternion",
          "WriteResourceName",
          "WriteString",
          "Tell",
          "WriteBool",
          "WriteFloat",
          "WriteVector",
          "Write"
        ]
      },
      {
        "class_name": "ScriptBitReader",
        "methods": [
          "Read",
          "ReadRplId",
          "ReadEntityId",
          "ReadInt",
          "ReadIntRange",
          "ReadHalf",
          "ReadFloat01",
          "ReadRadian",
          "ReadQuaternion",
          "ReadResourceName",
          "ReadString",
          "Tell",
          "ReadBool",
          "ReadFloat",
          "ReadVector",
          "Read"
        ]
      },
      {
        "class_name": "ScriptBitSerializer",
        "methods": [
          "Serialize",
          "SerializeRplId",
          "SerializeEntityId",
          "SerializeInt",
          "SerializeIntRange",
          "SerializeHalf",
          "SerializeFloat01",
          "SerializeRadian",
          "SerializeQuaternion",
          "SerializeResourceName",
          "SerializeString",
          "Tell",
          "SerializeBool",
          "SerializeFloat",
          "SerializeVector",
          "Serialize"
        ]
      },
      {
        "class_name": "SSnapSerializerBase",
        "methods": [
          "SerializeBytes",
          "SerializeBool",
          "SerializeInt",
          "SerializeFloat",
          "SerializeVector",
          "SerializeString",
          "EncodeBool",
          "DecodeBool",
          "EncodeInt",
          "DecodeInt",
          "EncodeFloat",
          "DecodeFloat",
          "EncodeVector",
          "DecodeVector",
          "EncodeString",
          "DecodeString",
          "Serialize",
          "Tell",
          "Compare",
          "CompareBool",
          "CompareInt",
          "CompareFloat",
          "CompareVector",
          "CompareString",
          "CompareSnapshots",
          "CompareStringSnapshots",
          "SSnapSerializerBase"
        ]
      },
      {
        "class_name": "SSnapshot",
        "methods": [
          "SSnapshot"
        ]
      },
      {
        "class_name": "SSnapSerializer",
        "methods": [
          "MakeWriter",
          "MakeReader",
          "Seek"
        ]
      },
      {
        "class_name": "Obsolete",
        "methods": [
          "Hello",
          "Test",
          "Hello",
          "Obsolete",
          "DangerousMethod1",
          "DangerousMethod2"
        ]
      },
      {
        "class_name": "Restrict",
        "methods": [
          "Restrict"
        ]
      },
      {
        "class_name": "ScriptModule",
        "methods": [
          "Call",
          "Release",
          "LoadScript",
          "PrintString"
        ]
      },
      {
        "class_name": "WidgetType",
        "methods": [
          "WidgetEventCallback"
        ]
      },
      {
        "class_name": "SharedItem",
        "methods": [
          "QueryEntitiesCallback",
          "TraceEntitiesCallback",
          "MakeTraceParam"
        ]
      },
      {
        "class_name": "FilterSmoothCD",
        "methods": [
          "FilterSmoothCD",
          "Reset",
          "SetValue",
          "GetValue",
          "Filter"
        ]
      },
      {
        "class_name": "FilterSmoothCDAng",
        "methods": [
          "Filter",
          "GetPoint",
          "SetPointValue"
        ]
      },
      {
        "class_name": "ProfileData",
        "methods": [
          "ProfileData",
          "VectorToRGBA",
          "ARGB",
          "ARGBF",
          "AWHITE",
          "Init",
          "Get",
          "Release",
          "Link",
          "Init",
          "Ptr",
          "Get",
          "IsNull"
        ]
      },
      {
        "class_name": "MyData",
        "methods": [
          "Serialize",
          "Deserialize"
        ]
      },
      {
        "class_name": "Serializer",
        "methods": [
          "Write",
          "Read",
          "Serializer",
          "TestSave",
          "TestLoad"
        ]
      },
      {
        "class_name": "FileSerializer",
        "methods": [
          "FileSerializer",
          "Open",
          "IsOpen",
          "Close"
        ]
      },
      {
        "class_name": "SearchResourcesFilter",
        "methods": [
          "SearchResourcesCallback",
          "FindFilesCallback",
          "ScreenshotCallback"
        ]
      },
      {
        "class_name": "MemoryStatsSnapshot",
        "methods": [
          "GetStatsCount",
          "GetStatName",
          "GetStatValue"
        ]
      },
      {
        "class_name": "Class",
        "methods": [
          "String",
          "Vector",
          "IsInherited",
          "GetSizeOf",
          "ClassName",
          "Type",
          "ToString",
          "GetRefCount",
          "Cast",
          "SafeCastType"
        ]
      },
      {
        "class_name": "Managed",
        "methods": [
          "Clone"
        ]
      },
      {
        "class_name": "pointer",
        "methods": [
          "ToString"
        ]
      },
      {
        "class_name": "func",
        "methods": [
          "SetInstance"
        ]
      },
      {
        "class_name": "TypeID",
        "methods": [
          "Count",
          "IsEmpty",
          "Clear",
          "Compact",
          "Set",
          "Find",
          "Contains",
          "Get",
          "Insert",
          "InsertAt",
          "InsertAll",
          "Remove",
          "RemoveOrdered",
          "Resize",
          "Reserve",
          "Swap",
          "Sort",
          "IsIndexValid",
          "Copy",
          "Init",
          "RemoveItem",
          "RemoveItemOrdered",
          "Debug",
          "GetRandomIndex",
          "GetRandomElement",
          "SwapItems",
          "Set",
          "Count",
          "IsEmpty",
          "Clear",
          "Compact",
          "Reserve",
          "Find",
          "Contains",
          "Get",
          "Insert",
          "Remove",
          "RemoveItem",
          "IsIndexValid",
          "Copy",
          "Swap",
          "Init",
          "Count",
          "IsEmpty",
          "Clear",
          "Get",
          "Find",
          "GetElement",
          "GetKey",
          "Set",
          "Remove",
          "Take",
          "RemoveElement",
          "Contains",
          "Insert",
          "Copy",
          "ReplaceKey",
          "Remove",
          "GetKeyByValue",
          "Begin",
          "End",
          "Next",
          "GetIteratorKey",
          "GetIteratorElement"
        ]
      },
      {
        "class_name": "Tuple",
        "methods": [
          "Serialize",
          "Deserializer",
          "Tuple1",
          "Serialize",
          "Deserializer",
          "Tuple2",
          "Serialize",
          "Deserializer",
          "Tuple3",
          "Serialize",
          "Deserializer",
          "Tuple4",
          "Serialize",
          "Deserializer",
          "Tuple5",
          "Serialize",
          "Deserializer",
          "Tuple6",
          "Serialize",
          "Deserializer"
        ]
      },
      {
        "class_name": "DateTimeUtcAsInt",
        "methods": [
          "WorkbenchSearchResourcesCallback",
          "GetSecond",
          "GetMinute",
          "GetHour",
          "GetDay",
          "GetMonth",
          "GetYear"
        ]
      },
      {
        "class_name": "ButtonAttribute",
        "methods": [
          "ButtonAttribute"
        ]
      },
      {
        "class_name": "WorkbenchPluginAttribute",
        "methods": [
          "WorkbenchPluginAttribute"
        ]
      },
      {
        "class_name": "WorldEditorIngame",
        "methods": [
          "LoadWorld",
          "SaveWorld",
          "SetMoveTool",
          "SetRotateTool",
          "SetScaleTool",
          "Undo",
          "Redo",
          "Update",
          "Init",
          "Cleanup",
          "GetAPI"
        ]
      },
      {
        "class_name": "ContainerIdPathEntry",
        "methods": [
          "ContainerIdPathEntry"
        ]
      },
      {
        "class_name": "EditorEntityIterator",
        "methods": [
          "EditorEntityIterator",
          "GetNext",
          "GetCurrentIdx"
        ]
      },
      {
        "class_name": "AIAutotest",
        "methods": [
          "AIAutotest",
          "SetEventMask",
          "SetFlags",
          "ShouldEnd",
          "HasPassed",
          "InitTestResultFiles",
          "FormatTimestamp",
          "FormatIndex",
          "FormatAutotestInfo",
          "CreateGraph",
          "InitTestResultFiles",
          "CreateGraph"
        ]
      },
      {
        "class_name": "SCR_AIActivityFeatureBase",
        "methods": [
          "IsAgentAvailable"
        ]
      },
      {
        "class_name": "SCR_AIActivityIllumFlareFeature",
        "methods": [
          "GetAgentIllumWeaponAndMuzzle",
          "Execute"
        ]
      },
      {
        "class_name": "SCR_AIActivitySmokeCoverFeatureCluster",
        "methods": [
          "SCR_AIActivitySmokeCoverFeatureCluster",
          "GetCenterPosition"
        ]
      },
      {
        "class_name": "SCR_AIActivitySmokeCoverFeatureAgent",
        "methods": [
          "GetCloseTargetPenalty",
          "SCR_AIActivitySmokeCoverFeatureAgent",
          "SendMessage"
        ]
      },
      {
        "class_name": "SCR_AIActivitySmokeCoverFeature",
        "methods": [
          "GetConsideredAgents",
          "GetClusterBasedSmokePositions",
          "Execute",
          "GetConsideredAgents",
          "GetClusterBasedSmokePositions",
          "ExecuteForActivity",
          "GetActivityTargetPosition",
          "GetActivityProperties"
        ]
      },
      {
        "class_name": "SCR_AIHealActivitySmokeCoverFeature",
        "methods": [
          "GetActivityTargetPosition",
          "GetActivityProperties"
        ]
      },
      {
        "class_name": "SCR_AIAttackClusterActivity",
        "methods": [
          "SCR_AIAttackClusterActivity",
          "SetPriority",
          "SetIsUniqueInActionQueue",
          "RegisterFireteam",
          "RegisterFireteam",
          "GetSpecificFireteams",
          "OnFireteamRemovedFromGroup",
          "AddDebugMessage",
          "Fail",
          "UnregisterFireteam",
          "OnActionSelected",
          "SendAttackMessages",
          "OnActionDeselected",
          "SendCancelMessages",
          "OnActionCompleted",
          "SendCancelMessages",
          "OnActionFailed",
          "SendCancelMessages",
          "OnActionRemoved",
          "SendAttackMessages",
          "SendCancelMessages",
          "GetDebugPanelText"
        ]
      },
      {
        "class_name": "SCR_AIDefendFromClusterActivity",
        "methods": [
          "SCR_AIDefendFromClusterActivity",
          "SetPriority",
          "SetIsUniqueInActionQueue",
          "RegisterFireteam",
          "OnFireteamRemovedFromGroup",
          "UnregisterFireteam",
          "OnActionSelected",
          "SendDefendMessages",
          "OnActionDeselected",
          "SendCancelMessages",
          "SendDefendMessages",
          "SendCancelMessages",
          "GetDebugPanelText"
        ]
      },
      {
        "class_name": "SCR_AIFireteamsClusterActivity",
        "methods": [
          "SCR_AIFireteamsClusterActivity",
          "Event_OnTargetClusterStateDeleted",
          "AddDebugMessage",
          "Complete"
        ]
      },
      {
        "class_name": "SCR_AIInvestigateClusterActivity",
        "methods": [
          "SCR_AIInvestigateClusterActivity",
          "SetPriority",
          "SetIsUniqueInActionQueue",
          "RegisterFireteam",
          "RegisterFireteam",
          "GetSpecificFireteams",
          "OnFireteamRemovedFromGroup",
          "AddDebugMessage",
          "Fail",
          "UnregisterFireteam",
          "OnActionSelected",
          "CalculateInvestigationArea",
          "SendInvestigateMessages",
          "OnActionDeselected",
          "SendCancelMessages",
          "OnActionCompleted",
          "SendCancelMessages",
          "OnActionFailed",
          "SendCancelMessages",
          "OnActionRemoved",
          "SendCancelMessages",
          "SendInvestigateMessages",
          "CalculateInvestigationArea",
          "GetDebugPanelText"
        ]
      },
      {
        "class_name": "SCR_AIActionBase",
        "methods": [
          "EvaluatePriorityLevel",
          "SetPriorityLevel",
          "AddDebugMessage",
          "OnSetActionState",
          "OnSetSuspended",
          "OnComplete",
          "OnActionCompleted",
          "OnFail",
          "OnActionFailed",
          "OnActionRemoved",
          "GetActionDebugInfo",
          "GetDebugPanelText",
          "OnActionSelected",
          "OnActionDeselected",
          "OnActionExecuted",
          "OnActionCompleted",
          "OnActionFailed",
          "IsActionInterruptable",
          "SetActionInterruptable",
          "SetParametersToBTVariables",
          "GetParametersFromBTVariables",
          "GetPortNames",
          "GetRestrictedPriorityLevel"
        ]
      },
      {
        "class_name": "SCR_AIActivityBase",
        "methods": [
          "FindActivityFeature",
          "InitParameters",
          "SCR_AIActivityBase",
          "InitParameters",
          "SendCancelMessagesToAllAgents",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AIIdleActivity",
        "methods": [
          "SCR_AIIdleActivity",
          "SetPriority"
        ]
      },
      {
        "class_name": "SCR_AIAttackBehavior",
        "methods": [
          "InitParameters",
          "OnActionSelected",
          "EnableFriendlyFireCheck",
          "OnActionDeselected",
          "EnableFriendlyFireCheck",
          "OnActionCompleted",
          "EnableFriendlyFireCheck",
          "OnActionFailed",
          "EnableFriendlyFireCheck",
          "GetActionDebugInfo",
          "SCR_AIAttackBehavior",
          "InitParameters",
          "SetPriority",
          "SetIsUniqueInActionQueue",
          "InitWaitTime",
          "CustomEvaluate",
          "InitWaitTime",
          "EnableFriendlyFireCheck"
        ]
      },
      {
        "class_name": "SCR_AIBehaviorBase",
        "methods": [
          "SCR_AIBehaviorBase",
          "SetRelatedGroupActivity",
          "GetGroupActivityContext",
          "OnActionSelected",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AIWaitBehavior",
        "methods": [
          "SCR_AIWaitBehavior",
          "SetPriority"
        ]
      },
      {
        "class_name": "SCR_AIIdleBehavior",
        "methods": [
          "SCR_AIIdleBehavior",
          "SetPriority",
          "OnActionSelected"
        ]
      },
      {
        "class_name": "SCR_AICompositeActionParallel",
        "methods": [
          "GetSubactions",
          "AddAction",
          "CustomEvaluate",
          "Complete",
          "OnActionSelected",
          "OnActionDeselected",
          "OnActionRemoved"
        ]
      },
      {
        "class_name": "SCR_AIDefendActivity",
        "methods": [
          "InitParameters",
          "SCR_AIDefendActivity",
          "InitParameters",
          "SetPriority",
          "AddAgentToRadialCover",
          "ClearRadialCoverAgents",
          "GetRadialCoverAgentsCount",
          "AllocateAgentsToRadialCover",
          "SendDefendSector",
          "GetActionDebugInfo",
          "OnActionDeselected",
          "SendCancelMessagesToAllAgents",
          "OnActionFailed",
          "SendCancelMessagesToAllAgents",
          "OnActionCompleted",
          "SendCancelMessagesToAllAgents",
          "SendDefendSector",
          "GetDefendDirection"
        ]
      },
      {
        "class_name": "SCR_AIDefendBehavior",
        "methods": [
          "InitParameters",
          "SCR_AIDefendBehavior",
          "SetPriority",
          "InitParameters",
          "GetActionDebugInfo"
        ]
      },
      {
        "class_name": "SCR_AIFindFirePositionBehavior",
        "methods": [
          "InitParameters",
          "SCR_AIFindFirePositionBehavior",
          "InitParameters",
          "SetPriority",
          "CustomEvaluate",
          "Complete",
          "GetPriority",
          "OnActionSelected"
        ]
      },
      {
        "class_name": "SCR_AIGetFindFirePositionNextPos",
        "methods": [
          "EOnTaskSimulate",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetFirePositionBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIFireIllumFlareBehavior",
        "methods": [
          "SCR_AIFireIllumFlareBehavior",
          "SetPriority",
          "DrawPositionDebug",
          "OnActionSelected",
          "DrawPositionDebug",
          "OnActionCompleted",
          "OnActionFailed",
          "GetActionDebugInfo",
          "DrawPositionDebug"
        ]
      },
      {
        "class_name": "SCR_AIFireteamsActivity",
        "methods": [
          "SCR_AIFireteamsActivity",
          "SetIsUniqueInActionQueue",
          "OnActionRemoved",
          "GetAssignedFireteams",
          "RegisterFireteam",
          "UnregisterFireteam",
          "OnAssignedFireteamsEmpty",
          "UnregisterFireteam",
          "OnAssignedFireteamsEmpty",
          "Event_OnFireteamRemovedFromGroup",
          "OnFireteamRemovedFromGroup",
          "OnAssignedFireteamsEmpty",
          "AddDebugMessage",
          "Fail",
          "OnFireteamRemovedFromGroup",
          "GetDebugPanelText"
        ]
      },
      {
        "class_name": "SCR_AIFollowActivity",
        "methods": [
          "InitParameters",
          "SCR_AIFollowActivity",
          "InitParameters",
          "SetPriority",
          "GetActionDebugInfo",
          "CustomEvaluate",
          "Fail",
          "GetPriority",
          "OnActionCompleted",
          "SendCancelMessagesToAllAgents",
          "OnActionFailed",
          "SendCancelMessagesToAllAgents",
          "OnActionDeselected",
          "SendCancelMessagesToAllAgents"
        ]
      },
      {
        "class_name": "SCR_AIGetInActivity",
        "methods": [
          "InitParameters",
          "SCR_AIGetInActivity",
          "InitParameters",
          "SetPriority",
          "GetActionDebugInfo",
          "OnActionDeselected",
          "OnActionSelected",
          "OnActionCompleted",
          "OnActionFailed",
          "SendCancelMessagesToAllAgents",
          "ClearActivityVehicle"
        ]
      },
      {
        "class_name": "SCR_AIGetOutActivity",
        "methods": [
          "InitParameters",
          "SCR_AIGetOutActivity",
          "InitParameters",
          "SetPriority",
          "OnActionCompleted",
          "GetActionDebugInfo"
        ]
      },
      {
        "class_name": "SCR_AIHealActivity",
        "methods": [
          "CustomEvaluate",
          "AddDebugMessage",
          "Fail",
          "Complete",
          "SetActionIsSuspended",
          "AddDebugMessage",
          "Fail",
          "GetPriority",
          "InitParameters",
          "SCR_AIHealActivity",
          "SetPriority",
          "InitParameters",
          "SetIsUniqueInActionQueue",
          "GetActionDebugInfo",
          "OnMessage",
          "SetActionIsSuspended"
        ]
      },
      {
        "class_name": "SCR_AIGetHealActivityParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISetHealActivityParameters",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIHealBehavior",
        "methods": [
          "SCR_AIHealBehavior",
          "SetPriority",
          "OnActionCompleted",
          "CustomEvaluate",
          "GetPriority"
        ]
      },
      {
        "class_name": "SCR_AIHealWaitBehavior",
        "methods": [
          "InitParameters",
          "SCR_AIHealWaitBehavior",
          "InitParameters",
          "SetPriority",
          "OnActionCompleted"
        ]
      },
      {
        "class_name": "SCR_AIIdleBehavior_Driver",
        "methods": [
          "SCR_AIIdleBehavior_Driver",
          "SetPriority",
          "OnFail",
          "SetLightsState",
          "GetHiBeamLightsState",
          "GetLightsState",
          "SetHiBeamLightState",
          "SetLightsState",
          "SetHiBeamLightState",
          "OnVehicleApproaching",
          "SetHiBeamLightState",
          "EvaluateLightsUsage",
          "SetLightsState",
          "ShouldUseHiBeamLights",
          "ShouldUseLights",
          "CustomEvaluate",
          "EvaluateLightsUsage",
          "GetPriority"
        ]
      },
      {
        "class_name": "SCR_AILookAction",
        "methods": [
          "SCR_AILookAction",
          "LookAt",
          "LookAt",
          "Cancel",
          "Complete",
          "Complete",
          "AddDebugMessage",
          "GetLookParametersToNode"
        ]
      },
      {
        "class_name": "SCR_AIMedicHealBehavior",
        "methods": [
          "SCR_AIMedicHealBehavior",
          "SetPriority",
          "OnActionSelected",
          "OnActionCompleted",
          "OnActionFailed"
        ]
      },
      {
        "class_name": "SCR_AIMoveActivity",
        "methods": [
          "InitParameters",
          "SCR_AIMoveActivity",
          "InitParameters",
          "SetPriority",
          "CustomEvaluate",
          "GetPriority",
          "GetActionDebugInfo",
          "OnActionCompleted",
          "SendCancelMessagesToAllAgents",
          "OnActionFailed",
          "SendCancelMessagesToAllAgents",
          "OnActionDeselected",
          "SendCancelMessagesToAllAgents"
        ]
      },
      {
        "class_name": "SCR_AISeekAndDestroyActivity",
        "methods": [
          "SCR_AISeekAndDestroyActivity",
          "GetActionDebugInfo"
        ]
      },
      {
        "class_name": "SCR_AIMoveBehaviorBase",
        "methods": [
          "SCR_AIMoveBehaviorBase",
          "SetPriority"
        ]
      },
      {
        "class_name": "SCR_AIMoveInFormationBehavior",
        "methods": [
          "SCR_AIMoveInFormationBehavior"
        ]
      },
      {
        "class_name": "SCR_AIFollowInFormationBehavior",
        "methods": [
          "SCR_AIFollowInFormationBehavior",
          "CustomEvaluate",
          "GetPriority"
        ]
      },
      {
        "class_name": "SCR_AIMoveIndividuallyBehavior",
        "methods": [
          "SCR_AIMoveIndividuallyBehavior",
          "GetActionDebugInfo"
        ]
      },
      {
        "class_name": "SCR_AIMoveAndInvestigateBehavior",
        "methods": [
          "SCR_AIMoveAndInvestigateBehavior",
          "OnActionSelected"
        ]
      },
      {
        "class_name": "SCR_AISetInvestigateBehaviorParameters",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIMoveFromDangerBehavior",
        "methods": [
          "InitParameters",
          "SCR_AIMoveFromDangerBehavior",
          "SetPriority",
          "InitParameters",
          "ExistsBehaviorForEntity"
        ]
      },
      {
        "class_name": "SCR_AIMoveFromUnknownFire",
        "methods": [
          "SCR_AIMoveFromUnknownFire",
          "SetPriority",
          "CustomEvaluate",
          "Complete",
          "GetPriority",
          "OnActionSelected"
        ]
      },
      {
        "class_name": "SCR_AIMoveFromGrenadeBehavior",
        "methods": [
          "SCR_AIMoveFromGrenadeBehavior",
          "SetPriority",
          "CreateObserveUnknownBehavior",
          "OnActionCompleted",
          "CreateObserveUnknownBehavior",
          "CustomEvaluate",
          "Complete",
          "CompleteActionCondition"
        ]
      },
      {
        "class_name": "SCR_AIMoveFromIncomingVehicleBehavior",
        "methods": [
          "SCR_AIMoveFromIncomingVehicleBehavior",
          "SetPriority",
          "CustomEvaluate",
          "Complete",
          "GetPriority",
          "ExecuteBehaviorCondition",
          "IsCoverSafeAgainstVehicle",
          "IsVehicleMovingTowardsMe"
        ]
      },
      {
        "class_name": "SCR_AIMoveFromVehicleHornBehavior",
        "methods": [
          "SCR_AIMoveFromVehicleHornBehavior",
          "SetPriority"
        ]
      },
      {
        "class_name": "SCR_AIPilotMoveFromIncomingVehicleBehavior",
        "methods": [
          "SCR_AIPilotMoveFromIncomingVehicleBehavior",
          "OnActionSelected",
          "Fail",
          "Fail"
        ]
      },
      {
        "class_name": "SCR_AIGetPilotMoveFromIncomingVehicleBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIObserveUnknownFireBehavior",
        "methods": [
          "SCR_AIObserveUnknownFireBehavior",
          "InitParameters",
          "SetIsUniqueInActionQueue",
          "InitTiming",
          "InitParameters",
          "InitTiming",
          "InitTimeout",
          "InitTimeout",
          "SetUseMovement",
          "OnActionSelected",
          "CustomEvaluate",
          "Fail",
          "IsNewPositionMoreRelevant"
        ]
      },
      {
        "class_name": "SCR_AIGetObserveUnknownFireBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISetObserveUnknownFireBehaviorParameters",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIPerformActionActivity",
        "methods": [
          "SCR_AIPerformActionActivity",
          "SetPriority",
          "GetActionDebugInfo"
        ]
      },
      {
        "class_name": "SCR_AIPerformActionBehavior",
        "methods": [
          "SCR_AIPerformActionBehavior",
          "SetPriority",
          "GetActionDebugInfo",
          "OnActionFailed"
        ]
      },
      {
        "class_name": "SCR_AIPickupInventoryItemsBehavior",
        "methods": [
          "InitProperties",
          "SCR_AIPickupInventoryItemsBehavior",
          "SetPriority",
          "SetIsUniqueInActionQueue",
          "InitProperties",
          "OnActionCompleted",
          "OnActionFailed"
        ]
      },
      {
        "class_name": "SCR_AIGetPickupInventoryItemsParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIProvideAmmoBehavior",
        "methods": [
          "SCR_AIProvideAmmoBehavior",
          "SetPriority",
          "CustomEvaluate",
          "Fail",
          "GetPriority",
          "OnActionCompleted",
          "OnActionFailed"
        ]
      },
      {
        "class_name": "SCR_AIGetProvideAmmoBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIResupplyActivity",
        "methods": [
          "InitParameters",
          "SCR_AIResupplyActivity",
          "InitParameters",
          "SetPriority",
          "GetActionDebugInfo"
        ]
      },
      {
        "class_name": "SCR_AIRetreatWhileLookAtBehavior",
        "methods": [
          "SCR_AIRetreatWhileLookAtBehavior",
          "SetPriority",
          "CustomEvaluate",
          "Fail",
          "GetPriority"
        ]
      },
      {
        "class_name": "SCR_AIRetreatFromTargetBehavior",
        "methods": [
          "SCR_AIRetreatFromTargetBehavior",
          "SetPriority",
          "CustomEvaluate",
          "Complete",
          "GetPriority"
        ]
      },
      {
        "class_name": "SCR_AIGetRetreatFromTargetBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISuppressActivity",
        "methods": [
          "SCR_AISuppressActivity",
          "SetPriority",
          "OnActionDeselected",
          "SendCancelMessagesToAllAgents"
        ]
      },
      {
        "class_name": "SCR_AISuppressBehavior",
        "methods": [
          "SCR_AISuppressBehavior",
          "SetPriority"
        ]
      },
      {
        "class_name": "SCR_AISuppressGroupClusterBehavior",
        "methods": [
          "SCR_AISuppressGroupClusterBehavior",
          "Fail",
          "GetClusterState",
          "GetDistance",
          "GetFireRate",
          "GetGroupThreat",
          "CustomEvaluate",
          "Complete"
        ]
      },
      {
        "class_name": "SCR_AITargetInfo",
        "methods": [
          "Init",
          "InitFromBaseTarget",
          "Init",
          "InitFromGunshot",
          "Init",
          "UpdateFromBaseTarget",
          "UpdateFromGunshot",
          "CopyFrom"
        ]
      },
      {
        "class_name": "SCR_AIThrowGrenadeToBehavior",
        "methods": [
          "SCR_AIThrowGrenadeToBehavior",
          "SetPriority",
          "DrawPositionDebug",
          "CustomEvaluate",
          "GetPriority",
          "OnActionSelected",
          "DrawPositionDebug",
          "OnActionCompleted",
          "OnActionFailed",
          "GetActionDebugInfo",
          "DrawPositionDebug"
        ]
      },
      {
        "class_name": "SCR_AIVehicleBehavior",
        "methods": [
          "SCR_AIVehicleBehavior",
          "OnActionSelected",
          "OnActionCompleted",
          "OnActionFailed"
        ]
      },
      {
        "class_name": "SCR_AIGetInVehicle",
        "methods": [
          "SCR_AIGetInVehicle",
          "SetPriority",
          "OnActionCompleted",
          "OnActionFailed",
          "GetActionDebugInfo"
        ]
      },
      {
        "class_name": "SCR_AIGetOutVehicle",
        "methods": [
          "SCR_AIGetOutVehicle",
          "SetPriority",
          "GetActionDebugInfo"
        ]
      },
      {
        "class_name": "SCR_AIVehicleCombatActivity",
        "methods": [
          "SCR_AIVehicleCombatActivity",
          "SetPriority",
          "CustomEvaluate",
          "GetPriority",
          "OnActionSelected",
          "VehicleUsageLogic",
          "GunnerRetreatLogic",
          "ShouldGunnerRetreatInVehicle",
          "VehicleUsageLogic",
          "GunnerRetreatLogic",
          "GetAvailableAgent",
          "IsClusterDangerousEnough",
          "OnAgentLifeStateChanged",
          "GunnerRetreatLogic",
          "OnActionDeselected"
        ]
      },
      {
        "class_name": "SCR_SmartActionWaypoint",
        "methods": [
          "GetSmartActionEntity",
          "SetSmartActionEntity"
        ]
      },
      {
        "class_name": "SCR_AIBaseUtilityComponent",
        "methods": [
          "SendMessage",
          "DiagGetCounter",
          "DiagIncreaseCounter",
          "DiagSetBreakpoint",
          "AddDebugMessage",
          "DebugLogActionsPriority",
          "GetActions",
          "AddDebugMessage",
          "AddDebugMessage",
          "GetActionLogString"
        ]
      },
      {
        "class_name": "SCR_AICombatComponent",
        "methods": [
          "SetGroupSuppressClusterState",
          "SetGroupFireRateCoef",
          "SetFireRateCoef",
          "SetFireRateCoef",
          "GetFireRateCoef",
          "GetAISkill",
          "SetAISkill",
          "SetPerceptionFactor",
          "UpdatePerceptionFactor",
          "ResetAISkill",
          "AddDebugMessage",
          "GetCurrentWeapon",
          "GetCurrentWeaponType",
          "GetCurrentTarget",
          "GetRetreatTarget",
          "GetLastSeenEnemy",
          "GetEndangeringEnemy",
          "IsEnemyKnown",
          "EvaluateWeaponAndTarget",
          "GetTargetDestinationPos",
          "GetAIInfoComponent",
          "EvaluateLowAmmo",
          "GetWeaponLowMagThreshold",
          "Update",
          "EvaluateDismountTurret",
          "DismountTurretCondition",
          "EvaluateDismountTurret",
          "TryAddDismountTurretActions",
          "TryAddDismountTurretActions",
          "FindNextCoverPosition",
          "Event_OnInventoryChanged",
          "Event_OnTimerAfterInventoryChanged",
          "Event_OnCompartmentEntered",
          "Event_OnCompartmentLeft",
          "Event_OnGadgetStateChanged",
          "RecalculateEquipmentPerceptionFactor",
          "Event_OnGadgetFocusStateChanged",
          "RecalculateEquipmentPerceptionFactor",
          "Event_OnDamage",
          "Event_OnDamageEffectAdded",
          "IsActionAllowed",
          "GetAllowedActions",
          "SetActionAllowed",
          "SetHoldFire",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetCombatType",
          "GetCombatType",
          "SetCombatType",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetActionAllowed",
          "SetDefaultCombatType",
          "ResetCombatType",
          "AddDebugMessage",
          "SetCombatType",
          "IsFriendlyInAim",
          "IsTargetVisible",
          "SetAssignedTargets",
          "ResetAssignedTargets",
          "SetExpectedEnemyType",
          "ResetExpectedEnemyType",
          "GetSelectedWeaponAndMagazine",
          "GetSelectedWeapon",
          "GetSelectedWeaponType",
          "GetSelectedWeaponProperties",
          "GetSelectedWeaponDirectDamage",
          "GetSelectedWeaponMinDist",
          "GetSelectedWeaponMaxDist",
          "GetSelectedWeaponResource",
          "GetUnitTypesCanAttack",
          "EvaluateExpectedWeapon",
          "EvaluateSuppressionWeapon",
          "HasWeaponOfType",
          "FindWeaponOfType",
          "GetMagazineCount",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "SetCombatType",
          "InitWeaponTargetSelector",
          "OnDelete",
          "InitWeaponTargetSelector",
          "SetTargetSelectionProperties",
          "SetTargetSelectionProperties",
          "UpdatePerceptionFactor",
          "RecalculateEquipmentPerceptionFactor",
          "DebugPrintToWidget",
          "GetAiAgent",
          "FindTargetByEntity",
          "UpdateLastSeenPosition",
          "UpdateLastSeenPosition",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AIConfigComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "GetWeaponTypeHandlingConfig",
          "PerformGoalReaction",
          "PerformGoalReaction",
          "PerformInfoReaction",
          "PerformInfoReaction",
          "PerformDangerReaction",
          "AddDefaultBehaviors",
          "AddDefaultActivities",
          "GetTreeNameForWeaponType"
        ]
      },
      {
        "class_name": "SCR_AIGroupInfoComponent",
        "methods": [
          "EOnInit",
          "IsGrenadeThrowAllowed",
          "IsIllumFlareAllowed",
          "OnIllumFlareUsed",
          "OnAgentSelectedGrenade",
          "OnPostInit",
          "SetEventMask",
          "RplSetGroupControlMode",
          "Rpc",
          "RplSetGroupControlMode",
          "GetGroupControlMode",
          "GetOnControlModeChanged",
          "RplSave",
          "RplLoad",
          "RplSetGroupControlMode",
          "SetStanceLimit",
          "GetStanceLimit",
          "GetAllowedStance"
        ]
      },
      {
        "class_name": "SCR_AIGroupMovementComponent",
        "methods": [
          "DiagDrawSubgroups"
        ]
      },
      {
        "class_name": "SCR_AIGroupUtilityComponentClass",
        "methods": [
          "ScriptInvoker_GroupMoveFailed_Callback"
        ]
      },
      {
        "class_name": "SCR_AIGroupUtilityComponent",
        "methods": [
          "UpdateThreatMeasure",
          "SetFireRateCoef",
          "GetFireRateCoef",
          "GetThreatMeasure",
          "SetMaxAutonomousDistance",
          "GetMaxAutonomousDistance",
          "EvaluateActivity",
          "AddDebugMessage",
          "RemoveObsoleteActions",
          "DiagIncreaseCounter",
          "DebugLogActionsPriority",
          "SetCurrentAction",
          "UpdateGroupControlMode",
          "AddDebugMessage",
          "UpdateSuppressCluster",
          "UpdateThreatMeasure",
          "EvaluateFlareUsage",
          "UpdateClustersState",
          "EvaluateFlareUsage",
          "GetCurrentSuppressClusterState",
          "AnyMembersInsideBBox",
          "ShouldSuppressCluster",
          "UpdateSuppressCluster",
          "OnAgentAdded",
          "OnAgentRemoved",
          "OnWaypointCompleted",
          "OnWaypointRemoved",
          "OnAgentCompartmentEntered",
          "AddUsableVehicle",
          "JoinSubgroup",
          "CreateNewSubgroup",
          "JoinSubgroup",
          "OnJoinGroupFromVehicle",
          "CreateNewSubgroup",
          "LeaveSubgroup",
          "OnAgentCompartmentLeft",
          "LeaveSubgroup",
          "OnAgentLifeStateChanged",
          "OnCurrentWaypointChanged",
          "OnExecuteWaypointTree",
          "OnEnemyDetectedFiltered",
          "OnTargetClusterStateChanged",
          "CancelActivitiesRelatedToWaypoint",
          "GetActions",
          "CanRebalanceFireteams",
          "GetActions",
          "OnMoveFailed",
          "GetOnMoveFailed",
          "EOnInit",
          "EOnDiag",
          "UpdateGroupControlMode",
          "AddDebugMessage",
          "UpdateClustersState",
          "IsPositionAllowed",
          "AddUsableVehicle",
          "AddAction",
          "RemoveUsableVehicle",
          "OnVehicleDeleted",
          "RemoveUsableVehicle",
          "OnVehicleDamageStateChanged",
          "RemoveUsableVehicle",
          "IsMilitary"
        ]
      },
      {
        "class_name": "SCR_AIInfoBaseComponent",
        "methods": [
          "AddDebugMessage",
          "AddDebugMessageObject",
          "AddDebugMessageObject",
          "DumpDebugMessages",
          "LogToFile",
          "LogToFile",
          "LogToFile",
          "LogToFile",
          "LogToFile",
          "LogToFile"
        ]
      },
      {
        "class_name": "SCR_AIInfoComponentClass",
        "methods": [
          "SCR_AIOnCompartmentEntered",
          "SCR_AIOnCompartmentLeft",
          "SCR_AIOnAgentLifeStateChanged"
        ]
      },
      {
        "class_name": "SCR_AIInfoComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "OnVehicleEntered",
          "AddUnitState",
          "AddUnitState",
          "AddUnitState",
          "OnVehicleLeft",
          "RemoveUnitState",
          "RemoveUnitState",
          "RemoveUnitState",
          "InitBloodLevel",
          "EOnInit",
          "InitBloodLevel",
          "EvaluateWoundedState",
          "OnDelete",
          "GetCombatComponent",
          "IsOwnerAgent",
          "HasRole",
          "GetRoles",
          "AddUnitState",
          "RemoveUnitState",
          "HasUnitState",
          "GetUnitStates",
          "SetAIState",
          "GetAIState",
          "GetMagazineCountByWellType",
          "SetStance",
          "GetStance",
          "SetMovementType",
          "GetMovementType",
          "SetWeaponRaised",
          "GetWeaponRaised",
          "InitThreatSystem",
          "GetThreatState",
          "GetThreatSystem",
          "EvaluateWoundedState",
          "AddUnitState",
          "RemoveUnitState",
          "OnDamageEffectAdded",
          "EvaluateWoundedState",
          "OnDamageEffectRemoved",
          "EvaluateWoundedState",
          "OnLifeStateChanged",
          "RemoveUnitState",
          "AddUnitState",
          "GetBleedTimeToUnconscious",
          "DebugPrintToWidget",
          "GetBehaviorEditorDebugName"
        ]
      },
      {
        "class_name": "SCR_AISettingsComponent",
        "methods": [
          "GetInstance",
          "InitVisualization",
          "UpdateDebug",
          "OnPostInit",
          "InitVisualization"
        ]
      },
      {
        "class_name": "SCR_AISmartActionComponentClass",
        "methods": [
          "SCR_AIActionUserInvoker_Callback"
        ]
      },
      {
        "class_name": "SCR_AISmartActionComponent",
        "methods": [
          "ReserveAction",
          "SetActionAccessible",
          "ReleaseAction",
          "SetActionAccessible",
          "OnDamageStateChanged",
          "ReleaseAction",
          "OnActionEnd",
          "ReleaseAction",
          "OnActionFailed",
          "ReleaseAction",
          "GetOnActionEnd",
          "GetOnActionFailed",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_AISmartActionSentinelComponent",
        "methods": [
          "GetLookPosition",
          "GetLookDirectionRange",
          "GetDesiredStance",
          "GetUseBinoculars",
          "SetUseBinoculars",
          "GetLeaningType"
        ]
      },
      {
        "class_name": "SCR_AIThreatSystem",
        "methods": [
          "SCR_AIThreatStateChangedCallback",
          "SCR_AIThreatSystem",
          "GetOnThreatStateChanged",
          "GetState",
          "GetThreatMeasureWithoutInjuryFactor",
          "GetThreatMeasure",
          "ShowDebug",
          "StateTransition",
          "UpdateState",
          "StateTransition",
          "Update",
          "UpdateState",
          "ShowDebug",
          "OnDamageEffectAdded",
          "OnDamageEffectRemoved",
          "ThreatBulletImpact",
          "ThreatExplosion",
          "ThreatShotFired",
          "ThreatProjectileFlyby",
          "DebugPrintToWidget",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AIUtilityComponent",
        "methods": [
          "EvaluateBehavior",
          "AddDebugMessage",
          "RemoveObsoleteActions",
          "DiagIncreaseCounter",
          "DebugLogActionsPriority",
          "SetCurrentAction",
          "AddDebugMessage",
          "CanIndependentlyMove",
          "GetCurrentBehavior",
          "CancelAllGroupActivityBehaviors",
          "GetActions",
          "WrapBehaviorOutsideOfVehicle",
          "EOnInit",
          "OnCompartmentEntered",
          "AddAction",
          "OnCompartmentLeft",
          "IsMilitary",
          "EOnDiag",
          "GetOrigin",
          "LookAt"
        ]
      },
      {
        "class_name": "SCR_AIVehicleUsageComponentClass",
        "methods": [
          "SCR_AIOnVehicleDeleted",
          "SCR_AIOnVehicleDamageStateChanged"
        ]
      },
      {
        "class_name": "SCR_AIVehicleUsageComponent",
        "methods": [
          "CanBePiloted",
          "GetVehicleType",
          "IsVehicleTypeValid",
          "FindOnNearestParent",
          "OnDamageStateChanged",
          "OnPostInit",
          "SetEventMask",
          "ErrorIncorrectType",
          "EOnInit",
          "ErrorNoComponent",
          "ErrorIncorrectType"
        ]
      },
      {
        "class_name": "SCR_CharacterPerceivableComponent",
        "methods": [
          "EOnInit",
          "OnLifeStateChanged",
          "SetDisarmed"
        ]
      },
      {
        "class_name": "SCR_MailboxComponent",
        "methods": [
          "ReadMessage",
          "LogMailboxStatistics",
          "RemoveMessage",
          "ReadOrder",
          "RemoveOrder",
          "LogMessageStatistics",
          "IsCommunicationEnabled",
          "IsActive",
          "DebugLogBroadcastMessage",
          "AddDebugMessage",
          "DebugLogOnReceived",
          "AddDebugMessage",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_VehiclePerceivableComponent",
        "methods": [
          "EOnInit",
          "OnDamageOverTimeAdded",
          "SetDisarmed",
          "OnDamageOverTimeRemoved",
          "SetDisarmed"
        ]
      },
      {
        "class_name": "SCR_AICoverLock",
        "methods": [
          "GetPosition",
          "IsValid",
          "Release",
          "SCR_AICoverLock",
          "Release",
          "CosAngleToThreat",
          "GetCoverManager"
        ]
      },
      {
        "class_name": "SCR_AIFindCover",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "ClearDebug",
          "ClearVariable",
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "CanReturnRunning",
          "ClearDebug"
        ]
      },
      {
        "class_name": "SCR_AIGetCoverParameters",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "CalculateCoverStance",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "CalculateCoverStance",
          "GetVariablesOut",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISpawnerGroupFaction",
        "methods": [
          "OnSpawn"
        ]
      },
      {
        "class_name": "SCR_AIGroupFireteam",
        "methods": [
          "AddMember",
          "RemoveMember",
          "RemoveMember",
          "GetMember",
          "GetFirstMemberEntity",
          "GetMembers",
          "MoveMembersFrom",
          "AddMember",
          "HasMember",
          "GetMemberCount",
          "Internal_OnLockDestroyed",
          "IsLocked",
          "TryLock"
        ]
      },
      {
        "class_name": "SCR_AIGroupFireteamVehicleBase",
        "methods": [
          "SetVehicle",
          "GetVehicle"
        ]
      },
      {
        "class_name": "SCR_AIGroupFireteamLock",
        "methods": [
          "SCR_AIGroupFireteamLock",
          "GetFireteam",
          "FindFireteamLock",
          "FindFireteamLock",
          "FindFireteamLock",
          "FindFireteamLock",
          "RemoveFireteamLock",
          "RemoveFireteamLock",
          "TryLockFireteams",
          "CopyLockArray"
        ]
      },
      {
        "class_name": "SCR_AIGroupFireteamManager",
        "methods": [
          "SCR_AIOnFireteamRemoved",
          "SCR_AIGroupFireteamManager",
          "OnAgentAdded",
          "OnAgentRemoved",
          "RemoveFireteam",
          "OnAgentAssignedToVehicle",
          "RemoveFireteam",
          "FindFireteamsOfVehicle",
          "OnAgentUnassignedFromVehicle",
          "RemoveFireteam",
          "OnVehicleRemoved",
          "FindFireteamsOfVehicle",
          "OnAgentUnassignedFromVehicle",
          "FindFreeFireteams",
          "GetFreeFireteams",
          "FindFireteam",
          "FindFireteamsOfVehicle",
          "GetFireteamCount",
          "GetFireteamId",
          "RebalanceAllFireteams",
          "RebalanceFireteams",
          "CreateFireteam",
          "FireteamFactory",
          "SCR_AIGroupFireteam",
          "SCR_AIGroupFireteamVehicleCrew",
          "SCR_AIGroupFireteamVehicleCargo",
          "RemoveFireteam",
          "FindSmallestFireteam",
          "FindBiggestFireteam",
          "GetMaxFireteamSize",
          "RebalanceFireteams",
          "CreateFireteam",
          "RemoveFireteam",
          "CountUnbalancedFireteams",
          "CountUnbalancedFireteams",
          "CountUnbalancedFireteams",
          "DiagGetFireteamsData",
          "DiagDrawFireteams"
        ]
      },
      {
        "class_name": "SCR_AIGroupPerception",
        "methods": [
          "SCR_AIOnTargetClusterStateDeleted",
          "SCR_AIGroupPerceptionOnNoEnemy",
          "SCR_AIGroupPerceptionOnEnemyDetected",
          "SCR_AIGroupPerceptionOnEnemyDetectedFiltered",
          "SCR_AIGroupPerception",
          "RemoveTarget",
          "RemoveTarget",
          "AddOrUpdateTarget",
          "AddOrUpdateGunshot",
          "Update",
          "UpdateTargetsFromMembers",
          "MaintainTargets",
          "ClusterTargets",
          "SelectMostDangerousCluster",
          "UpdateTargetsFromMembers",
          "MaintainTargets",
          "RemoveTarget",
          "ClusterTargets",
          "GenerateClusters",
          "DeleteClusterState",
          "TransferClusterState",
          "DeleteClusterState",
          "GenerateClusters",
          "GetClusterAssociation",
          "SelectMostDangerousCluster",
          "CalculateClusterDangerScore",
          "DeleteClusterState",
          "TransferClusterState",
          "GetTargetClusterStateId",
          "DiagPrintClusterAssociation",
          "DiagDrawClusters"
        ]
      },
      {
        "class_name": "SCR_AIPolar",
        "methods": [
          "WrapAngleDiff",
          "WrapAngle",
          "DirToAngle",
          "WrapAngle"
        ]
      },
      {
        "class_name": "SCR_AIGroupTargetCluster",
        "methods": [
          "AddTarget",
          "AddCluster",
          "MoveStateFrom",
          "GetMinDistance"
        ]
      },
      {
        "class_name": "SCR_AIGroupTargetClusterProcessor",
        "methods": [
          "SCR_AITargetClusterStateChanged",
          "UpdateCluster",
          "OnLeaveState",
          "OnEnterState",
          "UnassignActivity",
          "SwitchToState",
          "UnassignActivity",
          "SwitchToState",
          "UnassignActivity",
          "AssignActivity",
          "UnassignActivity",
          "SwitchToState",
          "SwitchToState",
          "EvaluateNewDesiredState",
          "OnLeaveState",
          "OnEnterState",
          "SwitchToState",
          "AssignActivity",
          "UnassignActivity",
          "HasActivityForState",
          "TryCreateActivityForState",
          "AllocateMoreFireteams",
          "AllocateMoreFireteams",
          "GetAssignedFireteams",
          "CalculateMaxAgeThreshold_s",
          "SCR_AIGroupTargetClusterProcessor",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AIGroupVehicle",
        "methods": [
          "SCR_AIGroupVehicle",
          "GetEntity",
          "GetVehicleUsageComponent",
          "HasWeapon",
          "CanMove",
          "IsStatic",
          "DriverIsConscious",
          "SetSubgroupHandleId",
          "GetSubgroupHandleId"
        ]
      },
      {
        "class_name": "SCR_AIGroupVehicleManager",
        "methods": [
          "FindVehicle",
          "FindVehicle",
          "FindVehicleBySubgroupId",
          "GetAllVehicles",
          "GetVehiclesCount",
          "TryAddVehicle",
          "RemoveVehicle"
        ]
      },
      {
        "class_name": "SCR_AITargetClusterState",
        "methods": [
          "SCR_AITargetClusterState",
          "ProcessTargets",
          "GetTimeSinceLastNewInformation",
          "GetCenterPosition"
        ]
      },
      {
        "class_name": "SCR_AIWaypoint",
        "methods": [
          "GetPriorityLevel",
          "SetPriorityLevel",
          "IsWithinCompletionRadius",
          "GetOnWaypointPropertiesChanged",
          "OnTransformResetImpl",
          "CreateWaypointState",
          "SCR_AIWaypointState"
        ]
      },
      {
        "class_name": "SCR_AIWaypointState",
        "methods": [
          "SCR_AIWaypointState",
          "OnSelected",
          "OnDeselected",
          "OnExecuteWaypointTree"
        ]
      },
      {
        "class_name": "SCR_BoardingEntityWaypoint",
        "methods": [
          "GetEntityName",
          "SetEntityName",
          "SetEntity",
          "GetEntity"
        ]
      },
      {
        "class_name": "SCR_BoardingTimedWaypoint",
        "methods": [
          "GetHoldingTime",
          "SetHoldingTime"
        ]
      },
      {
        "class_name": "SCR_AIBoardingWaypointParameters",
        "methods": [
          "SCR_AIBoardingWaypointParameters",
          "GetParameters",
          "SetParameters"
        ]
      },
      {
        "class_name": "SCR_BoardingWaypoint",
        "methods": [
          "GetAllowance",
          "SetAllowance"
        ]
      },
      {
        "class_name": "SCR_DefendWaypoint",
        "methods": [
          "GetUseTurrets",
          "GetCurrentDefendPreset",
          "GetFractionOfSA",
          "SetCurrentDefendPreset",
          "GetFastInit",
          "SetFastInit",
          "CreateWaypointState",
          "SCR_AIDefendWaypointState"
        ]
      },
      {
        "class_name": "SCR_AIDefendWaypointState",
        "methods": [
          "OnDeselected"
        ]
      },
      {
        "class_name": "SCR_DeploySmokeCoverWaypoint",
        "methods": [
          "GetMaxGrenadeCount",
          "GetSmokeCoverProperties",
          "CreateWaypointState",
          "SCR_DeploySmokeCoverWaypointState"
        ]
      },
      {
        "class_name": "SCR_DeploySmokeCoverWaypointState",
        "methods": [
          "OnSelected"
        ]
      },
      {
        "class_name": "SCR_AIEntityWaypointParameters",
        "methods": [
          "GetEntityName",
          "SetEntityName",
          "SetEntity",
          "GetEntity"
        ]
      },
      {
        "class_name": "SCR_EntityWaypoint",
        "methods": [
          "GetEntityName",
          "SetEntityName",
          "SetEntity",
          "GetEntity"
        ]
      },
      {
        "class_name": "SCR_SuppressWaypoint",
        "methods": [
          "GetSuppressionHeight",
          "CreateWaypointState",
          "SCR_SuppressWaypointState"
        ]
      },
      {
        "class_name": "SCR_SuppressWaypointState",
        "methods": [
          "OnSelected"
        ]
      },
      {
        "class_name": "SCR_AITimedWaypointParameters",
        "methods": [
          "GetParameters",
          "SetParameters"
        ]
      },
      {
        "class_name": "SCR_TimedWaypoint",
        "methods": [
          "GetHoldingTime",
          "SetHoldingTime"
        ]
      },
      {
        "class_name": "SCR_TransportWaypoint",
        "methods": [
          "GetWaitForBoardingTime",
          "SetWaitForBoardingTime",
          "SetDriver",
          "GetDriver",
          "GetVehicle"
        ]
      },
      {
        "class_name": "SCR_AICalculateCoverQueryProps_CombatMove",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "ResolveThreatPos",
          "VisibleInPalette",
          "GetVariablesIn",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AICalculateNextCombatMovePos",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "GetVariablesOut",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveLogicBase",
        "methods": [
          "OnUpdate",
          "ResolveRequestTargetPos",
          "ResolveFailMoveIfNoCover",
          "ResolveStoppedWaitTime",
          "GetTargetPosition",
          "GetTargetDistance",
          "MoveToNextPosCondition",
          "OnInit",
          "EOnTaskSimulate",
          "SuppressedInCoverLogic",
          "PushRequestMoveFromTarget",
          "PushRequestLeaveUselessCover",
          "PushRequestFFAvoidance",
          "PushRequestMove",
          "FFAvoidanceCondition",
          "FFAvoidanceNewRequestCondition",
          "PushRequestFFAvoidance",
          "PushRequestMove",
          "ResolveMoveRequestMovePosAndDir",
          "IsAimingAndMovingAllowedForWeapon",
          "OnMovementStarted",
          "OnMovementCompleted",
          "ResolveMoveRequestMovePosAndDir",
          "SuppressedInCoverCondition",
          "SuppressedInCoverLogic",
          "PushRequestChangeStanceInCover",
          "PushRequestChangeStanceInCover",
          "PushRequestChangeStanceInCover",
          "CurrentCoverUselessCondition",
          "PushRequestLeaveUselessCover",
          "MoveFromTargetCondition",
          "MoveFromTargetNewRequestCondition",
          "PushRequestMoveFromTarget",
          "ResolveStanceOutsideCover",
          "ResolveOptimalDistance",
          "IsAimingAndMovingAllowedForWeapon",
          "IsFirstExecution",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveLogic_Attack",
        "methods": [
          "OnUpdate",
          "GetVariableIn",
          "GetTargetDistance",
          "GetTargetPosition",
          "ResolveRequestTargetPos",
          "ResolveFailMoveIfNoCover",
          "ResolveStoppedWaitTime",
          "MoveToNextPosCondition",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveLogic_Suppressive",
        "methods": [
          "OnUpdate",
          "GetVariableIn",
          "GetTargetDistance",
          "GetTargetPosition",
          "ResolveRequestTargetPos",
          "ResolveFailMoveIfNoCover",
          "ResolveStoppedWaitTime",
          "MoveToNextPosCondition",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveLogic_HideFromUnknownFire",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "CombatMoveLogic",
          "CombatMoveLogic",
          "PushRequesChangeStanceInCover",
          "PushRequesChangeStanceInCover",
          "PushRequestChangeStanceOutsideCover",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveLogic_MoveFromGrenade",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "CombatMoveLogic",
          "SetVariableOut",
          "CombatMoveLogic",
          "ConditionPushMoveRequest",
          "IsCoverSafeAgainstGrenade",
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveLogic_MoveFromIncomingVehicle",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "CombatMoveLogic",
          "CombatMoveLogic",
          "ConditionPushMoveRequest",
          "CalculateVehicleAvoidDirection",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveLogic_MovingCommander",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "PushRequestMoveFromTarget",
          "PushRequestFFAvoidance",
          "PushRequestMove",
          "MoveFromTargetCondition",
          "MoveFromTargetNewRequestCondition",
          "PushRequestMoveFromTarget",
          "PushRequestMove",
          "ResolveMoveRequestMovePosAndDir",
          "OnMovementStarted",
          "OnMovementCompleted",
          "ResolveMoveRequestMovePosAndDir",
          "FFAvoidanceCondition",
          "FFAvoidanceNewRequestCondition",
          "PushRequestFFAvoidance",
          "UpdateDriverAndTarget",
          "GetVariableIn",
          "GetTargetDistance",
          "ResolveRequestTargetPos",
          "ResolveStoppedWaitTime",
          "MoveToNextPosCondition",
          "ResolveOptimalDistance",
          "IsFirstExecution",
          "VisibleInPalette",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveRequestBase",
        "methods": [
          "SCR_AICombatMoveRequest_OnCompleted",
          "SCR_AICombatMoveRequest_OnFailed",
          "SCR_AICombatMoveRequest_Move_MovementEvent"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveRequest_Move",
        "methods": [
          "SCR_AICombatMoveRequest_Move"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveRequest_Stop",
        "methods": [
          "SCR_AICombatMoveRequest_Stop"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveRequest_ChangeStanceInCover",
        "methods": [
          "SCR_AICombatMoveRequest_ChangeStanceInCover"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveRequest_ChangeStance",
        "methods": [
          "SCR_AICombatMoveRequest_ChangeStance"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveRequest_Move_InvokeOnMovementStarted",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveState",
        "methods": [
          "AssignCover",
          "ReleaseCover",
          "ApplyNewRequest",
          "CancelRequest",
          "EnableAiming",
          "VerifyCurrentCover",
          "ReleaseCover",
          "IsMoving",
          "IsMoving",
          "IsMovingToCover",
          "IsInValidCover",
          "IsHidingInValidCover",
          "IsExecutingRequest",
          "GetRequest",
          "GetAssignedCover",
          "IsAssignedCoverValid",
          "ApplyRequestChangeStanceOutsideCover",
          "ApplyNewRequest",
          "ApplyRequestChangeStanceInCover",
          "ApplyNewRequest"
        ]
      },
      {
        "class_name": "SCR_AICombatMoveUtils",
        "methods": [
          "CalculateMoveDirection",
          "IsAimingAndMovementPossible"
        ]
      },
      {
        "class_name": "SCR_AICreateBasicCoverQueryProps",
        "methods": [
          "EOnTaskSimulate",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesIn",
          "GetVariablesOut",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AICreateDefendBehaviorCoverQueryProps",
        "methods": [
          "EOnTaskSimulate",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesIn",
          "GetVariablesOut",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoCombatMove_AimingAllowed",
        "methods": [
          "TestFunction",
          "GetOnHoverDescription",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIDecoCombatMove_Moving",
        "methods": [
          "TestFunction",
          "GetOnHoverDescription",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIEndProcessCombatMoveRequest",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetCombatMoveRequestParametersBase",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetCombatMoveRequestParameters_Move",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetCombatMoveRequestParameters_Step",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetCombatMoveRequestParameters_ChangeStanceInCover",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetCombatMoveRequestParameters_ChangeStance",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetCombatMoveState",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIProcessCombatMoveRequest",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "GetVariablesOut",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIResetCombatMoveState",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AISetCombatMoveRequestState",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AISetCombatMoveRequestFailReason",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AISetCombatMoveState",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIUpdateCombatMoveStateTimers",
        "methods": [
          "OnInit",
          "OnAbort",
          "EOnTaskSimulate",
          "GetVariableIn",
          "VisibleInPalette",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIWaitCombatMoveRequest",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "GetVariablesOut",
          "CanReturnRunning",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction",
        "methods": [
          "PerformReaction",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction_DamageTaken",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction_DoorMovement",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction_Explosion",
        "methods": [
          "CreateObserveUnknownBehavior",
          "PerformReaction",
          "CreateObserveUnknownBehavior"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction_GrenadeLanding",
        "methods": [
          "GetGrenadeVisibilityFactor",
          "GetThreatLevelReactionTime",
          "GetDistanceSQReactionTime",
          "GetOwnerFaction",
          "GetShooterCharacter",
          "AddToGroupPerception",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction_MeleeDamageTaken",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction_ProjectileHit",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction_StartedBleeding",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction_Vehicle",
        "methods": [
          "PerformReaction",
          "VehicleIntersectsMyPath",
          "MovingPointSphereIntersectionTest"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction_VehicleHorn",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIDangerReaction_WeaponFired",
        "methods": [
          "PerformReaction",
          "NotifyGroup",
          "NotifyGroup",
          "IsFlyby"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction",
        "methods": [
          "PerformReaction",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_Attack",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_AttackCluster",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_AttackClusterDone",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_CoverCluster",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_Move",
        "methods": [
          "PerformReaction",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_Follow",
        "methods": [
          "PerformReaction",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_Investigate",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_MoveInFormation",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_GetInVehicle",
        "methods": [
          "PerformReaction",
          "PrintFormat",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_GetOutVehicle",
        "methods": [
          "PerformReaction",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_SeekAndDestroy",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_Heal",
        "methods": [
          "PerformReaction",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_HealWait",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_Defend",
        "methods": [
          "PerformReaction",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_PerformAction",
        "methods": [
          "PerformReaction",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_OpenNavlinkDoor",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_Cancel",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_ThrowGrenadeTo",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_FireIllumFlareAt",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_ProvideAmmo",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_PickupInventoryItems",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIGoalReaction_Suppress",
        "methods": [
          "PerformReaction",
          "UpdateLastSeenPosition2"
        ]
      },
      {
        "class_name": "SCR_AIInfoReaction",
        "methods": [
          "PerformReaction",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIInfoReaction_NoAmmo",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIInfoReaction_Wounded",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIReactionBase",
        "methods": [
          "PerformReaction",
          "PerformReaction",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AIWaitReaction",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AIIdleReaction",
        "methods": [
          "PerformReaction",
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AITargetReactionBase",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AITargetReaction_SelectedTargetChangedBase",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AITargetReaction_Unknown",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AITargetReaction_RetreatFromEnemy",
        "methods": [
          "PerformReaction"
        ]
      },
      {
        "class_name": "SCR_AITargetReaction_SelectedTargetChanged",
        "methods": [
          "PerformReaction",
          "ReportPreviousTarget",
          "CreateAttackActionForTarget",
          "CreateAttackActionForTarget",
          "ReportPreviousTarget",
          "AddDebugMessage",
          "AddDebugMessage",
          "AddDebugMessage",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AIGetAimDistanceCompensation",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut",
          "GetVariablesOut",
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetAimErrorOffset",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "ClearPorts",
          "ClearPorts",
          "ClearPorts",
          "GetTargetAngularBounds",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "ClearPorts",
          "ClearVariable",
          "ClearVariable",
          "ClearVariable",
          "GetTargetAngularBounds",
          "GetDistanceFactor",
          "GetTargetIlluminationFactor",
          "GetRandomFactor",
          "GetTolerance",
          "GetAngularSpeedFactor",
          "GetWeaponTypeFactor",
          "GetOffsetWeaponTypeFactor",
          "GetAimPoint",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetFireTimes",
        "methods": [
          "OnInit",
          "GetVariablesIn",
          "GetFireRateFactor",
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetSuppressionPosition",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut",
          "GetOnHoverDescription",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIAllowLookAction",
        "methods": [
          "OnEnter",
          "EOnTaskSimulate",
          "OnAbort",
          "VisibleInPalette",
          "CanReturnRunning",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIActionTask",
        "methods": [
          "OnEnter",
          "NodeError",
          "GetExecutedAction"
        ]
      },
      {
        "class_name": "SCR_AICompleteAction",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AICompleteLookAction",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIDecoHasActionOfType",
        "methods": [
          "TestFunction",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestActivityIsFollow",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestDoorIsOpen",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestDoorIsOpenWithSiblings",
        "methods": [
          "TestFunction",
          "FindDoorComponents",
          "FindDoorComponents"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsAvailable",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIFailAction",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIFollowEntityPath",
        "methods": [
          "VisibleInPalette",
          "OnEnter",
          "GetVariableIn",
          "EOnTaskSimulate",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIGetFlyHelicopterParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetActionParameters",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetGetInVehicleBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetOutVehicleBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetGetInActivityParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetGetOutActivityParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetMoveActivityParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetFollowActivityParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetDefendActivityParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetDefendBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetAttackBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetPerformActionBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetPerformActionActivityParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetResupplyActivityParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetInvestigateBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetHealWaitBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetMedicHealBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetMoveFromDangerBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetMoveIndividuallyBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette",
          "EOnTaskSimulate"
        ]
      },
      {
        "class_name": "SCR_AIGetRetreatWhileLookAtBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetThrowGrenadeToBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIFireIllumFlareBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetSuppressBehaviorParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetSuppressActivityParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetLookParameters",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "OnInit",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AISetActionParameters",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISetMoveActivityParameters",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISetGetInActivityParameters",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISetDefendActivityParameters",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISetAttackBehaviorParameters",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISetBehaviorAllowLook",
        "methods": [
          "OnEnter",
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AISetBehaviorInterruptable",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AISuspendAction",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDebugCounter",
        "methods": [
          "GetVariablesIn",
          "OnAbort",
          "GetVariableIn",
          "SetVariableOut",
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "VisibleInPalette",
          "CanReturnRunning",
          "GetOnHoverDescription",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AIDebugTask",
        "methods": [
          "GetVariablesIn",
          "PrintInternal",
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AIDecoProfiler",
        "methods": [
          "GetOnHoverDescription",
          "VisibleInPalette",
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDrawDebugSphere",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDrawDebugVector",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetSplinePoint",
        "methods": [
          "GetVariablesIn",
          "GetVariablesOut",
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIPrintDebug",
        "methods": [
          "PrintInternal",
          "VisibleInPalette",
          "EOnTaskSimulate",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIVisualizeDebug",
        "methods": [
          "PrintInternal",
          "OnInit",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_Cancel",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_Attack",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_AttackCluster",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_AttackClusterDone",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_KeepFormation",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_Move",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_Follow",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_Investigate",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_SeekAndDestroy",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_Heal",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_ProvideAmmo",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_PickupInventoryItems",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_Defend",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_Retreat",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_HealWait",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_PerformAction",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_OpenNavlinkDoor",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_GetIn",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_GetOut",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_Flee",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_ThrowGrenadeTo",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_FireIllumFlareAt",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage_Suppress",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendInfoMessage_Target",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendInfoMessage_NoAmmo",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendInfoMessage_UnderFire",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendInfoMessage_FoundCorpse",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendInfoMessage_Wounded",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendInfoMessage_SitRep",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendInfoMessage_HealFailed",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendOrder_Stance",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendOrder_WeaponRaised",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendOrder_MovementType",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendOrder_ReturnToDefault",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendOrder_WeaponType",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendOrder_AIState",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendOrder_UnitState",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendOrder_CombatType",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIAllocateActionsForDefendActivity",
        "methods": [
          "VisibleInPalette",
          "OnInit",
          "SCR_AgentMustBeAIGroup",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "NodeError",
          "OccupyTurret",
          "OccupySA",
          "OccupyTurret",
          "OccupySA",
          "GetVariablesIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIClearActionsForDefendActivity",
        "methods": [
          "VisibleInPalette",
          "OnInit",
          "SCR_AgentMustBeAIGroup",
          "OnEnter",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariablesIn",
          "GetOnHoverDescription",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AIDecideActivity",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "NodeError",
          "SetVariableOut",
          "SetVariableOut",
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIDecoIsGroupInitializing",
        "methods": [
          "TestFunction",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoOnWaypointChanged",
        "methods": [
          "GetVariablesOut",
          "TestFunction",
          "SCR_AgentMustBeAIGroup",
          "SetVariableOut",
          "ClearVariable",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsAgentInGroup",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsGroup",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsSlaveGroupOfEntity",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsWaypoint",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIFindSmartActions",
        "methods": [
          "VisibleInPalette",
          "OnInit",
          "NodeError",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "GetVariablesOut",
          "GetVariablesIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIFindTurrets",
        "methods": [
          "VisibleInPalette",
          "OnInit",
          "NodeError",
          "NodeError",
          "EOnTaskSimulate",
          "ClearVariable",
          "ClearVariable",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut",
          "ClearVariable",
          "SetVariableOut",
          "GetVariablesOut",
          "GetVariablesIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetMemberByGoal",
        "methods": [
          "VisibleInPalette",
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "ClearVariable",
          "SetVariableOut",
          "ClearVariable",
          "ClearVariable",
          "CanReturnRunning",
          "GetVariablesOut",
          "GetVariablesIn",
          "GetNodeMiddleText",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetMyGroup",
        "methods": [
          "VisibleInPalette",
          "GetVariablesOut",
          "OnInit",
          "NodeError",
          "EOnTaskSimulate",
          "SetVariableOut"
        ]
      },
      {
        "class_name": "SCR_AIGetOverwatchMembers",
        "methods": [
          "VisibleInPalette",
          "OnInit",
          "EOnTaskSimulate",
          "ClearVariable",
          "ClearVariable",
          "NodeError",
          "NodeError",
          "SetVariableOut",
          "SetVariableOut",
          "ClearVariable",
          "CanReturnRunning",
          "GetVariablesOut",
          "GetVariablesIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIOnWaypointPropertiesChange",
        "methods": [
          "OnEnter",
          "EOnTaskSimulate",
          "SCR_AgentMustBeAIGroup",
          "OnCurrentWaypointChanged",
          "OnWaypointPropertiesChanged",
          "OnAbort",
          "GetOnHoverDescription",
          "VisibleInPalette",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AIProcessFailedMovementResult",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "NodeError",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "FailAction",
          "FailAction",
          "CompleteWaypoint",
          "FailAction",
          "PrintDebug",
          "FailAction",
          "CompleteWaypoint",
          "CanReturnRunning",
          "GetVariablesOut",
          "GetVariablesIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISetGroupControlMode",
        "methods": [
          "OnInit",
          "NodeError",
          "NodeError",
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AIDeploySmokeCover",
        "methods": [
          "VisibleInPalette",
          "OnInit",
          "EOnTaskSimulate",
          "CanReturnRunning",
          "GetVariablesOut",
          "GetVariablesIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoHasMagazineCount",
        "methods": [
          "GetVariablesOut",
          "OnInit",
          "TestFunction",
          "SetVariableOut",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoHasWeaponOfType",
        "methods": [
          "GetVariablesIn",
          "GetVariablesOut",
          "OnInit",
          "TestFunction",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestHasMagazines",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDropMagazines",
        "methods": [
          "GetVariablesIn",
          "OnInit",
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIPickMagazines",
        "methods": [
          "GetVariablesIn",
          "OnInit",
          "EOnTaskSimulate",
          "PrintFormat",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISpawnMagazines",
        "methods": [
          "GetVariablesIn",
          "OnInit",
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIToggleFlashlights",
        "methods": [
          "GetOnHoverDescription",
          "OnInit",
          "GetNodeMiddleText",
          "ToggleFlashlights",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIToggleFlashlightsOnSimulate",
        "methods": [
          "EOnTaskSimulate",
          "ToggleFlashlights",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIToggleFlashlightsOnAbort",
        "methods": [
          "OnAbort",
          "ToggleFlashlights",
          "EOnTaskSimulate",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "DecoratorScripted_IsEqual",
        "methods": [
          "TestFunction",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIDecoDistanceHysteresis",
        "methods": [
          "OnInit",
          "TestFunction",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetVariablesIn",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AIDecoVectorDistance",
        "methods": [
          "GetVariablesIn",
          "GetOnHoverDescription",
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AITaskTimer",
        "methods": [
          "OnEnter",
          "GetVariableIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetVariablesIn",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AITaskTimerGate",
        "methods": [
          "OnEnter",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AIMessageBase",
        "methods": [
          "SetText",
          "SetReceiver",
          "GetDebugText",
          "SetMessageParameters",
          "GetDebugText",
          "GetDebugText",
          "SetMessageParameters",
          "SCR_AIMessage_NoAmmo",
          "SetMessageParameters",
          "Create",
          "SCR_AIMessage_UnderFire",
          "SetMessageParameters",
          "SCR_AIMessage_FoundCorpse",
          "SetMessageParameters",
          "SCR_AIMessage_Wounded",
          "Create",
          "SetMessageParameters",
          "SCR_AIMessage_SitRep"
        ]
      },
      {
        "class_name": "SCR_AIMessage_ActionFailed",
        "methods": [
          "SCR_AIMessage_ActionFailed",
          "SCR_AIMessage_HealFailed",
          "SCR_AIMessage_Cancel",
          "Create",
          "SCR_AIMessage_Attack",
          "SetMessageParameters",
          "SCR_AIMessage_AttackCluster",
          "Create",
          "SCR_AIMessage_AttackClusterDone",
          "Create"
        ]
      },
      {
        "class_name": "SCR_AIMessage_CoverCluster",
        "methods": [
          "SCR_AIMessage_CoverCluster",
          "SCR_AIMessage_KeepFormation",
          "SCR_AIMessage_Move",
          "SetMessageParameters",
          "Create",
          "SCR_AIMessage_Follow",
          "SetMessageParameters",
          "SCR_AIMessage_Investigate",
          "Create",
          "SetMessageParameters",
          "SCR_AIMessage_SeekAndDestroy",
          "SCR_AIMessage_Heal",
          "SCR_AIMessage_ProvideAmmo",
          "SetMessageParameters",
          "SCR_AIMessage_PickupInventoryItems",
          "SetMessageParameters",
          "SCR_AIMessage_Defend",
          "SetMessageParameters",
          "Create",
          "SCR_AIMessage_Retreat",
          "SCR_AIMessage_HealWait",
          "SetMessageParameters",
          "SCR_AIMessage_PerformAction",
          "SetMessageParameters",
          "Create",
          "SCR_AIMessage_OpenNavlinkDoor",
          "SCR_AIMessage_GetIn",
          "Create",
          "SCR_AIMessage_GetOut",
          "Create",
          "SCR_AIMessage_Flee",
          "SCR_AIMessage_ThrowGrenadeTo",
          "Create",
          "SCR_AIMessage_FireIllumFlareAt",
          "Create",
          "SCR_AIMessage_Suppress",
          "Create"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessage",
        "methods": [
          "EOnTaskSimulate",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISendInfoMessage",
        "methods": [
          "EOnTaskSimulate",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISendMessage_ActionFailed",
        "methods": [
          "EOnTaskSimulate",
          "NodeError",
          "SendMessage",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendMessage_HealFailed",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "GetVariableIn",
          "SendMessage",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendMessageBase",
        "methods": [
          "GetVariablesIn",
          "OnInit",
          "InitSendMessageInputs",
          "GetVariableIn",
          "SendMessage",
          "PrintFormat"
        ]
      },
      {
        "class_name": "SCR_AISendMessageGeneric",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "InitSendMessageInputs",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AITalk",
        "methods": [
          "EOnTaskSimulate",
          "Reset",
          "Reset",
          "Reset",
          "GetCallstackStr",
          "Reset",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "Reset",
          "FindCommsHandler",
          "OnAbort",
          "Reset",
          "Reset",
          "VisibleInPalette",
          "GetVariablesIn",
          "CanReturnRunning",
          "_print"
        ]
      },
      {
        "class_name": "SCR_AIProcessOrder",
        "methods": [
          "EOnTaskSimulate",
          "SetVariableOut",
          "ClearVariable",
          "PrintFormat",
          "GetVariablesOut",
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AISendOrder",
        "methods": [
          "EOnTaskSimulate",
          "GetVariablesIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIActivateAllBirds",
        "methods": [
          "EOnTaskSimulate",
          "NodeError",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AIDayNightTest",
        "methods": [
          "GetOnHoverDescription",
          "OnInit",
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIIsValidAction",
        "methods": [
          "TestFunction",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIUpdateExecutedAction",
        "methods": [
          "VisibleInPalette",
          "EOnTaskSimulate",
          "OnEnter",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISemaphoreIn",
        "methods": [
          "VisibleInPalette",
          "GetVariablesIn",
          "GetNodeMiddleText",
          "OnEnter",
          "GetVariableIn",
          "EOnTaskSimulate"
        ]
      },
      {
        "class_name": "SCR_LockContextComponent",
        "methods": [
          "IsKeyRegistered",
          "SCR_LockContextComponent",
          "JoinKey",
          "LeaveKey"
        ]
      },
      {
        "class_name": "SCR_AIChangeUnitState",
        "methods": [
          "VisibleInPalette",
          "EOnTaskSimulate",
          "SCR_AgentMustChimera",
          "GetNodeMiddleText",
          "GetVariablesIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AICharacterLeanOnAbort",
        "methods": [
          "VisibleInPalette",
          "CanReturnRunning",
          "OnEnter",
          "EOnTaskSimulate",
          "OnAbort",
          "NodeError",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AICharacterStats",
        "methods": [
          "OnInit",
          "SCR_AgentMustChimera",
          "NodeError"
        ]
      },
      {
        "class_name": "SCR_AICombatTargetGetterTask",
        "methods": [
          "OnInit",
          "GetEnemy",
          "EOnTaskSimulate",
          "Fail",
          "Fail",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "Fail",
          "SetVariableOut",
          "ClearVariable",
          "ClearVariable",
          "ClearVariable",
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetCurrentEnemy",
        "methods": [
          "GetOnHoverDescription",
          "GetEnemy",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetLastSeenEnemy",
        "methods": [
          "GetOnHoverDescription",
          "GetEnemy",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIDecideBehavior",
        "methods": [
          "OnInit",
          "NodeError",
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "GetVariablesOut",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIDecoCombatAllowance",
        "methods": [
          "OnInit",
          "NodeError",
          "TestFunction",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AIDecoCombatEnemy",
        "methods": [
          "GetEnemy",
          "TestFunction",
          "OnInit",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIDecoCurrentEnemy",
        "methods": [
          "GetEnemy",
          "GetOnHoverDescription",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIDecoLastSeenEnemy",
        "methods": [
          "GetEnemy",
          "GetOnHoverDescription",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIDecoCombatMoveControl",
        "methods": [
          "GetVariablesOut",
          "GetVariablesIn",
          "OnInit",
          "TestFunction",
          "SetVariableOut",
          "GetVariableIn",
          "SetVariableOut",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoHasRole",
        "methods": [
          "TestFunction",
          "SCR_AgentMustChimera",
          "NodeError",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AIDecoIsAboveThreatLevel",
        "methods": [
          "OnInit",
          "SCR_AgentMustChimera",
          "TestFunction",
          "GetOnHoverDescription",
          "GetNodeMiddleText",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIDecoMachinegunnerBipod",
        "methods": [
          "GetVariablesIn",
          "OnInit",
          "TestFunction",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoSuppressiveFire",
        "methods": [
          "TestFunction",
          "GetVariableIn",
          "VisibleInPalette",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsEnteringOrLeavingVehicle",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsLeader",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTimeSinceTargetDetected",
        "methods": [
          "TestFunction",
          "GetVariableIn",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIFindTagetToLookAt",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetCombatMovementParameters",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "OnInit",
          "NodeError",
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut"
        ]
      },
      {
        "class_name": "SCR_AIGetCoverIdleDuration",
        "methods": [
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "OnInit",
          "NodeError",
          "EOnTaskSimulate",
          "SetVariableOut"
        ]
      },
      {
        "class_name": "SCR_AIGetSmartActionSentinelParams",
        "methods": [
          "VisibleInPalette",
          "GetVariablesIn",
          "GetVariablesOut",
          "EOnTaskSimulate",
          "NodeError",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "ClearVariable"
        ]
      },
      {
        "class_name": "SCR_AIGetStanceFromThreat",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetTarget",
        "methods": [
          "VisibleInPalette",
          "GetNodeMiddleText",
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIIsFriendlyInAim",
        "methods": [
          "TestFunction",
          "OnInit",
          "NodeError",
          "NodeError",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIIsTargetVisible",
        "methods": [
          "TestFunction",
          "GetVariableIn",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AILimitStance",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesOut",
          "GetVariablesIn",
          "GetNodeMiddleText",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AILookAtPosition",
        "methods": [
          "VisibleInPalette",
          "EOnTaskSimulate",
          "NodeError",
          "NodeError",
          "ClearVariable",
          "SetVariableOut",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIOpenDoor",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "FindDoorActions",
          "FindDoorActions",
          "FindDoorUserAction",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIPerformSmartHealing",
        "methods": [
          "OnEnter",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetActions",
          "OnAbort",
          "OnItemUseBegan",
          "OnItemUseEnded",
          "GetActions",
          "GetTargetGroup",
          "GetVariablesIn",
          "VisibleInPalette",
          "CanReturnRunning",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIPerformSmartUserAction",
        "methods": [
          "GetVariablesIn",
          "OnInit",
          "EOnTaskSimulate",
          "PerformAction",
          "PerformAction",
          "GetVariableIn",
          "GetActions",
          "OnAbort",
          "PerformAction",
          "GetActions",
          "VisibleInPalette",
          "CanReturnRunning",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIPlayItemGesture",
        "methods": [
          "GetOnHoverDescription",
          "VisibleInPalette",
          "EOnTaskSimulate"
        ]
      },
      {
        "class_name": "SCR_AISelectFireMode",
        "methods": [
          "EOnTaskSimulate",
          "GetNodeMiddleText",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISetAIState",
        "methods": [
          "VisibleInPalette",
          "EOnTaskSimulate",
          "SCR_AgentMustChimera",
          "GetOnHoverDescription",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AISetCombatType",
        "methods": [
          "OnInit",
          "NodeError",
          "NodeError",
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISetGadgetRaisedMode",
        "methods": [
          "VisibleInPalette",
          "OnInit",
          "EOnTaskSimulate",
          "OnAbort",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISetStance",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "OnInit",
          "NodeError"
        ]
      },
      {
        "class_name": "SCR_AISetWeaponRaised",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "OnInit",
          "NodeError"
        ]
      },
      {
        "class_name": "SCR_AITakeGadgetInLeftHand",
        "methods": [
          "GetVariablesOut",
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "Reset",
          "ClearVariable",
          "Reset",
          "Reset",
          "OnAbort",
          "Reset",
          "FindItem",
          "EquipInventoryItem",
          "IsItemEquipped",
          "GetNodeMiddleText",
          "VisibleInPalette",
          "CanReturnRunning",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIToggleMaxLOD",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "ToggleMaxLOD",
          "ToggleMaxLOD",
          "NodeError",
          "OnAbort",
          "ToggleMaxLOD",
          "GetVariablesIn",
          "CanReturnRunning",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIUnEquipItems",
        "methods": [
          "OnInit",
          "NodeError",
          "OnEnter",
          "EOnTaskSimulate",
          "OnAbort",
          "GetNodeMiddleText",
          "VisibleInPalette",
          "CanReturnRunning",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIUpdateTargetAttackData",
        "methods": [
          "OnInit",
          "OnAbort",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "ResolveAimpointTypes",
          "SetVariableOut",
          "SetVariableOut",
          "ResolveFireTree",
          "WeaponHasBurstOrAutoMode",
          "ResolveAimpointTypes",
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIUpdateTargetSuppressionData",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "CheckTargetVisibility",
          "ResolveFireTree",
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISetSmartActionReserved",
        "methods": [
          "EOnTaskSimulate",
          "NodeError",
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIBaseTargetToTargetInfo",
        "methods": [
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "EOnTaskSimulate",
          "NodeError",
          "SetVariableOut"
        ]
      },
      {
        "class_name": "SCR_AICheckEntityStance",
        "methods": [
          "OnInit",
          "SCR_AgentMustBeAIGroup",
          "EOnTaskSimulate",
          "NodeError",
          "NodeError",
          "SetVariableOut",
          "OnAbort",
          "VisibleInPalette",
          "GetVariablesOut",
          "GetVariablesIn",
          "GetOnHoverDescription",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AICreateTargetInfo",
        "methods": [
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "EOnTaskSimulate",
          "NodeError",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut"
        ]
      },
      {
        "class_name": "SCR_AIDecoIsArrayEmpty",
        "methods": [
          "VisibleInPalette",
          "TestFunction",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestCharacterWounded",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsMovingTowardsMe",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIGetBaseTargetProperties",
        "methods": [
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "EOnTaskSimulate"
        ]
      },
      {
        "class_name": "SCR_AIGetEntityPosition",
        "methods": [
          "VisibleInPalette",
          "GetOnHoverDescription",
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "GetVariablesIn",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetPosForward",
        "methods": [
          "OnInit",
          "NodeError",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut",
          "GetOnHoverDescription",
          "VisibleInPalette",
          "GetVariablesIn",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetPosForwardToTarget",
        "methods": [
          "OnInit",
          "NodeError",
          "NodeError",
          "NodeError",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "NodeError",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut",
          "GetOnHoverDescription",
          "DrawDebug",
          "VisibleInPalette",
          "GetVariablesIn",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetPositionAndRotation",
        "methods": [
          "VisibleInPalette",
          "EOnTaskSimulate",
          "GetVariableIn"
        ]
      },
      {
        "class_name": "SCR_AIGetRandomPoint",
        "methods": [
          "OnEnter",
          "NodeError",
          "NodeError",
          "EOnTaskSimulate",
          "NodeError",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetVariablesIn",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetRandomPointInCircularSector",
        "methods": [
          "VisibleInPalette",
          "EOnTaskSimulate",
          "NodeError",
          "NodeError",
          "SetVariableOut",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetRandomPointWithExclude",
        "methods": [
          "VisibleInPalette",
          "EOnTaskSimulate",
          "SetVariableOut",
          "FindPosition2D",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetSidePosition",
        "methods": [
          "OnEnter",
          "NodeError",
          "NodeError",
          "EOnTaskSimulate",
          "SetVariableOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetVariablesIn",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetSuppressionVolumeCenterPosition",
        "methods": [
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "EOnTaskSimulate",
          "GetVariableIn",
          "NodeError",
          "SetVariableOut",
          "SetVariableOut"
        ]
      },
      {
        "class_name": "SCR_AIGetSuppressionVolumeLine",
        "methods": [
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "EOnTaskSimulate",
          "GetVariableIn",
          "NodeError",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut"
        ]
      },
      {
        "class_name": "SCR_AIGetTargetInfoProperties",
        "methods": [
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut"
        ]
      },
      {
        "class_name": "SCR_AIGetTargetSuppressionVolume",
        "methods": [
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "OnInit",
          "EOnTaskSimulate",
          "NodeError",
          "SetVariableOut"
        ]
      },
      {
        "class_name": "SCR_AISetPosition",
        "methods": [
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "EOnTaskSimulate",
          "NodeError",
          "NodeError",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "NodeError",
          "NodeError",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AIChangeCompartment",
        "methods": [
          "GetVariablesIn",
          "OnInit",
          "OnEnter",
          "EOnTaskSimulate",
          "UpdateCompartmentSwitchState",
          "UpdateCompartmentSwitchState",
          "EjectOccupant",
          "VisibleInPalette",
          "CanReturnRunning",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoAreVehiclesBurning",
        "methods": [
          "TestFunction",
          "GetVariableIn",
          "ReturnVariables",
          "ReturnVariables",
          "ClearVariable",
          "ReturnVariables",
          "SetVariableOut",
          "ClearVariable",
          "VisibleInPalette",
          "GetVariablesIn",
          "GetVariablesOut",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoIsCompartmentTypeAllowed",
        "methods": [
          "TestFunction",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestAreAllocatedCompartmentsOccupied",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestCanGroupDriveVehicle",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestDriverAliveInsideVehicle",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsEntityBurning",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsInTurret",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsInVehicle",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsInVehicleCondition",
        "methods": [
          "TestFunction",
          "VehicleHasEmptyCompartments"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsOutOfVehicle",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsOutVehicleCondition",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIFindAvailableVehicle",
        "methods": [
          "OnInit",
          "SCR_AgentMustBeAIGroup",
          "EOnTaskSimulate",
          "SetVariablesOut",
          "GetVariableIn",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariablesOut",
          "ClearVariable",
          "ClearVariable",
          "HasNoAvailableCompartment",
          "FilterEntities",
          "SetVariablesOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "GetVariablesOut",
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetAllowedLookRange",
        "methods": [
          "GetVariablesOut",
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetCarAvoidPosition",
        "methods": [
          "VisibleInPalette",
          "GetOnHoverDescription",
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "GetVariablesIn",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetCompartmentEntityInComposition",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "FindComponentsInAllChildren",
          "SetVariableOut",
          "NodeError",
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetEmptyCompartment",
        "methods": [
          "OnEnter",
          "GetVariableIn",
          "EOnTaskSimulate",
          "ClearVariable",
          "NodeError",
          "NodeError",
          "GetVariableIn",
          "ClearVariable",
          "ClearVariable",
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetFailedNavlinkEntity",
        "methods": [
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut",
          "GetVariablesOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIGetUsableVehicle",
        "methods": [
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut",
          "ClearVariable",
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AILeaveStaticVehicles",
        "methods": [
          "OnEnter",
          "SCR_AgentMustBeAIGroup",
          "EOnTaskSimulate",
          "Testing_State",
          "SendingMessages_State",
          "Waiting_State",
          "Finished_State",
          "Testing_State",
          "SendingMessages_State",
          "Waiting_State",
          "Finished_State",
          "CancelOrders",
          "OnAbort",
          "CancelOrders",
          "CancelOrders",
          "OnAgentLifeStateChanged",
          "Testing_State",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AIOccupyDriversInUsedVehicles",
        "methods": [
          "OnEnter",
          "SCR_AgentMustBeAIGroup",
          "EOnTaskSimulate",
          "Testing_State",
          "SendingMessages_State",
          "Waiting_State",
          "Finished_State",
          "Testing_State",
          "SendingMessages_State",
          "Waiting_State",
          "Finished_State",
          "SetVariableOut",
          "CancelOrders",
          "OnAbort",
          "CancelOrders",
          "CancelOrders",
          "OnAgentLifeStateChanged",
          "Testing_State",
          "GetAgentThatIsConscious",
          "VisibleInPalette",
          "GetVariablesOut",
          "GetOnHoverDescription",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AIOccupyMovableVehicles",
        "methods": [
          "OnEnter",
          "SCR_AgentMustBeAIGroup",
          "EOnTaskSimulate",
          "Testing_State",
          "SendingMessages_State",
          "Waiting_State",
          "Finished_State",
          "Testing_State",
          "SendingMessages_State",
          "Waiting_State",
          "Finished_State",
          "CancelOrders",
          "OnAbort",
          "CancelOrders",
          "CancelOrders",
          "OnAgentLifeStateChanged",
          "Testing_State",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AIRemoveStuckVehicle",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISelectDoorOperatorAgent",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "GetVariablesOut",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AISetCarHandBrake",
        "methods": [
          "EOnTaskSimulate",
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISetCompartmentAccessible",
        "methods": [
          "OnEnter",
          "EOnTaskSimulate",
          "OnAbort",
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "SCR_AISetVehicleLights",
        "methods": [
          "EOnTaskSimulate",
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestVehicleIsMoving",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AICallOnExecuteWaypointTree",
        "methods": [
          "OnInit",
          "SCR_AgentMustBeAIGroup",
          "EOnTaskSimulate",
          "NodeError",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AICompleteWaypoint",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "SCR_AgentMustBeAIGroup",
          "GetVariableIn",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoIsEnemyWithinRadius",
        "methods": [
          "GetVariablesOut",
          "GetVariablesIn",
          "TestLocationOfKnownEnemies",
          "SetVariableOut",
          "TestFunction",
          "TestLocationOfKnownEnemies",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDecoIsWithinRadius",
        "methods": [
          "GetVariablesIn",
          "TestFunction",
          "SCR_AgentMustBeAIGroup",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetDefendWaypointParameters",
        "methods": [
          "GetVariablesOut",
          "EOnTaskSimulate",
          "NodeError",
          "SetVariableOut",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetEntityWaypointParameters",
        "methods": [
          "GetVariablesOut",
          "EOnTaskSimulate",
          "NodeError",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetInNearestWaypointParameters",
        "methods": [
          "GetVariablesOut",
          "EOnTaskSimulate",
          "NodeError",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetSmartActionComponent",
        "methods": [
          "VisibleInPalette",
          "GetVariablesIn",
          "GetVariablesOut",
          "EOnTaskSimulate",
          "SCR_AgentMustBeAIGroup",
          "SetVariableOut",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetSmartActionsState",
        "methods": [
          "GetVariablesIn",
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "NodeError",
          "UnregisterSmartActionsWithTag",
          "NodeError",
          "FindAllSmartActionComponents",
          "ResetVariables",
          "ResetVariables",
          "ResetVariables",
          "ResetVariables",
          "ResetVariables",
          "ResetVariables",
          "OnAbort",
          "ResetVariables",
          "FindAllSmartActionComponents",
          "RegisterSmartActionsWithTag",
          "UnregisterSmartActionsWithTag",
          "OnSmartActionEnd",
          "OnSmartActionFailed",
          "ResetVariables",
          "UnregisterSmartActionsWithTag",
          "VisibleInPalette",
          "CanReturnRunning",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetTimedWaypointParameters",
        "methods": [
          "GetVariablesOut",
          "EOnTaskSimulate",
          "NodeError",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetVehicleWaypointParameters",
        "methods": [
          "GetVariablesOut",
          "EOnTaskSimulate",
          "NodeError",
          "SetVariableOut",
          "NodeError",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetWaypointParameters",
        "methods": [
          "EOnTaskSimulate",
          "SCR_AgentMustBeAIGroup",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesIn",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIRemoveVehicleFromGetInActivity",
        "methods": [
          "EOnTaskSimulate",
          "SCR_AgentMustBeAIGroup",
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIRemoveVehicleFromGroup",
        "methods": [
          "EOnTaskSimulate",
          "NodeError",
          "GetVariablesIn",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISetDefendWaypointParameters",
        "methods": [
          "GetVariablesIn",
          "EOnTaskSimulate",
          "SCR_AgentMustBeAIGroup",
          "NodeError",
          "NodeError",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AICheckLowAmmo",
        "methods": [
          "GetVariablesIn",
          "GetVariablesOut",
          "OnInit",
          "EOnTaskSimulate",
          "GetVariableIn",
          "GetVariableIn",
          "SetVariableOut",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIDecoBallisticPath",
        "methods": [
          "TestFunction",
          "GetVariableIn",
          "GetVariableIn",
          "GetOnHoverDescription",
          "VisibleInPalette",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIDecoTestIsReloading",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "SCR_AIDecoWeaponUnobstructed",
        "methods": [
          "VisibleInPalette",
          "TestFunction",
          "OnInit",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIDropWeapon",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "NodeError",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIEvaluateExpectedWeapon",
        "methods": [
          "OnInit",
          "NodeError",
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIEvaluateSuppressionWeapon",
        "methods": [
          "OnInit",
          "NodeError",
          "EOnTaskSimulate",
          "GetVariableIn",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesOut",
          "GetVariablesIn"
        ]
      },
      {
        "class_name": "SCR_AIGetCombatComponentWeaponProperties",
        "methods": [
          "OnInit",
          "NodeError",
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIGetMagazineWell",
        "methods": [
          "VisibleInPalette",
          "OnInit",
          "EOnTaskSimulate",
          "GetVariablesOut",
          "GetOnHoverDescription",
          "GetWeaponMainMagazineWell"
        ]
      },
      {
        "class_name": "SCR_AIGetMuzzleMagazineWell",
        "methods": [
          "VisibleInPalette",
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut",
          "GetVariablesOut",
          "GetVariablesIn",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AIGetWeaponOfType",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesIn",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIInspectWeapon",
        "methods": [
          "OnInit",
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetNodeMiddleText",
          "OnAbort"
        ]
      },
      {
        "class_name": "SCR_AISetBipod",
        "methods": [
          "EOnTaskSimulate",
          "VisibleInPalette",
          "GetOnHoverDescription"
        ]
      },
      {
        "class_name": "SCR_AISwitchMagazine",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "AddDebugMessage",
          "AddDebugMessage",
          "AddDebugMessage",
          "AddDebugMessage",
          "AddDebugMessage",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISwitchMuzzle",
        "methods": [
          "EOnTaskSimulate",
          "GetVariableIn",
          "AddDebugMessage",
          "AddDebugMessage",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISwitchWeaponMovedCallback",
        "methods": [
          "SCR_AISwitchWeaponMovedCallback",
          "Invalidate",
          "OnComplete",
          "Invalidate",
          "OnFailed",
          "Invalidate"
        ]
      },
      {
        "class_name": "SCR_AISwitchWeapon",
        "methods": [
          "OnMoveWeaponFinished",
          "EOnTaskSimulate",
          "GetVariableIn",
          "AddDebugMessage",
          "AddDebugMessage",
          "AddDebugMessage",
          "AddDebugMessage",
          "AddDebugMessage",
          "AddDebugMessage",
          "OnAbort",
          "GetVariablesIn",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIWaitForNewCombatComponentWeapon",
        "methods": [
          "OnInit",
          "NodeError",
          "OnAbort",
          "EOnTaskSimulate",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "SetVariableOut",
          "VisibleInPalette",
          "GetVariablesOut"
        ]
      },
      {
        "class_name": "SCR_AIWeaponHandlingBase",
        "methods": [
          "OnInit",
          "NodeError",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AISendGoalMessageGenerated",
        "methods": [
          "GetRelatedActivity",
          "SendMessage",
          "GetReceiverAgent",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendMessageGenerated",
        "methods": [
          "GetRelatedActivity",
          "GetRelatedWaypoint",
          "SendMessage",
          "InitDebugData",
          "SendMessage",
          "InitDebugData",
          "InitDebugData",
          "GetParentTreeName",
          "GetReceiverAgent",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AISendOrderGenerated",
        "methods": [
          "SendMessage",
          "GetReceiverAgent",
          "VisibleInPalette"
        ]
      },
      {
        "class_name": "SCR_AIAgentDebugPanel",
        "methods": [
          "SCR_AIAgentDebugPanel",
          "Update",
          "ShowGroupUsableVehicles",
          "ShowPerceivableComponent",
          "ShowPerceptionEnemies",
          "ShowCombatMoveState",
          "GetActionString",
          "ShowPerceptionEnemies",
          "ShowPerceivableComponent",
          "ShowCombatMoveState",
          "ShowGroupUsableVehicles",
          "GetAgentDebugName",
          "EnumFlagsToString",
          "GetEntityShortName",
          "GetEntityShortNameWithPrefabName"
        ]
      },
      {
        "class_name": "SCR_AIDebug",
        "methods": [
          "GetInstance",
          "OnGameStart",
          "OnGameEnd",
          "GetBehaviorName",
          "DebugLog"
        ]
      },
      {
        "class_name": "SCR_AIDebugMessage",
        "methods": [
          "SCR_AIDebugMessage",
          "FormatMessage"
        ]
      },
      {
        "class_name": "SCR_AIDebugVisualization",
        "methods": [
          "Init",
          "GetInstance",
          "VisualizeMessage",
          "ShowAiAgentDebugPanel",
          "RemoveVisualization",
          "EOnDiag",
          "ShowAiAgentDebugPanel",
          "GetSelectedAiAgentOrEntity",
          "ShowPerceptionPanel",
          "ShowPerceptionPanel",
          "GetSelectedAiAgentOrEntity",
          "SCR_AIDebugVisualization",
          "SetEventMask",
          "ConnectToDiagSystem",
          "SetFlags",
          "DisconnectFromDiagSystem"
        ]
      },
      {
        "class_name": "SCR_AISendMessageDebugUI",
        "methods": [
          "Init",
          "SCR_AISendMessageDebugUI",
          "SetFlags",
          "SetEventMask",
          "EOnFrame",
          "Draw",
          "SendNoAmmoToGroup",
          "CreateInfoMessage",
          "BroadcastMessage",
          "GetSelectedAiEntity",
          "SendNoAmmoToGroup",
          "BroadcastMessage"
        ]
      },
      {
        "class_name": "SCR_AIWorldClass",
        "methods": [
          "ScriptInvoker_AIWorldControlModeChangedMethod"
        ]
      },
      {
        "class_name": "SCR_AIWorld",
        "methods": [
          "GetOnControlModeChanged",
          "RegisterDbgCategory",
          "EOnInit",
          "RegisterDbgCategory",
          "SetLimitOfActiveAIs",
          "OnDebugAgentTeleport",
          "PrintFormat",
          "OnDebugCameraTeleport",
          "PrintFormat",
          "AddedAIAgent",
          "RemovingAIAgent",
          "GetGoalMessageOfType",
          "GetInfoMessageOfType",
          "GetOrderMessageOfType",
          "RequestNavmeshRebuildAreas",
          "RequestNavmeshRebuild",
          "RequestNavmeshRebuildEntity",
          "GetNavmeshRebuildAreas",
          "RequestNavmeshRebuildAreas",
          "GetNavmeshRebuildAreas",
          "GetNavmeshRebuildAreas",
          "GetAreaCenter",
          "HasVehicleNavlink"
        ]
      },
      {
        "class_name": "SCR_Bird",
        "methods": [
          "EOnInit",
          "OnReactToDanger",
          "SoundEvent",
          "SetIsFlyingSignal",
          "OnTakeOff",
          "SetIsFlyingSignal",
          "OnLanding",
          "SoundEvent",
          "SetIsFlyingSignal",
          "SetIsFlyingSignal",
          "SoundEvent"
        ]
      },
      {
        "class_name": "SCR_ChimeraAIAgent",
        "methods": [
          "EOnInit",
          "EnsureAILimit",
          "SendWoundedMsg",
          "OnLifeStateChanged",
          "SendWoundedMsg",
          "GetFaction",
          "IsEnemy",
          "OnGroupWaypointChanged",
          "SetPlayerPending_S",
          "IsPlayerPending_S"
        ]
      },
      {
        "class_name": "SCR_AICommsHandler",
        "methods": [
          "SCR_AICommsStateChangedDelegate",
          "SCR_AICommsHandler",
          "AddRequest",
          "AddDebugMessage",
          "FailRequest",
          "AddDebugMessage",
          "CompleteRequest",
          "CanBypass",
          "SetMuted",
          "ClearAndFailAllRequests",
          "SwitchToState",
          "GetMuted",
          "SetSuspended",
          "SwitchToState",
          "SwitchToState",
          "GetSuspended",
          "Update",
          "TryTransmitAndSwitchState",
          "FailRequest",
          "SwitchToState",
          "TransmitRequest",
          "SwitchToState",
          "CompleteRequest",
          "TryTransmitAndSwitchState",
          "SwitchToState",
          "SwitchToState",
          "Reset",
          "AddDebugMessage",
          "ClearAndFailAllRequests",
          "SwitchToState",
          "FindValidRequest",
          "FailRequest",
          "TryTransmitAndSwitchState",
          "CompleteRequest",
          "SwitchToState",
          "TransmitRequest",
          "SwitchToState",
          "SwitchToState",
          "CanTransmit",
          "IsChannelFree",
          "IsChannelFree",
          "SwitchToState",
          "TransmitRequest",
          "AddDebugMessage",
          "FailRequest",
          "CompleteRequest",
          "ClearAndFailAllRequests",
          "AddDebugMessage",
          "FailRequest",
          "FailRequest",
          "SwitchToState",
          "EOnDiag",
          "ClearAndFailAllRequests",
          "AddDebugMessage"
        ]
      },
      {
        "class_name": "SCR_AISoundHandling",
        "methods": [
          "SetSignalsAndTransmit",
          "ErrorMissingEntity",
          "SetSignal_TargetValues",
          "SetSignal_SoldierCalledValues",
          "ErrorMissingPosition",
          "SetSignal_SoldierCalledValues",
          "ErrorMissingEntityOrPosition",
          "SetSignal_TargetFactionValues",
          "SetSignal_FactionValues",
          "SetSignal_SoldierCalledValues",
          "ErrorMissingEntity",
          "SetSignal_TargetValues",
          "SetSignal_SoldierCalledValues",
          "ErrorMissingCallsign",
          "SetSignal_SoldierCalledValues",
          "SetSignal_SoldierCalledValues",
          "ErrorMissingCallsign",
          "SetSignal_FlankValues",
          "SetSignal_SoldierCalledValues",
          "SetSignal_SoldierCalledValues",
          "ErrorMissingCallsign",
          "ErrorMissingEntity",
          "ErrorMissingPosition",
          "ErrorMissingEntityOrPosition",
          "GetInfoComponent",
          "InfoUnitRoleToSoundCharacterEnum",
          "RoleInVehicleToSoundRoleEnum",
          "VehicleTypeToSoundVehicleFactionEnum",
          "SetSignal_TargetValues",
          "SetSignal",
          "SetSignal_TargetFactionValues",
          "SetSignal",
          "SetSignal_PositionValues",
          "SetSignal",
          "SetSignal",
          "SetSignal",
          "SetSignal_GridValues",
          "SetSignal_GridValues",
          "SetSignal",
          "SetSignal",
          "SetSignal_SoldierCalledValues",
          "SetSignal",
          "SetSignal_MountAsValues",
          "SetSignal",
          "SetSignal",
          "SetSignal_FlankValues",
          "SetSignal",
          "SetSignal_FactionValues",
          "SetSignal",
          "SetSignal",
          "FindCommsHandler"
        ]
      },
      {
        "class_name": "SCR_AITalkRequest",
        "methods": [
          "SCR_AITalkRequest",
          "InitFromPreset",
          "InitFromPreset",
          "GetDebugString"
        ]
      },
      {
        "class_name": "SCR_LoiterUserAction",
        "methods": [
          "GetLoiteringPosition",
          "Init",
          "StartAction",
          "GetLoiteringPosition",
          "StopAction",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript",
          "LeaningTypeToLoiteringType"
        ]
      },
      {
        "class_name": "SCR_UserActionWithOccupancy",
        "methods": [
          "IsOccupied",
          "PerformAction",
          "StartAction",
          "StopAction",
          "StartAction",
          "StopAction"
        ]
      },
      {
        "class_name": "SCR_AIErrorMessages",
        "methods": [
          "NodeError",
          "SCR_AgentMustBeAIGroup",
          "SCR_AgentMustChimera",
          "NodeErrorCombatMoveRequest"
        ]
      },
      {
        "class_name": "SCR_AISuppressionVolumeBase",
        "methods": [
          "UpdateDebug",
          "GetDebugShape",
          "GetPositionsAreaBBox",
          "RotateDirection90Degrees",
          "GetOutsideEdgePos",
          "GetEdgePositions",
          "GetYRange",
          "GetWorldYRange",
          "GetYRange",
          "IsInsideVolume2D",
          "GetRandomPosition",
          "GetEdgePositions",
          "GetWorldYRange",
          "GetWorldYRange",
          "GetCenterPosition"
        ]
      },
      {
        "class_name": "SCR_AISuppressionVolumeBox",
        "methods": [
          "SCR_AISuppressionVolumeBox",
          "UpdateDebug",
          "GetDebugShape",
          "GetYRange",
          "GetOutsideEdgePos",
          "IsInsideVolume2D",
          "GetCenterPosition"
        ]
      },
      {
        "class_name": "SCR_AISuppressionVolumeSphere",
        "methods": [
          "SCR_AISuppressionVolumeSphere",
          "UpdateDebug",
          "GetDebugShape",
          "GetYRange",
          "GetOutsideEdgePos",
          "IsInsideVolume2D",
          "GetCenterPosition"
        ]
      },
      {
        "class_name": "SCR_AISuppressionObjectVolumeBox",
        "methods": [
          "ScaleTargetBBox"
        ]
      },
      {
        "class_name": "SCR_AISuppressionVolumeBaseTargetBox",
        "methods": [
          "SetTarget",
          "GetPositionsAreaBBox",
          "UpdateDebug"
        ]
      },
      {
        "class_name": "SCR_AISuppressionVolumeClusterBox",
        "methods": [
          "GetVolumeFromClusterState",
          "GetClusterState",
          "SetClusterState",
          "ScaleTargetBBox",
          "UpdateDebug"
        ]
      },
      {
        "class_name": "SCR_AISuppressionVolumeWaypoint",
        "methods": [
          "SetWaypoint",
          "UpdateDebug"
        ]
      },
      {
        "class_name": "SCR_AINodePortsHelpers",
        "methods": [
          "GetStringFromPort",
          "MergeTwoArrays"
        ]
      },
      {
        "class_name": "SCR_AIStanceHandling",
        "methods": [
          "GetStanceFromThreat",
          "SetStance",
          "ConvertStanceToStanceChange",
          "FindComponentsInAllChildren"
        ]
      },
      {
        "class_name": "SCR_AICompartmentHandling",
        "methods": [
          "CompartmentClassToType",
          "FindAvailableCompartmentInVehicles",
          "IsInCompartment",
          "GetAgentVehicleAndCompartment",
          "GetAvailableCompartmentCount"
        ]
      },
      {
        "class_name": "SCR_AIVehicleUsability",
        "methods": [
          "TurnOnVehicleHazardLights",
          "VehicleCanMove",
          "VehicleIsOnFire"
        ]
      },
      {
        "class_name": "SCR_AIWeaponHandling",
        "methods": [
          "GetWeaponCurrentMuzzleType",
          "GetWeaponType",
          "GetCurrentMuzzleId",
          "GetCurrentMagazineComponent",
          "IsCurrentMuzzleChambered",
          "GetCurrentWeaponComponent",
          "StartMuzzleSwitch",
          "StartMagazineSwitchCharacter",
          "StartMagazineSwitchTurret",
          "StartWeaponSwitchCharacter",
          "StartWeaponSwitchTurret"
        ]
      },
      {
        "class_name": "SCR_AIDamageHandling",
        "methods": [
          "IsConscious",
          "IsAlive",
          "IsCharacterWounded"
        ]
      },
      {
        "class_name": "SCR_AISmartActionHandling",
        "methods": [
          "FindSmartAction"
        ]
      },
      {
        "class_name": "SCR_AIMessageHandling",
        "methods": [
          "SendDismountMessage",
          "SendGetInMessage",
          "SendMoveMessage",
          "SendCancelMessage"
        ]
      },
      {
        "class_name": "SCR_AIWorldHandling",
        "methods": [
          "IsLowLightEnvironment"
        ]
      },
      {
        "class_name": "SCR_BTParamBase",
        "methods": [
          "SetVariableOut",
          "GetVariableIn",
          "ValueToString",
          "SCR_BTParamBase",
          "SetVariableOut",
          "GetVariableIn",
          "Init",
          "Init",
          "ValueToString",
          "SetVariableOut",
          "GetVariableIn",
          "Init",
          "Init",
          "ValueToString",
          "SetVariableOut",
          "GetVariableIn",
          "Init",
          "Init",
          "ValueToString"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingBudgetToEvaluateData",
        "methods": [
          "CanBeUsed",
          "GetBudget",
          "UseMasterProviderBudget",
          "CanShowBudgetInUI"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingCompositionComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "SpawnCompositionLayout",
          "SpawnCompositionLayout",
          "GetOutlineToSpawn",
          "EOnInit",
          "SetCompositionCost",
          "SetDestroyEvents",
          "DestructibleEntityDestroyed",
          "CheckExistingChild",
          "SetIsCompositionSpawned",
          "CompositionBuildSound",
          "SetDestroyEvents",
          "OnCompositionSpawned",
          "CompositionBuildSound",
          "GetOnCompositionSpawned",
          "SetCompositionCost",
          "SetPrefabId",
          "GetCompositionCost",
          "GetPrefabId",
          "IsCompositionSpawned",
          "GetOnBuilderSet",
          "SetProviderEntity",
          "GetProviderEntity",
          "RemoveProviderEntity",
          "SetBuilderId",
          "GetBuilderId",
          "SetInteractionLock",
          "AfterLockChanged",
          "SetInteractionLockServer",
          "SetInteractionLock",
          "Rpc",
          "IsInteractionLocked",
          "AfterLockChanged",
          "SetProviderEntityServer",
          "SetProviderEntity",
          "Rpc",
          "RemoveProviderEntityServer",
          "RemoveProviderEntity",
          "Rpc",
          "SetClearProviderEvent",
          "SetProviderFromRplID",
          "CompositionBuildSound",
          "IsProxy",
          "RpcDo_RemoveProviderEntity",
          "RemoveProviderEntity",
          "RpcDo_SetProviderEntity",
          "SetProviderEntity",
          "RpcDo_SetCompositionLock",
          "SetInteractionLock",
          "RplSave",
          "RplLoad",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingCompositionOutlineManager",
        "methods": [
          "GetCompositionOutline",
          "GetCompositionBuildingValue"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingCompositionOutline",
        "methods": [
          "GetEditableEntity",
          "GetCompositionLayout",
          "GetBuildingValue"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingCooldownBudgetToEvaluateData",
        "methods": [
          "CooldownTimeModifier"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingCooldownWithRankBudgetToEvaluateData",
        "methods": [
          "CooldownTimeModifier"
        ]
      },
      {
        "class_name": "SCR_CooldownData",
        "methods": [
          "GetRank",
          "GetTimeMultiplier"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingGadgetToolComponent",
        "methods": [
          "Update",
          "TraceCompositionToShowPreview",
          "OnToggleActive",
          "ToolToHand",
          "ToolToInventory",
          "GetType",
          "ModeSwitch",
          "ToolToHand",
          "ToolToInventory",
          "ToolToHand",
          "ActivateGadgetUpdate",
          "OnPossessed",
          "DeactivateGadgetUpdate",
          "ToolToInventory",
          "ToolToInventory",
          "RemovePreviews",
          "DeactivateGadgetUpdate",
          "RemoveEventHandlers",
          "GetBuildingModeEntity",
          "RemovePreviews",
          "OnEditorOpened",
          "ToolToInventory",
          "OnEditorClosed",
          "RemoveOnConsciousnessChanged",
          "RemoveEventHandlers",
          "OnConsciousnessChanged",
          "RemoveOnConsciousnessChanged",
          "RemoveOnConsciousnessChanged",
          "TraceCompositionToShowPreview",
          "EvaluatePreviewEntity",
          "GetToolConstructionValue",
          "GetCharacterControllerComponent",
          "RemoveEventHandlers"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingLayoutComponent",
        "methods": [
          "OnPostInit",
          "SetOnEditorOpenEvent",
          "GetOnAddBuildingValueInt",
          "GetOnAddBuildingValueVoid",
          "GetOnCompositionIdSet",
          "OnEditorModeChanged",
          "SpawnPreview",
          "DeletePreview",
          "IsLayoutInBuildingRange",
          "HasBuildingPreview",
          "EvaluateBuildingStatus",
          "SpawnComposition",
          "GetBuildingValue",
          "GetCompositionResourceName",
          "GetBuildingManagerComponent",
          "SetPrefabId",
          "EvaluateBuildingStatus",
          "GetPrefabId",
          "SpawnComposition",
          "LockCompositionInteraction",
          "SpawnPreview",
          "SpawnPreviewIfBuildingModeOpened",
          "SpawnPreview",
          "DeletePreview",
          "AddBuildingValue",
          "SetBuildingValue",
          "GetToBuildValue",
          "GetCurrentBuildValue",
          "GetBuildingModeEntity",
          "LockCompositionInteraction",
          "SnapEntityToTerrain",
          "OnChildAdded",
          "SnapEntityToTerrain",
          "DeletePreview"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingMaxValueBudgetToEvaluateData",
        "methods": [
          "GetMaxValue"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingNetworkComponent",
        "methods": [
          "AddBuildingValue",
          "RemoveEditorMode",
          "RequestEnterBuildingMode",
          "DeleteCompositionByUserAction",
          "SendDeleteNotification",
          "SetClientLock",
          "RpcDo_SetClientLock",
          "RpcAsk_AddBuildingValue",
          "RpcAsk_RemoveEditorMode",
          "RpcAsk_RequestEnterBuildingMode",
          "RpcAsk_DeleteCompositionByUserAction",
          "RpcAsk_SendDeleteNotification",
          "RpcAsk_AddXPReward",
          "AddXPReward",
          "Rpc",
          "GetProviderFormRplId"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingProviderComponent",
        "methods": [
          "GetProviderDisplayName",
          "UseMasterProvider",
          "IsMasterProvider",
          "CanCommandAI",
          "ObstrucViewWhenEnemyInRange",
          "GetMasterProviderEntity",
          "GetBases",
          "GetOwner",
          "UseMasterProviderBudget",
          "SetClientLock",
          "SetCooldownClientLock",
          "SetPlayerCooldown",
          "UpdateCooldownTimer",
          "HasCooldownSet",
          "GetCooldownValue",
          "GetOnCooldownLockUpdated",
          "RegisterBase",
          "CanRegisterAtMilitaryBase",
          "GetMilitaryBaseComponent",
          "GetBases",
          "GetAccessRank",
          "GetBuildingRadius",
          "GetMaxBudgetValue",
          "GetCurrentPropValue",
          "SetPropValue",
          "AddPropValue",
          "GetCurrentAIValue",
          "SetAIValue",
          "AddAIValue",
          "OnAIRemoved",
          "RemoveEvents",
          "AddAIValue",
          "SetOnEntityKilled",
          "RemoveEvents",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "SetOnProviderFactionChangedEvent",
          "AddNewActiveUser",
          "SetOnPlayerDeathActiveUserEvent",
          "RemoveActiveUser",
          "GetActiveUsers",
          "ContainActiveUsers",
          "AddNewAvailableUser",
          "SetOnPlayerDeathAvailableUserEvent",
          "RemoveAvailableUser",
          "GetAvailableUsers",
          "ContainAvailableUsers",
          "RequestBuildingMode",
          "RequestEnterBuildingMode",
          "RequestEnterBuildingMode",
          "SetOnPlayerConsciousnessChanged",
          "SetOnPlayerTeleported",
          "SetOnPlayerTeleported",
          "SetOnPlayerConsciousnessChanged",
          "OnLifeStateChanged",
          "PlayerTeleported",
          "RemoveOnLifeStateChanged",
          "SetOnProviderFactionChangedEvent",
          "SetOnPlayerDeathActiveUserEvent",
          "SetOnPlayerDeathAvailableUserEvent",
          "OnActiveUserDeath",
          "OnAvailableUserDeath",
          "BuildingModeCreated",
          "EntitySpawnedByProvider",
          "OnModeClosed",
          "RemoveOnModeClosed",
          "RemoveOnLifeStateChanged",
          "RemoveOnPlayerTeleported",
          "GetOnProviderCreated",
          "RemoveOnModeClosed",
          "RemoveOnPlayerTeleported",
          "GetUserActionInitOnly",
          "GetNetworkManager",
          "GetEditorManager",
          "GetEditorManagerByID",
          "GetCharacterControllerComponent",
          "GetPlayerIdFromCharacterController",
          "IsCharacterFactionSame",
          "GetEntityFaction",
          "OnBaseOwnerChanged",
          "RemoveActiveUsers",
          "GetResourceComponent",
          "GetSuppliesComponent",
          "GetBudgetData",
          "GetBudgetTypesToEvaluate",
          "IsBudgetToEvaluate",
          "GetShownBudget",
          "CalculateCooldownTime",
          "RemoveActiveUsers",
          "RemoveActiveUser",
          "RemoveAvailableUser",
          "RemoveCheckProviderMove",
          "RemoveCheckProviderMove",
          "SetCheckProviderMove",
          "CheckProviderMove",
          "RemoveActiveUsers",
          "IsProviderDynamic",
          "IsEnemyFaction",
          "RplLoad",
          "RemoveActiveUsers"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingRankBudgetToEvaluateData",
        "methods": [
          "CanBeUsed"
        ]
      },
      {
        "class_name": "SCR_BaseRoleCallsign",
        "methods": [
          "IsValidRole",
          "GetRoleName",
          "GetRoleIndex"
        ]
      },
      {
        "class_name": "SCR_LeaderRoleCallsign",
        "methods": [
          "IsValidRole",
          "GetRoleIndex"
        ]
      },
      {
        "class_name": "SCR_PlayerLeaderRoleCallsign",
        "methods": [
          "IsValidRole",
          "GetRoleIndex"
        ]
      },
      {
        "class_name": "SCR_RadioOperatorRoleCallsign",
        "methods": [
          "IsValidRole",
          "HasRadio",
          "GetRoleIndex"
        ]
      },
      {
        "class_name": "SCR_CallsignBaseComponentClass",
        "methods": [
          "SCR_CallsignBaseComponent_OnCallsignChanged"
        ]
      },
      {
        "class_name": "SCR_CallsignBaseComponent",
        "methods": [
          "GetCallsignNames",
          "GetCallsignIndexes",
          "ClearCallsigns",
          "SetCallsignInfo",
          "InitOnServer",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_CallsignCharacterComponent",
        "methods": [
          "GetCallsignNames",
          "GetCallsignIndexes",
          "GetCharacterAndRoleCallsign",
          "AssignCharacterCallsign",
          "Rpc",
          "AssignCharacterCallsignBroadcast",
          "Rpc",
          "AssignCharacterAndRoleCallsignBroadcast",
          "Rpc",
          "AssignCallsignNoRoleBroadcast",
          "Rpc",
          "AssignCallsignBroadcast",
          "Rpc",
          "UpdateCharacterRoleCallsign",
          "AssignRoleCallsignBroadcast",
          "Rpc",
          "UpdateCharacterCallsignAndRole",
          "AssignCharacterAndRoleCallsignBroadcast",
          "Rpc",
          "ClearCallsigns",
          "ClearCharacterRoleCallsign",
          "AssignCallsignBroadcast",
          "AssignCallsignNoRoleBroadcast",
          "AssignCharacterAndRoleCallsignBroadcast",
          "AssignCharacterCallsignBroadcast",
          "AssignRoleCallsignBroadcast",
          "SetAloneInGroupBroadcast",
          "SetFactionBroadCast",
          "GetIsCharacterAloneInGroup",
          "GetCharacterCallsignIndex",
          "GetCharacterOrRoleCallsignIndex",
          "GetCharacterAndRoleCallsign",
          "GetCharacterCallsignName",
          "OnPlayerCallsignChanged",
          "AssignCharacterCallsign",
          "AssignCharacterCallsign",
          "InitPlayerOnServer",
          "RplSave",
          "RplLoad",
          "AssignCallsignBroadcast",
          "SetFactionBroadCast"
        ]
      },
      {
        "class_name": "SCR_CallsignCompanyData",
        "methods": [
          "Init",
          "GetRandomCallsign",
          "GetFirstAvailibleCallsign",
          "AddCallsign",
          "RemoveCallsign"
        ]
      },
      {
        "class_name": "SCR_CallsignGroupComponent",
        "methods": [
          "InitOnServer",
          "FactionInit",
          "OnPlayerAddedToGroup",
          "AssignPlayerCallsign",
          "UpdateAllCharacterRoleCallsigns",
          "OnPlayerRemovedFromGroup",
          "UpdatePlayerRoles",
          "OnPlayerLeaderAssigned",
          "MakeAIRoleAvailable",
          "UpdatePlayerRoles",
          "UpdatePlayerRoles",
          "AssignPlayerCallsign",
          "AssignPlayerCallsign",
          "UpdateAllCharacterRoleCallsigns",
          "UpdatePlayerRoles",
          "AssignAICallsign",
          "IsUniqueRoleInUse",
          "OnAILeaderAssigned",
          "ReplaceAILeaderRole",
          "ReplaceAILeaderRole",
          "AssignAICallsign",
          "MakeAIRoleAvailable",
          "OnAIAddedToGroup",
          "AssignAICallsign",
          "UpdateAllCharacterRoleCallsigns",
          "OnAIRemovedFromGroup",
          "MakeAIRoleAvailable",
          "UpdateAllCharacterRoleCallsigns",
          "AssignAICallsign",
          "MakeAIRoleAvailable",
          "MakeAIRoleAvailable",
          "GetCallsignNames",
          "GetCallsignIndexes",
          "AssignGroupCallsign",
          "AssignCallsignBroadcast",
          "Rpc",
          "AssignCallsignBroadcast",
          "FactionInit",
          "ClearCallsigns",
          "AssignGroupCallsign",
          "AssignAICallsign",
          "OnFactionChanged",
          "FactionInit",
          "RplSave",
          "RplLoad",
          "AssignCallsignBroadcast"
        ]
      },
      {
        "class_name": "SCR_CallsignInfo",
        "methods": [
          "GetCallsign"
        ]
      },
      {
        "class_name": "SCR_CallsignManagerComponentClass",
        "methods": [
          "SCR_GroupsManagerComponent_OnPlayerCallsignChanged"
        ]
      },
      {
        "class_name": "SCR_CallsignManagerComponent",
        "methods": [
          "GetEntityCallsignIndexes",
          "GetEntityCallsignIndexes",
          "GetEntityCallsignNames",
          "GetEntityCallsignNames",
          "AssignCallGroupCallsign",
          "AssignFirstAvailableGroupCallsign",
          "AssignRandomGroupCallsigns",
          "AssignFirstAvailableGroupCallsign",
          "RemoveAvailableGroupCallsign",
          "AssignRandomDuplicateCallsign",
          "AssignCompanySpecificGroupCallsign",
          "RemoveAvailableGroupCallsign",
          "AssignRandomDuplicateCallsign",
          "AssignRandomGroupCallsigns",
          "RemoveAvailableGroupCallsign",
          "AssignRandomDuplicateCallsign",
          "MakeGroupCallsignAvailible",
          "RemoveAvailableGroupCallsign",
          "AssignRandomDuplicateCallsign",
          "OnPlayerSpawn",
          "SetPlayerCallsign",
          "OnPlayerLeftGame",
          "GetPlayerCallsign",
          "FillAvailableCallsigns",
          "EOnInit",
          "FillAvailableCallsigns",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_CallsignPlatoonData",
        "methods": [
          "Init",
          "GetRandomSquad",
          "GetFirstAvailibleSquad",
          "AddSquad",
          "RemoveSquad"
        ]
      },
      {
        "class_name": "SCR_FactionCallsignData",
        "methods": [
          "SCR_FactionCallsignData",
          "GetRandomCallsign",
          "GetFirstAvailibleCallsign",
          "GetSpecificCompanyCallsign",
          "GetFirstAvailibleCallsign",
          "GetRandomCallsign",
          "AddCallsign",
          "RemoveCallsign"
        ]
      },
      {
        "class_name": "SCR_FactionCallsignInfo",
        "methods": [
          "GetCallsignFormat",
          "GetIsAssignedRandomly",
          "GetCompanyArray",
          "GetPlatoonArray",
          "GetSquadArray",
          "GetCompanyCallsignName",
          "GetCompanyOverflowIndex",
          "GetPlatoonCallsignName",
          "GetSquadCallsignName",
          "GetCharacterRoleCallsignName",
          "GetRandomCallsign",
          "GetCharacterRoleCallsign"
        ]
      },
      {
        "class_name": "SCR_PlayerCallsignData",
        "methods": [
          "SetPlayerCallsignIndexes",
          "GetPlayerCallsignIndexes",
          "SetPlayerCallsign",
          "MakePlayerCallsignAvailible",
          "MakePlayerCallsignAvailible"
        ]
      },
      {
        "class_name": "SCR_AccelerationManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_AdjustSpeedManualCameraComponent",
        "methods": [
          "GetOnSpeedChange",
          "OnInputDeviceIsGamepad",
          "ManualCameraSpeedReset",
          "UpdateWidget",
          "UpdateWidget",
          "FadeOutWidget",
          "EOnCameraSave",
          "EOnCameraLoad",
          "EOnCameraFrame",
          "UpdateWidget",
          "FadeOutWidget",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_ATLManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_AttachManualCameraComponent",
        "methods": [
          "AttachTo",
          "Detach",
          "Detach",
          "GetOnAttachChange",
          "EOnCameraSave",
          "EOnCameraLoad",
          "AttachTo",
          "EOnCameraFrame",
          "Detach",
          "Detach",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_AttachEntity",
        "methods": [
          "RotateWithTarget",
          "AttachTo",
          "SetEventMask",
          "SetFlags",
          "EOnPostFrame",
          "SetWorldTransform"
        ]
      },
      {
        "class_name": "SCR_BaseManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit",
          "EOnCameraExit",
          "EOnCameraReset",
          "EOnCameraParentChange",
          "EOnCameraSave",
          "EOnCameraLoad",
          "GetCameraEntity",
          "GetInputManager",
          "CoordToCamera",
          "CoordFromCamera",
          "SetEnabled",
          "IsEnabled",
          "GetPriority",
          "HasFlag",
          "InitBase",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_BaseManualCameraComponentTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingLimitCylinderManualCameraComponent",
        "methods": [
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_ControlPlayerCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_EditorCursorManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_EditorHoveredManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_EditorSnapManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "SetEnabled",
          "ResetSnap",
          "ResetSnap",
          "ResetSnap",
          "ResetSnap",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_EditorToggleUIManualCameraComponent",
        "methods": [
          "OnVisibilityChange",
          "EOnCameraInit",
          "SetEnabled",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_FocusManualCameraComponent",
        "methods": [
          "GetFocusPos",
          "GetFocusDistance",
          "SetFocusToCursor",
          "ResetFocus",
          "SetFocus",
          "ResetFocus",
          "GetOnFocusChange",
          "GetOnFocusDistanceChange",
          "EOnCameraReset",
          "ResetFocus",
          "EOnCameraFrame",
          "ResetFocus",
          "EOnCameraSave",
          "EOnCameraLoad",
          "EOnCameraInit",
          "ResetFocus",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_HideHUDManualCameraComponent",
        "methods": [
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_InitInputManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "SetEnabled",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_LensFlareManualCameraComponent",
        "methods": [
          "GetLensFlareType",
          "SetLensFlareType",
          "EOnCameraInit",
          "EOnCameraSave",
          "EOnCameraLoad"
        ]
      },
      {
        "class_name": "SCR_LightManualCameraComponent",
        "methods": [
          "ToggleLight",
          "SetLight",
          "SetLight",
          "CameraLightIntensityUpdate",
          "OnInputDeviceIsGamepad",
          "IsLightOn",
          "GetOnLightChanged",
          "EOnCameraSave",
          "EOnCameraLoad",
          "SetLight",
          "EOnCameraFrame",
          "CameraLightIntensityUpdate",
          "PointingLightTransformUpdateKeyboard",
          "PointingLightTransformUpdateGamepad",
          "CameraLightIntensityUpdate",
          "PointingLightTransformUpdateKeyboard",
          "PointingLightTransformUpdateGamepad",
          "PointingLightTransformUpdate",
          "GetCursorWorldPosition",
          "GetCameraCenterRayCastPosition",
          "Vector",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_LimitBoxManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_LimitCylinderManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_MapDescriptorManualCameraComponent",
        "methods": [
          "TraceScreenPos",
          "EOnCameraFrame",
          "TraceScreenPos",
          "TraceScreenPos",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_MouseMoveManualCameraComponent",
        "methods": [
          "Add"
        ]
      },
      {
        "class_name": "SCR_MoveManualCameraComponent",
        "methods": [
          "EOnCameraSave",
          "EOnCameraLoad",
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_MovementInertiaManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_MoveRelativeManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_MoveToCursorManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_OrbitingManualCameraComponent",
        "methods": [
          "GetCenterPos",
          "EOnCameraFrame",
          "EOnCameraInit",
          "EOnCameraParentChange"
        ]
      },
      {
        "class_name": "SCR_PIPCamera",
        "methods": [
          "SCR_PIPCamera",
          "ClearEventMask",
          "EOnActivate",
          "Deactivate",
          "ApplyProps",
          "UpdatePIPCamera",
          "UpdatePIPCamera",
          "ApplyTransform"
        ]
      },
      {
        "class_name": "SCR_RotateManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_RotateModifierManualCameraComponent",
        "methods": [
          "OnInputDeviceIsGamepad",
          "ManualCameraRotateDown",
          "ManualCameraRotateUp",
          "EOnCameraFrame",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_RotateRollManualCameraComponent",
        "methods": [
          "EOnCameraReset",
          "EOnCameraSave",
          "EOnCameraLoad",
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_RotationInertiaManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_SaveManualCameraComponent",
        "methods": [
          "SaveCamera1",
          "SaveCamera2",
          "SaveCamera3",
          "SaveCamera4",
          "SaveCamera5",
          "SaveCamera6",
          "SaveCamera7",
          "SaveCamera8",
          "SaveCamera",
          "PlayAnimation",
          "LoadCamera1",
          "LoadCamera2",
          "LoadCamera3",
          "LoadCamera4",
          "LoadCamera5",
          "LoadCamera6",
          "LoadCamera7",
          "LoadCamera8",
          "LoadCamera",
          "PlayAnimation",
          "EOnCameraInit",
          "PlayAnimation",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_SetSpeedManualCameraComponent",
        "methods": [
          "OnInputDeviceIsGamepad",
          "ManualCameraSpeedToggle",
          "EOnCameraFrame",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_SettingsManualCameraComponent",
        "methods": [
          "LoadSettings",
          "EOnCameraFrame",
          "EOnCameraInit",
          "LoadSettings",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_SpeedBoostManualCameraComponent",
        "methods": [
          "ManualCameraSpeedBoostDown",
          "ManualCameraSpeedBoostUp",
          "EOnCameraFrame",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_SpeedBoostUpManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "DrawDebug1",
          "DrawDebug2",
          "DrawDebug3",
          "DrawDebug4",
          "EOnCameraInit",
          "DrawDebug1",
          "DrawDebug2",
          "DrawDebug3",
          "DrawDebug4"
        ]
      },
      {
        "class_name": "SCR_SpeedByHeightManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_TeleportPlayerManualCameraComponent",
        "methods": [
          "TeleportPlayer",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_TeleportToCursorManualCameraComponent",
        "methods": [
          "TeleportCamera",
          "EOnCameraFrame",
          "EOnCameraInit",
          "EOnCameraParentChange"
        ]
      },
      {
        "class_name": "SCR_TerrainCollisionManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_ToggleUIManualCameraComponent",
        "methods": [
          "ToggleUI",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_UIManualCameraComponent",
        "methods": [
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_ViewLinkManualCameraComponent",
        "methods": [
          "EOnCameraFrame",
          "PrintFormat",
          "EOnCameraInit",
          "EOnCameraExit"
        ]
      },
      {
        "class_name": "SCR_ZoomManualCameraComponent",
        "methods": [
          "GetOnZoomChange",
          "EOnCameraSave",
          "EOnCameraLoad",
          "EOnCameraReset",
          "EOnCameraFrame",
          "EOnCameraInit"
        ]
      },
      {
        "class_name": "SCR_BaseCameraComponent",
        "methods": [
          "SCR_BaseCameraComponent",
          "Deactivate"
        ]
      },
      {
        "class_name": "SCR_CameraBase",
        "methods": [
          "IsInView",
          "IsInView",
          "GetOnActivate",
          "GetOnDeactivate",
          "GetOnCameraActivate",
          "GetOnCameraDeactivate",
          "EOnActivate",
          "EOnDeactivate",
          "CameraActivate",
          "CameraDeactivate",
          "_WB_AfterWorldUpdate",
          "GetTransform"
        ]
      },
      {
        "class_name": "SCR_DebugCameraEntity",
        "methods": [
          "CreateDebugCamera",
          "GetWorldTransform",
          "SCR_DebugCameraEntity"
        ]
      },
      {
        "class_name": "SCR_ManualCamera",
        "methods": [
          "RegisterComponents",
          "InitComponents",
          "ProcessComponents",
          "GetLocalTransform",
          "SetLocalTransform",
          "SetVerticalFOV",
          "SaveComponents",
          "LoadComponents",
          "ResetComponents",
          "FindCameraComponent",
          "MoveToCamera",
          "SetTransform",
          "GetPreviousCamera",
          "TrySwitchToControlledEntityCamera",
          "SwitchToPreviousCamera",
          "IsFirstCamera",
          "IsDisabledByMenu",
          "AttachTo",
          "GetWorldTransform",
          "SetWorldTransform",
          "Detach",
          "GetWorldTransform",
          "SetWorldTransform",
          "SetInputEnabled",
          "IsInputEnabled",
          "GetDefaultFOV",
          "IsManualInput",
          "SetDirty",
          "GetWidget",
          "CreateCameraWidget",
          "GetCameraParam",
          "Terminate",
          "EOnPostFrame",
          "ProcessComponents",
          "EOnInit",
          "InitComponents",
          "ProcessComponents",
          "SCR_ManualCamera",
          "RegisterComponents",
          "SetFlags",
          "SetEventMask",
          "SetName",
          "Terminate",
          "SwitchToPreviousCamera"
        ]
      },
      {
        "class_name": "SCR_ManualCameraParam",
        "methods": [
          "SetDeltaPos",
          "GetCursorWorldPos",
          "SetCursorWorldPos",
          "ShowDebug",
          "ProcessTransform",
          "SCR_ManualCameraParam"
        ]
      },
      {
        "class_name": "SCR_PostProcessCameraComponent",
        "methods": [
          "FindEffect",
          "OnCameraActivate",
          "OnCameraDeactivate",
          "SCR_PostProcessCameraComponent"
        ]
      },
      {
        "class_name": "SCR_CameraPostProcessEffect",
        "methods": [
          "GetType",
          "SetParam",
          "ResetParam",
          "SetMaterial",
          "SetMaterial",
          "SetMaterial",
          "DeleteEffect",
          "CreateEffect",
          "SetMaterial",
          "DeleteEffect",
          "DeleteEffect"
        ]
      },
      {
        "class_name": "SCR_BaseCameraShakeProgress",
        "methods": [
          "IsRunning",
          "IsFinished",
          "Start",
          "Update",
          "Apply",
          "Clear"
        ]
      },
      {
        "class_name": "SCR_GenericCameraShakeProgress",
        "methods": [
          "IsRunning",
          "Apply",
          "Clear"
        ]
      },
      {
        "class_name": "SCR_NoisyCameraShakeProgress",
        "methods": [
          "Update",
          "SetParams",
          "Start",
          "Clear"
        ]
      },
      {
        "class_name": "SCR_RecoilCameraShakeParams",
        "methods": [
          "GetStanceImpulseMagnitude",
          "GetMagnitude",
          "GetStanceMagnitude",
          "GetMagnitude",
          "GetMagnitude",
          "RandomFloat",
          "RandomVector",
          "RandomVectorSphere",
          "GetFovScale",
          "GetRandomTranslation",
          "RandomVectorSphere",
          "RandomVector",
          "GetRandomAnglesImpulse",
          "RandomVectorSphere",
          "RandomVector",
          "GetRandomYawPitchRollImpulse",
          "Vector"
        ]
      },
      {
        "class_name": "SCR_RecoilCameraShakeProgress",
        "methods": [
          "IsRunning",
          "GetParams",
          "Update",
          "Clear"
        ]
      },
      {
        "class_name": "SCR_ConfirmBasesSignalsWidgetComponent",
        "methods": [
          "OnClick"
        ]
      },
      {
        "class_name": "SCR_CampaignArmoryStorageComponent",
        "methods": [
          "AllowStoringItems",
          "GetSupportedItems",
          "GetAmmunitionMode",
          "CanStoreItem"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingManagerComponent",
        "methods": [
          "GetOutlineManager",
          "GetResourceComponent",
          "SetTemporaryProvider",
          "SetTemporaryProvider",
          "GetCompositionPreviewMaterial",
          "GetServerTriggerResourceName",
          "GetClientTriggerResourceName",
          "SetTemporaryProvider",
          "GetTemporaryProvider",
          "CanDisassembleSameFactionOnly",
          "GetSupplyComponent",
          "SetTemporaryProvider",
          "SetTemporaryProvider",
          "ProcesXPreward",
          "GetCompositionRefundPercentage",
          "OnEntityCoreBudgetUpdated",
          "EOnInit",
          "GetPrefabListFromConfig",
          "OnPostInit",
          "SetEventMask",
          "IsProxy",
          "GetPrefabListFromConfig",
          "GetCompositionResourceName",
          "GetCompositionId",
          "GetEditorMode",
          "SetEditorMode",
          "SetEditorMode",
          "ToggleEditorMode",
          "SetOnPlayerDeathEvent",
          "SetOnProviderDestroyedEvent",
          "PlayerDisconnected",
          "EntitySpawnedByProvider",
          "SetOnPlayerDeathEvent",
          "RemoveOnPlayerDeathEvent",
          "SetOnProviderDestroyedEvent",
          "RemoveOnProviderDestroyedEvent",
          "OnPlayerDeath",
          "ToggleEditorMode",
          "RemoveEditorMode",
          "OnProviderDestroyed",
          "RemoveProvider",
          "RemovePlayerIdFromProvider",
          "RemoveProvider",
          "RemoveOnPlayerDeathEvent",
          "RemoveEditorMode",
          "ToggleEditorMode",
          "RemoveEditorMode",
          "GetEditorManagerEntity"
        ]
      },
      {
        "class_name": "SCR_CampaignClientData",
        "methods": [
          "SetID",
          "GetID",
          "SetXP",
          "GetXP",
          "SetFactionIndex",
          "GetFactionIndex",
          "SetRespawnPenalty",
          "GetRespawnPenalty",
          "SetLastSuicideTimestamp",
          "GetLastSuicideTimestamp",
          "SetLastPenaltyDeductionTimestamp",
          "GetLastPenaltyDeductionTimestamp",
          "SetNextFastTravelTimestamp",
          "GetNextFastTravelTimestamp"
        ]
      },
      {
        "class_name": "SCR_CampaignFeedbackComponent",
        "methods": [
          "GetInstance",
          "EnablePlayerSpawnHint",
          "SetSpawnTime",
          "SetMapOpened",
          "SetMapCampaignUI",
          "SetSpawnTime",
          "GetSpawnTime",
          "CanShowPlayerSpawn",
          "GetPlayerSpawnPos",
          "WasMapOpened",
          "SetMapOpened",
          "GetBaseWithPlayer",
          "CheckPlayerInsideRadioRange",
          "RegisterTasksShown",
          "SetIsPlayerInRadioRange",
          "GroupLeaderHint",
          "ShowHint",
          "LoneDriverHint",
          "ShowHint",
          "TransportRequestHint",
          "ShowHint",
          "BaseOutOfRangeHint",
          "ShowHint",
          "OnMapOpen",
          "ShowHint",
          "RefreshCurrentPopupMessage",
          "OnRespawn",
          "ShowHint",
          "ProcessHintQueue",
          "ShowHint",
          "PauseHintQueue",
          "OnConsciousnessChanged",
          "IsConscious",
          "OnPlayerKilled",
          "OnBaseLeft",
          "OnBaseFactionChanged",
          "ShowHint",
          "OnBaseEntered",
          "OnBaseLeft",
          "OnSeizingTimerChange",
          "ShowHint",
          "ShowHint",
          "ShowHint",
          "ShowHint",
          "ShowHint",
          "ShowHint",
          "ShowHint",
          "OnBaseLeft",
          "OnMatchSituationChanged",
          "ShowHint",
          "OnSeizingTimerChange",
          "MobileAssemblyFeedback",
          "PlayRadioMsg",
          "OnXPChanged",
          "ShowHint",
          "ShowHint",
          "ProcessEvents",
          "OnOwnershipChanged",
          "ProcessEvents",
          "ShowVolunteerHint",
          "ShowHint",
          "ShowHint",
          "OnPlayerSuppliesInteraction",
          "ShowHint",
          "EOnInit",
          "ProcessEvents",
          "OnPostInit",
          "SetEventMask",
          "ProcessEvents"
        ]
      },
      {
        "class_name": "SCR_CampaignHintStorage",
        "methods": [
          "GetHintByEnum"
        ]
      },
      {
        "class_name": "SCR_CampaignHintEntry",
        "methods": [
          "GetHintId",
          "GetHintInfo"
        ]
      },
      {
        "class_name": "SCR_CampaignMilitaryBaseManager",
        "methods": [
          "OnSignalChangedDelegate",
          "OnAllBasesInitializedDelegate",
          "OnLocalPlayerEnteredBaseDelegate",
          "OnLocalPlayerLeftBaseDelegate",
          "OnLocalFactionCapturedBaseDelegate",
          "GetActiveBasesCount",
          "GetTargetActiveBasesCount",
          "AddActiveBase",
          "OnAllBasesInitialized",
          "AddTargetActiveBase",
          "SetTargetActiveBasesCount",
          "GetOnLocalPlayerEnteredBase",
          "GetOnLocalPlayerLeftBase",
          "GetOnAllBasesInitialized",
          "GetOnSignalChanged",
          "OnAllBasesInitialized",
          "UpdateBases",
          "InitializeSupplyDepotIcons",
          "HideUnusedBaseIcons",
          "ProcessRemnantsPresence",
          "IsBasesInitDone",
          "DisableExtraSeizingComponents",
          "SetLocalPlayerFaction",
          "GetLocalPlayerFaction",
          "UpdateBases",
          "SelectHQs",
          "SelectHQsSimple",
          "SelectHQsSimple",
          "SelectHQsSimple",
          "SelectHQsSimple",
          "SetHQFactions",
          "GetAvgCPDistanceSq",
          "InitializeBases",
          "AddRandomSupplies",
          "AddRandomSupplies",
          "UpdateTaskBases",
          "InitializeSupplyDepotIcons",
          "RegisterRemnantSupplyDepot",
          "HideUnusedBaseIcons",
          "RecalculateRadioCoverage",
          "EvaluateControlPoints",
          "SelectPrimaryTarget",
          "SelectPrimaryTarget",
          "EvaluateControlPoints",
          "OnEnemyDetectedByDefenders",
          "FindClosestBase",
          "FindBaseByCallsign",
          "FindBaseByPosition",
          "IsEntityInFactionRadioSignal",
          "StoreBasesStates",
          "LoadBasesStates",
          "UpdateBases",
          "ProcessRemnantsPresence",
          "OnPlayerDisconnected",
          "OnLocalPlayerPresenceChanged",
          "OnBaseFactionChanged",
          "EvaluateControlPoints",
          "OnServiceBuilt",
          "OnServiceRemoved",
          "OnDefenderGroupSpawned",
          "OnConflictStarted",
          "SCR_CampaignMilitaryBaseManager"
        ]
      },
      {
        "class_name": "SCR_CampaignMobileAssemblyComponentClass",
        "methods": [
          "GetSpawnpointPrefab"
        ]
      },
      {
        "class_name": "SCR_CampaignMobileAssemblyComponent",
        "methods": [
          "OnPostInit",
          "OnDelete",
          "IsProxy",
          "SetParentFactionID",
          "OnParentFactionIDSet",
          "OnParentFactionIDSet",
          "GetParentFactionID",
          "GetParentFaction",
          "GetRadioRange",
          "Deploy",
          "CreateSpawnpoint",
          "OnDeployChanged",
          "OnDeployChanged",
          "CheckStatus",
          "Deploy",
          "Deploy",
          "OnSpawnpointCreated",
          "RegisterSpawnpoint",
          "GetSpawnPoint",
          "GetStandaloneComponent",
          "IsDeployed",
          "IsInRadioRange",
          "UpdateRadioCoverage",
          "CreateSpawnpoint",
          "OnSpawnpointCreated",
          "Deploy"
        ]
      },
      {
        "class_name": "SCR_CampaignMobileAssemblyStandaloneComponent",
        "methods": [
          "OnPostInit",
          "OnDelete",
          "IsProxy",
          "SetVehicle",
          "GetVehicle",
          "SetParentFactionID",
          "OnParentFactionIDSet",
          "OnParentFactionIDSet",
          "UpdateRadioCoverage",
          "GetParentFactionID",
          "GetParentFaction",
          "GetFaction",
          "SetRadioRange",
          "GetRadioRange",
          "OnFactionChanged",
          "IsInRadioRange",
          "GetMapItem",
          "UpdateRadioCoverage",
          "OnFactionChanged",
          "OnFactionChanged",
          "UpdateRespawnCooldown",
          "OnFactionChanged"
        ]
      },
      {
        "class_name": "SCR_CampaignNetworkComponent",
        "methods": [
          "GetCampaignNetworkComponent",
          "GetLastRequestTimestamp",
          "SetLastRequestTimestamp",
          "GetOnSuppliesDelivered",
          "IsProxy",
          "RepairComposition",
          "LoadSupplies",
          "Rpc",
          "LoadSuppliesStandalone",
          "Rpc",
          "StartLoading",
          "Rpc",
          "StopLoading",
          "Rpc",
          "UnloadSupplies",
          "Rpc",
          "AddRadio",
          "RpcAsk_AddRadio",
          "RpcDo_AddRadio",
          "FindRadioDelayed",
          "DeployMobileAsembly",
          "RpcAsk_DeployMobileAsembly",
          "CaptureBase",
          "CaptureBaseGM",
          "ToggleBaseCapture",
          "RpcAsk_RepairComposition",
          "AddSuppliesFromContextMenu",
          "Rpc",
          "RpcAsk_AddSuppliesFromContextMenu",
          "SendToVehicleOccupants",
          "RpcAsk_SuppliesLoadingStarted",
          "SendToVehicleOccupants",
          "SendToVehicleOccupants",
          "RpcAsk_SuppliesLoadingCanceled",
          "SendToVehicleOccupants",
          "SendToVehicleOccupants",
          "RpcAsk_LoadSupplies",
          "SendToVehicleOccupants",
          "RpcAsk_LoadSuppliesStandalone",
          "SendToVehicleOccupants",
          "RpcAsk_UnloadSupplies",
          "SendToVehicleOccupants",
          "RpcAsk_CaptureBaseBegin",
          "RpcAsk_CaptureBaseEnd",
          "SendPlayerMessage",
          "SetLastHQRadioMessageTimestamp",
          "CompressCallsign",
          "DecompressCallsign",
          "RpcAsk_CaptureBase",
          "SendPlayerMessage",
          "RpcDo_PlayerFeedback",
          "PlayerFeedbackImpl",
          "RpcDo_PlayerFeedbackValueBase",
          "RpcDo_PlayerFeedbackBase",
          "PlayerFeedbackImpl",
          "PlayerFeedbackImpl",
          "SendVehicleSpawnHint",
          "Rpc",
          "RpcDo_VehicleSpawnHint",
          "RespawnLocationPopup",
          "Rpc",
          "OnPlayerAliveStateChanged",
          "Rpc",
          "RpcDo_PlayerEnableShowingSpawnPosition",
          "HandleRadioRespawnTimer",
          "Rpc",
          "RpcAsk_HandleRadioRespawnTimer",
          "PlayRadioMsg",
          "RpcDo_PlayRadioMsg",
          "DecompressCallsign",
          "DecompressCallsign",
          "CheckHQReached",
          "OnPlayerSuppliesInteraction",
          "OnSuppliesLoaded",
          "OnSuppliesLoaded",
          "OnSuppliesLoaded",
          "OnSuppliesUnloaded",
          "ResetSavedSupplies",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_CampaignRadioRegisteringComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_CampaignServiceCompositionComponent",
        "methods": [
          "OnPostInit",
          "ChangeOperability",
          "SetCompositionType",
          "SetService",
          "GetCompositionType",
          "GetService",
          "GetNearestSlot",
          "IsServiceOperable"
        ]
      },
      {
        "class_name": "SCR_CampaignServiceEntityComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "ClearEventMask",
          "EvaluateHit",
          "SetHitEvaluation",
          "RepairEntity",
          "SetHitEvaluation",
          "IsProxy",
          "GetRepairCost",
          "SetHitEvaluation"
        ]
      },
      {
        "class_name": "SCR_CampaignSpawnPointGroup",
        "methods": [
          "GetSpawnPointName"
        ]
      },
      {
        "class_name": "SCR_CampaignStruct",
        "methods": [
          "GetHours",
          "GetMinutes",
          "GetSeconds",
          "GetMHQLocationBLUFOR",
          "GetMHQRotationBLUFOR",
          "GetMHQLocationOPFOR",
          "GetMHQRotationOPFOR",
          "GetTutorialStage",
          "IsMatchOver",
          "GetWeatherState",
          "GetCallsignOffset",
          "Serialize",
          "Clear",
          "Deserialize",
          "Clear",
          "GetResourceId",
          "SCR_CampaignStruct"
        ]
      },
      {
        "class_name": "SCR_CampaignBaseStruct",
        "methods": [
          "IsHQ",
          "GetCallsignIndex",
          "GetPosition",
          "GetSupplies",
          "GetFaction",
          "GetHQPosition",
          "GetHQRotation",
          "GetServicePrefab",
          "GetServicePosition",
          "GetServiceRotation",
          "SetIsHQ",
          "SetCallsignIndex",
          "SetPosition",
          "SetSupplies",
          "SetOwningFaction",
          "OnExpand",
          "OnItemObject",
          "OnPack",
          "OnObject",
          "OnError",
          "OnSuccess",
          "SCR_CampaignBaseStruct"
        ]
      },
      {
        "class_name": "SCR_CampaignRemnantInfoStruct",
        "methods": [
          "GetID",
          "GetMembersAlive",
          "GetRespawnTimer",
          "SetID",
          "SetMembersAlive",
          "SetRespawnTimer",
          "SCR_CampaignRemnantInfoStruct"
        ]
      },
      {
        "class_name": "SCR_CampaignPlayerStruct",
        "methods": [
          "GetID",
          "GetFactionIndex",
          "GetXP",
          "SetID",
          "SetFactionIndex",
          "SetXP",
          "GetPlayerIdentity",
          "SCR_CampaignPlayerStruct"
        ]
      },
      {
        "class_name": "SCR_CampaignSuppliesComponent",
        "methods": [
          "GetLoadingPlayer",
          "SetSupplyLoadingPlayer",
          "DeleteSupplyLoadingPlayer",
          "OnPlayerKilled",
          "DeleteSupplyUnloadingPlayer",
          "SetSupplyUnloadingPlayer",
          "DeleteSupplyUnloadingPlayer",
          "OnSuppliesChanged",
          "GetSupplies",
          "GetSuppliesMax",
          "SetSuppliesMax",
          "OnSuppliesChanged",
          "GetOperationalRadius",
          "SetIsPlayerInRange",
          "GetIsPlayerInRange",
          "SetLastLoadedAt",
          "SetLastUnloadedAt",
          "AwardXP",
          "AddSupplies",
          "OnSuppliesChanged",
          "GetIsStandaloneDepot",
          "EOnInit",
          "OnPostInit",
          "SetEventMask",
          "GetSuppliesComponent",
          "SCR_CampaignSuppliesComponent"
        ]
      },
      {
        "class_name": "SCR_XPRewardInfo",
        "methods": [
          "GetRewardID",
          "GetRewardName",
          "GetRewardXP",
          "AllowNotification"
        ]
      },
      {
        "class_name": "SCR_XPRewardList",
        "methods": [
          "GetRewardList"
        ]
      },
      {
        "class_name": "DoorStruct",
        "methods": [
          "DoorStruct"
        ]
      },
      {
        "class_name": "SCR_DoorOpenerEntity",
        "methods": [
          "QueryEntities",
          "GetDoors",
          "EOnInit",
          "GetDoors",
          "SCR_DoorOpenerEntity",
          "SetEventMask",
          "_CaptureDoors",
          "GetDoors",
          "_WB_OnKeyChanged",
          "_CaptureDoors",
          "_WB_SetExtraVisualiser",
          "_CaptureDoors",
          "_WB_AfterWorldUpdate"
        ]
      },
      {
        "class_name": "SCR_FlagComponentClass",
        "methods": [
          "IsFlagPole",
          "GetDefaultMaterial",
          "GetDefaultMLOD"
        ]
      },
      {
        "class_name": "SCR_FlagComponent",
        "methods": [
          "ChangeMaterial",
          "GetFlagEntity",
          "GetOwner",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_FreeRoamBuildingBaseTriggerEntity",
        "methods": [
          "EOnInit",
          "GetEditorManager",
          "SCR_FreeRoamBuildingBaseTriggerEntity"
        ]
      },
      {
        "class_name": "SCR_FreeRoamBuildingClientTriggerEntity",
        "methods": [
          "OnActivate",
          "OnDeactivate",
          "GetOnEntityEnterTrigger",
          "GetOnEntityLeaveTrigger",
          "SCR_FreeRoamBuildingClientTriggerEntity",
          "SetEventMask",
          "SetFlags"
        ]
      },
      {
        "class_name": "SCR_GraphLinesData",
        "methods": [
          "GetDefaultAlpha",
          "GetHighlightedAlpha",
          "GetLineWidth"
        ]
      },
      {
        "class_name": "SCR_PlayerProfileManagerComponent",
        "methods": [
          "GetPlayerFaction",
          "GetPlayerProfile",
          "HandleOnFactionAssigned",
          "OnPlayerKilled",
          "OnPlayerDisconnected",
          "StoreProfile",
          "StoreProfile",
          "LoadPlayerProfileFromBackend",
          "LoadConnectingPlayerProfile",
          "EOnFrame",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "SCR_PlayerProfileManagerComponent"
        ]
      },
      {
        "class_name": "SCR_PrefabDeleterEntity",
        "methods": [
          "QueryEntities",
          "EOnInit",
          "SCR_PrefabDeleterEntity",
          "SetEventMask",
          "_WB_AfterWorldUpdate"
        ]
      },
      {
        "class_name": "SCR_RefuelTask",
        "methods": [
          "GetVehicleExecutorIsIn",
          "CheckRefuelRequestConditions",
          "GetFuelLimit",
          "GetMapDescriptorText",
          "GetTaskListTaskText",
          "SetTargetVehicle",
          "GetTargetVehicle",
          "SetRequester",
          "ShowAvailableTask",
          "OnRefuelingFinished",
          "SCR_RefuelTask",
          "SetEventMask",
          "SetFlags",
          "SetIndividual"
        ]
      },
      {
        "class_name": "SCR_RequestEvacuationMessage",
        "methods": [
          "OnDelivery"
        ]
      },
      {
        "class_name": "SCR_RequestMessage",
        "methods": [
          "SetPosition",
          "SetRequesterMainBase",
          "SetRequesterID"
        ]
      },
      {
        "class_name": "SCR_RequestRefuelMessage",
        "methods": [
          "OnDelivery",
          "SetRequesterVehicle"
        ]
      },
      {
        "class_name": "SCR_RequestReinforcementsMessage",
        "methods": [
          "OnDelivery",
          "SetTargetFaction",
          "SetTargetBase"
        ]
      },
      {
        "class_name": "SCR_RequestTransportMessage",
        "methods": [
          "SetTargetPosition",
          "OnDelivery"
        ]
      },
      {
        "class_name": "SCR_ServicePointMapDescriptorComponent",
        "methods": [
          "SetParentBase",
          "SetServiceMarker",
          "SetServiceMarkerActive",
          "SetVisible",
          "ShowServiceHint",
          "HideServiceHint",
          "SCR_ServicePointMapDescriptorComponent"
        ]
      },
      {
        "class_name": "SCR_SessionInfo",
        "methods": [
          "SetRoomID",
          "GetRoomID",
          "SetFactionKey",
          "GetFactionKey",
          "SetLoginTime",
          "GetLoginTime",
          "SetLogoutTime",
          "GetLogoutTime",
          "GetTimeInSession",
          "SCR_SessionInfo"
        ]
      },
      {
        "class_name": "SCR_SlotDisablerEntity",
        "methods": [
          "QueryEntities",
          "GetSlots",
          "EOnInit",
          "GetSlots",
          "SCR_SlotDisablerEntity",
          "SetEventMask",
          "_CaptureDoors",
          "GetSlots",
          "_WB_OnKeyChanged",
          "_CaptureDoors",
          "_WB_SetExtraVisualiser",
          "_CaptureDoors",
          "_WB_AfterWorldUpdate"
        ]
      },
      {
        "class_name": "SCR_TaskNetworkComponent",
        "methods": [
          "CancelTask",
          "Rpc",
          "AbandonTask",
          "RPC_AbandonTask",
          "Rpc",
          "RequestAssignment",
          "RPC_RequestAssignment",
          "Rpc",
          "AssignTaskToPlayer",
          "Rpc",
          "RPC_AssignTaskToPlayer",
          "RPC_CancelTask",
          "RPC_AbandonTask",
          "RPC_RequestAssignment",
          "EOnInit",
          "OnPostInit",
          "SetEventMask",
          "SCR_TaskNetworkComponent"
        ]
      },
      {
        "class_name": "SCR_VehicleSpawnProtectionComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "ClearEventMask",
          "ReleaseProtection",
          "RemoveEventHandlers",
          "SetProtectionTime",
          "SetVehicleOwner",
          "SetProtectOnlyDriverSeat",
          "SetReasonText",
          "GetVehicleOwner",
          "IsProtected",
          "OnPlayerDisconected",
          "OnPlayerDisconnected",
          "OnPlayerDisconnected",
          "ReleaseProtection",
          "GetReasonText",
          "RemoveEventHandlers"
        ]
      },
      {
        "class_name": "SCR_WeaponRackEntity",
        "methods": [
          "GetPeriodTime",
          "ClearWeapons",
          "PeriodicalSpawn",
          "EOnInit",
          "SCR_WeaponRackEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_WeaponRackSlotEntity",
        "methods": [
          "GetSlotSupportedItemTypes",
          "GetSlotSupportedItemModes",
          "GetCurrentOccupiedItemType",
          "GetCurrentOccupiedItemMode",
          "RemoveItem",
          "CanSpawnItem",
          "SpawnNewItem",
          "SCR_WeaponRackSlotEntity"
        ]
      },
      {
        "class_name": "SCR_CampaignMutePlayerComponent",
        "methods": [
          "GetPlayerID",
          "SetPlayerID",
          "OnClick"
        ]
      },
      {
        "class_name": "SCR_UITaskAssignComponent",
        "methods": [
          "SetAction",
          "GetTaskID",
          "SetTaskID",
          "OnMouseEnter",
          "OnClick"
        ]
      },
      {
        "class_name": "AnimPhysCommandScripted",
        "methods": [
          "AnimPhysCommandScripted",
          "OnActivate",
          "OnDeactivate",
          "IsFlagAutoDelete",
          "SetFlagAutoDelete",
          "SetFlagFinished",
          "IsFlagFinished",
          "PreAnimUpdate",
          "PreAnim_CallCommand",
          "PreAnim_CallCommand4I",
          "PreAnim_SetFloat",
          "PreAnim_SetInt",
          "PreAnim_SetBool",
          "PrePhysUpdate",
          "PrePhys_IsEvent",
          "PrePhys_IsTag",
          "PrePhys_GetPredictionEval",
          "PrePhys_GetTranslation",
          "PrePhys_GetRotation",
          "PrePhys_SetTranslation",
          "PrePhys_SetRotation",
          "PostPhysUpdate",
          "PostPhys_GetPosition",
          "PostPhys_GetRotation",
          "PostPhys_SetPosition",
          "PostPhys_SetRotation",
          "PostPhys_LockRotation"
        ]
      },
      {
        "class_name": "CharacterCameraBase",
        "methods": [
          "fixAngle_PI_PI",
          "fixAngle_180_180",
          "CharacterCameraBase",
          "UpdateUDAngle",
          "UpdateLRAngle",
          "OnUpdate",
          "OnActivate",
          "ForceFreelook",
          "GetShoulderLastActive",
          "GetShoulderDistance",
          "GetInterpolatedUDTransformAngle",
          "AddPitchRoll",
          "AddVehiclePitchRoll",
          "AddPitchRoll",
          "SetBaseAngles",
          "GetBaseAngles",
          "GetCameraBoneIndex"
        ]
      },
      {
        "class_name": "CharacterCameraBinoculars",
        "methods": [
          "CharacterCameraBinoculars",
          "OnActivate",
          "FindOpticsComponent",
          "OnUpdate"
        ]
      },
      {
        "class_name": "CharacterCameraDebug",
        "methods": [
          "CharacterCameraDebug",
          "OnActivate",
          "OnUpdate"
        ]
      },
      {
        "class_name": "SCR_CharacterCameraHandlerComponent",
        "methods": [
          "SCR_CharacterCameraHandlerComponent",
          "Init",
          "OnCameraActivate",
          "OnCameraDeactivate",
          "SetThirdPerson",
          "OnAlphatestChange",
          "OnAlphatestChange",
          "OnCameraDeactivate",
          "OnAlphatestChange",
          "SetFocusMode",
          "IsDebugView",
          "CheckVehicleADS",
          "CheckIsInTurret",
          "CheckIsInTurret",
          "CameraSelector",
          "ShouldForceFirstPersonInThirdPerson",
          "GetCameraTransitionTime",
          "OnThirdPersonSwitch",
          "GetThirdPersonSwitchInvoker",
          "OnBeforeCameraUpdate",
          "CheckIsInTurret",
          "UpdateViewBob",
          "OnAlphatestChange",
          "SetFocusMode",
          "OnAfterCameraUpdate",
          "UpdateHeadVisibility",
          "UpdateAiming",
          "UpdateShake",
          "UpdateHeadVisibility",
          "UpdateShake",
          "AddShakeToToTransform",
          "OnCameraSwitchPressed",
          "SetThirdPerson",
          "CollisionSolver",
          "ResetSlide",
          "ApplySmoothedSlide",
          "rayParam",
          "UpdateViewBob",
          "AddViewBobToTransform",
          "UpdateAiming",
          "Is3rdPersonView",
          "ResetSlide",
          "ApplySmoothedSlide",
          "CanUseOverlayCameraFOV",
          "GetOverlayCameraFOVScalarWeight",
          "GetRecoilShakeParams",
          "SetOverlayCameraFOV",
          "SetADSSensitivity",
          "CalculateFovScalar",
          "IsCameraActive"
        ]
      },
      {
        "class_name": "CharacterCameraSet",
        "methods": [
          "Init",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterCameraCreator",
          "RegisterTransitionTime",
          "RegisterTransitionTime",
          "RegisterTransitionTime",
          "RegisterTransitionTime"
        ]
      },
      {
        "class_name": "SCR_CharacterCommandLoiter",
        "methods": [
          "SCR_CharacterCommandLoiter",
          "OnActivate",
          "SetFlagFinished",
          "SwitchState",
          "OnDeactivate",
          "OnPossess",
          "StopLoitering",
          "IsRootMotionControlled",
          "PrePhysUpdate",
          "FinishLoiter",
          "SwitchState",
          "StopLoitering",
          "SwitchState",
          "FinishLoiter",
          "SetFlagFinished"
        ]
      },
      {
        "class_name": "SCR_ScriptedCommandsStaticTable",
        "methods": [
          "SCR_ScriptedCommandsStaticTable",
          "Bind",
          "IsBound"
        ]
      },
      {
        "class_name": "SCR_CharacterCommandFly",
        "methods": [
          "SCR_CharacterCommandFly",
          "OnActivate",
          "OnDeactivate",
          "PreAnimUpdate",
          "PrePhysUpdate",
          "PrePhys_GetTranslation",
          "PrePhys_SetTranslation",
          "PostPhysUpdate"
        ]
      },
      {
        "class_name": "SCR_CharacterCommandHandlerComponent_Tests",
        "methods": [
          "HandleDeath",
          "SetSimulationDisabled",
          "HandleFinishedCommands",
          "StartCommand_Fall",
          "StartCommand_Move",
          "HandleSwimming",
          "StartCommand_Swim",
          "HandleLadders",
          "StartCommand_Ladder",
          "HandleClimbing",
          "HandleFalling",
          "StartCommand_Fall",
          "HandleDamageHit",
          "AddCommandModifier_Damage",
          "HandleWeapons",
          "HandleWeaponChange",
          "HandleThrowing",
          "TransitionMove_JumpClimb",
          "CancelThrowDefault",
          "StartCommand_Climb",
          "OnInit",
          "SetCurrentCommandSwimSettings",
          "SubhandlerStatesBegin"
        ]
      },
      {
        "class_name": "SCR_CharacterCommandSwimST",
        "methods": [
          "SCR_CharacterCommandSwimST"
        ]
      },
      {
        "class_name": "SCR_CharacterCommandSwim",
        "methods": [
          "SCR_CharacterCommandSwim",
          "StartSwimming",
          "PreAnim_CallCommand",
          "EndSwimming",
          "PreAnim_CallCommand",
          "UpdateWaterDepth",
          "OnActivate",
          "StartSwimming",
          "OnDeactivate",
          "PreAnimUpdate",
          "EndSwimming",
          "PreAnim_SetFloat",
          "PreAnim_SetFilteredHeading",
          "PreAnim_SetFilteredHeading",
          "PreAnim_SetFilteredHeading",
          "PrePhysUpdate",
          "UpdateWaterDepth",
          "PrePhys_GetTranslation",
          "PrePhys_SetTranslation",
          "PostPhysUpdate"
        ]
      },
      {
        "class_name": "SCR_MeleeHitDataClass",
        "methods": [
          "OnMeleePerformedDelegate"
        ]
      },
      {
        "class_name": "SCR_MeleeComponent",
        "methods": [
          "HasBayonet",
          "GetOnMeleePerformed",
          "PerformAttack",
          "Do_ClearDbgShapes",
          "CollectMeleeWeaponProperties",
          "SetMeleeAttackStarted",
          "Do_OnFrameCleanup",
          "TraceFilter",
          "GetAimingVector",
          "CheckCollisionsSimple",
          "MCDbgPrint",
          "MCDbgPrint",
          "MCDbgPrint",
          "MCDbgPrint",
          "CollectMeleeWeaponProperties",
          "HandleMeleeSound",
          "PlaySound",
          "PlaySound",
          "RPC_HandleMeleeSound",
          "PlaySound",
          "SearchHierarchyForDamageManager",
          "ProcessMeleeAttack",
          "HandleMeleeSound",
          "Debug_DrawSphereAtPos",
          "HandleDamageDelayed",
          "Do_OnFrameCleanup",
          "Do_ClearDbgShapes",
          "Debug_DrawSphereAtPos",
          "Debug_DrawSphereAtPos",
          "Debug_DrawLineSimple",
          "MCDbgPrint",
          "Update",
          "ProcessMeleeAttack",
          "OnPostInit",
          "SetEventMask",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_CharacterCommandHandlerComponent",
        "methods": [
          "HandleMelee",
          "SelectMeleeAnimationType",
          "GetOnCommandActivate",
          "OnCommandActivate",
          "StartCommandLoitering",
          "GetLoiterCommand",
          "StopLoitering",
          "Rpc",
          "Rpc_StopLoiter_S",
          "BroadCastLoiterFinish",
          "Rpc",
          "RPC_FinishLoitering_BCNO",
          "IsLoitering",
          "OnInit"
        ]
      },
      {
        "class_name": "SCR_CharacterControllerComponentClass",
        "methods": [
          "OnPlayerDeathWithParam",
          "OnControlledByPlayer",
          "OnItemUseBegan",
          "OnItemUseEnded",
          "OnItemUseFinished"
        ]
      },
      {
        "class_name": "SCR_CharacterControllerComponent",
        "methods": [
          "CanInteract",
          "OnConsciousnessChanged",
          "TryEquipRightHandItem",
          "GetOnAnimationEvent",
          "OnGadgetStateChanged",
          "OnGadgetFocusStateChanged",
          "OnItemUseBegan",
          "OnItemUseEnded",
          "OnAnimationEvent",
          "OnMeleeDamage",
          "ComputeHitReaction",
          "GetOnPlayerDeath",
          "GetOnPlayerDeathWithParam",
          "OnDeath",
          "OnLifeStateChanged",
          "GetCanMeleeAttack",
          "GetCanEquipGadget",
          "OnPerformAction",
          "OnInit",
          "OnApplyControls",
          "UpdateDrowning",
          "GetDrowningTime",
          "IsCharacterDrowning",
          "ShouldAligningAdjustAimingAngles",
          "IsAligningBeforeLoiter",
          "IsAligningBeforeLoiter",
          "SCR_GetDisableMovementControls",
          "SCR_OnDisabledJumpAction",
          "StopLoitering",
          "OnDiag",
          "SetBanking",
          "CreateDebugUI",
          "DeleteDebugUI",
          "UpdateDebugUI",
          "ReloadDebugUI",
          "DeleteDebugUI",
          "CreateDebugUI",
          "DeleteDebugUI",
          "UpdateInputCircles",
          "CreateDebugUI",
          "UpdateInputCircles",
          "UpdateDebugBoolWidget",
          "UpdateDebugUI",
          "UpdateInputCircles",
          "OnPrepareControls",
          "SetRoll",
          "SetRoll",
          "SCR_CharacterControllerComponent",
          "DeleteDebugUI",
          "SetNextSightsFOVInfo",
          "SetNextSights",
          "GetSightsFOVInfo",
          "OnControlledByPlayer",
          "ActionNextWeapon",
          "ActionUnequipItem",
          "ActionDropItem",
          "ActionWeaponLowReady",
          "SetPartialLower",
          "ActionWeaponRaised",
          "SetWeaponRaised",
          "SetPartialLower",
          "ActionWeaponBipod",
          "StopDeployment",
          "OnInspectionModeChanged",
          "GetInspectTargetLookAt",
          "GetScrInputContext",
          "StartLoitering",
          "RemoveGadgetFromHand",
          "AlignToPositionFromCurrentPosition",
          "TryStartLoiteringInternal",
          "AlignToPositionFromCurrentPosition",
          "Rpc_StartLoitering_S",
          "Rpc",
          "Rpc_StartLoitering_BCNO",
          "TryStartLoiteringInternal",
          "TryEquipRightHandItem",
          "Rpc",
          "Rpc",
          "RPC_StopLoitering_S",
          "StopLoitering",
          "Rpc",
          "IsLoitering"
        ]
      },
      {
        "class_name": "SCR_ChatChannel",
        "methods": [
          "IsChannelEnabled",
          "GetID",
          "GetWarningMessage"
        ]
      },
      {
        "class_name": "SCR_VehicleChatChannel",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "AttachToSlotManagerCinematicTrack",
        "methods": [
          "OnInit",
          "findEntity",
          "findEntity",
          "OnApply",
          "findEntity"
        ]
      },
      {
        "class_name": "SlotBoneAnimationCinematicTrack",
        "methods": [
          "OnInit",
          "findEntity",
          "findEntity",
          "OnApply",
          "findEntity"
        ]
      },
      {
        "class_name": "CameraTweekCinematicTrack",
        "methods": [
          "OnInit",
          "OnApply"
        ]
      },
      {
        "class_name": "CharacterCinematicTrack",
        "methods": [
          "jump",
          "reload",
          "equipMuzzle",
          "singleShoot",
          "autoShootStart",
          "autoShootEnd",
          "die",
          "throwStart",
          "throwEnd",
          "actionGetInPilot",
          "actionGetOutPilot",
          "actionGetInCargo",
          "actionGetOutCargo",
          "actionGetInTurret",
          "actionGetOutTurret",
          "actionEquip",
          "actionActivate",
          "actionOpen",
          "OnInit",
          "findCharacter",
          "findCharacter",
          "RefreshWeapon",
          "OnApply",
          "PerformActionGetIn",
          "PerformActionEquip",
          "PerformActionActivate",
          "PerformActionOpen"
        ]
      },
      {
        "class_name": "EnableCinematicTrack",
        "methods": [
          "OnInit",
          "findEntity",
          "findEntity",
          "OnApply",
          "findEntity"
        ]
      },
      {
        "class_name": "FxCinematicTrack",
        "methods": [
          "Play",
          "SetTime",
          "OnInit"
        ]
      },
      {
        "class_name": "GeneralCinematicTrack",
        "methods": [
          "OnInit",
          "findEntity",
          "findEntity",
          "OnApply",
          "findEntity"
        ]
      },
      {
        "class_name": "LightCinematicTrack",
        "methods": [
          "OnInit",
          "OnApply"
        ]
      },
      {
        "class_name": "PhysicsCinematicTrack",
        "methods": [
          "playImpulse",
          "findEntity",
          "OnInit",
          "findEntity",
          "OnApply"
        ]
      },
      {
        "class_name": "VehicleCinematicTrack",
        "methods": [
          "insertGunner",
          "OnInit",
          "findEntity",
          "findEntity",
          "OnApply"
        ]
      },
      {
        "class_name": "WeatherCinematicTrack",
        "methods": [
          "OnInit",
          "OnApply"
        ]
      },
      {
        "class_name": "SCR_FastTravelAction",
        "methods": [
          "PerformAction",
          "CanBePerformedScript",
          "HasLocalEffectOnlyScript"
        ]
      },
      {
        "class_name": "SCR_ContinuousLoiterCommand",
        "methods": [
          "Execute",
          "StartLoiter",
          "CanBePerformed",
          "StartLoiter"
        ]
      },
      {
        "class_name": "SCR_BaseGroupCommand",
        "methods": [
          "CanRoleShow",
          "GetSoundEventName",
          "GetSoundEventSeed",
          "CanShowPreview",
          "ShouldPlayAIResponse",
          "CanShowOnMap",
          "GetCommandGestureID",
          "GetVisualizationDuration",
          "CanBeShownInCurrentLifeState",
          "VisualizeCommand",
          "VisualizeCommandPreview"
        ]
      },
      {
        "class_name": "SCR_BaseRadialCommand",
        "methods": [
          "Execute",
          "VisualizeCommand",
          "VisualizeCommandPreview",
          "GetIconName",
          "GetCommandDisplayName",
          "GetIconImageset",
          "GetCommandName",
          "CanRoleShow",
          "CanBeShownInCurrentLifeState",
          "CanBeShown",
          "CanShowOnMap",
          "CanBePerformed"
        ]
      },
      {
        "class_name": "SCR_CharacterEntityWaypointGroupCommand",
        "methods": [
          "Execute",
          "CreateCharacterEntityWP",
          "CreateCharacterEntityWP",
          "CheckPreviousWaypoints"
        ]
      },
      {
        "class_name": "SCR_ContextGetIngroupCommand",
        "methods": [
          "Execute",
          "DecideAndSetWP",
          "DecideAndSetWP",
          "SetWaypointForAIGroup",
          "CreateBoardingEntityWP",
          "CheckPreviousWaypoints"
        ]
      },
      {
        "class_name": "SCR_EmoteBaseCommand",
        "methods": [
          "Execute",
          "CanBePerformed"
        ]
      },
      {
        "class_name": "SCR_FollowGroupCommand",
        "methods": [
          "Execute",
          "CheckPreviousWaypoints"
        ]
      },
      {
        "class_name": "SCR_GestureGroupCommand",
        "methods": [
          "Execute"
        ]
      },
      {
        "class_name": "SCR_GetINtoSelectedVehicleGroupCommand",
        "methods": [
          "Execute",
          "CheckPreviousWaypoints",
          "CanBeShown"
        ]
      },
      {
        "class_name": "SCR_GetOutGroupCommand",
        "methods": [
          "Execute",
          "GetOutAtVehiclePosition",
          "GetOutAtVehiclePosition"
        ]
      },
      {
        "class_name": "SCR_LookAtGroupCommand",
        "methods": [
          "Execute",
          "LookAtPosition",
          "LookAtPosition",
          "CanBeShown"
        ]
      },
      {
        "class_name": "SCR_PatrolGroupCommand",
        "methods": [
          "Execute",
          "Patrol",
          "Patrol",
          "CheckPreviousWaypoints"
        ]
      },
      {
        "class_name": "SCR_RecruitAIGroupCommand",
        "methods": [
          "Execute",
          "CanBeShown"
        ]
      },
      {
        "class_name": "SCR_RemoveAIGroupCommand",
        "methods": [
          "Execute",
          "CanBeShown"
        ]
      },
      {
        "class_name": "SCR_StopMovementGroupCommand",
        "methods": [
          "Execute",
          "CanBeShown"
        ]
      },
      {
        "class_name": "SCR_WaypointGroupCommand",
        "methods": [
          "Execute",
          "SpawnWPVisualization",
          "SpawnWPVisualization",
          "SetWaypointForAIGroup",
          "SetWaypointForAIGroup",
          "CheckPreviousWaypoints",
          "SpawnWPVisualization",
          "GetWaypointPrefab",
          "SetWaypointPrefab",
          "GetOverridePreviousCommands",
          "SetOverridePreviousCommands",
          "GetTargetPosition",
          "CheckPreviousWaypoints",
          "CanBeShown"
        ]
      },
      {
        "class_name": "SCR_CommandingManagerComponent",
        "methods": [
          "GetInstance",
          "GetGroupPrefab",
          "SCR_CommandingManagerComponent",
          "OnPostInit",
          "InitiateCommandMaps",
          "InitiateCommandMaps",
          "ResetSlaveGroupWaypoints",
          "RequestCommandExecution",
          "RPC_DoExecuteCommand",
          "Rpc",
          "RPC_DoExecuteCommand",
          "PlayCommanderSound",
          "PlayCommanderSound",
          "PlayAICommandResponse",
          "FindCommand",
          "FindCommandIndex",
          "GetCommandSoundEventName",
          "GetCommandSoundEventSeed",
          "FindCommandNameFromIndex",
          "CanShowCommand",
          "CanShowOnMap",
          "GetCommandsConfig",
          "GetMaxAIPerGroup",
          "SetMaxAIPerGroup",
          "GetRespondingAI"
        ]
      },
      {
        "class_name": "SCR_CommandingMenuEntry",
        "methods": [
          "SetCommandName",
          "GetCommandName"
        ]
      },
      {
        "class_name": "SCR_PlayerCommandingMenuConfig",
        "methods": [
          "GetRootCategory"
        ]
      },
      {
        "class_name": "SCR_PlayerCommandingConfigActionPair",
        "methods": [
          "GetActionName",
          "GetConfig"
        ]
      },
      {
        "class_name": "SCR_PlayerCommandingMenuCommand",
        "methods": [
          "GetCommandName",
          "SetCommandName",
          "GetCommandDisplayText",
          "GetCommandCustomName",
          "SetCommandCustomName"
        ]
      },
      {
        "class_name": "SCR_PlayerCommandingMenuCategoryElement",
        "methods": [
          "GetCategoryDisplayText",
          "SetCategoryDisplayText",
          "GetCanShowOnMap"
        ]
      },
      {
        "class_name": "SCR_BaseGroupCommandTitleField",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_PlayerControllerCommandingComponent",
        "methods": [
          "GetPlayerControllerCommandingComponent",
          "GetLocalPlayerControllerCommandingComponent",
          "OnPostInit",
          "SetEventMask",
          "OpenCommandingMenu",
          "OnControllerTakeControl",
          "SetupPlayerRadialMenu",
          "OnControllerLostControl",
          "RemoveListenersFromRadial",
          "SetupMapListener",
          "RemoveMapListener",
          "SetupPlayerRadialMenu",
          "RemoveListenersFromRadial",
          "OnMapOpen",
          "OnMapClose",
          "SetupMapRadialMenu",
          "AddElementsFromCategoryToMap",
          "OnMapCommandPerformed",
          "OnGroupLeaderChanged",
          "OnGroupChanged",
          "DeleteShownCommand",
          "HideCommandPreview",
          "ShowCommandPreview",
          "HideCommandPreview",
          "GetWorldToScreenPosition",
          "PhysicsCommandTrace",
          "OnRadialMenuSelected",
          "HideCommandPreview",
          "OnRadialMenuPerformed",
          "HideCommandPreview",
          "OnRadialMenuOpenFailed",
          "PrepareExecuteCommand",
          "ExecuteCommand",
          "PhysicsCommandTrace",
          "ExecuteCommand",
          "DeleteShownCommand",
          "Rpc",
          "RPC_RequestExecuteCommand",
          "CommandExecutedCallback",
          "Rpc",
          "RPC_CommandExecutedCallback",
          "PlayCommandGesture",
          "PlayCommandGesture",
          "UpdateRadialMenu",
          "AddElementsFromCategory",
          "AddElementsFromCategory",
          "AddElementsFromCategory",
          "AddRadialMenuElement",
          "AddElementsFromCategoryToMap",
          "AddElementsFromCategoryToMap",
          "InsertElementToMapRadial",
          "InsertElementToMapRadial",
          "AddRadialMenuElement",
          "AddCommandElement",
          "AddCategoryElement",
          "AddCategoryElement",
          "AddCommandElement",
          "OnPlayerRadialMenuOpen",
          "AddElementsFromCategory",
          "OnPlayerRadialMenuClose",
          "HideCommandPreview",
          "OnQuickslotBind4",
          "OnQuickslotBind5",
          "OnQuickslotBind6",
          "OnQuickslotBind7",
          "OnQuickslotBind8",
          "OnQuickslotBind9",
          "BindToQuickslot",
          "IsOpened",
          "IsCommandSelected",
          "SetShownCommand",
          "SetShownCommandPreview",
          "DrawWaypointVisualization"
        ]
      },
      {
        "class_name": "SCR_AmbientSoundsComponent",
        "methods": [
          "HandleQueryEntities",
          "QueryAmbientSoundsBySphere",
          "GetAmbientSoundsCountPerType",
          "GetDominantTree",
          "GetPoint",
          "SoundEventLooped",
          "TerminateLooped",
          "Terminate",
          "UpdateLoopedSounds",
          "UpdateSoundJob",
          "HandleQueryEntities",
          "OnPostInit",
          "SetScriptedMethodsCall",
          "SetScriptedMethodsCall",
          "OnInit",
          "SCR_AmbientSoundsComponent",
          "SetScriptedMethodsCall"
        ]
      },
      {
        "class_name": "SCR_AmbientSoundsEffect",
        "methods": [
          "Update",
          "OnPostInit",
          "OnInit",
          "UpdateDebug",
          "ReloadConfig"
        ]
      },
      {
        "class_name": "SCR_LoopedPositionalSounds",
        "methods": [
          "Update",
          "UpdateClosesEntitieyArray",
          "StopLoopedSounds",
          "PlayLoopedSounds",
          "StopLoopedSounds",
          "PlayLoopedSounds",
          "GetTreeProperties",
          "UpdateClosesEntitieyArray",
          "GetTreeProperties",
          "GetTreeSoundEventName",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_RandomPositionalSounds",
        "methods": [
          "Update",
          "ProcessSoundGroups",
          "UpdateSoundSequence",
          "UpdateGlobalModifiers",
          "RemoveSoundsBasedOnTimeAndWeather",
          "UpdateDebug",
          "AmbientSignalsDebug",
          "RandomPositionalSoundDebug",
          "DensityDebug",
          "PlaySound",
          "ProcessSoundGroups",
          "UpdateSoundGroup",
          "RemoveOutOfRangeSound",
          "UpdateDensity",
          "RemoveSoundsBasedOnTimeAndWeather",
          "UpdateGlobalModifiers",
          "GetDensityMax",
          "UpdateSoundSequence",
          "RemoveOutOfRangeSound",
          "UpdateSoundGroup",
          "GenerateRandomPosition",
          "GetRandomSoundDef",
          "GetTerrainType",
          "GetSoundMapTypeFromTerrain",
          "GetTerrainTypeFromTerrain",
          "GetTerrainType",
          "GetWaterSurfaceY",
          "GetRandomPositionOnEntity",
          "UpdateDensity",
          "Interpolate01",
          "UpdateSignlsIdx",
          "LoadConfigs",
          "AmbientSignalsDebug",
          "DensityDebug",
          "RandomPositionalSoundDebug",
          "NormalizeLength",
          "ReloadConfig",
          "PlaySound",
          "OnPostInit",
          "LoadConfigs",
          "UpdateSignlsIdx",
          "OnInit",
          "UpdateGlobalModifiers"
        ]
      },
      {
        "class_name": "SCR_SoundHandle",
        "methods": [
          "UpdateDensity",
          "GetSequenceLenght",
          "GetRandomInt",
          "CreateSequence",
          "CreateSequence",
          "UpdateRepTime",
          "SCR_SoundHandle",
          "UpdateRepTime",
          "UpdateDensity"
        ]
      },
      {
        "class_name": "SCR_BaseAreaMeshComponent",
        "methods": [
          "ActivateEveryFrame",
          "DeactivateEveryFrame",
          "GetRadius",
          "GetHeight",
          "GetShape",
          "GetResolution",
          "GetDimensions2D",
          "GetDimensions3D",
          "GetDimensions2D",
          "GetMeshOffset",
          "GetMaterial",
          "GenerateAreaMesh",
          "GetDimensions3D",
          "EOnFrame",
          "GenerateAreaMesh",
          "OnPostInit",
          "SetEventMask",
          "ActivateEveryFrame",
          "_WB_SetTransform",
          "GenerateAreaMesh"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingAreaMeshComponent",
        "methods": [
          "GetBufferZone",
          "GetRadius",
          "EnableFrameUpdateDuringEditor",
          "ShouldEnableFrameUpdateDuringEditor"
        ]
      },
      {
        "class_name": "SCR_CapturePointAreaMeshComponent",
        "methods": [
          "GetRadius",
          "EOnInit",
          "GenerateAreaMesh"
        ]
      },
      {
        "class_name": "SCR_CustomAreaMeshComponent",
        "methods": [
          "GetRadius",
          "EOnInit",
          "GenerateAreaMesh"
        ]
      },
      {
        "class_name": "SCR_MilitaryBaseAreaMeshComponent",
        "methods": [
          "GetRadius",
          "EOnInit",
          "GenerateAreaMesh"
        ]
      },
      {
        "class_name": "SCR_SpawnPointAreaMeshComponent",
        "methods": [
          "GetRadius",
          "EOnInit",
          "GenerateAreaMesh"
        ]
      },
      {
        "class_name": "SCR_SupportStationAreaMeshComponent",
        "methods": [
          "GetRadius",
          "GetSupportStation",
          "GetMaterial",
          "OnEnabledChanged",
          "GenerateAreaMesh",
          "EOnInit",
          "Init",
          "Init",
          "GenerateAreaMesh",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_TriggerAreaMeshComponent",
        "methods": [
          "GetRadius",
          "EOnInit",
          "GenerateAreaMesh"
        ]
      },
      {
        "class_name": "SCR_WaypointAreaMeshComponent",
        "methods": [
          "GetRadius",
          "EOnInit",
          "GenerateAreaMesh"
        ]
      },
      {
        "class_name": "SCR_ZoneRestrictionAreaMeshComponent",
        "methods": [
          "GetRadius",
          "EOnInit",
          "GenerateAreaMesh"
        ]
      },
      {
        "class_name": "SCR_ArsenalComponentClass",
        "methods": [
          "ScriptInvokerArsenalUpdatedMethod"
        ]
      },
      {
        "class_name": "SCR_ArsenalComponent",
        "methods": [
          "GetArsenalType",
          "IsArsenalEnabledByType",
          "OnArsenalTypeEnabledChanged",
          "SetArsenalEnabled",
          "SetArsenalEnabled",
          "IsArsenalEnabled",
          "SetArsenalEnabled",
          "SetArsenalEnabledBroadcast",
          "Rpc",
          "UpdateArsenalEnabledState",
          "UpdateArsenalEnabledState",
          "SetSupportedArsenalItemModes",
          "SetSupportedArsenalItemModes",
          "SetArsenalEnabledBroadcast",
          "GetSupplyCostType",
          "IsArsenalUsingSupplies",
          "GetArsenalSaveType",
          "IsArsenalSavingDisplayedIfDisabled",
          "SetHasSaveArsenalAction",
          "HasSaveArsenalAction",
          "SetArsenalSaveType",
          "RPL_SetArsenalSaveType",
          "Rpc",
          "RPL_SetArsenalSaveType",
          "GetSupportedArsenalItemTypes",
          "FindArsenalComponent",
          "SetSupportedArsenalItemTypes",
          "RefreshArsenal",
          "GetSupportedArsenalItemModes",
          "SetSupportedArsenalItemModes",
          "RefreshArsenal",
          "GetEditableAttributeGroups",
          "GetArsenalInventoryComponent",
          "GetOverwriteArsenalConfig",
          "GetAvailablePrefabs",
          "GetAssignedFaction",
          "GetFilteredArsenalItems",
          "GetFilteredOverwriteArsenalItems",
          "GetFilteredOverwriteArsenalItems",
          "ClearArsenal",
          "RefreshArsenal",
          "ClearArsenal",
          "Rpc",
          "RPC_OnArsenalUpdated",
          "DelayedOnArsenalUpdatedClient",
          "GetAvailablePrefabs",
          "GetItemValid",
          "GetItemValid",
          "GetOnArsenalUpdated",
          "OnFactionChanged",
          "RefreshArsenal",
          "OnArsenalGameModeTypeChanged",
          "RefreshArsenal",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "FactionInit",
          "FactionInit",
          "SetArsenalEnabled",
          "UpdateArsenalEnabledState",
          "OnDelete",
          "RplSave",
          "RplLoad",
          "RPC_OnArsenalUpdated",
          "RPL_SetArsenalSaveType",
          "SetArsenalEnabledBroadcast"
        ]
      },
      {
        "class_name": "SCR_ArsenalDisplayComponent",
        "methods": [
          "SetSupportedArsenalItemTypes",
          "ClearArsenal",
          "SetSupportedArsenalItemModes",
          "ClearArsenal",
          "RegisterSlot",
          "OnFactionChanged",
          "ClearArsenal",
          "RefreshArsenal",
          "OnArsenalGameModeTypeChanged",
          "ClearArsenal",
          "RefreshArsenal",
          "ClearArsenal",
          "RefreshUpdate",
          "RefreshArsenal",
          "GetSlotValid",
          "GetItemValidForSlot",
          "EOnInit",
          "RegisterSlot",
          "RefreshArsenal",
          "OnPostInit",
          "SetEventMask",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_ArsenalInventoryStorageManagerComponent",
        "methods": [
          "IsPrefabInArsenalStorage",
          "IsItemInArsenalStorage",
          "OnArsenalUpdated",
          "OnItemAdded",
          "OnItemsAddedDelay",
          "OnItemRemoved",
          "FillInitialPrefabsToStore",
          "OnArsenalUpdated"
        ]
      },
      {
        "class_name": "SCR_ArsenalItem",
        "methods": [
          "GetItemType",
          "GetItemMode",
          "GetArsenalGameModeTypes",
          "GetItemResourceName",
          "GetItemResource",
          "GetDisplayDataOfType",
          "GetSupplyCost",
          "InitData",
          "PostInitData"
        ]
      },
      {
        "class_name": "SCR_ArsenalItemCountConfig",
        "methods": [
          "GetItemType",
          "GetMaxItemCount",
          "CheckMaxCount"
        ]
      },
      {
        "class_name": "SCR_ArsenalItemDisplayData",
        "methods": [
          "GetItemOffset",
          "GetItemRotation",
          "GetDisplayType"
        ]
      },
      {
        "class_name": "SCR_ArsenalItemListConfig",
        "methods": [
          "GetArsenalItems",
          "GetItemTypeAndModeForPrefab",
          "GetItemModeForPrefab"
        ]
      },
      {
        "class_name": "SCR_ArsenalItemStandalone",
        "methods": [
          "GetItemResourceName",
          "SCR_ArsenalItemStandalone"
        ]
      },
      {
        "class_name": "SCR_ArsenalItemTypeUIConfig",
        "methods": [
          "GetInfoForType"
        ]
      },
      {
        "class_name": "SCR_ArsenalItemTypeUI",
        "methods": [
          "GetItemType",
          "GetInfo"
        ]
      },
      {
        "class_name": "SCR_CleanSweepAreaSelectionButtonComponent",
        "methods": [
          "OnClick"
        ]
      },
      {
        "class_name": "SCR_CleanSweepNetworkComponent",
        "methods": [
          "CommitSuicide",
          "Rpc",
          "ShowAreaSelectionScreen",
          "Rpc",
          "ChooseArea",
          "Rpc",
          "SetControlledEntityOrigin",
          "Rpc",
          "RPC_CommitSuicide",
          "RPC_SetControlledEntityOrigin",
          "RPC_ShowAreaSelectionScreen",
          "RPC_ChooseArea",
          "SCR_CleanSweepNetworkComponent"
        ]
      },
      {
        "class_name": "SCR_ArmorDamageManagerComponent",
        "methods": [
          "FilterContact",
          "HijackDamageHandling"
        ]
      },
      {
        "class_name": "SCR_CharacterDamageManagerComponent",
        "methods": [
          "OnInit",
          "DiagInit",
          "ShouldBeUnconscious",
          "UpdateConsciousness",
          "ForceUnconsciousness",
          "UpdateConsciousness",
          "OnLifeStateChanged",
          "SoundKnockout",
          "SoundDeath",
          "RemoveAllBleedingParticlesAfterDeath",
          "InsertArmorData",
          "RemoveArmorData",
          "UpdateArmorDataMap",
          "RemoveArmorData",
          "InsertArmorData",
          "OverrideHitMaterial",
          "GetArmorData",
          "GetArmorProtection",
          "ArmorHitEventEffects",
          "ArmorHitEventDamage",
          "OnDamageEffectAdded",
          "SoundHeal",
          "OnDamageEffectRemoved",
          "RegenVirtualHitZone",
          "TryClearDamageHistory",
          "HijackDamageHandling",
          "HandleFallDamage",
          "SoundHit",
          "SoundKnockout",
          "SoundDeath",
          "SoundHeal",
          "RemoveAllBleedingParticlesAfterDeath",
          "AddBloodToClothes",
          "CanBeHealed",
          "GetPersistentEffects",
          "GetAllHitZonesInHierarchy",
          "FullHeal",
          "GetPersistentEffects",
          "RemoveAllBleedings",
          "TryClearDamageHistory",
          "ClearDamageHistory",
          "SetBloodHitZone",
          "GetBloodHitZone",
          "GetResilienceRegenScale",
          "SetBleedingScale",
          "GetBleedingScale",
          "SetRegenScale",
          "GetRegenScale",
          "GetPermitUnconsciousness",
          "SetPermitUnconsciousness",
          "SetOverrideCharacterMedicalGMAttribute",
          "GetOverrideCharacterMedicalGMAttribute",
          "SetResilienceHitZone",
          "GetResilienceHitZone",
          "SetHeadHitZone",
          "GetHeadHitZone",
          "GetTourniquetStrengthMultiplier",
          "AddBleedingEffectOnHitZone",
          "hitZoneBleeding",
          "AddDamageEffect",
          "AddBleedingToArray",
          "RemoveBleedingFromArray",
          "CreateBleedingParticleEffect",
          "RemoveBleedingParticleEffect",
          "spawnParams",
          "RemoveAllBleedingParticles",
          "RemoveBleedingParticleEffect",
          "RemoveBleedingParticleEffect",
          "RemoveAllBleedings",
          "TerminateDamageEffectsOfType",
          "RemoveGroupBleeding",
          "GetHitZonesOfGroup",
          "AddParticularBleeding",
          "AddBleedingEffectOnHitZone",
          "AddRandomBleeding",
          "GetPhysicalHitZones",
          "AddBleedingEffectOnHitZone",
          "FindAssociatedHitZoneGroup",
          "GetPhysicalHitZones",
          "FindAssociatedBandagingBodyPart",
          "GetPhysicalHitZones",
          "GetHealingAnimHitzones",
          "GetAllHitZones",
          "GetGroupHealthScaled",
          "GetAllHitZones",
          "GetGroupDamageOverTime",
          "GetHitZonesOfGroup",
          "GetGroupTourniquetted",
          "SetTourniquettedGroup",
          "UpdateCharacterGroupDamage",
          "GetGroupIsBeingHealed",
          "SetGroupIsBeingHealed",
          "GetGroupSalineBagged",
          "SetSalineBaggedGroup",
          "IsBleeding",
          "GetPersistentEffects",
          "GetMostDOTHitZone",
          "GetAllHitZones",
          "GetPhysicalHitZones",
          "GetAllLimbs",
          "GetAllExtremities",
          "UpdateCharacterGroupDamage",
          "SetMovementDamage",
          "SetAimingDamage",
          "GetCharMostDOTHitzoneGroup",
          "GetPhysicalHitZones",
          "GetBoneName",
          "OnPostInit",
          "RegenPhysicalHitZones",
          "AddDamageEffect",
          "RegenVirtualHitZone",
          "AddDamageEffect",
          "SetExactMinImpulse",
          "OnWaterEnter",
          "FilterContact",
          "OnFilteredContact",
          "CalculateCollisionDamage",
          "CalculateCollisionDamage",
          "HandleFallDamage",
          "GetHitZonesOfGroup",
          "GetHitZonesOfGroup",
          "GetHitZonesOfGroup",
          "HandleDamage",
          "ApplyCollisionDamage",
          "GetAllHitZones",
          "GetNearestHitZones",
          "HandleDamage",
          "GetNearestHitZones",
          "GetHitZonesByColliderIDs",
          "ShouldOverrideInstigator",
          "OnDamageStateChanged",
          "TryClearDamageHistory",
          "ClearDamageHistory",
          "OnDamage",
          "RegenPhysicalHitZones",
          "OnDelete",
          "DisconnectFromDiagSystem",
          "DiagInit",
          "ConnectToDiagSystem",
          "OnDiag",
          "ProcessDebug",
          "ProcessDebug",
          "HandleDamage",
          "HandleDamage",
          "AddParticularBleeding",
          "AddParticularBleeding",
          "FullHeal"
        ]
      },
      {
        "class_name": "SCR_HelicopterDamageManagerComponent",
        "methods": [
          "EnableContactMaskOnHost",
          "SetEventMask",
          "ClearEventMask",
          "OnDamageStateChanged",
          "EnableContactMaskOnHost",
          "RegisterVehicleHitZone",
          "UnregisterVehicleHitZone",
          "UpdateVehicleState",
          "UpdateMovementDamage",
          "SetEngineFunctional",
          "UpdateMovementDamage",
          "SetMovementDamage"
        ]
      },
      {
        "class_name": "SCR_RotorDamageManagerComponent",
        "methods": [
          "ShouldCountAsHit",
          "DamageRotors",
          "DamageOther",
          "EmitRotorParticles",
          "PlayRotorImpactSound",
          "OnDamageStateChanged",
          "TraceFilter",
          "RPC_OnContactBroadcast",
          "EmitRotorParticles",
          "PlayRotorImpactSound",
          "FilterContact",
          "OnFilteredContact",
          "DamageOther",
          "RPC_OnContactBroadcast",
          "Rpc",
          "DamageRotors",
          "GetComponentsDelayed",
          "OnInit"
        ]
      },
      {
        "class_name": "SCR_VehicleDamageManagerComponentClass",
        "methods": [
          "GetMaxSharedDamageDistance",
          "GetFrontMultiplier",
          "GetBottomMultiplier",
          "GetRearMultiplier",
          "GetLeftMultiplier",
          "GetRightMultiplier",
          "GetTopMultiplier",
          "GetOccupantsDamageSpeedThreshold",
          "GetOccupantsSpeedDeath",
          "GetFrontalImpact"
        ]
      },
      {
        "class_name": "SCR_VehicleDamageManagerComponent",
        "methods": [
          "GetPrefabData",
          "GetTopMultiplier",
          "GetRightMultiplier",
          "GetLeftMultiplier",
          "GetRearMultiplier",
          "GetBottomMultiplier",
          "GetFrontMultiplier",
          "GetMaxSharedDamageDistance",
          "GetOccupantsDamageSpeedThreshold",
          "GetOccupantsSpeedDeath",
          "GetFrontalImpact",
          "GetSideDamageMultiplier",
          "GetFrontMultiplier",
          "GetRearMultiplier",
          "GetBottomMultiplier",
          "GetTopMultiplier",
          "GetLeftMultiplier",
          "GetRightMultiplier",
          "IsInContact",
          "OnPostInit",
          "UpdateVehicleState",
          "SetEventMask",
          "RegisterVehicleHitZone",
          "UnregisterVehicleHitZone",
          "UpdateVehicleState",
          "SetEngineFunctional",
          "SetEngineEfficiency",
          "SetGearboxFunctional",
          "SetGearboxEfficiency",
          "UpdateMovementDamage",
          "UpdateMovementDamage",
          "SetMovementDamage",
          "GetEngineFunctional",
          "SetEngineFunctional",
          "GetEngineMalfunctionThreshold",
          "GetEngineEfficiency",
          "SetEngineEfficiency",
          "SetGearboxFunctional",
          "GetGearboxFunctional",
          "GetGearboxEfficiency",
          "SetGearboxEfficiency",
          "DamageSurroundingHitzones",
          "GetHitDirection",
          "_WB_OnContextMenu",
          "OnWaterEnter",
          "FilterContact",
          "OnFilteredContact",
          "CollisionDamage",
          "CollisionDamage",
          "HandleDamage",
          "GetOnVehicleDestroyed",
          "OnDamageStateChanged",
          "CanBeHealed",
          "FullHeal",
          "TickResponseIndexCheck",
          "RPC_OnPhysicsActive",
          "ToggleResponseIndexTicking",
          "EOnPhysicsActive",
          "RPC_OnPhysicsActive",
          "RPC_OnPhysicsActive",
          "RegisterFlammableHitZone",
          "UnregisterFlammableHitZone",
          "UpdateFireDamage",
          "UpdateVehicleFireState",
          "UpdateFuelTankFireState",
          "UpdateSuppliesFireState",
          "OnVehicleFireStateChanged",
          "SetVehicleFireState",
          "OnVehicleFireStateChanged",
          "OnFuelTankFireStateChanged",
          "UpdateFireParticles",
          "SetFuelTankFireState",
          "OnFuelTankFireStateChanged",
          "OnSuppliesFireStateChanged",
          "UpdateFireParticles",
          "SetSuppliesFireState",
          "OnSuppliesFireStateChanged",
          "UpdateVehicleFireState",
          "spawnParams",
          "SetVehicleFireState",
          "UpdateFuelTankFireState",
          "SetFuelTankFireState",
          "SetFuelTankFireState",
          "SetFuelTankFireState",
          "SetFuelTankFireState",
          "spawnParams",
          "SetFuelTankFireState",
          "UpdateSuppliesFireState",
          "SetSuppliesFireState",
          "SetSuppliesFireState",
          "SetSuppliesFireState",
          "SetSuppliesFireState",
          "SetSuppliesFireState",
          "spawnParams",
          "GetMinImpulse",
          "InitStaticMapForIndices",
          "ShouldOverrideInstigator",
          "SCR_VehicleDamageManagerComponent",
          "InitStaticMapForIndices"
        ]
      },
      {
        "class_name": "SCR_WheeledDamageManagerComponent",
        "methods": [
          "GetWheelsEfficiency",
          "SetWheelsEfficiency",
          "UpdateVehicleState",
          "SetWheelsEfficiency",
          "UpdateMovementDamage",
          "SetMovementDamage"
        ]
      },
      {
        "class_name": "SCR_MoveInCircleComponent",
        "methods": [
          "EOnFixedFrame",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "SCR_MoveInCircleComponent"
        ]
      },
      {
        "class_name": "SCR_WBAfterWorldUpdateTest",
        "methods": [
          "SCR_WBAfterWorldUpdateTest",
          "_WB_AfterWorldUpdate"
        ]
      },
      {
        "class_name": "SCR_TimeAndWeatherHandlerComponent",
        "methods": [
          "GetInstance",
          "SetupDaytimeAndWeather",
          "HandleDaytimeAcceleration",
          "HandleDaytimeAcceleration",
          "OnWorldPostProcess",
          "SetupDaytimeAndWeather",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_FuelConsumptionComponent",
        "methods": [
          "SetGlobalFuelConsumptionScale",
          "GetGlobalFuelConsumptionScale",
          "SetCurrentFuelTank",
          "GetCurrentFuelTank",
          "FindFuelTankByID",
          "FindNonEmptyFuelTank",
          "SetEnabled",
          "Update",
          "ConnectToFuelConsumptionSystem",
          "DisconnectFromFuelConsumptionSystem",
          "Update",
          "ConnectToFuelConsumptionSystem",
          "DisconnectFromFuelConsumptionSystem",
          "Update",
          "Update",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "SetEnabled",
          "SetEnabled",
          "OnDelete",
          "DisconnectFromFuelConsumptionSystem"
        ]
      },
      {
        "class_name": "SCR_FuelManagerComponent",
        "methods": [
          "GetScriptedFuelNodesList",
          "GetFuelNodesList",
          "GetScriptedFuelNodesList",
          "GetScriptedFuelNodesList",
          "GetFuelNodesList",
          "CanBeRefueledScripted",
          "GetAllFuelManagers",
          "HasFuelToProvide",
          "GetScriptedFuelNodesList",
          "GetTotalValuesOfFuelNodes",
          "GetFuelNodesList",
          "GetTotalValuesOfFuelNodesOfFuelManagers",
          "SetTotalFuelPercentage",
          "GetFuelNodesList",
          "SetTotalFuelPercentageOfFuelManagers",
          "GetOnFuelChanged",
          "GetScriptedFuelNodesList",
          "OnFuelNodeAmountChanged",
          "SCR_FuelManagerComponent",
          "GetFuelNodesList"
        ]
      },
      {
        "class_name": "SCR_FuelNode",
        "methods": [
          "CanReceiveFuel",
          "CanProvideFuel",
          "HasExactTypeFlags",
          "HasAllTypeFlags",
          "HasAnyTypeFlag",
          "GetFuelTankID",
          "GetOwner",
          "SetHealth",
          "SetShouldSimulate",
          "OnFixedFrame",
          "OnFuelChanged",
          "GetOnFuelChanged",
          "GetHealth",
          "GetLeakableFuel",
          "GetMaxFlowCapacityOut",
          "GetMaxFlowCapacityIn",
          "OnInit",
          "PrintFormat",
          "SetFuel",
          "CanReceiveFuel",
          "CanProvideFuel",
          "GetFuelTankID",
          "GetOwner",
          "SetHealth",
          "OnFixedFrame",
          "OnFuelChanged",
          "GetLeakableFuel",
          "OnInit"
        ]
      },
      {
        "class_name": "SCR_FuelNozzleHolderComponent",
        "methods": [
          "StoreNozzle",
          "NozzleStored",
          "RemoveNozzle",
          "GetNozzle",
          "SCR_FuelNozzleHolderComponent"
        ]
      },
      {
        "class_name": "SCR_BinocularsComponent",
        "methods": [
          "IsZoomedView",
          "SetZoomedView",
          "ModeSwitch",
          "ModeClear",
          "ToggleFocused",
          "ToggleFocused",
          "SetZoomedView",
          "GetType",
          "CanBeRaised",
          "IsUsingADSControls",
          "IsVisibleEquipped"
        ]
      },
      {
        "class_name": "SCR_CompassComponentClass",
        "methods": [
          "InitSignals"
        ]
      },
      {
        "class_name": "SCR_CompassComponent",
        "methods": [
          "GetMapPrefabResource",
          "UpdateNeedleDirection",
          "UpdateNeedleShake",
          "Init2DMapCompass",
          "DragMapCompass",
          "SetMapMode",
          "UpdateCompassState",
          "GetMapCamPosition",
          "UpdateCompassState",
          "ActivateGadgetUpdate",
          "DeactivateGadgetUpdate",
          "GetDampingRatio",
          "CalculateConstants",
          "ModeSwitch",
          "UpdateCompassState",
          "ModeClear",
          "UpdateCompassState",
          "ActivateGadgetUpdate",
          "DeactivateGadgetUpdate",
          "GetType",
          "CanBeRaised",
          "IsUsingADSControls",
          "RplSave",
          "RplLoad",
          "UpdateCompassState",
          "Update",
          "UpdateNeedleDirection",
          "UpdateNeedleShake",
          "OnPostInit",
          "CalculateConstants",
          "UpdateCompassState"
        ]
      },
      {
        "class_name": "SCR_ConsumableBandage",
        "methods": [
          "ApplyEffect",
          "CanApplyEffect",
          "CanApplyEffectToHZ",
          "GetAnimationParameters",
          "SCR_ConsumableBandage"
        ]
      },
      {
        "class_name": "SCR_ConsumableEffectBase",
        "methods": [
          "ActivateEffect",
          "ApplyEffect",
          "CanApplyEffect",
          "UpdateAnimationCommands",
          "GetAnimationParameters",
          "GetDeleteOnUse",
          "GetApplyToOtherDuraction",
          "GetApplyToSelfAnimCmnd",
          "UpdateAnimationCommands",
          "GetApplyToOtherAnimCmnd",
          "UpdateAnimationCommands"
        ]
      },
      {
        "class_name": "SCR_ConsumableEffectHealthItems",
        "methods": [
          "ActivateEffect",
          "ApplyEffect",
          "AddConsumableDamageEffects",
          "AddConsumableDamageEffects",
          "GetItemRegenSpeed",
          "UpdateAnimationCommands",
          "CanApplyEffectToHZ",
          "GetReviveAnimCmnd",
          "UpdateAnimationCommands",
          "GetTargetHitZoneGroup"
        ]
      },
      {
        "class_name": "SCR_ConsumableItemComponent",
        "methods": [
          "ApplyItemEffect",
          "ModeClear",
          "OnUseBegan",
          "SetAlternativeModel",
          "OnApplyToCharacter",
          "SetAlternativeModel",
          "ApplyItemEffect",
          "SetHealedGroup",
          "SetAlternativeModel",
          "IsVisibleEquipped",
          "ModeSwitch",
          "ModeClear",
          "ActivateAction",
          "ClearInvokers",
          "SetHealedGroup",
          "SetHealedGroup",
          "GetConsumableType",
          "GetConsumableEffect",
          "GetType",
          "SetTargetCharacter",
          "GetTargetCharacter"
        ]
      },
      {
        "class_name": "SCR_ConsumableMorphine",
        "methods": [
          "CanApplyEffect",
          "CanApplyEffectToHZ",
          "CanApplyEffect",
          "GetDefaultDamageType",
          "SCR_ConsumableMorphine"
        ]
      },
      {
        "class_name": "SCR_ConsumableSalineBag",
        "methods": [
          "ApplyEffect",
          "AddConsumableDamageEffects",
          "CanApplyEffect",
          "CanApplyEffectToHZ",
          "CanApplyEffect",
          "GetDefaultDamageType",
          "SCR_ConsumableSalineBag"
        ]
      },
      {
        "class_name": "SCR_ConsumableTourniquet",
        "methods": [
          "ApplyEffect",
          "CanApplyEffect",
          "CanApplyEffectToHZ",
          "GetAnimationParameters",
          "SCR_ConsumableTourniquet"
        ]
      },
      {
        "class_name": "SCR_DetonatorGadgetComponent",
        "methods": [
          "OnNumberOfConnectedChargesChanged",
          "ShowConnectedWiresForChargesInRange",
          "GetNumberOfConnectedCharges",
          "IsAttachedToTheDetonator",
          "IsAttachedToTheDetonator",
          "IsChargeInRange",
          "IsChargeInRange",
          "IsChargeInRange",
          "ToggleActive",
          "OnToggleActive",
          "OnToggleActive",
          "DetonateExplosiveCharge",
          "PlaySound",
          "OnAnimationEvent",
          "DetonateExplosiveCharge",
          "OnAnimationEnded",
          "DetonateExplosiveCharge",
          "ShowConnectedWiresForChargesInRange",
          "ActivateAction",
          "ActivateAction",
          "ActivateAction",
          "ToggleActive",
          "PlaySound",
          "ConnectNewCharge",
          "UpdateWiresVisibility",
          "RemoveChargeFromTheList",
          "UpdateWiresVisibility",
          "ConnectNewCharge",
          "RemoveChargeFromTheList",
          "RemoveAllChargesFromTheList",
          "UpdateWiresVisibility",
          "PlaySound",
          "UpdateWiresVisibility",
          "ShowConnectedWiresForChargesInRange",
          "UpdateWiresVisibility",
          "OnDeployedStateChanged",
          "ShowConnectedWiresForChargesInRange",
          "GetType",
          "CanBeRaised",
          "ModeSwitch",
          "ActivateGadgetUpdate",
          "ModeClear",
          "DeactivateGadgetUpdate",
          "ActivateGadgetUpdate",
          "ShowConnectedWiresForChargesInRange",
          "DeactivateGadgetUpdate",
          "UpdateWiresVisibility",
          "Update",
          "ShowConnectedWiresForChargesInRange",
          "EOnInit",
          "UpdateWiresVisibility",
          "OnPostInit",
          "SetEventMask",
          "RplSave",
          "RplLoad"
        ]
      },
      {
        "class_name": "SCR_EquipmentStorageComponent",
        "methods": [
          "ShouldPreviewAttachedItems"
        ]
      },
      {
        "class_name": "SCR_EquipmentStorageSlot",
        "methods": [
          "OnOccludedStateChanged"
        ]
      },
      {
        "class_name": "SCR_FlashlightComponent",
        "methods": [
          "OnToggleActive",
          "UpdateLightState",
          "UpdateLightState",
          "EnableLight",
          "DisableLight",
          "SwitchLenses",
          "EnableLight",
          "SwitchLenses",
          "SetShadowNearPlane",
          "SetShadowNearPlane",
          "DisableLight",
          "DeactivateGadgetUpdate",
          "SetShadowNearPlane",
          "DeactivateGadgetUpdate",
          "ActivateGadgetUpdate",
          "AdjustTransform",
          "OnOwnerLifeStateChanged",
          "ActivateGadgetUpdate",
          "DeactivateGadgetUpdate",
          "OnCompartmentEntered",
          "SetShadowNearPlane",
          "ToggleActive",
          "OnCompartmentLeft",
          "SetShadowNearPlane",
          "OnSlotOccludedStateChanged",
          "EnableLight",
          "DisableLight",
          "ModeSwitch",
          "OnToggleActive",
          "ToggleActive",
          "SetShadowNearPlane",
          "DisableLight",
          "ModeClear",
          "SetShadowNearPlane",
          "ToggleActive",
          "ActivateAction",
          "ToggleActive",
          "ActivateGadgetUpdate",
          "AdjustTransform",
          "DeactivateGadgetUpdate",
          "AdjustTransform",
          "GetType",
          "IsVisibleEquipped",
          "RplSave",
          "RplLoad",
          "UpdateLightState",
          "OnTicksOnRemoteProxy",
          "Update",
          "DeactivateGadgetUpdate",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_GadgetComponent",
        "methods": [
          "GetAnimVariable",
          "GetWeaponNoFireTime",
          "IsToggledOn",
          "OnToggleActive",
          "OnParentSlotChanged",
          "OnModeChanged",
          "ModeClear",
          "ModeSwitch",
          "ModeSwitch",
          "UpdateVisibility",
          "ModeClear",
          "OnSlotOccludedStateChanged",
          "ActivateGadgetUpdate",
          "ConnectToGadgetsSystem",
          "DeactivateGadgetUpdate",
          "DisconnectFromGadgetsSystem",
          "UpdateVisibility",
          "ToggleActive",
          "OnToggleActive",
          "ActivateAction",
          "ToggleFocused",
          "GetCharacterOwner",
          "GetType",
          "GetMode",
          "CanBeHeld",
          "GetUseMask",
          "CanBeRaised",
          "IsUsingADSControls",
          "IsVisibleEquipped",
          "Update",
          "ConnectToGadgetsSystem",
          "DisconnectFromGadgetsSystem",
          "RplSave",
          "RplLoad",
          "UpdateVisibility",
          "OnDelete",
          "DisconnectFromGadgetsSystem",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_GadgetInvokersInitState",
        "methods": [
          "IsInit",
          "InitInvokers",
          "InitControlledInvokers",
          "CleanupInvokers",
          "CleanupLocalInvokers",
          "Clear",
          "CleanupLocalInvokers",
          "CleanupInvokers",
          "SCR_GadgetInvokersInitState"
        ]
      },
      {
        "class_name": "SCR_GadgetManagerComponentClass",
        "methods": [
          "DependsOn"
        ]
      },
      {
        "class_name": "SCR_GadgetManagerComponent",
        "methods": [
          "GetOnGadgetInitDoneInvoker",
          "GetGadgetManager",
          "GetHeldGadget",
          "GetIsGadgetADS",
          "GetHeldGadgetComponent",
          "ValidController",
          "SetGadgetMode",
          "SetGadgetModeStashed",
          "RemoveHeldGadget",
          "SetGadgetMode",
          "OnActivateHeldGadget",
          "ToggleHeldGadget",
          "GetGadgetByType",
          "GetQuickslotGadgetByType",
          "IsGadgetOwned",
          "CanChangeGadgetMode",
          "UpdateHeldGadget",
          "OnGadgetFocusStateChanged",
          "ConnectToGadgetsManagerSystem",
          "ConnectToGadgetsManagerSystem",
          "HandleInput",
          "SetGadgetMode",
          "ClearToggleState",
          "OnItemAdded",
          "SetGadgetMode",
          "SetGadgetMode",
          "SetGadgetMode",
          "OnItemRemoved",
          "OnPlayerDeath",
          "ClearToggleState",
          "UnregisterVONEntries",
          "UnregisterInputs",
          "DisconnectFromGadgetsManagerSystem",
          "OnControlledByPlayer",
          "UnregisterInputs",
          "UnregisterVONEntries",
          "DisconnectFromGadgetsManagerSystem",
          "RegisterInputs",
          "RegisterVONEntries",
          "ConnectToGadgetsManagerSystem",
          "OnGadgetStateChanged",
          "UpdateHeldGadget",
          "UpdateHeldGadget",
          "OnGadgetFocusStateChanged",
          "OnEditorOpened",
          "ClearToggleState",
          "OnGadgetInput",
          "HandleInput",
          "ActionFlashlightToggle",
          "OnPauseMenu",
          "SetGadgetMode",
          "OnGadgetADS",
          "SetGadgetADS",
          "OnGadgetADSHold",
          "SetGadgetADS",
          "SetGadgetADS",
          "RegisterInitialGadgets",
          "SetGadgetMode",
          "SetGadgetMode",
          "RegisterVONEntries",
          "UnregisterVONEntries",
          "RegisterInputs",
          "UnregisterInputs",
          "GetGadgetInputAction",
          "InitComponent",
          "RegisterInitialGadgets",
          "RegisterInputs",
          "RegisterVONEntries",
          "DisconnectFromGadgetsManagerSystem",
          "AskToggleGadget",
          "Rpc",
          "RPC_AskToggleGadget",
          "Rpc",
          "RPC_DoToggleGadget",
          "ConnectToGadgetsManagerSystem",
          "DisconnectFromGadgetsManagerSystem",
          "OnDelete",
          "DisconnectFromGadgetsManagerSystem",
          "Update",
          "DisconnectFromGadgetsManagerSystem",
          "SetGadgetADS",
          "OnPostInit",
          "ConnectToGadgetsManagerSystem"
        ]
      },
      {
        "class_name": "SCR_MapGadgetComponent",
        "methods": [
          "SetMapMode",
          "ToggleMapGadget",
          "OnMapOpen",
          "OnMapClose",
          "ModeSwitch",
          "ToggleFocused",
          "ModeClear",
          "ToggleFocused",
          "ToggleFocused",
          "SetMapMode",
          "GetType",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_RadioComponent",
        "methods": [
          "RadioToggle",
          "SetKnobAnim",
          "SetKnobAnim",
          "ChangeFrequencyStep",
          "SetKnobAnim",
          "SetKnobAnim",
          "GetKnobAngle",
          "UpdateKnobState",
          "InitSignals",
          "SetKnobAnim",
          "ActivateGadgetUpdate",
          "AnimKnob",
          "DeactivateGadgetUpdate",
          "GetKnobAnimStepCount",
          "InitSignals",
          "ModeSwitch",
          "UpdateKnobState",
          "ActivateGadgetUpdate",
          "DeactivateGadgetUpdate",
          "UpdateVisibility",
          "GetType",
          "CanBeHeld",
          "IsVisibleEquipped",
          "GetRadioComponent",
          "Update",
          "DeactivateGadgetUpdate",
          "AnimKnob",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_SalineBagStorageSlot",
        "methods": [
          "GetAssociatedHZGroup",
          "GetItem"
        ]
      },
      {
        "class_name": "SCR_SupportStationGadgetComponent",
        "methods": [
          "GetSupportStationTypes",
          "IsGadgetOfSupportStationType",
          "InUseAnimationLoop",
          "StartGadgetAnimation",
          "AnimateCharacterWithGadget",
          "StopGadgetAnimation",
          "AnimateCharacterWithGadget",
          "GetSupportStation",
          "GetHeldSupportStation",
          "GetHeldSupportStationGadget",
          "GetHeldSupportStationAndGadget",
          "EOnInit",
          "GetType"
        ]
      },
      {
        "class_name": "SCR_TourniquetStorageSlot",
        "methods": [
          "GetAssociatedHZGroup",
          "GetItem"
        ]
      },
      {
        "class_name": "SCR_WristwatchComponentClass",
        "methods": [
          "InitSignals"
        ]
      },
      {
        "class_name": "SCR_WristwatchComponent",
        "methods": [
          "GetMapPrefabResource",
          "UpdateTime",
          "UpdateWristwatchState",
          "ActivateGadgetUpdate",
          "DeactivateGadgetUpdate",
          "SetMapMode",
          "UpdateWristwatchState",
          "ModeSwitch",
          "UpdateWristwatchState",
          "ModeClear",
          "UpdateWristwatchState",
          "ActivateGadgetUpdate",
          "DeactivateGadgetUpdate",
          "GetType",
          "CanBeRaised",
          "IsUsingADSControls",
          "OnPostInit",
          "UpdateWristwatchState",
          "Update",
          "UpdateTime"
        ]
      },
      {
        "class_name": "SCR_BaseEditorHintCondition",
        "methods": [
          "OnInitConditionEditor",
          "OnExitConditionEditor",
          "OnEditorManagerInitOwner",
          "OnInitCondition",
          "OnInitConditionEditor",
          "OnExitCondition",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_BaseHintCondition",
        "methods": [
          "Activate",
          "ExitCondition",
          "Deactivate",
          "ExitCondition",
          "InitCondition",
          "OnInitCondition",
          "ExitCondition",
          "OnExitCondition",
          "OnInitCondition",
          "OnExitCondition",
          "SCR_BaseHintCondition"
        ]
      },
      {
        "class_name": "SCR_BaseContainerHintCondition",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingCloseHintCondition",
        "methods": [
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingNotMilitaryBaseHintCondition",
        "methods": [
          "OnInitConditionEditor",
          "OnExitConditionEditor",
          "IsRegisteredAtMilitaryBase"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingOpenedLabelHintCondition",
        "methods": [
          "OnInitConditionEditor",
          "OnExitConditionEditor",
          "HasLabelSet"
        ]
      },
      {
        "class_name": "SCR_EditorAttributesHintCondition",
        "methods": [
          "OnAttributesStart",
          "Activate",
          "OnInitConditionEditor",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_EditorBudgetHintCondition",
        "methods": [
          "OnBudgetMaxReached",
          "Activate",
          "OnInitConditionEditor",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_EditorContextMenuHintCondition",
        "methods": [
          "OnMenuOpen",
          "Activate",
          "OnInitConditionEditor",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_EditorEntityToEntityHintCondition",
        "methods": [
          "OnTargetChange",
          "Activate",
          "Deactivate",
          "OnInitConditionEditor",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_EditorFilterHintCondition",
        "methods": [
          "OnFilterChange",
          "Activate",
          "Activate",
          "Deactivate",
          "Deactivate",
          "OnInitConditionEditor",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_EditorLayerHintCondition",
        "methods": [
          "OnCurrentLayerChange",
          "Activate",
          "Deactivate",
          "Activate",
          "Deactivate",
          "OnInitConditionEditor",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_EditorModeHintCondition",
        "methods": [
          "OnModePostActivate",
          "Activate",
          "OnInitConditionEditor",
          "OnExitConditionEditor",
          "Deactivate"
        ]
      },
      {
        "class_name": "SCR_EditorNotificationEditorOnlyHintCondition",
        "methods": [
          "OnNotification",
          "DelayedShowHint",
          "Activate",
          "OnInitConditionEditor",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_EditorOpenedHintCondition",
        "methods": [
          "OnInitConditionEditor",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_EditorPlacingHintCondition",
        "methods": [
          "OnSelectedPrefabChange",
          "Deactivate",
          "OnInitConditionEditor",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_EditorTransformHintCondition",
        "methods": [
          "OnInitConditionEditor",
          "OnExitConditionEditor"
        ]
      },
      {
        "class_name": "SCR_InputHintCondition",
        "methods": [
          "OnInitCondition",
          "OnExitCondition"
        ]
      },
      {
        "class_name": "SCR_ManualCameraAdjustSpeedHintCondition",
        "methods": [
          "GetComponent",
          "OnSpeedChange",
          "Activate",
          "OnInitCondition",
          "OnExitCondition"
        ]
      },
      {
        "class_name": "SCR_ManualCameraAttachHintCondition",
        "methods": [
          "GetComponent",
          "OnInitCondition",
          "OnExitCondition"
        ]
      },
      {
        "class_name": "SCR_ManualCameraFocusHintCondition",
        "methods": [
          "GetComponent",
          "OnInitCondition",
          "OnExitCondition"
        ]
      },
      {
        "class_name": "SCR_ManualCameraLightHintCondition",
        "methods": [
          "GetComponent",
          "OnInitCondition",
          "OnExitCondition"
        ]
      },
      {
        "class_name": "SCR_ManualCameraNightModeHintCondition",
        "methods": [
          "GetNightModeComponent",
          "OnEditorNightModeEnabled",
          "Activate",
          "OnInitCondition",
          "OnExitCondition"
        ]
      },
      {
        "class_name": "SCR_ManualCameraZoomHintCondition",
        "methods": [
          "GetComponent",
          "OnInitCondition",
          "OnExitCondition"
        ]
      },
      {
        "class_name": "SCR_MapHintCondition",
        "methods": [
          "OnInitCondition",
          "OnExitCondition",
          "OnMapOpen",
          "Activate",
          "OnMapClosed",
          "Deactivate"
        ]
      },
      {
        "class_name": "SCR_SequenceHintCondition",
        "methods": [
          "OnHintHide",
          "Activate",
          "OnInitCondition",
          "OnExitCondition"
        ]
      },
      {
        "class_name": "SCR_VoteGameMasterCondition",
        "methods": [
          "OnVotingStart",
          "Activate",
          "OnVotingEnd",
          "Deactivate",
          "OnVoteLocal",
          "Deactivate",
          "OnPlayerListMenu",
          "Activate",
          "IsPlayerListMenu",
          "OnInitCondition",
          "OnExitCondition"
        ]
      },
      {
        "class_name": "SCR_GeneralHintStorage",
        "methods": [
          "GetHintByType"
        ]
      },
      {
        "class_name": "SCR_HintEntry",
        "methods": [
          "GetHintType",
          "GetHintInfo"
        ]
      },
      {
        "class_name": "SCR_HintConditionComponentClass",
        "methods": [
          "Init",
          "Exit"
        ]
      },
      {
        "class_name": "SCR_HintConditionComponent",
        "methods": [
          "OnPostInit",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_HintConditionList",
        "methods": [
          "Init",
          "Exit"
        ]
      },
      {
        "class_name": "SCR_HintManagerComponentClass",
        "methods": [
          "SCR_HintManagerComponent_OnHint",
          "InitConditionLists",
          "ExitConditionLists"
        ]
      },
      {
        "class_name": "SCR_HintManagerComponent",
        "methods": [
          "Show",
          "Hide",
          "ShowCustom",
          "Show",
          "ClearHint",
          "Repeat",
          "Show",
          "Refresh",
          "Show",
          "Hide",
          "Toggle",
          "Hide",
          "Repeat",
          "OpenContext",
          "GetLatestHint",
          "GetCurrentHint",
          "IsShown",
          "CanShow",
          "WasShown",
          "WasShown",
          "SetDurationOverride",
          "GetDurationOverride",
          "GetInstance",
          "ShowHint",
          "ShowCustomHint",
          "ClearLatestHint",
          "RepeatHint",
          "HideHint",
          "IsHintShown",
          "CanShowHints",
          "LoadSettings",
          "Hide",
          "SetShown",
          "OnPostInit",
          "LoadSettings",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_HintSequenceComponentClass",
        "methods": [
          "GetSequence"
        ]
      },
      {
        "class_name": "SCR_HintSequenceComponent",
        "methods": [
          "StartSequence",
          "StopSequence",
          "Clear",
          "ToggleSequence",
          "StopSequence",
          "StartSequence",
          "IsSequenceActive",
          "GetOnSequenceChange",
          "OnHintShow",
          "Clear",
          "OnHintHide",
          "Clear",
          "Clear"
        ]
      },
      {
        "class_name": "SCR_HintSequenceList",
        "methods": [
          "FindHint",
          "CountHints",
          "GetHint",
          "SCR_HintSequenceList"
        ]
      },
      {
        "class_name": "SCR_HybridPhysicsComponent",
        "methods": [
          "ClearPhysicsInfo",
          "StorePhysicsInfo",
          "ClearPhysicsInfo",
          "ApplyPhysicsInfo",
          "ClearPhysicsInfo",
          "ClearPhysicsInfo",
          "EOnContact",
          "ClearEventMask",
          "SetEventMask",
          "EOnFrame",
          "StorePhysicsInfo",
          "SetEventMask",
          "ClearEventMask",
          "ApplyPhysicsInfo",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "SetEventMask",
          "StorePhysicsInfo",
          "SCR_HybridPhysicsComponent",
          "ClearPhysicsInfo"
        ]
      },
      {
        "class_name": "SCR_InteractableBoxComponent",
        "methods": [
          "ToggleIsOnFire",
          "spawnParams",
          "IsDragging",
          "GetActionName",
          "GetActionDescription",
          "GetFireActionDescription",
          "GetFireActionName",
          "CanPerformDragAction",
          "CanPerformToggleFire",
          "CancelDragAction",
          "PerformDragAction",
          "EOnSimulate",
          "OnDeath",
          "ToggleIsOnFire",
          "EOnFrame",
          "OnDeath",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "SCR_InteractableBoxComponent"
        ]
      },
      {
        "class_name": "SCR_AmbientPatrolSpawnPointComponentClass",
        "methods": [
          "GetCycleWaypointPrefab",
          "GetDefaultWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_AmbientPatrolSpawnPointComponent",
        "methods": [
          "SetID",
          "GetID",
          "SetMembersAlive",
          "GetMembersAlive",
          "SetIsSpawned",
          "GetIsSpawned",
          "SetIsPaused",
          "GetIsPaused",
          "GetAILimitThreshold",
          "SetDespawnTimer",
          "GetDespawnTimer",
          "SetRespawnTimestamp",
          "GetRespawnTimestamp",
          "GetSpawnedGroup",
          "GetWaypoint",
          "GetRandomPrefabByProbability",
          "Update",
          "PrepareWaypoints",
          "SpawnCycleWaypoint",
          "PrepareWaypoints",
          "SpawnPatrol",
          "Update",
          "DespawnPatrol",
          "ActivateGroup",
          "DeactivateGroup",
          "IsGroupActive",
          "OnAgentRemoved",
          "OnPostInit",
          "SetEventMask",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_AmbientVehicleSpawnPointComponent",
        "methods": [
          "GetRespawnPeriod",
          "SetID",
          "GetID",
          "SetIsDepleted",
          "GetIsDepleted",
          "GetIsFirstSpawnDone",
          "GetIsSpawnProcessed",
          "SetDespawnTimer",
          "GetDespawnTimer",
          "SetRespawnTimestamp",
          "GetRespawnTimestamp",
          "GetSpawnedVehicle",
          "SpawnVehicle",
          "Update",
          "OnVehicleDestroyed",
          "DespawnVehicle",
          "Update",
          "OnPostInit",
          "SetEventMask",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_CampaignMilitaryBaseComponentClass",
        "methods": [
          "GetBuildingIconImageset",
          "OnSpawnPointAssignedDelegate"
        ]
      },
      {
        "class_name": "SCR_CampaignMilitaryBaseComponent",
        "methods": [
          "IsControlPoint",
          "CanBeHQ",
          "DisableWhenUnusedAsHQ",
          "GetRespawnTimestamp",
          "Initialize",
          "OnInitialized",
          "Disable",
          "DeleteStartingVehicles",
          "OnDisabled",
          "OnInitialized",
          "GetServices",
          "OnServiceBuilt",
          "ConnectToCampaignBasesSystem",
          "OnLocalPlayerFactionAssigned",
          "ApplyHeaderSettings",
          "RecalculateRadioRange",
          "OnServiceStateChanged",
          "OnServiceBuilt",
          "OnServiceBuilt",
          "RecalculateRadioRange",
          "SetProviderEntity",
          "SendHighestPriorityMessage",
          "OnServiceRemoved",
          "RecalculateRadioRange",
          "OnServiceBuilt_AfterInit",
          "OnDisabled",
          "DisconnectFromCampaignBasesSystem",
          "IsInitialized",
          "SetAsHQ",
          "OnHQSet",
          "OnHQSet",
          "HandleSpawnPointFaction",
          "SupplyIncomeTimer",
          "IsHQ",
          "CostSuppliesToSpawn",
          "GetOnSpawnPointAssigned",
          "GetRadioRange",
          "GetRelayRadioRange",
          "CanReachByRadio",
          "GetHQRadioCoverage",
          "IsHQRadioTrafficPossible",
          "OnLocalPlayerFactionAssigned",
          "HideMapLocationLabel",
          "GetBaseSpawnCostFactor",
          "OnCaptureStart",
          "BeginCapture",
          "RefreshTasks",
          "NotifyAboutEnemyAttack",
          "EndCapture",
          "OnCapturingFactionChanged",
          "GetReconfiguredByID",
          "GetDisableWhenUnusedAsHQ",
          "BeginCapture",
          "OnCapturingFactionChanged",
          "NotifyAboutEnemyAttack",
          "HandleSpawnPointFaction",
          "GetSpawnPoint",
          "OnCapturingFactionChanged",
          "FlashBaseIcon",
          "FlashBaseIcon",
          "FlashBaseIcon",
          "OnHasSignalChanged",
          "HandleSpawnPointFaction",
          "SupplyIncomeTimer",
          "RefreshTasks",
          "OnSuppliesChanged",
          "HandleSpawnPointFaction",
          "OnFactionChanged",
          "EndCapture",
          "ChangeRadioSettings",
          "RefreshTasks",
          "SupplyIncomeTimer",
          "OnRespawnCooldownChanged",
          "HandleSpawnPointFaction",
          "SendHQMessageBaseCaptured",
          "SetRadioChatterSignal",
          "OnSpawnPointFactionAssigned",
          "ChangeRadioSettings",
          "RegisterRemnants",
          "GetBuildingIconImageset",
          "SetDefendersGroup",
          "RemoveGroup",
          "ContainsGroup",
          "SetCallsign",
          "SetCallsignIndexAutomatic",
          "SupplyIncomeTimer",
          "AddRegularSupplyPackage",
          "AddRegularSupplyPackage",
          "GetMapDescriptor",
          "GetMapUI",
          "GetIsEntityInMyRange",
          "GetSupplies",
          "GetSuppliesMax",
          "GetSuppliesIncome",
          "RegisterHQRadio",
          "RegisterLogicComponent",
          "SetRadioChatterSignal",
          "GetHQRadio",
          "HideMapLocationLabel",
          "GetResourceComponent",
          "AddSupplies",
          "HandleSpawnPointFaction",
          "SetSupplies",
          "SetInitialSupplies",
          "SetSupplies",
          "SetStartingSupplies",
          "AlterSupplyIncomeTimer",
          "SetFaction",
          "GetCampaignFaction",
          "GetType",
          "GetBaseName",
          "GetBaseNameUpperCase",
          "IsBeingCaptured",
          "SetAttackingFaction",
          "OnAttackingFactionChanged",
          "OnAttackingFactionChanged",
          "FlashBaseIcon",
          "OnRespawnCooldownChanged",
          "UpdateRespawnCooldown",
          "UpdateRespawnCooldown",
          "OnCallsignAssigned",
          "SetCallsign",
          "OnAllBasesInitialized",
          "RecalculateRadioRange",
          "GetServicesByType",
          "OnRadioRangeChanged",
          "OnRadioRangeChanged",
          "SetBaseUI",
          "SendHQMessageBaseCaptured",
          "SpawnStartingVehicles",
          "DeleteStartingVehicles",
          "RemoveFortifications",
          "LoadState",
          "Initialize",
          "SetFaction",
          "RemoveFortifications",
          "DeleteStartingVehicles",
          "SpawnBuilding",
          "EvaluateDefenders",
          "StoreState",
          "ConnectToCampaignBasesSystem",
          "DisconnectFromCampaignBasesSystem",
          "Update",
          "EOnInit",
          "OnPostInit",
          "OnDelete",
          "DisconnectFromCampaignBasesSystem"
        ]
      },
      {
        "class_name": "SCR_CampaignCustomBase",
        "methods": [
          "GetBaseName",
          "IsControlPoint",
          "GetCanBeHQ",
          "GetDisableWhenUnusedAsHQ",
          "GetRadioRange"
        ]
      },
      {
        "class_name": "SCR_CampaignMilitaryBaseMapDescriptorComponent",
        "methods": [
          "SetParentBase",
          "MapSetup",
          "HandleMapInfo"
        ]
      },
      {
        "class_name": "SCR_MilitaryBaseComponentClass",
        "methods": [
          "ScriptInvokerServiceUnregisteredMethod"
        ]
      },
      {
        "class_name": "SCR_MilitaryBaseComponent",
        "methods": [
          "IsProxy",
          "AllowNotifications",
          "NotificationsAllowed",
          "SetCallsignIndexAutomatic",
          "SetCallsignIndex",
          "GetOnRadiusChanged",
          "GetOnServiceRegistered",
          "GetOnServiceUnregistered",
          "SetCallsign",
          "GetCallsign",
          "GetCallsignSignal",
          "OnCallsignAssigned",
          "SetCallsign",
          "OnPlayerFactionResponse_O",
          "SetCallsign",
          "GetCallsignDisplayNameOnly",
          "GetCallsignDisplayName",
          "GetCallsignDisplayNameOnlyUC",
          "GetCallsignDisplayNameUpperCase",
          "GetServices",
          "GetServicesByType",
          "GetServiceByLabel",
          "GetServiceByType",
          "GetServiceDelegates",
          "GetServiceDelegatesByType",
          "GetServiceDelegateByLabel",
          "GetServiceDelegateByType",
          "GetBuildingProviders",
          "GetCapturePoints",
          "GetFlags",
          "SetRadius",
          "OnRadiusChanged",
          "OnRadiusChanged",
          "GetRadius",
          "SetFaction",
          "SetFaction",
          "OnFactionChanged",
          "ChangeFlags",
          "NotifyPlayerInRadius",
          "GetFaction",
          "GetCapturingFaction",
          "OnServiceStateChanged",
          "RegisterServiceDelegate",
          "UnregisterServiceDelegate",
          "RegisterLogicComponent",
          "UnregisterLogicComponent",
          "OnPointCaptured",
          "OnRequiredPointsCaptured",
          "OnPointContested",
          "OnCapturingFactionChanged",
          "OnPointSecured",
          "OnCapturingFactionChanged",
          "OnRequiredPointsCaptured",
          "SetFaction",
          "OnCapturingFactionChanged",
          "ChangeFlags",
          "GetFlags",
          "GetIsLocalPlayerPresent",
          "GetIsEntityPresent",
          "GetIsEntityPresent",
          "NotifyPlayerInRadius",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_RadioCoverageMapDescriptorComponentClass",
        "methods": [
          "GetGraphLinesData"
        ]
      },
      {
        "class_name": "SCR_RadioCoverageMapDescriptorComponent",
        "methods": [
          "GetGraphLinesData",
          "SetParentRadio",
          "DeleteLinks",
          "GetParentRadio",
          "OnMapOpen",
          "CreateLinks",
          "OnMapClose",
          "DeleteLinks",
          "CreateLinks",
          "ColorMapLink",
          "DeleteLinks",
          "UpdateLinks",
          "DeleteLinks",
          "CreateLinks",
          "OnIconHovered",
          "ColorMapLink",
          "ColorMapLink"
        ]
      },
      {
        "class_name": "SCR_MineAnimationComponent",
        "methods": [
          "SCR_MineAnimationComponent",
          "OnAnimationEvent"
        ]
      },
      {
        "class_name": "SCR_MineAwarenessComponent",
        "methods": [
          "GetLocalInstance",
          "Detect",
          "IsDetected",
          "Detect",
          "EOnInit",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_MineDamageManager",
        "methods": [
          "HijackDamageHandling",
          "OnDamageStateChanged",
          "ExplodeWrapper",
          "ExplodeWrapper"
        ]
      },
      {
        "class_name": "SCR_ResourcePlayerControllerInventoryComponentClass",
        "methods": [
          "ScriptInvoker_ResourceOnPlayerInteraction"
        ]
      },
      {
        "class_name": "SCR_ResourcePlayerControllerInventoryComponent",
        "methods": [
          "GetOnPlayerInteraction",
          "TryGetGenerationActor",
          "TryGetConsumptionActor",
          "TryPerformResourceConsumption",
          "TryPerformResourceGeneration",
          "RequestSubscription",
          "RequestUnsubscription",
          "RpcAsk_RequestSubscription",
          "RpcAsk_RequestUnsubscription",
          "RpcAsk_OnPlayerInteraction",
          "OnPlayerInteraction",
          "RpcAsk_ArsenalRequestItem",
          "RpcAsk_ArsenalRefundItem",
          "RpcAsk_MergeContainerWithContainer",
          "OnPlayerInteraction",
          "RpcAsk_MergeContainerWithContainerPartial",
          "OnPlayerInteraction",
          "RpcAsk_CreatePhysicalContainerWithContainer",
          "TryPerformResourceConsumption",
          "OnPlayerInteraction",
          "TryPerformResourceConsumption",
          "OnPlayerInteraction",
          "OnPlayerInteraction",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_AchievementsHandler",
        "methods": [
          "UnlockOnClient",
          "UnlockAchievement",
          "Rpc",
          "IncrementOnClient",
          "IncrementAchievementProgress",
          "Rpc"
        ]
      },
      {
        "class_name": "SCR_AmbientInsectsEffect",
        "methods": [
          "Update",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_AmbientInsectsComponent",
        "methods": [
          "GetEnvironmentType",
          "GetTimeOfDay",
          "GetRainIntensity",
          "GetWindSpeed",
          "RemoveInsectEffect",
          "Update",
          "OnPostInit",
          "Update",
          "SCR_AmbientInsectsComponent"
        ]
      },
      {
        "class_name": "SCR_ArmoryComponent",
        "methods": [
          "IsProxy",
          "ChangeOwningFaction",
          "OnLinkedEntitiesSpawned",
          "FindFactionComponentsInHiearchy",
          "FindFactionComponentsInHiearchy",
          "EOnInit",
          "FindFactionComponentsInHiearchy",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_BaseLockComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "ClearEventMask",
          "GetCannotPerformReason",
          "IsLocked"
        ]
      },
      {
        "class_name": "SCR_BellSoundComponent",
        "methods": [
          "UpdateSoundJob",
          "SoundEvent",
          "OnUpdateSoundJobBegin",
          "OnPostInit",
          "SetEventMask",
          "OnInit",
          "SetScriptedMethodsCall",
          "SCR_BellSoundComponent",
          "SetScriptedMethodsCall"
        ]
      },
      {
        "class_name": "SCR_BuildingSoundComponent",
        "methods": [
          "TriggeredSoundHandler",
          "SetInteriorSignal",
          "SoundEventTransform",
          "GetTimeInterval",
          "SetInteriorSignal",
          "IsInWorldBounds",
          "GetTimeInterval",
          "GetSoundPosition",
          "Interpolate",
          "UpdateSoundJob",
          "TriggeredSoundHandler",
          "OnUpdateSoundJobBegin",
          "GetTimeInterval",
          "SCR_BuildingSoundComponent",
          "SetScriptedMethodsCall"
        ]
      },
      {
        "class_name": "SCR_CameraShakeManagerComponent",
        "methods": [
          "AddCameraShake",
          "DoAddCameraShake",
          "AddCameraShake",
          "DoAddCameraShake",
          "ApplyCameraShake",
          "DoApplyCameraShake",
          "ClearCameraShake",
          "DoClearCameraShake",
          "OnPostInit",
          "SetEventMask",
          "EOnFrame",
          "AddCameraShake",
          "AddCameraShake",
          "ClearCameraShake"
        ]
      },
      {
        "class_name": "SCR_CampaignFastTravelComponentClass",
        "methods": [
          "GetSupplyCost",
          "GetPickupRadius",
          "GetNoEnemyRadius"
        ]
      },
      {
        "class_name": "SCR_CampaignFastTravelComponent",
        "methods": [
          "ServerSanityCheck",
          "RpcAsk_FastTravel",
          "RpcAsk_CheckSpawnpointAvailability",
          "Rpc",
          "RpcDo_EnableDestination",
          "GetCooldown",
          "FilterEntity",
          "ProcessEntity",
          "OnMapOpen",
          "OnMapClose",
          "ToggleDestinationSelection",
          "OnMapFastTravelRequested",
          "ToggleDestinationSelection",
          "SendPlayerCoords",
          "ToggleDestinationSelection",
          "FastTravel",
          "SetupMapRadialMenuEntries",
          "ComposeDestinationList",
          "RefreshDestinationList",
          "RefreshMainEntry",
          "CenterMapOnDestination",
          "ComposeDestinationList",
          "RefreshDestinationList",
          "RefreshShownCooldown",
          "RefreshDestinationList",
          "RefreshMainEntry",
          "OnSpawnpointRemoved",
          "OnSpawnpointAdded",
          "ToggleDestinationSelection",
          "IsDestinationReachable",
          "IsDestinationReachable",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_CampaignMHQLockComponent",
        "methods": [
          "GetMHQComponent",
          "GetCannotPerformReason",
          "IsLocked"
        ]
      },
      {
        "class_name": "SCR_CampaignSoundComponent",
        "methods": [
          "OnInit",
          "EnableDynamicSimulation",
          "SCR_CampaignSoundComponent",
          "SetScriptedMethodsCall"
        ]
      },
      {
        "class_name": "SCR_CharacterBuoyancyComponent",
        "methods": [
          "GetOnWaterEnter",
          "GetOnWaterExit",
          "OnEnterWater",
          "OnExitWater"
        ]
      },
      {
        "class_name": "SCR_CharacterControllerComponent_Test",
        "methods": [
          "OnPrepareControls",
          "SCR_CharacterControllerComponent_Test"
        ]
      },
      {
        "class_name": "SCR_CharacterRankComponent",
        "methods": [
          "RpcDoSetCharacterRank",
          "OnRankChanged",
          "GetCharacterRankComponent",
          "SetCharacterRank",
          "Rpc",
          "RpcDoSetCharacterRank",
          "OnRankChanged",
          "GetCharacterRank",
          "GetCharacterFaction",
          "GetRankName",
          "GetCharacterRankName",
          "GetCharacterRankNameUpperCase",
          "GetCharacterRankNameShort",
          "GetCharacterRankInsignia",
          "GetCharacterRank",
          "RplSave",
          "RplLoad",
          "OnPostInit",
          "SCR_CharacterRankComponent"
        ]
      },
      {
        "class_name": "SCR_CharacterRank",
        "methods": [
          "GetRankID",
          "GetRankName",
          "GetRankNameUpperCase",
          "GetRankNameShort",
          "GetRankInsignia"
        ]
      },
      {
        "class_name": "SCR_RankID",
        "methods": [
          "GetRankID",
          "IsRankRenegade",
          "GetRequiredRankXP"
        ]
      },
      {
        "class_name": "SCR_CharacterRegistrationComponent",
        "methods": [
          "OnDelete",
          "OnPostInit",
          "SCR_CharacterRegistrationComponent"
        ]
      },
      {
        "class_name": "SCR_ClockHandComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "ClearEventMask",
          "ClockHandStep"
        ]
      },
      {
        "class_name": "SCR_CommunicationSoundComponent",
        "methods": [
          "ShowSubtitles",
          "SetSubtitiles",
          "SetCallsignSignals",
          "SoundEventHit",
          "DelayedSoundEventPriority",
          "DelayedSoundEventPriority",
          "PlayDelayedSoundEventPriority",
          "SoundEventPriority",
          "SoundEventDeath",
          "SoundEvent",
          "SoundEvent",
          "OnPostInit",
          "HandleMetadata",
          "ShowSubtitles",
          "OnSoundEventFinished",
          "SCR_CommunicationSoundComponent",
          "SetScriptedMethodsCall"
        ]
      },
      {
        "class_name": "SCR_CoverageRadioComponent",
        "methods": [
          "SetIsSource",
          "IsSource",
          "WasPowered",
          "PrepareCoverageUpdate",
          "FinishCoverageUpdate",
          "OnCoverageChanged",
          "GetRadiosInRange",
          "GetRadiosInRangeOf",
          "GetRadiosInRangeCount",
          "GetRadiosInRangeOfCount",
          "ConnectedRadiosContain",
          "GetSavedRange",
          "GetSavedEncryption",
          "GetCoverageByEncryption",
          "AddRadioInRange",
          "RemoveRadioInRange",
          "AddRadioInRangeOf",
          "RemoveRadioInRangeOf",
          "OnPowerToggle",
          "OnRangeChanged",
          "OnEncryptionChanged",
          "GetOnCoverageChanged",
          "OnCoverageChanged",
          "Ping",
          "OnInit",
          "OnPostInit",
          "SetEventMask",
          "OnPowerToggle"
        ]
      },
      {
        "class_name": "SCR_ExplosiveChargeComponent",
        "methods": [
          "OnFuzeTypeChanged",
          "UpdateFuzeVisibility",
          "OnArrayOfConnectedDetonatorsChanged",
          "UpdateFuzeVisibility",
          "GetTimeOfDetonation",
          "GetUsedFuzeType",
          "GetTrigger",
          "GetNumberOfConnectedDetonators",
          "IsDetonatorConnected",
          "GetFuzeTime",
          "SetFuzeTime",
          "PlaySound",
          "PlaySound",
          "SetGarbageCollectable",
          "ArmWithTimedFuze",
          "UpdateFuzeVisibility",
          "ChangeLockState",
          "SetGarbageCollectable",
          "PlaySound",
          "UpdateFuzeVisibility",
          "ChangeLockState",
          "SetGarbageCollectable",
          "PlaySound",
          "PlaySound",
          "RemoveDetonatorFromTheList",
          "UpdateFuzeVisibility",
          "ChangeLockState",
          "SetGarbageCollectable",
          "ConnectDetonator",
          "RemoveDetonatorFromTheList",
          "UpdateFuzeVisibility",
          "DisarmChargeSilent",
          "DisarmCharge",
          "DisarmCharge",
          "ChangeLockState",
          "UpdateFuzeVisibility",
          "SetGarbageCollectable",
          "PlaySound",
          "ChangeLockState",
          "GetRplId",
          "CheckRplId",
          "EOnFrame",
          "ClearEventMask",
          "EOnInit",
          "UpdateFuzeVisibility",
          "OnPostInit",
          "SetEventMask",
          "OnDelete",
          "DisarmCharge",
          "RplSave",
          "RplLoad",
          "UpdateFuzeVisibility"
        ]
      },
      {
        "class_name": "SCR_FactionAffiliationComponentClass",
        "methods": [
          "OnFactionChangeDelegate"
        ]
      },
      {
        "class_name": "SCR_FactionAffiliationComponent",
        "methods": [
          "OnFactionChanged",
          "ClearAffiliatedFaction",
          "SetAffiliatedFaction",
          "SetFaction",
          "GetOnFactionUpdate",
          "GetOnFactionChanged"
        ]
      },
      {
        "class_name": "SCR_FastTravelComponent",
        "methods": [
          "GetLocalInstance",
          "SetDestination",
          "GetDestinationName",
          "GetCooldown",
          "DisableAfterUse",
          "ToggleMapDestinationSelection",
          "OnSelectionChanged",
          "SetDestination",
          "FastTravel",
          "FindDestinationId",
          "FastTravel",
          "Rpc",
          "RpcAsk_FastTravel",
          "GetEntityByDestinationId",
          "ServerSanityCheck",
          "SetNextTransportTimestamp",
          "RpcDo_FastTravel",
          "ToggleMapDestinationSelection",
          "FadeOut",
          "Teleport",
          "CalculateDestinationVector",
          "CalculateDestinationVector",
          "OnPostInit",
          "SetEventMask",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_FireplaceComponentClass",
        "methods": [
          "GetParticle",
          "GetParticleOffset"
        ]
      },
      {
        "class_name": "SCR_FireplaceComponent",
        "methods": [
          "ToggleLight",
          "TurnOn",
          "TurnOff",
          "TurnOn",
          "TurnOff",
          "OnPostInit",
          "EOnVisible",
          "RplLoad",
          "ToggleLight",
          "OnDelete",
          "RemoveLights"
        ]
      },
      {
        "class_name": "SCR_FlareEffectComponentClass",
        "methods": [
          "GetLightLifeTime"
        ]
      },
      {
        "class_name": "SCR_FlareEffectComponent",
        "methods": [
          "ToggleLight",
          "TurnLightOn",
          "TurnLightOff",
          "TurnLightOn",
          "TurnLightOff",
          "OnPostInit",
          "TurnLightOn",
          "EOnVisible",
          "EOnFixedFrame",
          "OnDelete",
          "RemoveLights"
        ]
      },
      {
        "class_name": "SCR_ImageFrameAnimationComponent",
        "methods": [
          "Start",
          "ShowFrame",
          "Stop",
          "HandlerAttached",
          "Start",
          "HandlerDeattached",
          "Stop",
          "OnEachFrame",
          "Stop",
          "ShowFrame",
          "ShowFrame",
          "OnUpdate",
          "Start",
          "Stop"
        ]
      },
      {
        "class_name": "SCR_ItemPlacementComponent",
        "methods": [
          "RPC_AskSetPlacementPosition",
          "RPC_AskPlaceItem",
          "NotifyItemPlacementDone",
          "RPC_AskPlaceItemWithParentChange",
          "NotifyItemPlacementDone",
          "GetCharacterController",
          "UnregisterEvents",
          "RegisterEvents",
          "OnControlledEntityChanged",
          "UnregisterEvents",
          "RegisterEvents",
          "NotifyItemPlacementDone",
          "StartPlaceItem",
          "DisablePreview",
          "OnPlacingEnded",
          "EnablePreview",
          "DisablePreview",
          "AskPlaceItem",
          "Rpc",
          "Rpc",
          "ValidateTargetEntityExistance",
          "DisablePreview",
          "EnablePreview",
          "OnComparmentEntered",
          "DisablePreview",
          "GetOnCompartmentLeft",
          "TogglePreview",
          "GetWeaponFromWeaponComponent",
          "OnWeaponChangeEnded",
          "TogglePreview",
          "OnWeaponChanged",
          "DisablePreview",
          "OnCharacterDeath",
          "UnregisterEvents",
          "DisablePreview",
          "TogglePreview",
          "DisablePreview",
          "EnablePreview",
          "EOnFrame",
          "DisablePreview",
          "DisablePreview",
          "UseXZFixedPlacement",
          "UseXYZPlacement",
          "UseXZFixedPlacement",
          "FilterCallback",
          "UseXYZPlacement",
          "ValidateEntity",
          "ValidatePlacement",
          "TraceEntitiesCallback",
          "OnEditorOpened",
          "DisablePreview",
          "OnEditorClosed",
          "TogglePreview",
          "RegisterToManagerInvokers",
          "OnPostInit",
          "SetEventMask",
          "InitEditorListeners",
          "RegisterToManagerInvokers",
          "EOnInit",
          "InitEditorListeners",
          "SCR_ItemPlacementComponent"
        ]
      },
      {
        "class_name": "SCR_KickHintComponent",
        "methods": [
          "RPC_DoIncreaseCriminalScore",
          "ShowUI",
          "NotifyClientCriminalScoreIncreased",
          "Rpc",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_LampComponentClass",
        "methods": [
          "GetParticle",
          "GetParticleOffset"
        ]
      },
      {
        "class_name": "SCR_LampComponent",
        "methods": [
          "ToggleLight",
          "TurnOn",
          "TurnOff",
          "TurnOn",
          "TurnOff",
          "RplLoad",
          "ToggleLight",
          "OnDelete",
          "RemoveLights"
        ]
      },
      {
        "class_name": "SCR_LifetimeComponent",
        "methods": [
          "EOnFrame",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_LightningComponent",
        "methods": [
          "OnFlashesRpl",
          "OnPostInit",
          "OnFlashesRpl"
        ]
      },
      {
        "class_name": "SCR_LocalPlayerPenalty",
        "methods": [
          "OnPlayerConnected",
          "GetPlayerPenaltyData",
          "OnControllableDestroyed",
          "GetInstance",
          "GetInstigatorFromVehicle",
          "GetPlayerPenaltyData",
          "EvaluatePlayerPenalties",
          "KickPlayer",
          "KickPlayer",
          "GetPenaltySubtractionPeriod",
          "SCR_LocalPlayerPenalty"
        ]
      },
      {
        "class_name": "SCR_LocalPlayerPenaltyData",
        "methods": [
          "SetPlayerId",
          "GetPlayerId",
          "AddPenaltyScore",
          "GetPenaltyScore",
          "SetNextPenaltySubstractionTimestamp",
          "GetNextPenaltySubtractionTimestamp"
        ]
      },
      {
        "class_name": "SCR_Nozzle",
        "methods": [
          "SetProvider",
          "GetProvider",
          "SCR_Nozzle",
          "SetProvider"
        ]
      },
      {
        "class_name": "SCR_ObjectPositionalInsects",
        "methods": [
          "Update",
          "GetClosestsEntities",
          "ProcessEntity",
          "GetClosestsEntities",
          "ProcessEntity",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_ParticleContactComponent",
        "methods": [
          "PlaySound",
          "OnPostInit",
          "SetEventMask",
          "EOnContact",
          "ClearEventMask",
          "PlaySound",
          "spawnParams",
          "ClearEventMask"
        ]
      },
      {
        "class_name": "SCR_PlaceableItemComponentClass",
        "methods": [
          "CanAttachToDynamicObject",
          "CanBeAttachedWhileAngled",
          "GetIgnoredPhysicsLayers",
          "GetDistanceMeasurementMethod",
          "GetIgnoredComponents",
          "ValidateIgnoredComponents"
        ]
      },
      {
        "class_name": "SCR_PlaceableItemComponent",
        "methods": [
          "GetPlacementType",
          "GetMaxPlacementDistance",
          "GetPreviewVobject",
          "CanAttachToDynamicObject",
          "CanBeAttachedWhileAngled",
          "GetIgnoredPhysicsLayers",
          "GetIgnoredComponents",
          "EOnInit",
          "OnPostInit",
          "SetEventMask",
          "GetDistanceMeasurementMethod",
          "GetDistanceFromCharacter",
          "RplSave",
          "RplLoad"
        ]
      },
      {
        "class_name": "SCR_PlayerRestrictionZoneWarningComponent",
        "methods": [
          "ShowWarningServer",
          "Rpc",
          "Rpc",
          "HideWarningOwner",
          "ShowWarningOwner",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_PlayerTeleportedFeedbackComponent",
        "methods": [
          "GetOnPlayerTeleported",
          "PlayerTeleported"
        ]
      },
      {
        "class_name": "SCR_PlayerXPHandlerComponent",
        "methods": [
          "GetPlayerXP",
          "SetPlayerXPSinceLastSpawn",
          "GetPlayerXPSinceLastSpawn",
          "SetSuicidePenaltyTimestamp",
          "GetSuicidePenaltyTimestamp",
          "GetOnXPChanged",
          "IsProxy",
          "OnPlayerKilled",
          "UpdatePlayerRank",
          "RpcAsk_CheatRank",
          "CheatRank",
          "Rpc",
          "RpcDo_OnPlayerXPChanged",
          "AddPlayerXP",
          "UpdatePlayerRank",
          "Rpc",
          "UpdatePlayerRank",
          "Rpc"
        ]
      },
      {
        "class_name": "SCR_PositionalInsectType",
        "methods": [
          "Init",
          "Update",
          "RandomizeAnimation",
          "SpawnParticle",
          "RandomizeAnimation",
          "RemoveDistantInsects",
          "AddClosestEntity",
          "ClearClosestEntities"
        ]
      },
      {
        "class_name": "SCR_PositionalLightSourceInsect",
        "methods": [
          "Init",
          "Update",
          "RemoveDistantInsects",
          "ProcessLightsSources",
          "OnObjectDamage",
          "ProcessLightsSources",
          "spawnParams",
          "SpawnParticle"
        ]
      },
      {
        "class_name": "SCR_PositionalAmbientLeafParticles",
        "methods": [
          "Update",
          "RemoveDistantInsects",
          "ProcessTrees",
          "ProcessTrees",
          "spawnParams",
          "SpawnParticle"
        ]
      },
      {
        "class_name": "SCR_PositionalGenericInsect",
        "methods": [
          "Init",
          "Update",
          "RemoveDistantInsects",
          "ProcessEntitySources",
          "ProcessEntitySources",
          "spawnParams",
          "SpawnParticle"
        ]
      },
      {
        "class_name": "SCR_PowerComponent",
        "methods": [
          "HasPower",
          "ShouldApplyNoPowerPenalty",
          "GetNoPowerMultiplier",
          "GetEventBatteryStateChanged",
          "UpdatePowerState",
          "RegisterBatteryHitZone",
          "UpdatePowerState"
        ]
      },
      {
        "class_name": "SCR_RandomPositionalInsects",
        "methods": [
          "Update",
          "RemoveOutOfRangeParticles",
          "RemoveParticlesBasedOnTimeAndWeather",
          "UpdateInsectGroup",
          "UpdateGlobalModifiers",
          "UpdateGlobalModifiers",
          "UpdateDensity",
          "GetDensityMax",
          "RemoveOutOfRangeParticles",
          "RemoveParticlesBasedOnTimeAndWeather",
          "RandomizeAnimation",
          "UpdateInsectGroup",
          "spawnParams",
          "RandomizeAnimation",
          "GenerateRandomPosition",
          "GetRandomInsectDef",
          "GetSoundMapTypeFromTerrain",
          "UpdateDensity",
          "LoadConfigs",
          "OnPostInit",
          "LoadConfigs"
        ]
      },
      {
        "class_name": "SCR_ReconnectSynchronizationComponent",
        "methods": [
          "GetOnPlayerReconnect",
          "CreateReconnectDialog",
          "Rpc",
          "RPC_DoSendReconnectState"
        ]
      },
      {
        "class_name": "SCR_ServicesStatusDialogComponent",
        "methods": [
          "HandlerAttached",
          "SetLastUpdateMessage",
          "SetRefreshMessage",
          "CreateLines",
          "HandlerDeattached",
          "CreateLines",
          "SetServiceState",
          "SetPing",
          "SetAllServicesState",
          "SetServiceState",
          "SetServiceState",
          "SetStatusBackground",
          "SetStatusImageAndColor",
          "SetStatusText",
          "UpdateServicesMessage",
          "SetLastUpdateMessage",
          "SetRefreshMessage",
          "SetStatusBackground",
          "SetStatusText",
          "SetStatusImageAndColor",
          "GetStatus",
          "OnLineMouseEnter",
          "OnLineMouseLeave",
          "OnTooltipShow"
        ]
      },
      {
        "class_name": "SCR_ServicesStatusDialogLineComponent",
        "methods": [
          "HandlerAttached",
          "CacheStatus",
          "GetStatus",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_ShellSoundComponent",
        "methods": [
          "UpdateSoundJob",
          "GetCameraPosition",
          "OnUpdateSoundJobBegin",
          "OnPostInit",
          "SCR_ShellSoundComponent",
          "SetScriptedMethodsCall"
        ]
      },
      {
        "class_name": "SCR_SignalDebugComponent",
        "methods": [
          "EOnFrame",
          "OnPostInit",
          "ClearEventMask",
          "SetEventMask",
          "EOnInit",
          "SCR_SignalDebugComponent"
        ]
      },
      {
        "class_name": "SCR_SoundDataComponent",
        "methods": [
          "GetAudioSourceConfiguration"
        ]
      },
      {
        "class_name": "SCR_SpawnProtectionComponent",
        "methods": [
          "PreparePlayerEntity_S",
          "OnPlayerSpawnFinalize_S",
          "OnSpawnPlayerEntityFailure_S",
          "DisablePlayerProtection",
          "OnPlayerAmmoChangeCallback",
          "DisablePlayerProtection",
          "DisablePlayerProtection",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_TurretInventoryStorageManagerComponent",
        "methods": [
          "FillInitialStorages"
        ]
      },
      {
        "class_name": "SCR_VehicleBuoyancyComponent",
        "methods": [
          "GetOnWaterEnter",
          "GetOnWaterExit",
          "OnEnterWater",
          "OnExitWater"
        ]
      },
      {
        "class_name": "SCR_VehicleInventoryStorageManagerComponent",
        "methods": [
          "FillInitialStorages",
          "OnEntityAttached",
          "AddStorage",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_VehicleSpawner",
        "methods": [
          "OnPostInit",
          "PickRandomResource",
          "PerformSpawn",
          "SCR_VehicleSpawner"
        ]
      },
      {
        "class_name": "SCR_XPHandlerComponent",
        "methods": [
          "OnPlayerSpawnFinalize_S",
          "OnPlayerDisconnected",
          "OnPlayerKilled",
          "ProcessSuicide",
          "AwardTransportXP",
          "OnControllableDestroyed",
          "AwardXP",
          "AwardXP",
          "AwardXP",
          "OnCompartmentLeft",
          "AwardTransportXP",
          "OnStatPointsAdded",
          "AwardTransportXP",
          "ProcessSuicide",
          "AwardTransportXP",
          "AwardXP",
          "IsProxy",
          "AwardXP",
          "AwardXP",
          "AwardXP",
          "VeterancyAward",
          "AwardXP",
          "GetXPRewardAmount",
          "GetXPMultiplier",
          "GetXPRewardName",
          "AllowNotification",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_CatalogEntitySpawnerComponentClass",
        "methods": [
          "GetDefaultWaypointPrefab",
          "GetDefaultGroupPrefab",
          "GetSupplySearchRadius",
          "GetMoveWaypointCompletionRadius",
          "GetVehicleLockedDuration"
        ]
      },
      {
        "class_name": "SCR_CatalogEntitySpawnerComponent",
        "methods": [
          "IsProxy",
          "IsSuppliesConsumptionEnabled",
          "GetPostGracePeriodRefundMultiplier",
          "IsInGracePeriod",
          "IsInGracePeriod",
          "CanRefund",
          "CanRefund",
          "UnregisterGracePeriod",
          "UnregisterGracePeriod",
          "RegisterGracePeriod",
          "RegisterGracePeriod",
          "RankCheck",
          "SetCurrentFactionCatalog",
          "AssignUserActions",
          "AddAssetsFromCatalog",
          "AssignUserActions",
          "AddAssetsFromCatalog",
          "GetEntryAtIndex",
          "AssignUserActions",
          "AssignResourceComponent",
          "AssignSupplyComponent",
          "ClearKnownSlots",
          "AddKnownOccupiedSlot",
          "UpdateOccupiedSlots",
          "GetLastKnownSuitableSlot",
          "GetFreeSlotFromArray",
          "AddKnownOccupiedSlot",
          "GetFreeSlot",
          "UpdateOccupiedSlots",
          "InitiateSpawn",
          "PerformSpawn",
          "GetRequestState",
          "CanRequestAI",
          "OnGroupWaypointFinished",
          "AddAISoldierToPlayerGroup",
          "GetRequesterFaction",
          "GetOnEntitySpawned",
          "GetOnSpawnerSuppliesChanged",
          "GetPlayerControllerFromEntity",
          "GetRequestComponentFromPlayerEntity",
          "SendNotification",
          "CreatePreviewEntity",
          "DeletePreviewEntity",
          "DeletePreviewEntity",
          "GetPreviewEntity",
          "PerformSpawn",
          "ClearKnownSlots",
          "SendNotification",
          "LockSpawnedVehicle",
          "SpawnEntity",
          "LockSpawnedVehicle",
          "GetSpawnerResourceComponent",
          "GetSpawnerSupplyComponent",
          "GetSpawnerResourceValue",
          "GetSpawnerSupplies",
          "AddSpawnerSupplies",
          "CooldownCheck",
          "OnFactionChanged",
          "SetCurrentFactionCatalog",
          "OnAIGroupSpawned",
          "SpawnAIGroupMember",
          "OnChimeraCharacterSpawned",
          "OnAIAgentRemoved",
          "OnChimeraCharacterSpawned",
          "AddAISoldierToPlayerGroup",
          "CreateRallyPointWaypoint",
          "SupplyComponentSearchCallback",
          "AssignResourceComponent",
          "EOnFrame",
          "UnregisterGracePeriod",
          "EOnInit",
          "OnDelete",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_DefenderSpawnerComponentClass",
        "methods": [
          "GetDefaultWaypointPrefab",
          "GetDefaultWaypointCompletionRadius",
          "GetExitFormation",
          "OnDefenderGroupSpawnedDelegate"
        ]
      },
      {
        "class_name": "SCR_DefenderSpawnerComponent",
        "methods": [
          "GetMinimumRank",
          "UserRankCheck",
          "GetOnDefenderGroupSpawned",
          "SetWaypoint",
          "AssignDefenderGroupDataFromOwningFaction",
          "AssignSupplyComponent",
          "GetSpawnerSupplyComponent",
          "GetSpawnerSupplies",
          "AddSupplies",
          "IsSpawningEnabled",
          "EnableSpawning",
          "IsProxy",
          "SpawnUnit",
          "AddSupplies",
          "OnMovingCharacterDeath",
          "OnMoveFinished",
          "GetFreeSlot",
          "ReinforceGroup",
          "SpawnGroup",
          "ReinforceGroup",
          "GetWaypoint",
          "GetPlayerDistanceState",
          "HandleGroup",
          "OnMoveFinished",
          "ReinforceGroup",
          "SpawnGroup",
          "SpawnUnit",
          "SpawnUnit",
          "OnFactionChanged",
          "AssignDefenderGroupDataFromOwningFaction",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_SlotServiceComponentClass",
        "methods": [
          "GetMaxSlotDistance"
        ]
      },
      {
        "class_name": "SCR_SlotServiceComponent",
        "methods": [
          "RegisterSlot",
          "CanBeSlotRegistered",
          "SlotSearchCallback",
          "RegisterSlot",
          "RegisterNearbySlots",
          "RegisterChildSlots",
          "OnSlotUpdate",
          "OnSlotRemoved",
          "EOnInit",
          "RegisterChildSlots",
          "RegisterNearbySlots"
        ]
      },
      {
        "class_name": "SCR_SpawnerAIGroupManagerComponent",
        "methods": [
          "SetIsAtAILimit",
          "IsAtAILimit",
          "QueueSpawn",
          "OnAgentsUpdated",
          "SetIsAtAILimit",
          "SetIsAtAILimit",
          "EOnFrame",
          "ClearEventMask",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_SpawnerAIRequest",
        "methods": [
          "SCR_SpawnerAIRequest"
        ]
      },
      {
        "class_name": "SCR_SpawnerRequestComponent",
        "methods": [
          "RequestPlayerTeleport",
          "Rpc",
          "RPC_DoTeleportPlayer",
          "AddQueuedAI",
          "GetQueuedAIs",
          "EnableSpawning",
          "RPC_DoEnableSpawning",
          "RequestCatalogEntitySpawn",
          "RPC_DoRequestCatalogSpawn",
          "SendPlayerFeedback",
          "Rpc",
          "RPC_DoPlayerFeedbackImpl",
          "GetMessageStringForCatalogType",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_EntityLabelPointComponentClass",
        "methods": [
          "GetEntityLabels"
        ]
      },
      {
        "class_name": "SCR_EntityLabelPointComponent",
        "methods": [
          "HasLabel",
          "GetOnOwnerUpdated",
          "OnEntityUpdated",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_EntitySpawnerCharacterSlotComponent",
        "methods": [
          "GetDefaultWaypointPrefab",
          "GetDefaultWaypointPosition"
        ]
      },
      {
        "class_name": "SCR_EntitySpawnerSlotComponentClass",
        "methods": [
          "GetMaxRallyPointDistance",
          "GetMinBoundsVector",
          "GetMaxBoundsVector",
          "GetSlotType",
          "GetTeleportMaximumDistance",
          "GetTeleportSearchSize"
        ]
      },
      {
        "class_name": "SCR_EntitySpawnerSlotComponent",
        "methods": [
          "IsEntityLabelInRange",
          "SetRallyPoint",
          "GetRallyPoint",
          "GetSlotType",
          "IsOccupied",
          "FillExcludedEntities",
          "MoveCharactersFromSlot",
          "GetCharactersInSlot",
          "GetCharactersInSlot",
          "FillExcludedEntities",
          "CharacterFoundCallback",
          "FilterCharactersCallback",
          "TraceCallback",
          "IsEntityDestroyed",
          "OnRallyPointUpdated",
          "RallyPointSearchCallback",
          "EOnInit",
          "DrawDebugShape",
          "OnPostInit",
          "SetEventMask",
          "SetEventMask",
          "DrawDebugShape",
          "EOnFrame",
          "_WB_AfterWorldUpdate"
        ]
      },
      {
        "class_name": "SCR_SpawnerSlotManager",
        "methods": [
          "GetOnSlotCreated",
          "GetOnSlotRemoved",
          "GetOnSlotUpdated",
          "GetInstance",
          "SetupSlotUpdatedInvoker",
          "RegisterSlot",
          "UnregisterSlot",
          "OnSlotUpdated",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_SpectateTargetComponent",
        "methods": [
          "GetEntity",
          "IsAlive",
          "GetSpectateTarget",
          "GetSpectateTargetCount",
          "RegisterTarget",
          "UnregisterTarget",
          "SCR_SpectateTargetComponent",
          "RegisterTarget",
          "UnregisterTarget"
        ]
      },
      {
        "class_name": "SCR_BaseDamageHealSupportStationComponentClass",
        "methods": [
          "CreateSoundAudioConfig",
          "GetOnHealUpdateAudioConfig",
          "GetOnDoTRemovedAudioConfig"
        ]
      },
      {
        "class_name": "SCR_BaseDamageHealSupportStationComponent",
        "methods": [
          "GetMaxHealScaled",
          "IsValid",
          "GetDamageOrStateToHeal",
          "GetSupplyCostAction",
          "OnExecutedServer",
          "FindEntityIds",
          "OnExecute",
          "OnExecuteDamageSystemBroadcast",
          "GetEntitiesFromID",
          "OnExecuteDamageSystem",
          "OnSuccessfullyExecuted",
          "PlayCharacterVoiceEvent",
          "SendDamageSupportStationNotification",
          "SendDamageSupportStationNotification"
        ]
      },
      {
        "class_name": "SCR_BaseSupportStationComponentClass",
        "methods": [
          "GetSendNotificationOnUse",
          "CanMoveWithPhysics",
          "AllowGetFactionFromParent",
          "GetOnUseAudioConfig",
          "GetCharacterVoiceSoundEventVariables"
        ]
      },
      {
        "class_name": "SCR_BaseSupportStationComponent",
        "methods": [
          "OnExecutedServer",
          "FindEntityIds",
          "OnExecute",
          "FindEntityIds",
          "GetEntitiesFromID",
          "OnExecuteBroadcast",
          "GetEntitiesFromID",
          "OnExecute",
          "OnExecute",
          "OnSuccessfullyExecuted",
          "OnSuccessfullyExecuted",
          "PlaySoundEffect",
          "PlayCharacterVoiceEvent",
          "IsValid",
          "GetSupportStationType",
          "GetSupportStationPriority",
          "SetEnabled",
          "SetEnabledBroadcast",
          "Rpc",
          "SetEnabledBroadcast",
          "IsEnabled",
          "GetOnEnabledChanged",
          "IsMoving",
          "IsUserValidFaction",
          "GetFaction",
          "GetSupplyCostAction",
          "GetMaxAvailableSupplies",
          "HasEnoughSupplies",
          "OnConsumeSuppliesServer",
          "AreSuppliesEnabled",
          "GetResourceConsumer",
          "GetResourceComponent",
          "GetRange",
          "UsesRange",
          "GetPosition",
          "GetOffset",
          "IgnoreSelf",
          "GetOverrideUserActionName",
          "GetSendNotificationOnUse",
          "GetOnUseAudioConfig",
          "GetPlayerIdsInVehicle",
          "OverrideDamageState",
          "OnDamageStateChanged",
          "OnHitZoneDamageStateChanged",
          "OnDamageStateChanged",
          "AddRemoveOnDamageStateChanged",
          "RplSave",
          "RplLoad",
          "SetEnabledBroadcast",
          "InitValidSetup",
          "TEMP_OnInteractorReplicated",
          "EOnInit",
          "DelayedInit",
          "AddRemoveOnDamageStateChanged",
          "OnPostInit",
          "SetEventMask",
          "OnDelete",
          "AddRemoveOnDamageStateChanged",
          "FindSupportStation"
        ]
      },
      {
        "class_name": "SCR_FuelSupportStationComponentClass",
        "methods": [
          "GetOnUpdateAudioConfig"
        ]
      },
      {
        "class_name": "SCR_FuelSupportStationComponent",
        "methods": [
          "DelayedInit",
          "IsValid",
          "GetSupportStationType",
          "OnFuelAddedToVehicleServer",
          "GetFuelNodeInfo",
          "OnExecutedServer",
          "GetFuelNodeInfo",
          "OnFuelAddedToVehicleServer",
          "FindEntityIds",
          "OnExecuteFuel",
          "OnExecuteFuelBroadcast",
          "GetEntitiesFromID",
          "OnExecuteFuel",
          "OnExecuteFuel",
          "OnSuccessfullyExecuted",
          "PlayRefuelUpdateSound",
          "PlayCharacterVoiceEvent",
          "GetPlayerIdsInVehicle",
          "OnExecute",
          "PlayRefuelUpdateSound"
        ]
      },
      {
        "class_name": "SCR_HealSupportStationComponentClass",
        "methods": [
          "GetOnHealBloodUpdateAudioConfig"
        ]
      },
      {
        "class_name": "SCR_HealSupportStationComponent",
        "methods": [
          "GetSupportStationType",
          "GetDamageOrStateToHeal",
          "GetSupplyCostAction",
          "OnExecutedServer",
          "FindEntityIds",
          "OnExecuteDamageSystem",
          "OnSuccessfullyExecuted",
          "PlayCharacterVoiceEvent",
          "OnSuccessfullyExecuted",
          "SendDamageSupportStationNotification",
          "SendDamageSupportStationNotification"
        ]
      },
      {
        "class_name": "SCR_LoadCasualtySupportStationComponent",
        "methods": [
          "DelayedInit",
          "IsValid",
          "GetSupportStationType",
          "OnExecutedServer"
        ]
      },
      {
        "class_name": "SCR_RepairSupportStationComponentClass",
        "methods": [
          "GetHealDoneNotFullInVehicleNotification",
          "GetOnExtinguishUpdateAudioConfig",
          "GetOnExtinguishDoneAudioConfig"
        ]
      },
      {
        "class_name": "SCR_RepairSupportStationComponent",
        "methods": [
          "GetSupportStationType",
          "GetDamageOrStateToHeal",
          "GetSupplyCostAction",
          "OnExecutedServer",
          "FindEntityIds",
          "OnExecuteDamageSystem",
          "OnSuccessfullyExecuted",
          "OnSuccessfullyExecuted",
          "SendDamageSupportStationNotification",
          "SendDamageSupportStationNotification",
          "GetPlayerIdsInVehicle"
        ]
      },
      {
        "class_name": "SCR_ResupplyMedicalGadgetSupportStationComponent",
        "methods": [
          "GetSupportStationType"
        ]
      },
      {
        "class_name": "SCR_ResupplySupportStationComponent",
        "methods": [
          "DelayedInit",
          "InitValidSetup",
          "IsValid",
          "GetSupportStationType",
          "GetSupplyCostAction",
          "OnExecutedServer",
          "OnExecute",
          "OnSuccessfullyExecuted",
          "PlayCharacterVoiceEvent",
          "PlayCharacterVoiceEvent",
          "FindEntityIds"
        ]
      },
      {
        "class_name": "SCR_SupportStationManagerComponentClass",
        "methods": [
          "SupportStation_OnSupportStationExecuted"
        ]
      },
      {
        "class_name": "SCR_SupportStationManagerComponent",
        "methods": [
          "GetInstance",
          "OnSupportStationExecutedSuccessfully",
          "GetArrayOfSupportStationType",
          "GetClosestValidSupportStation",
          "GetArrayOfSupportStationType",
          "AddSupportStation",
          "RemoveSupportStation",
          "GetCombinedHitZonesStateForDamageSupportStation",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_InstantTriggerComponent",
        "methods": [
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_UnitDisplayComponent",
        "methods": [
          "EOnFrame",
          "CreateSimpleText",
          "OnPostInit",
          "SetEventMask",
          "SCR_UnitDisplayComponent"
        ]
      },
      {
        "class_name": "SCR_HelicopterSoundComponent",
        "methods": [
          "UpdateSoundJob",
          "CalculateSpeedToCameraSignal",
          "HandleWashRotor",
          "CalculateSpeedToCameraSignal",
          "HandleWashRotor",
          "Terminate",
          "Terminate",
          "SetSoundTransformation",
          "RegisterOnDamageChanged",
          "UnregisterOnDamageChanged",
          "OnDamageStateChanged",
          "RegisterRotorMainOnDamageChanged",
          "UnregisterRotorMainOnDamageChanged",
          "RotorMainOnStateChanged",
          "OnPostInit",
          "OnInit",
          "RegisterOnDamageChanged",
          "RegisterRotorMainOnDamageChanged",
          "UnregisterOnDamageChanged",
          "UnregisterRotorMainOnDamageChanged"
        ]
      },
      {
        "class_name": "SCR_VehicleSoundComponent",
        "methods": [
          "OnInit",
          "RegisterHitZoneSignals",
          "RegisterHitZoneSignals",
          "UnregisterHitZoneSignals",
          "OnPostInit",
          "SetMinTimeAfterImpact",
          "SCR_VehicleSoundComponent",
          "UnregisterHitZoneSignals"
        ]
      },
      {
        "class_name": "SCR_VoterComponent",
        "methods": [
          "GetInstance",
          "InstantVote",
          "InstantRemoveAndAbstainVote",
          "Vote",
          "Rpc",
          "RemoveVote",
          "AbstainVote",
          "Rpc",
          "AbstainVote",
          "Rpc",
          "DidVote",
          "HasAbstained",
          "VoteServer",
          "RemoveVoteServer",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_VotingAdmin",
        "methods": [
          "IsAvailable",
          "OnVotingEnd"
        ]
      },
      {
        "class_name": "SCR_VotingAutoKick",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_VotingBase",
        "methods": [
          "AddPlayerVotedServer",
          "RemovePlayerVotedServer",
          "SetCurrentVoteCount",
          "GetCurrentVoteCount",
          "GetJoinServerVoteCooldown",
          "GetServerRuntimeIgnoreJoinServerCooldown",
          "GetVoteCooldownTime",
          "HasCooldown",
          "GetLocalCooldownTimeStamp",
          "SetLocalCooldownTimeStamp",
          "HasInitiatedVotingLocallyOnce",
          "SetHasInitiatedVotingLocallyOnce",
          "SetVote",
          "RemoveVote",
          "RemoveValue",
          "CanSendNotification",
          "Evaluate",
          "GetWinner",
          "OnVotingEnd",
          "GetPlayerVote",
          "IsAvailable",
          "IsMatching",
          "Log",
          "GetValueName",
          "GetType",
          "GetValue",
          "GetInfo",
          "GetRemainingDuration",
          "IsValuePlayerID",
          "SetVoteLocal",
          "RemoveVoteLocal",
          "GetLocalVote",
          "Update",
          "InitFromTemplate",
          "GetPlayerCount",
          "GetVoteCountRequired",
          "EvaluateParticipation"
        ]
      },
      {
        "class_name": "SCR_VotingReferendum",
        "methods": [
          "GetRatio",
          "SetVote",
          "RemoveVote",
          "RemoveValue",
          "IsMatching",
          "Evaluate",
          "GetWinner",
          "GetPlayerVote",
          "GetValue",
          "Log",
          "InitFromTemplate"
        ]
      },
      {
        "class_name": "SCR_VotingElection",
        "methods": [
          "UpdateHighestValue",
          "SetVote",
          "UpdateHighestValue",
          "RemoveVote",
          "UpdateHighestValue",
          "RemoveValue",
          "UpdateHighestValue",
          "IsMatching",
          "Evaluate",
          "GetWinner",
          "GetPlayerVote",
          "Log",
          "PrintFormat"
        ]
      },
      {
        "class_name": "SCR_VotingEditorIn",
        "methods": [
          "EvaluateEditor",
          "Evaluate",
          "IsAvailable",
          "CanSendNotification",
          "OnVotingEnd",
          "InitFromTemplate"
        ]
      },
      {
        "class_name": "SCR_VotingEditorOut",
        "methods": [
          "EvaluateEditor",
          "GetPlayerCount",
          "IsAvailable",
          "CanSendNotification",
          "OnVotingEnd"
        ]
      },
      {
        "class_name": "SCR_VotingEditorWithdraw",
        "methods": [
          "Evaluate",
          "IsAvailable",
          "OnVotingEnd"
        ]
      },
      {
        "class_name": "SCR_VotingKick",
        "methods": [
          "InitFromTemplate",
          "isFactionSpecific",
          "IsAvailable",
          "GetPlayerCount",
          "OnVotingEnd"
        ]
      },
      {
        "class_name": "SCR_VotingManagerComponentClass",
        "methods": [
          "ScriptInvoker_VotingManagerStartMethod",
          "ScriptInvoker_VotingManagerEndMethod",
          "ScriptInvoker_VotingManagerPlayerMethod",
          "ScriptInvoker_VotingManagerVoteCountChangedMethod"
        ]
      },
      {
        "class_name": "SCR_VotingManagerComponent",
        "methods": [
          "GetInstance",
          "Vote",
          "EndVoting",
          "RemoveVote",
          "EndVoting",
          "RPC_PlayerVoteCountChanged",
          "StartVoting",
          "StartVotingBroadcast",
          "Rpc",
          "EndVoting",
          "EndVoting",
          "GetPlayerVote",
          "GetVoteCounts",
          "GetOnVotingStart",
          "GetOnVoteCountChanged",
          "GetOnVotingEnd",
          "GetOnVote",
          "GetOnRemoveVote",
          "GetOnVoteLocal",
          "GetOnRemoveVoteLocal",
          "GetOnAbstainVoteLocal",
          "GetHostPlayerID",
          "IsVotingAvailable",
          "IsVoting",
          "IsVotingAboutPlayer",
          "AbstainVoteLocally",
          "HasAbstainedLocally",
          "GetRemainingDurationOfVote",
          "GetVotingsAboutPlayer",
          "GetAllVotingsAboutPlayer",
          "GetAllVotingsWithValue",
          "GetAllVotingValues",
          "GetCurrentJoinServerVoteCooldown",
          "GetCurrentVoteCooldownTime",
          "GetCurrentVoteCooldownForLocalPlayer",
          "GetCurrentVoteCooldownTime",
          "GetCurrentJoinServerVoteCooldown",
          "GetTimeStamp",
          "GetVotingInfo",
          "GetValueName",
          "PreVoteLocal",
          "GetAllVotingsWithValue",
          "VoteLocal",
          "RemoveVoteLocal",
          "GetLocalVote",
          "IsLocalVote",
          "Log",
          "EndVoting",
          "EndVotingBroadcast",
          "Rpc",
          "FindVoting",
          "FindTemplate",
          "CreateVotingInstance",
          "DeleteVotingInstance",
          "StartVotingBroadcast",
          "VoteLocal",
          "EndVotingBroadcast",
          "DeleteVotingInstance",
          "OnPlayerConnected",
          "OnPlayerRegistered",
          "OnPlayerDisconnected",
          "EndVoting",
          "RplSave",
          "RplLoad",
          "CreateVotingInstance",
          "EOnFrame",
          "EndVoting",
          "SCR_VotingManagerComponent"
        ]
      },
      {
        "class_name": "SCR_MuzzleInMagComponent",
        "methods": [
          "CanBeReloaded"
        ]
      },
      {
        "class_name": "SCR_CompositionSlotManagerComponentClass",
        "methods": [
          "OnCompositionSlotManagerEntityChangedMethod"
        ]
      },
      {
        "class_name": "SCR_CompositionSlotManagerComponent",
        "methods": [
          "GetOnEntityChanged",
          "GetInstance",
          "SetOccupant",
          "SetOccupiedDynamic",
          "SetOccupant",
          "SetOccupant",
          "GetOccupant",
          "IsOccupied",
          "GetSlot",
          "IsInSlot",
          "SetOccupiedStatic",
          "Rpc",
          "SetOccupiedStaticBroadcast",
          "ModifyArray",
          "SetOccupiedDynamic",
          "Rpc",
          "SetOccupiedDynamicBroadcast",
          "ModifyArray",
          "ModifyArray",
          "ModifyArray",
          "UpdateSlot",
          "OnEntityChanged",
          "SetOccupant",
          "QueryEntity",
          "RplSave",
          "RplLoad",
          "OnPostInit",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_CompositionValidationEntity",
        "methods": [
          "InArea",
          "FindComposition",
          "ProcessEntities",
          "ProcessEntities",
          "_WB_AfterWorldUpdate",
          "ProcessEntities",
          "SCR_CompositionValidationEntity"
        ]
      },
      {
        "class_name": "SCR_HorizontalAlignComponent",
        "methods": [
          "_WB_SetTransform"
        ]
      },
      {
        "class_name": "SCR_SiteSlotEntityClass",
        "methods": [
          "GetRotationStep"
        ]
      },
      {
        "class_name": "SCR_SiteSlotEntity",
        "methods": [
          "SpawnEntityInSlot",
          "GetWorldTransform",
          "SetOccupant",
          "GetRotationStep",
          "GetOccupant",
          "IsOccupied",
          "SetOccupant",
          "SCR_SiteSlotEntity",
          "ClearFlags",
          "SetFlags",
          "_WB_SnapToTerrain",
          "_WB_OrientToTerrain",
          "GetWorldTransform",
          "_WB_GetAngle",
          "_WB_OnContextMenu",
          "_WB_SnapToTerrain",
          "_WB_OrientToTerrain",
          "_WB_OnKeyChanged",
          "_WB_OrientToTerrain"
        ]
      },
      {
        "class_name": "SCR_Credits",
        "methods": [
          "OnMenuOpen",
          "StartCredits",
          "StartCredits",
          "ChangeBackground",
          "ChangeBackground",
          "ShowNames",
          "EndCredits",
          "EndCredits",
          "HideNames",
          "EndCredits",
          "OnLicenses"
        ]
      },
      {
        "class_name": "SCR_CreditsLicenses",
        "methods": [
          "OnMenuOpen",
          "EndCredits"
        ]
      },
      {
        "class_name": "SCR_CreditsDepartmentHeader",
        "methods": [
          "GetCreditsNamesList",
          "GetDeptName"
        ]
      },
      {
        "class_name": "SCR_CreditsPersonName",
        "methods": [
          "GetPersonName"
        ]
      },
      {
        "class_name": "SCR_CreditsHeader",
        "methods": [
          "GetCreditsDepartmentList",
          "GetBackgrounds"
        ]
      },
      {
        "class_name": "DamageEffectEvaluator",
        "methods": [
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences",
          "HandleEffectConsequences"
        ]
      },
      {
        "class_name": "SCR_DamageEffect",
        "methods": [
          "HandleConsequences",
          "OnDiag",
          "Save",
          "Load",
          "SetDamageType",
          "GetDefaultDamageType"
        ]
      },
      {
        "class_name": "SCR_DotDamageEffect",
        "methods": [
          "HandleConsequences",
          "EOnFrame",
          "DealDot",
          "OnDiag",
          "Save",
          "Load",
          "SetDPS",
          "SkipRegenDelay",
          "GetSkipRegenDelay",
          "SkipRegenDelay"
        ]
      },
      {
        "class_name": "SCR_InstantDamageEffect",
        "methods": [
          "HandleConsequences"
        ]
      },
      {
        "class_name": "SCR_PersistentDamageEffect",
        "methods": [
          "HandleConsequences",
          "OnDiag"
        ]
      },
      {
        "class_name": "SCR_BandageDamageEffect",
        "methods": [
          "OnEffectAdded",
          "HandleConsequences"
        ]
      },
      {
        "class_name": "SCR_BleedingDamageEffect",
        "methods": [
          "HandleConsequences",
          "OnEffectAdded",
          "TryAddBleedingToCloth",
          "OnEffectRemoved",
          "EOnFrame",
          "DealCustomDot",
          "HijackDamageEffect",
          "CalculateBleedingRate",
          "TryAddBleedingToCloth",
          "Save",
          "Load",
          "GetDefaultDamageType",
          "OnDiag"
        ]
      },
      {
        "class_name": "SCR_DrowningDamageEffect",
        "methods": [
          "HandleConsequences"
        ]
      },
      {
        "class_name": "SCR_MorphineDamageEffect",
        "methods": [
          "HandleConsequences",
          "HijackDamageEffect",
          "OnEffectAdded",
          "EOnFrame",
          "DealCustomDot",
          "GetDefaultDamageType"
        ]
      },
      {
        "class_name": "SCR_PassiveHitZoneRegenDamageEffect",
        "methods": [
          "HandleConsequences",
          "OnEffectAdded",
          "Terminate",
          "EOnFrame",
          "DealDot"
        ]
      },
      {
        "class_name": "SCR_PhysicalHitZonesRegenDamageEffect",
        "methods": [
          "HandleConsequences",
          "OnEffectAdded",
          "EOnFrame",
          "HijackDamageEffect",
          "SetHitZonesToHeal",
          "SetHitZonesToHeal",
          "SetHitZonesToHeal",
          "DelayTimerRanOut",
          "GetSkipRegenDelay"
        ]
      },
      {
        "class_name": "SCR_SalineDamageEffect",
        "methods": [
          "HandleConsequences",
          "HijackDamageEffect",
          "EOnFrame",
          "DealDot",
          "GetDefaultDamageType"
        ]
      },
      {
        "class_name": "SCR_TourniquetDamageEffect",
        "methods": [
          "HandleConsequences",
          "OnEffectAdded",
          "SetActive"
        ]
      },
      {
        "class_name": "SCR_BaseBulletDamageEffect",
        "methods": [
          "HandleConsequences"
        ]
      },
      {
        "class_name": "SCR_BlastForceDamageEffect",
        "methods": [
          "HandleConsequences"
        ]
      },
      {
        "class_name": "SCR_CollisionDamageEffect",
        "methods": [
          "HandleConsequences"
        ]
      },
      {
        "class_name": "SCR_ExplosionDamageEffect",
        "methods": [
          "HandleConsequences"
        ]
      },
      {
        "class_name": "SCR_FragmentationDamageEffect",
        "methods": [
          "HandleConsequences"
        ]
      },
      {
        "class_name": "SCR_IncendiaryBulletDamageEffect",
        "methods": [
          "HandleConsequences"
        ]
      },
      {
        "class_name": "SCR_IncendiaryDamageEffect",
        "methods": [
          "HandleConsequences"
        ]
      },
      {
        "class_name": "SCR_MeleeDamageEffect",
        "methods": [
          "HandleConsequences"
        ]
      },
      {
        "class_name": "Instigator",
        "methods": [
          "Instigator",
          "SetInstigator",
          "SetInstigatorByPlayerID",
          "GetInstigatorEntity",
          "GetInstigatorPlayerID",
          "GetInstigatorType",
          "CreateInstigator"
        ]
      },
      {
        "class_name": "SCR_CharacterDamageManagerEvaluator",
        "methods": [
          "HandleEffectConsequences",
          "EffectCauseBleeding",
          "HandleEffectConsequences",
          "EffectCauseBleeding",
          "HandleEffectConsequences",
          "EffectCauseBleeding",
          "HandleEffectConsequences",
          "EffectCauseBleeding",
          "HandleEffectConsequences",
          "EffectCauseBleeding"
        ]
      },
      {
        "class_name": "SCR_DamageContext",
        "methods": [
          "SCR_DamageContext"
        ]
      },
      {
        "class_name": "SCR_DamageIntensityHolder",
        "methods": [
          "GetValidIntensityEntry",
          "GetValidIntensityEntry",
          "GetValidIntensityEntry",
          "GetValidIntensityEntry",
          "GetValidIntensityUIInfo",
          "GetValidIntensityUIInfo",
          "GetValidIntensityUIInfo",
          "GetValidIntensityUIInfo",
          "GetValidIntensityType",
          "GetValidIntensityType",
          "GetValidIntensityType",
          "GetValidIntensityType",
          "GetIntensityEntry",
          "GetIntensityUIInfo",
          "GetIntensityName",
          "SCR_DamageIntensityHolder"
        ]
      },
      {
        "class_name": "SCR_DamageIntensityEntry",
        "methods": [
          "GetUiInfo",
          "GetDamageIntensityType",
          "IsValidDamageState",
          "SCR_DamageIntensityEntry"
        ]
      },
      {
        "class_name": "SCR_DamageStateConfig",
        "methods": [
          "GetUiInfo",
          "GetDamageStateInfoArray",
          "GetUnconciousStateUiInfo",
          "GetDeathStateUiInfo",
          "GetDestroyedStateUiInfo",
          "GetFracturedStateUiInfo"
        ]
      },
      {
        "class_name": "SCR_HealthAndBurn",
        "methods": [
          "GetPercentage",
          "GetState"
        ]
      },
      {
        "class_name": "SCR_HitZoneGroupNameHolder",
        "methods": [
          "GetHitZoneGroupName"
        ]
      },
      {
        "class_name": "SCR_HitZoneGroupName",
        "methods": [
          "GetHitZoneGroup"
        ]
      },
      {
        "class_name": "SCR_VehicleHitZoneGroupName",
        "methods": [
          "GetHitZoneGroup"
        ]
      },
      {
        "class_name": "SCR_CharacterHitZoneGroupName",
        "methods": [
          "GetHitZoneGroup"
        ]
      },
      {
        "class_name": "SCR_RepairConfig",
        "methods": [
          "GetBurnStateForHealth"
        ]
      },
      {
        "class_name": "SCR_DataCollectorAchievementsModule",
        "methods": [
          "InitModule",
          "AddInvokers",
          "RemoveInvokers",
          "OnPlayerKilled",
          "IncrementAchievementProgress",
          "IncrementAchievementProgress",
          "OnGameModeEnd",
          "CleanSweepCombatOps",
          "SecureIntelCombatOps",
          "SecureIntelCombatOps",
          "SecureIntelCombatOps",
          "CleanSweepTutorial",
          "OnItemUsed",
          "IncrementAchievementProgress",
          "OnSupportStationUsed",
          "IncrementAchievementProgress",
          "InstrumentPlayed",
          "PianoPlayed",
          "OrganPlayed",
          "UnlockAchievement",
          "IncrementAchievementProgress",
          "ToiletFlushed",
          "UnlockAchievement",
          "VehicleDestroyed",
          "IncrementAchievementProgress",
          "RankedUp",
          "UnlockAchievement",
          "SuppliesDelivered",
          "UnlockAchievement",
          "CleanSweepCombatOps",
          "UnlockAchievement",
          "SecureIntelCombatOps",
          "UnlockAchievement",
          "CleanSweepTutorial",
          "UnlockAchievement",
          "MinePlaced",
          "IncrementAchievementProgress",
          "PianoPlayed",
          "UnlockAchievement",
          "OrganPlayed",
          "UnlockAchievement"
        ]
      },
      {
        "class_name": "SCR_DataCollectorBasicActionsModule",
        "methods": [
          "AddInvokers",
          "RemoveInvokers",
          "OnCompartmentEntered",
          "OnCompartmentLeft",
          "OnPlayerDisconnected",
          "OnPlayerSpawned",
          "OnControlledEntityChanged",
          "OnPlayerKilled",
          "Update",
          "CreateVisualization",
          "CreateEntry"
        ]
      },
      {
        "class_name": "SCR_DataCollectorCrimesModule",
        "methods": [
          "OnPlayerAuditSuccess",
          "OnPlayerDisconnected",
          "EvaluatePlayerCrimes",
          "UpdateCriminalAcceleration",
          "OnGameModeEnd",
          "CheckPlayer",
          "Update",
          "CheckPlayer",
          "CheckPlayer",
          "ProcessTemporalStats",
          "EvaluatePlayerCrimes",
          "EvaluatePlayerCrimes",
          "ProcessTemporalStats",
          "UpdateCriminalScore",
          "KickPlayer",
          "SendHints",
          "KickPlayer",
          "ExecutePunishment",
          "ExecutePunishment",
          "RequestBanIfNecessary",
          "ExecutePunishment",
          "EvaluateHarmingFriendlies",
          "ExecutePunishment",
          "VoteForKickOrBan",
          "KickOrBanPlayer",
          "KickOrBanPlayer",
          "VoteForKickOrBan",
          "KickOrBanPlayer",
          "KickOrBanPlayer",
          "KickOrBanPlayer",
          "KickOrBanPlayer",
          "SendHints",
          "ProcessTemporalStats",
          "UpdateCriminalScore",
          "UpdateCriminalAcceleration"
        ]
      },
      {
        "class_name": "SCR_DataCollectorDriverModuleContext",
        "methods": [
          "SCR_DataCollectorDriverModuleContext"
        ]
      },
      {
        "class_name": "SCR_DataCollectorDriverModule",
        "methods": [
          "AddInvokers",
          "RemoveInvokers",
          "OnCompartmentEntered",
          "OnCompartmentLeft",
          "PlayerDied",
          "OnControlledEntityChanged",
          "PlayerDied",
          "OnPlayerKilled",
          "OnAIKilled",
          "OnPlayerDisconnected",
          "Update",
          "CreateVisualization",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry"
        ]
      },
      {
        "class_name": "ConsumableTypeStats",
        "methods": [
          "GetConsumableType",
          "GetStat"
        ]
      },
      {
        "class_name": "SCR_DataCollectorHealingItemsModule",
        "methods": [
          "AddInvokers",
          "RemoveInvokers",
          "HealingItemUsed",
          "OnPlayerSpawned",
          "RemoveInvokers",
          "AddInvokers",
          "OnPlayerDisconnected",
          "OnControlledEntityChanged",
          "Update",
          "CreateVisualization",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry"
        ]
      },
      {
        "class_name": "SCR_DataCollectorShootingModule",
        "methods": [
          "AddInvokers",
          "OnWeaponFired",
          "OnGrenadeThrown",
          "RemoveInvokers",
          "OnCompartmentEntered",
          "OnCompartmentLeft",
          "OnPlayerDisconnected",
          "OnPlayerSpawned",
          "OnControlledEntityChanged",
          "OnAIKilled",
          "OnPlayerKilled",
          "Update",
          "CreateVisualization",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry",
          "CreateEntry"
        ]
      },
      {
        "class_name": "SCR_DataCollectorStoreDataModule",
        "methods": [
          "Update",
          "StorePlayer"
        ]
      },
      {
        "class_name": "SCR_DataCollectorSupplyTruckDriverModule",
        "methods": [
          "OnCompartmentEntered",
          "OnCompartmentLeft",
          "AddInvokers",
          "RemoveInvokers",
          "OnPlayerDisconnected",
          "OnControlledEntityChanged",
          "Update",
          "CreateVisualization",
          "CreateEntry",
          "CreateEntry"
        ]
      },
      {
        "class_name": "SCR_PlayerData",
        "methods": [
          "SCR_PlayerData",
          "RequestLoadData",
          "LoadEmptyProfile",
          "UpdateTrackingController",
          "SetTimeOut",
          "GetTimeOut",
          "UpdateTrackingController",
          "SetPreviousStats",
          "SetStats",
          "RequestLoadData",
          "BackendDataReady",
          "GetDataReadyInvoker",
          "BackendDataReady",
          "LoadEmptyProfile",
          "LoadEmptyProfile",
          "StoreProfile",
          "CalculateStatsChange",
          "GetDataEventStats",
          "CalculateStatsChange",
          "UpdateTrackingController",
          "DebugCalculateStats",
          "AddStat",
          "AddStat",
          "AddStat",
          "AddStat",
          "AddStat",
          "AddStat",
          "AddStat",
          "AddStat",
          "AddStat",
          "AddStat",
          "AddStat",
          "AddStat",
          "CalculateStatsChange",
          "CalculateStatsChange",
          "IsDataReady",
          "IsDataProgressionReady",
          "FillArrayWithSpecializationPoints",
          "CalculateSessionDuration",
          "GetSpecializationPoints",
          "AddPointsToSpecialization",
          "PrepareSpecializationStatsDisplay",
          "PrepareSpecializationProgressionStatsDisplay",
          "IsEmptyProfile",
          "AddStat",
          "OverrideStat",
          "GetStat",
          "GetAccumulatedActionsTick",
          "GetLatestActionTick",
          "GetLatestCriminalScoreUpdateTick",
          "GetConfigs",
          "GetCriminalScore",
          "SetCriminalScore",
          "ResetAccumulatedActions",
          "CalculateSessionDuration",
          "GetSpecializationCount"
        ]
      },
      {
        "class_name": "CharacterDataLoadingCallback",
        "methods": [
          "CharacterDataLoadingCallback",
          "OnError",
          "OnSuccess",
          "OnTimeout"
        ]
      },
      {
        "class_name": "SCR_BanSettings",
        "methods": [
          "Log",
          "SetDefault",
          "SCR_BanSettings",
          "RegAll"
        ]
      },
      {
        "class_name": "SCR_BanSettingsContainer",
        "methods": [
          "GetDesc",
          "GetBanSettings",
          "Log",
          "SetDefault",
          "SCR_BanSettingsContainer"
        ]
      },
      {
        "class_name": "SCR_PlayerDataConfigs",
        "methods": [
          "GetInstance",
          "GetScoreThreshold",
          "GetScoreDecreasePerMinute",
          "GetScoreDecreasePerSecond",
          "GetScoreToAccelerationMultiplier",
          "GetMinAcceleration",
          "GetMaxAcceleration",
          "GetBanEvaluationLight",
          "GetBanEvaluationHeavy",
          "GetCrimePointsFriendlyKill",
          "GetCrimePointsFriendlyMultiKill",
          "GetQualityTimeTemp",
          "GetVotingSuggestionEnabled",
          "GetBanSettingsDescription",
          "GetSpecializationName",
          "GetSpecializationStatsCount",
          "LoadJson",
          "SCR_PlayerDataConfigs",
          "LoadJson"
        ]
      },
      {
        "class_name": "SCR_PlayerDataSpecializationDisplay",
        "methods": [
          "SCR_PlayerDataSpecializationDisplay",
          "GetEnumId",
          "SetTitle",
          "GetTitle",
          "SetUnits",
          "GetUnits",
          "SetValue",
          "GetValue"
        ]
      },
      {
        "class_name": "SCR_DataCollectorCommunicationComponent",
        "methods": [
          "GetOnDataReceived",
          "SendData",
          "Rpc_DoSendData"
        ]
      },
      {
        "class_name": "SCR_DataCollectorComponent",
        "methods": [
          "OnGameModeEnd",
          "AddStatsToFaction",
          "OnGameEnd",
          "FindModule",
          "IsMaster",
          "GetPlayerDataStats",
          "RemovePlayer",
          "GetPlayerData",
          "GetPlayers",
          "OnPlayerAuditSuccess",
          "GetPlayerData",
          "OnPlayerConnected",
          "OnPlayerDisconnected",
          "OnPlayerSpawned",
          "OnPlayerKilled",
          "OnAIKilled",
          "OnControllableDestroyed",
          "OnAIKilled",
          "OnPlayerEntityChanged",
          "ListenToLocalControllerEntityChanged",
          "CreateStatVisualizations",
          "GetUIHandler",
          "OnGameModeStart",
          "StartDataCollectorSession",
          "DisableModules",
          "StartDataCollectorSession",
          "DisableModules",
          "SetEventMask",
          "EOnFrame",
          "ListenToLocalControllerEntityChanged",
          "CreateStatVisualizations",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_DataCollectorDiagComponent",
        "methods": [
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_DataCollectorModule",
        "methods": [
          "Update",
          "OnPlayerDisconnected",
          "RemoveInvokers",
          "AddInvokers",
          "RemoveInvokers",
          "OnPlayerSpawned",
          "AddInvokers",
          "OnPlayerAuditSuccess",
          "OnPlayerKilled",
          "OnAIKilled",
          "OnGameModeEnd",
          "InitModule",
          "OnControlledEntityChanged",
          "RemoveInvokers",
          "AddInvokers",
          "CreateVisualization",
          "CreateEntry"
        ]
      },
      {
        "class_name": "SCR_DataCollectorUI",
        "methods": [
          "CreateEntry",
          "SetVisible",
          "GetParentWidget",
          "SCR_DataCollectorUI"
        ]
      },
      {
        "class_name": "SCR_BaseDeployableInventoryItemComponentClass",
        "methods": [
          "GetReplacementPrefab"
        ]
      },
      {
        "class_name": "SCR_BaseDeployableInventoryItemComponent",
        "methods": [
          "SetDeploying",
          "IsDeploying",
          "GetOnDeployedStateChanged",
          "OnCompositionDestroyed",
          "Dismantle",
          "RPC_SetTransformBroadcast",
          "RPC_PlaySoundOnDeployBroadcast",
          "Deploy",
          "RPC_SetTransformBroadcast",
          "Rpc",
          "RPC_PlaySoundOnDeployBroadcast",
          "Rpc",
          "Dismantle",
          "RPC_SetTransformBroadcast",
          "Rpc",
          "RPC_PlaySoundOnDeployBroadcast",
          "Rpc",
          "Reload",
          "Dismantle",
          "Deploy",
          "OnRplDeployed",
          "CanDeployBeShown",
          "CanDismantleBeShown",
          "IsDeployed",
          "GetItemOwnerID",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_BaseDeployableSpawnPointComponent",
        "methods": [
          "GetOnSpawnPointDismantled",
          "OnRplDeployed",
          "ToggleRadioChatter",
          "ToggleRadioChatter",
          "CreateSpawnPoint",
          "Deploy",
          "ToggleRadioChatter",
          "Dismantle",
          "ToggleRadioChatter",
          "OnSpawnPointDeployingEnabledChanged",
          "Deploy",
          "Dismantle",
          "GetSpawnPoint",
          "Update",
          "ConnectToDeployableSpawnPointSystem",
          "DisconnectFromDeployableSpawnPointSystem",
          "EOnInit",
          "OnSpawnPointDeployingEnabledChanged"
        ]
      },
      {
        "class_name": "SCR_DeployableInventoryItemReplacementComponentClass",
        "methods": [
          "OnCompositionDestroyedDelegate"
        ]
      },
      {
        "class_name": "SCR_DeployableInventoryItemReplacementComponent",
        "methods": [
          "GetItemTransform",
          "GetOnCompositionDestroyed",
          "OnDamageStateChanged",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_RestrictedDeployableSpawnPointComponent",
        "methods": [
          "RPC_AddSpawnPointGroupBroadcast",
          "RPC_RemoveSpawnPointGroupBroadcast",
          "RPC_PlaySoundOnZoneEnteredBroadcast",
          "EntityQuery",
          "CanActionBeShown",
          "CanBeDeployedAtPosition",
          "IsDeployLimitReachedLocal",
          "CreateSpawnPoint",
          "Deploy",
          "Dismantle",
          "ShowInfo",
          "ToggleSpawningWithLoadout",
          "CanDeployBePerformed",
          "CanDeployBeShown",
          "CanDismantleBeShown",
          "CanInfoBeShown",
          "CanOpenStorageBeShown",
          "CanToggleLoadoutSpawningBeShown",
          "GetAllowAllGroupsToSpawn",
          "GetIgnoreEnemyCharacters",
          "GetGroupID",
          "GetQueryRadiusCharacters",
          "SetRespawnCount",
          "SetMaxRespawns",
          "Reload",
          "SetBudgetType",
          "Reload",
          "OnGroupChanged",
          "OnGroupRemoved",
          "Dismantle",
          "OnSpawnPointBudgetTypeChanged",
          "SetBudgetType",
          "OnSpawnPointTicketAmountChanged",
          "SetMaxRespawns",
          "Update",
          "RPC_PlaySoundOnZoneEnteredBroadcast",
          "Rpc",
          "EOnInit",
          "ConnectToDeployableSpawnPointSystem",
          "OnDelete",
          "DisconnectFromDeployableSpawnPointSystem"
        ]
      },
      {
        "class_name": "SCR_DeployableInventoryItemEquipClothAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript"
        ]
      },
      {
        "class_name": "SCR_DeployableInventoryItemInventoryComponent",
        "methods": [
          "ShouldHideInVicinity"
        ]
      },
      {
        "class_name": "SCR_DeployableInventoryItemPickUpAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript"
        ]
      },
      {
        "class_name": "SCR_DeployableSpawnPointClass",
        "methods": [
          "SpawnPointInvokerDelegate"
        ]
      },
      {
        "class_name": "SCR_DeployableSpawnPoint",
        "methods": [
          "OnFinalizeSpawnDone_S",
          "SetDeployableSpawnPointComponent",
          "GetDeployableSpawnPointComponent",
          "GetOnPlayerSpawned"
        ]
      },
      {
        "class_name": "SCR_DeployInventoryItemAction",
        "methods": [
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_DeployInventoryItemBaseAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "PerformAction",
          "ResetDeployingDelayed",
          "OnActionStart",
          "OnActionCanceled",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DeployInventoryItemRestrictedAction",
        "methods": [
          "CanBePerformedScript",
          "SetCannotPerformReason"
        ]
      },
      {
        "class_name": "SCR_DismantleInventoryItemBaseAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "PerformAction",
          "Init"
        ]
      },
      {
        "class_name": "SCR_OpenDeployableSpawnPointStorageAction",
        "methods": [
          "CanBeShownScript",
          "Init"
        ]
      },
      {
        "class_name": "SCR_RestrictedDeployableSpawnPoint",
        "methods": [
          "CanSpawn",
          "IsSpawnPointVisibleForPlayer",
          "OnFinalizeSpawnDone_S",
          "CanReserveFor_S",
          "SetAllowAllGroupsToSpawn",
          "SetBudgetType",
          "SetGroupID",
          "GetMaxRespawns",
          "SetMaxRespawns",
          "GetRespawnCount",
          "SetRespawnCount",
          "IsLoadoutAllowed",
          "SetLoadoutAllowed"
        ]
      },
      {
        "class_name": "SCR_ShowDeployableSpawnPointInfo",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "PerformAction",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ToggleDeployableSpawnPointLoadoutAction",
        "methods": [
          "CanBeShownScript",
          "PerformAction",
          "Init"
        ]
      },
      {
        "class_name": "SCR_BuildingConfigManagerEntity",
        "methods": [
          "CreateInstance",
          "ReloadConfig",
          "GetBuildingSetupFromConfig",
          "GetBuildingSetupFromConfig",
          "CreateInstance",
          "SCR_BuildingConfigManagerEntity"
        ]
      },
      {
        "class_name": "SCR_BuildingDestructionStruct",
        "methods": [
          "Log",
          "Serialize",
          "Deserialize",
          "SCR_BuildingDestructionStruct"
        ]
      },
      {
        "class_name": "SCR_BuildingRegion",
        "methods": [
          "SetRegionIndex",
          "GetRegionIndex",
          "SetRegionSize",
          "GetRegionSize",
          "SetRegionPos",
          "GetRegionPos",
          "SetMaxHealth",
          "GetMaxHealth",
          "SetDestructFX",
          "GetDestructFX",
          "SetStructuralSupportPercentage",
          "GetStructuralSupportPercentage",
          "AddConnectionIn",
          "AddConnectionOut",
          "GetConnectionNumIn",
          "GetConnectionNumOut",
          "GetConnectedRegionIn",
          "GetConnectedRegionOut"
        ]
      },
      {
        "class_name": "SCR_BuildingRegionEntity",
        "methods": [
          "Cleanup",
          "LoadIntersectDebrisModel",
          "DeleteIntersectDebris",
          "CreateIntersectDebris",
          "AddChild",
          "LoadRegionModel",
          "SetObject",
          "SetFlags",
          "GetBuildingOwner",
          "GetRegionNumber",
          "SetBuildingAndIndex",
          "OnDamage",
          "Cleanup"
        ]
      },
      {
        "class_name": "SCR_BuildingSetup",
        "methods": [
          "SetConfigPath",
          "GetRegionNum",
          "GetRegionStruct",
          "FillDamagedModels",
          "GetDamagedRegionModel",
          "FillDamagedModels",
          "GetRegionIntersectDebrisModel",
          "FillDamagedModels",
          "ConnectStructuralRegions",
          "Cleanup",
          "GetBoundingRegionNumber",
          "CalculateRegionCentersAndSize",
          "SetNoDebrisFX",
          "GetDebrisRegionMatrix",
          "SpawnDebrisForRegion",
          "GetDebrisRegionMatrix",
          "spawnParams",
          "Init",
          "CalculateRegionCentersAndSize",
          "Cleanup"
        ]
      },
      {
        "class_name": "SCR_BuildingDestructionCameraShakeProgress",
        "methods": [
          "Update",
          "SetStartOrigin",
          "SetCurve",
          "SetSizeMultiplier"
        ]
      },
      {
        "class_name": "SCR_TimedDebris",
        "methods": [
          "GetSpawnTransform",
          "ExecuteEffect",
          "GetSpawnTransform"
        ]
      },
      {
        "class_name": "SCR_TimedEffect",
        "methods": [
          "SnapToTerrain",
          "ExecuteEffect"
        ]
      },
      {
        "class_name": "SCR_TimedSound",
        "methods": [
          "ExecuteEffect"
        ]
      },
      {
        "class_name": "SCR_TimedPrefab",
        "methods": [
          "ExecuteEffect",
          "SnapToTerrain"
        ]
      },
      {
        "class_name": "SCR_TimedParticle",
        "methods": [
          "ExecuteEffect",
          "SetParticleParams",
          "SetParticleParams"
        ]
      },
      {
        "class_name": "SCR_DestructibleBuildingComponent",
        "methods": [
          "GetData",
          "FreeData",
          "GetSpeedGradualMultiplier",
          "GetRotationTimeRandomizer",
          "GetRotationSpeed",
          "GetRotationTime",
          "GetMaxRotations",
          "GetSpeed",
          "GetSinkVector",
          "GetDelay",
          "GetAllowRotationX",
          "GetAllowRotationY",
          "GetAllowRotationZ",
          "GetCameraShakeCurve",
          "GetSlowDownAudioSourceConfiguration",
          "SetAudioSource",
          "GetAudioSource",
          "SetSeed",
          "OnDamageStateChanged",
          "StoreNavmeshData",
          "RPC_GoToDestroyedState",
          "Rpc",
          "RPC_GoToDestroyedState",
          "SetSeed",
          "DestroyInteriorInit",
          "CalculateAndStoreVolume",
          "DestroyInteriorInit",
          "DestroyInterior",
          "FinishDestruction",
          "FinishDestruction",
          "FreeData",
          "PerformTrace",
          "IsInside",
          "TraceFilter",
          "AddEntityCallback",
          "GoToDestroyedStateLoad",
          "StoreNavmeshData",
          "GoToDestroyedState",
          "CalculateAndStoreVolume",
          "GoToDestroyedState",
          "DestroyInteriorInit",
          "FinishLerp",
          "SetEventMask",
          "SpawnEffects",
          "FinishLerp",
          "ClearEventMask",
          "SpawnEffects",
          "RegenerateNavmesh",
          "DestroyInterior",
          "RegenerateNavmesh",
          "StoreNavmeshData",
          "ClampVector",
          "LerpRotation",
          "OnSlowDown",
          "PlaySlowDownSound",
          "SetAudioSource",
          "OnSlowDown",
          "PlaySlowDownSound",
          "LerpAngles",
          "ClampVector",
          "LerpPosition",
          "ClampVector",
          "SpawnEffects",
          "FinishLerp",
          "OnRplSave",
          "OnRplLoad",
          "GoToDestroyedState",
          "OnFilteredContact",
          "HandleDamage",
          "OnFrame",
          "LerpPosition",
          "LerpRotation",
          "OnPostInit",
          "SetEventMask",
          "_WB_OnDelete",
          "_WB_OnInit",
          "GetBuildingId",
          "SCR_DestructibleBuildingComponent",
          "IsProxy"
        ]
      },
      {
        "class_name": "SCR_DestructibleBuildingEntityClass",
        "methods": [
          "UpdateConfigData",
          "GetMinUndamagedThreshold"
        ]
      },
      {
        "class_name": "SCR_DestructibleBuildingEntity",
        "methods": [
          "GetBuildingId",
          "SetBuildingId",
          "_WB_OnKeyChanged",
          "RPC_OnRegionDestroyed",
          "SetRegionDamage01",
          "SetRegionDamage01",
          "RplLoad",
          "SetDestroyedState",
          "SetDestroyedState",
          "SetDestroyedState",
          "SetRegionDamage01",
          "RplSave",
          "OnDamage",
          "UpdateBuildingModel",
          "AddRegionDamage",
          "GetCameraViewIntersect",
          "_WB_AfterWorldUpdate",
          "UpdateDebug",
          "UpdateDebug",
          "UpdateDebug",
          "DisplayRegions",
          "DisplayRegions",
          "CreateCircle",
          "CreateCircle",
          "CreateArrowLinkLines",
          "OnRegionDestroyed",
          "DestroyPropsForRegion",
          "OnRegionRepaired",
          "GetRegionPosition",
          "SpawnFallingRegionDebris",
          "GetTransform",
          "CheckStructuralIntegrity",
          "SetRegionDamage01",
          "IsProxy",
          "GetUndamaged",
          "GetDestroyed",
          "GetDamaged",
          "GetRegionDestroyed",
          "GetRegionsCount",
          "GetRegionMaxDamage",
          "GetRegionDamage",
          "GetRegionMaxDamage",
          "GetRegionMaxDamage",
          "GetRegionDamage01",
          "SetRegionDamage",
          "Rpc",
          "Rpc",
          "SetDestroyedState",
          "SetAllZonesDestroyed",
          "OnRegionRepaired",
          "OnRegionDestroyed",
          "SetDestroyedState",
          "UpdateBuildingModel",
          "UpdateBuildingRegions",
          "CheckStructuralIntegrity",
          "SetRegionDamage01",
          "AddRegionDamage",
          "SetDestroyedState",
          "UpdateBuildingModel",
          "GetRegionEntity",
          "SpawnRegionEntity",
          "GetTransform",
          "AddChild",
          "GetPropDestructible",
          "QueryRegionProp",
          "QueryRegionPropCallback",
          "QueryRegionProp",
          "GetPropsForRegion",
          "QueryRegionProp",
          "CopyPropToBuildingDebris",
          "CopyPropToBuildingDebris",
          "DestroyPropsForRegion",
          "GetPropsForRegion",
          "CopyPropToBuildingDebris",
          "DeleteRegionEntity",
          "DeleteAllRegionEntities",
          "SpawnAllRegionEntities",
          "DeleteAllRegionEntities",
          "UpdateBuildingModel",
          "SetObject",
          "ClearFlags",
          "SetObject",
          "SetFlags",
          "ClearFlags",
          "SpawnAllRegionEntities",
          "DeleteAllRegionEntities",
          "UpdateBuildingRegions",
          "DeleteRegionEntity",
          "SetAllZonesDestroyed",
          "GetAllZonesAtMaxDamage",
          "EOnInit",
          "SCR_DestructibleBuildingEntity",
          "SetEventMask",
          "SetEventMask",
          "DeleteAllRegionEntities"
        ]
      },
      {
        "class_name": "SCR_RegionIntersectDebrisEntity",
        "methods": [
          "GetOtherRegionNumber",
          "SetOtherIndex"
        ]
      },
      {
        "class_name": "SCR_BuildingDestructionData",
        "methods": [
          "Reset"
        ]
      },
      {
        "class_name": "SCR_BuildingDestructionManagerComponent",
        "methods": [
          "GetData",
          "AllocateData",
          "FreeData",
          "IsIdTaken",
          "GetNewId",
          "GetDestructibleBuilding",
          "UnregisterBuildingId",
          "RegisterBuildingId",
          "GetDestroyedBuildings",
          "RegisterDestroyedBuilding",
          "SCR_BuildingDestructionManagerComponent"
        ]
      },
      {
        "class_name": "SCR_DestructionData",
        "methods": [
          "SaveNormalizedVector",
          "LoadNormalizedVector",
          "Save",
          "SaveNormalizedVector",
          "SaveNormalizedVector",
          "Load",
          "LoadNormalizedVector",
          "LoadNormalizedVector"
        ]
      },
      {
        "class_name": "SCR_DestructibleEntity",
        "methods": [
          "GetDamageMultiplier",
          "GetDamageReduction",
          "GetDamageThreshold",
          "GetMaxHealth",
          "RegenerateNavmeshDelayed",
          "OnDamage",
          "UpdateResponseIndex",
          "SetModel",
          "SetObject",
          "Update",
          "SpawnPhaseObjects",
          "GoToDamagePhase",
          "RegenerateNavmeshDelayed",
          "SetModel",
          "SetDamagePhaseSignal",
          "PlaySound",
          "SetDamagePhaseSignal",
          "SetModel",
          "SetModel",
          "SpawnPhaseObjects",
          "SpawnPhaseObjects",
          "GetDestructibleSize",
          "GetBounds",
          "PlaySound",
          "GetTransform",
          "GetWorldBounds",
          "SetDamagePhaseSignal",
          "OnStateChanged",
          "GoToDamagePhase",
          "OnBeforeDestroyed",
          "RegenerateNavmeshDelayed",
          "CalculateMomentum",
          "UpdateResponseIndex",
          "IsProxy",
          "EOnContact",
          "HandleDamage",
          "SCR_DestructibleEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_DestructionBaseData",
        "methods": [
          "Reset",
          "SetDestructionQueued",
          "GetDestructionQueued",
          "GetPreviousHealth",
          "SetPreviousHealth",
          "DeleteHitInfo",
          "GetHitInfo",
          "GetOnDamage"
        ]
      },
      {
        "class_name": "SCR_DestructionBaseHandler",
        "methods": [
          "StartDestruction",
          "OnRepair",
          "SetModel",
          "HandleDestruction",
          "DeleteSelf",
          "SetModel",
          "DetachFromParent",
          "DetachFromParent",
          "DeleteSelf",
          "DetachFromParent",
          "SetModel",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DestructionCommon",
        "methods": [
          "GetPTCImpulseScale",
          "PlayParticleEffect_FractionDestruction",
          "spawnParams",
          "PlayParticleEffect_CompleteDestruction",
          "spawnParams",
          "PlayParticleEffect_Child",
          "spawnParams",
          "PlayParticleEffect_Transform",
          "spawnParams"
        ]
      },
      {
        "class_name": "SCR_DestructionDamageManagerComponent",
        "methods": [
          "GetOnDestructibleDestroyedInvoker",
          "GetReadingInit",
          "SetReadingInit",
          "GetDestructionBaseData",
          "AllocateDestructionBaseData",
          "FreeDestructionBaseData",
          "GetOnDamageInvoker",
          "GetDestructionHitInfo",
          "ShouldDestroyParent",
          "GetDisablePhysicsOnDestroy",
          "GetUndamaged",
          "GetDestroyed",
          "RPC_DoSpawnAllDestroyEffects",
          "DeleteParentWithEffects",
          "RPC_DoSpawnAllDestroyEffects",
          "Rpc",
          "DeleteDestructible",
          "DeleteDestructible",
          "RegenerateNavmeshDelayed",
          "SetHitZoneHealth",
          "SetHitZoneDamage",
          "CreateDestructionHitInfo",
          "GetCanBeDamaged",
          "QueueDestroy",
          "SpawnDestroyObjects",
          "RegenerateNavmeshDelayed",
          "HandleDestruction",
          "SpawnDestroyObjects",
          "PlaySound",
          "DeleteDestructible",
          "InitDestruction",
          "NetReceiveHitData",
          "NetReadInit",
          "NetWriteInit",
          "PlaySound",
          "SetModel",
          "ReplicateDestructibleState",
          "RPC_QueueDestroy",
          "CreateDestructionHitInfo",
          "QueueDestroy",
          "HandleDestruction",
          "FindParentRplComponent",
          "PassDamageToChildren",
          "IsProxy",
          "UpdateResponseIndex",
          "FilterContact",
          "OnFilteredContact",
          "HandleDamage",
          "HandleDamage",
          "OnDamage",
          "PassDamageToChildren",
          "UpdateResponseIndex",
          "CreateDestructionHitInfo",
          "QueueDestroy",
          "Rpc",
          "IsDestructionQueued",
          "GetTotalDestructionThreshold",
          "OnPostInit",
          "SetEventMask",
          "SetHitZoneHealth",
          "InitDestruction",
          "FreeDestructionBaseData"
        ]
      },
      {
        "class_name": "SCR_DestructionHitInfo",
        "methods": [
          "FromHitInfo",
          "FromDestructionData"
        ]
      },
      {
        "class_name": "SCR_Spawnable_SmallDebrisTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_Spawnable_PrefabTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_Spawnable_ParticleTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseSpawnable",
        "methods": [
          "SetVariables",
          "CompareAttributes",
          "AlreadyExists",
          "CreateObject",
          "CopyToSource",
          "SetVariables",
          "GetSpawnTransform",
          "Spawn"
        ]
      },
      {
        "class_name": "SCR_DebrisSpawnable",
        "methods": [
          "CompareAttributes",
          "SetVariables",
          "CreateObject",
          "Spawn",
          "GetSpawnTransform"
        ]
      },
      {
        "class_name": "SCR_PrefabSpawnable",
        "methods": [
          "CompareAttributes",
          "SetVariables",
          "CreateObject",
          "Spawn",
          "GetSpawnTransform"
        ]
      },
      {
        "class_name": "SCR_ParticleSpawnable",
        "methods": [
          "CompareAttributes",
          "SetVariables",
          "CreateObject",
          "SpawnAsChild",
          "GetSpawnTransform",
          "Spawn",
          "GetSpawnTransform"
        ]
      },
      {
        "class_name": "SCR_DestructionDiagComponent",
        "methods": [
          "EOnDiag",
          "TraceEntity",
          "ShowDamageTypeMultipliers",
          "DealDamageRange",
          "DealDamageUnderCursor",
          "SetOneHitPoint",
          "ShowDamageTypeMultipliers",
          "GetDamageReduction",
          "GetDamageThreshold",
          "GetCameraMat",
          "TraceEntity",
          "GetCameraMat",
          "DealDamageUnderCursor",
          "DealDamage",
          "GetHealth",
          "SetOneHitPoint",
          "GetCameraMat",
          "DealDamage",
          "DealDamageRange",
          "GetCameraMat",
          "DealDamage",
          "AddEntity",
          "FilterEntity",
          "OnPostInit",
          "ConnectToDiagSystem",
          "OnDelete",
          "DisconnectFromDiagSystem"
        ]
      },
      {
        "class_name": "SCR_DestructionFractalComponent",
        "methods": [
          "ClearVisualizers",
          "_WB_OnKeyChanged",
          "ClearVisualizers",
          "ClearVisualizers",
          "CreateFragmentVisualizer",
          "_WB_AfterWorldUpdate",
          "ClearVisualizers",
          "ClearVisualizers",
          "ClearVisualizers",
          "InitDestruction",
          "GetFractured",
          "GetDestroyed",
          "CountFragments",
          "FillCompleteOrderedFragmentList",
          "FillFragmentList",
          "FillFragmentIndexList",
          "GetCurrentFractalVariant",
          "GetRandomFractalVariant",
          "DeleteFragments",
          "FindFragment",
          "CreateFragment",
          "CreateFragments",
          "UpdateStructuralIntegrity",
          "CheckFragmentAnchored",
          "OnFragmentDestroyed",
          "EnableOnFrame",
          "UpdateStructuralIntegrity",
          "NetReceiveHitData",
          "UpdateStructuralIntegrity",
          "OnFrame",
          "DeleteSelf",
          "EnableOnFrame",
          "UpdateModel",
          "HandleDestruction",
          "UpdateModel",
          "CreateFragments",
          "UpdateStructuralIntegrity",
          "NetReadInit",
          "DeleteFragments",
          "UpdateModel",
          "CreateFragment",
          "NetWriteInit",
          "InitDestruction",
          "UpdateModel",
          "ClearVisualizers",
          "DeleteFragments"
        ]
      },
      {
        "class_name": "SCR_FractalVariationTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_FractalVariation",
        "methods": [
          "CountFragments",
          "GetFragmentIndexIsAnchor",
          "GetFragmentModel",
          "GetFragmentDebrisModel"
        ]
      },
      {
        "class_name": "SCR_Spawnable_FragmentDebrisTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_FragmentHierarchyTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_FragmentLinkageTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_FragmentDebris",
        "methods": [
          "Spawn"
        ]
      },
      {
        "class_name": "SCR_FragmentHierarchy",
        "methods": [
          "GetFragmentLinkage",
          "ValidateHierarchy",
          "GenerateHierarchy",
          "IntersectionBoxBox"
        ]
      },
      {
        "class_name": "SCR_DestructionManagerComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_DestructionMultiPhaseComponent",
        "methods": [
          "GetDestructionMultiPhaseData",
          "AllocateDestructionMultiPhaseData",
          "FreeDestructionMultiPhaseData",
          "GetDamagePhaseData",
          "GetDisablePhysicsOnDestroy",
          "GetIsInInitialDamagePhase",
          "GetDamagePhase",
          "GetNumDamagePhases",
          "CalculateDamagePhase",
          "GetDestructibleSize",
          "SetDamagePhaseSignal",
          "SetOriginalResourceName",
          "GetOriginalResourceName",
          "GetTargetDamagePhase",
          "SetTargetDamagePhase",
          "SetDamagePhase",
          "SetDamagePhaseSignal",
          "GoToDamagePhase",
          "DeleteDestructible",
          "SetHitZoneDamage",
          "RegenerateNavmeshDelayed",
          "SetDamagePhase",
          "SetTargetDamagePhase",
          "ApplyDamagePhaseData",
          "SetModel",
          "SetModel",
          "SetHitZoneHealth",
          "SetHitZoneHealth",
          "PlaySound",
          "GetCanBeDamaged",
          "SpawnDestroyObjects",
          "QueueDestroy",
          "HandleDestruction",
          "SpawnDestroyObjects",
          "PlaySound",
          "DeleteDestructible",
          "UpdateResponseIndex",
          "RPC_ReplicateMultiPhaseDestructionState",
          "GoToDamagePhase",
          "ReplicateDestructibleState",
          "Rpc",
          "OnRplSave",
          "OnRplLoad",
          "GoToDamagePhase",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_DamagePhaseTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_DestructionMultiPhaseData",
        "methods": [
          "GetTargetDamagePhase",
          "SetTargetDamagePhase",
          "GetOriginalResourceName",
          "SetOriginalResourceName",
          "GetDamagePhase",
          "SetDamagePhase",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_DestructionSynchronizationComponent",
        "methods": [
          "RPC_RequestDestructibleState",
          "RequestDestructibleState",
          "Rpc",
          "OnPostInit",
          "SCR_DestructionSynchronizationComponent"
        ]
      },
      {
        "class_name": "SCR_DestructionTireComponent",
        "methods": [
          "SetWheelIndex",
          "GetShouldHandleDeformation",
          "EnableTireDeformation",
          "OnFrame",
          "ReturnToInitialDamagePhase",
          "SetDamagePhase",
          "SetTargetDamagePhase",
          "ApplyDamagePhaseData",
          "GoToDamagePhase",
          "ReturnToInitialDamagePhase",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_FragmentEntity",
        "methods": [
          "GetIsAnchor",
          "GetIndex",
          "GetHealth",
          "GetDestroyed",
          "GetDestructibleParent",
          "Initialize",
          "SetObject",
          "Update",
          "EOnContact",
          "EOnFrame",
          "OnDamage",
          "QueueDestroy",
          "QueueDestroy",
          "SetEventMask",
          "SCR_FragmentEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_DestructibleIdentificator",
        "methods": [
          "SetIndex",
          "SetRplId",
          "SetEntityID",
          "GetRplId",
          "GetEntity",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject"
        ]
      },
      {
        "class_name": "SCR_MPDestructionManager",
        "methods": [
          "IsInitialized",
          "InitializeDestructionManager",
          "GetInstance",
          "IsProxy",
          "DestroyDelayed",
          "DestroyInFrame",
          "SetEventMask",
          "RplLoad",
          "RplSave",
          "GetAudioSourceConfiguration",
          "EOnFrame",
          "ClearEventMask",
          "DestroyDelayed",
          "EOnInit",
          "RegisterDynamicallySpawnedDestructible",
          "FindDynamicallySpawnedDestructibleByIndex",
          "FindDynamicallySpawnedDestructibleIndex",
          "RegisterDeletedDynamicallySpawnedDestructible",
          "RegisterChangedDynamicallySpawnedDestructible",
          "SCR_MPDestructionManager",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_TireReplacementManagerComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "CanTireBeReplaced",
          "IsWheelAreaClear",
          "InitReplace"
        ]
      },
      {
        "class_name": "SCR_DestructibleTreesSynchManager",
        "methods": [
          "GetActiveTreeData",
          "AddActiveTree",
          "SynchronizeTreePartTransform",
          "Rpc",
          "SynchronizeSetToBreak",
          "Rpc",
          "SynchronizeRemoveFromParent",
          "Rpc",
          "SynchronizeSetToDestroy",
          "Rpc",
          "SynchronizeSwitchTreePartToStatic",
          "Rpc",
          "SynchronizeStaticPosition",
          "Rpc",
          "SynchronizeStaticRotation",
          "Rpc",
          "FindTree",
          "FindTreeIndex",
          "FindTreePartIndex",
          "GetSoundComponent",
          "IsProxy",
          "RPC_RemoveFromParent",
          "RPC_SynchronizeTreePart",
          "RPC_SetToBreak",
          "RPC_SendSetToDestroy",
          "RPC_SendSwitchTreePartToStatic",
          "RPC_SendStaticPosition",
          "RPC_SendStaticRotation",
          "RplLoad",
          "RplSave",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "SCR_DestructibleTreesSynchManager"
        ]
      },
      {
        "class_name": "SCR_DestructibleTreeV2Class",
        "methods": [
          "SCR_DestructibleTreeV2Class"
        ]
      },
      {
        "class_name": "SCR_DestructibleTreeV2",
        "methods": [
          "GetIsDestroyed",
          "SetToDestroy",
          "SetEventMask",
          "SetFlags",
          "Destroy",
          "SetObject",
          "SetToBreak",
          "Trace",
          "BuildHierarchy",
          "GetTransform",
          "AddChild",
          "AddChild",
          "SetRotationOfTreePart",
          "CacheRotationOfTreePart",
          "CacheSwitchTreePartPhysics",
          "ServerSetToBreak",
          "SetToBreak",
          "RemoveTreePartFromParent",
          "CacheDestroyedTreePart",
          "UpdateTransformOfTreePart",
          "SetPositionOfTreePart",
          "CachePositionOfTreePart",
          "UpdateVelocityOfTreePart",
          "UpdateAngularVelocityOfTreePart",
          "ClientSwitchTreePartToStatic",
          "SetToTrace",
          "Trace",
          "OnTreePartHitGround",
          "OnDamage",
          "SetToTrace",
          "SetToTrace",
          "SetToDestroy",
          "FindTreePart",
          "EOnFrame",
          "Destroy",
          "ClearEventMask",
          "ClearFlags"
        ]
      },
      {
        "class_name": "SCR_TreeHitZoneV2",
        "methods": [
          "OnInit",
          "OnDamage",
          "AddDamage"
        ]
      },
      {
        "class_name": "SCR_TreePartHierarchyV2",
        "methods": [
          "SpawnAllChildren"
        ]
      },
      {
        "class_name": "SCR_TreePartV2",
        "methods": [
          "ClearPhysicsInfo",
          "StorePhysicsInfo",
          "ClearPhysicsInfo",
          "ApplyPhysicsInfo",
          "ClearPhysicsInfo",
          "ClearPhysicsInfo",
          "SetToBreak",
          "SetEventMask",
          "ResetThresholdTime",
          "Break",
          "WakeUpHierarchy",
          "SpawnRootDirt",
          "RemoveFromParent",
          "LimitAcceleration",
          "SetOrigin",
          "WakeUp",
          "WakeUpOthers",
          "SpawnRootDirt",
          "GetTransform",
          "RemoveFromParent",
          "SetTransform",
          "BreakJoint",
          "GetParentJoint",
          "RemoveJoint",
          "DestroyAllJoints",
          "GetAllChildren",
          "BreakJoint",
          "SwitchPhysicsToStatic",
          "StorePhysicsInfo",
          "DestroyPhysics",
          "SetTransform",
          "ResetThresholdTime",
          "DestroyAllJoints",
          "ClearEventMask",
          "GetTransform",
          "SwitchPhysicsToDynamic",
          "GetTransform",
          "ResetThresholdTime",
          "DestroyPhysics",
          "ApplyPhysicsInfo",
          "CreateJoints",
          "CreateJoints",
          "SetEventMask",
          "DestroyPhysics",
          "LimitAcceleration",
          "GetTransform",
          "LimitYRotation",
          "GetTransform",
          "BreakJoint",
          "CreateJoints",
          "GetAllChildren",
          "GetAllChildren",
          "StopSelf",
          "SetOrigin",
          "CheckThreshold",
          "CreateLowerJoint",
          "WakeUpParent",
          "WakeUp",
          "AddEnt",
          "FilterEnt",
          "IsInHierarchy",
          "WakeUpOthers",
          "GetTransform",
          "WakeUp",
          "WakeUpParent",
          "WakeUpHierarchy",
          "SwitchPhysicsToDynamic",
          "CreateJoints",
          "GetTreePartIndex",
          "UpdateTransform",
          "SetTransform",
          "CacheRotation",
          "CachePosition",
          "SetRotation",
          "SetTransform",
          "SetPosition",
          "SetOrigin",
          "SetVelocity",
          "SetAngularVelocity",
          "SetPhysics",
          "ClientSetToBreakFromParent",
          "SetPosition",
          "SetRotation",
          "GetQuatDiff",
          "PrintDamageDebug",
          "ResetThresholdTime",
          "FindSuperParent",
          "WouldBreak",
          "WouldBreak",
          "OnDamage",
          "PrintDamageDebug",
          "SetToBreak",
          "EOnFrame",
          "Break",
          "WakeUpHierarchy",
          "SwitchPhysicsToDynamic",
          "SwitchPhysicsToStatic",
          "Extrapolate",
          "GetFixedAxisVector",
          "RotateTowards",
          "MoveTowards",
          "FixEulerVector180",
          "EOnPhysicsActive",
          "SetEventMask",
          "EOnInit",
          "GetBounds",
          "SwitchPhysicsToStatic",
          "SetEventMask",
          "EOnSimulate",
          "BreakJoint",
          "SetPosition",
          "SetRotation",
          "StopSelf",
          "LimitYRotation",
          "CheckThreshold",
          "EOnPostSimulate",
          "Extrapolate",
          "GetWorldTransform",
          "GetWorldTransform",
          "EOnContact",
          "SCR_TreePartV2",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_TreePartSynchronizationData",
        "methods": [
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject",
          "SCR_TreePartSynchronizationData"
        ]
      },
      {
        "class_name": "SCR_EditableCharacterComponentClass",
        "methods": [
          "GetPrefabGroup"
        ]
      },
      {
        "class_name": "SCR_EditableCharacterComponent",
        "methods": [
          "SetIsPlayerPending",
          "GetIsPlayerPending",
          "GetAgent",
          "GetOnCharacterMovedInVehicle",
          "GetOnDestroyed",
          "CreateGroupForCharacter",
          "IsPlayer",
          "IsLocalPlayerOwner",
          "IsPlayerOrPossessed",
          "OnLifeStateChanged",
          "Delete",
          "OnFactionChanged",
          "SetTransformOwner",
          "PlayerTeleportedFeedback",
          "PlayerTeleportedFeedback",
          "PlayerTeleportedByParentFeedback",
          "Rpc",
          "UpdateCompartment",
          "WaitForCompartmentUpdate",
          "SetParentEntity",
          "ForceVehicleCompartments",
          "OnParentEntityChanged",
          "PlayerTeleportedFeedback",
          "AddUsableVehicle",
          "UpdateCompartment",
          "UpdateCompartment",
          "UpdateCompartment",
          "UpdateCompartment",
          "UpdateCompartment",
          "UpdateCompartment",
          "SetTransform",
          "Rpc",
          "Rpc",
          "GetOutVehicleOwner",
          "UpdateCompartment",
          "GetPlayerID",
          "GetFaction",
          "GetOnUIRefresh",
          "GetAIGroup",
          "GetParentEntity",
          "GetAIEntity",
          "GetVehicle",
          "GetCrew",
          "AddUsableVehicle",
          "RemoveUsableVehicle",
          "GetMaxDrawDistanceSq",
          "OnPlayerCharacterEnterCompartment",
          "OnPlayerCharacterExitCompartment",
          "EOnEditorPlace",
          "EOnEditorSessionLoad",
          "Serialize",
          "Deserialize",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_EditableCommentComponent",
        "methods": [
          "ApplyTo",
          "ApplyTo",
          "GetColor",
          "GetSizeCoef",
          "IsBold",
          "IsItalic",
          "_WB_AfterWorldUpdate"
        ]
      },
      {
        "class_name": "SCR_EditableDecalComponent",
        "methods": [
          "SetTransformBroadcast",
          "EOnInit",
          "Log",
          "OnPostInit",
          "SetEventMask",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_EditableDescriptorComponentClass",
        "methods": [
          "ScriptInvoker_EditableDescriptorLocationChangeMethod"
        ]
      },
      {
        "class_name": "SCR_EditableDescriptorComponent",
        "methods": [
          "GetOnChange",
          "UpdateNearestLocation",
          "UpdateNearestLocationBroadcast",
          "Rpc",
          "UpdateNearestLocationBroadcast",
          "GetOnLocationChange",
          "GetOnLocationChange",
          "UpdateInfo",
          "SetInfoInstance",
          "RplSave",
          "RplLoad",
          "UpdateNearestLocationBroadcast",
          "SCR_EditableDescriptorComponent"
        ]
      },
      {
        "class_name": "SCR_EditableEntityComponent",
        "methods": [
          "GetDisplayName",
          "GetPrefab",
          "GetEditableEntityData",
          "GetEntityType",
          "GetEntityInteraction",
          "GetInfo",
          "GetOnDeleted",
          "SetInfoInstance",
          "IsReplicated",
          "Serialize",
          "Deserialize",
          "SetParentEntity",
          "IsServer",
          "CanRpc",
          "GetOwnerScripted",
          "GetPos",
          "GetIconPos",
          "GetTransform",
          "GetLocalTransform",
          "GetPlayerID",
          "GetFaction",
          "GetOnUIRefresh",
          "GetOnUIReset",
          "GetAIGroup",
          "GetAIEntity",
          "GetVehicle",
          "GetCrew",
          "GetHealth",
          "CanDestroy",
          "IsDestroyed",
          "SetStatic",
          "UpdateStaticPos",
          "GetStatic",
          "UpdateStaticPos",
          "GetPos",
          "SetHierarchyAsDirtyInParents",
          "SetHierarchyAsDirty",
          "SetTransformWithChildren",
          "SetTransform",
          "SetHierarchyAsDirtyInParents",
          "Rpc",
          "SetTransformOwner",
          "SetTransformBroadcast",
          "Rpc",
          "SetTransformBroadcast",
          "SetTransformOwner",
          "SetTransformBroadcast",
          "UpdateStaticPos",
          "Destroy",
          "IsDestroyed",
          "Delete",
          "SetHierarchyAsDirtyInParents",
          "GetOwnerRplId",
          "GetMaxDrawDistanceSq",
          "SetMaxDrawDistance",
          "GetEditableEntity",
          "GetEntityBudgetCost",
          "GetEntityChildrenBudgetCost",
          "GetEntityAndChildrenBudgetCost",
          "CanDuplicate",
          "CanSetParent",
          "SetParentEntity",
          "Log",
          "SetParentEntityBroadcast",
          "RestoreParentEntity",
          "SetParentEntityBroadcast",
          "Rpc",
          "RemoveParentEntity",
          "OnRegistrationChanged",
          "Rpc",
          "GetParentEntity",
          "GetParentEntities",
          "IsChildOf",
          "GetChildren",
          "GetChildren",
          "GetChildrenCount",
          "GetChild",
          "IsLayer",
          "CanEnterLayer",
          "IsRegistered",
          "ForceVehicleCompartments",
          "OnParentEntityChanged",
          "RemoveFromParent",
          "AddToParent",
          "SetParentEntityBroadcast",
          "OnRegistrationChanged",
          "OnParentEntityChanged",
          "SetParentEntityBroadcastReceive",
          "SetParentEntityBroadcast",
          "OnRegistrationChanged",
          "GetChildren",
          "Register",
          "Unregister",
          "GetAutoRegister",
          "Register",
          "SetParentEntityBroadcast",
          "Unregister",
          "OnCreatedServer",
          "AddToParent",
          "SetHierarchyAsDirtyInParents",
          "RemoveFromParent",
          "SetHierarchyAsDirtyInParents",
          "AddChild",
          "OnChildEntityChanged",
          "RemoveChild",
          "UpdateGameHierarchy",
          "OnChildEntityChanged",
          "UpdateGameHierarchy",
          "OnChildEntityChanged",
          "HasEntityState",
          "GetEntityStates",
          "SetEntityState",
          "SetEntityStateInChildren",
          "ResetEntityStates",
          "SetEntityStateInChildren",
          "HasEntityFlag",
          "GetEntityFlags",
          "SetEntityFlag",
          "CopyEntityFlags",
          "SetEntityStateInChildren",
          "SetEntityStateInChildren",
          "OnVisibilityChanged",
          "SetVisible",
          "OnVisibilityChanged",
          "EnableVisibilityReplication",
          "CanReplicateVisibility",
          "OnRplVisibilityChanged",
          "SetVisible",
          "GetVisibleSelf",
          "GetVisibleInHierarchy",
          "GetVisibleSelf",
          "OnAccessKeyChanged",
          "GetChildren",
          "AddAccessKey",
          "OnAccessKeyChanged",
          "Rpc",
          "RemoveAccessKey",
          "OnAccessKeyChanged",
          "Rpc",
          "ClearAccessKeys",
          "OnAccessKeyChanged",
          "Rpc",
          "GetAccessKey",
          "HasAccessSelf",
          "HasAccessInHierarchy",
          "HasAccessSelf",
          "HasAccessSelf",
          "HasAccessInHierarchy",
          "Refresh",
          "GetRplComponent",
          "ValidateType",
          "GetLogText",
          "Log",
          "Log",
          "LogAccessKey",
          "EOnEditorPlace",
          "EOnEditorSessionLoad",
          "RplSave",
          "RplLoad",
          "SetParentEntityBroadcastReceive",
          "OnDelete",
          "RemoveFromParent",
          "Unregister",
          "OnPostInit",
          "SetStatic",
          "SetParentEntityBroadcast",
          "SCR_EditableEntityComponent",
          "Attach",
          "Detach",
          "IsAttachable",
          "IsAttached",
          "GetAttachedTo"
        ]
      },
      {
        "class_name": "SCR_EditableEntityComponentClass",
        "methods": [
          "GetRandomVariant",
          "HasVariants",
          "GetEntityType",
          "GetInfo",
          "GetIconBoneName",
          "GetEntityInteraction",
          "GetEditableEntitySource",
          "GetEditableEntitySource",
          "GetEditableEntitySource",
          "GetInfo",
          "GetEntityType",
          "GetEntityInteraction",
          "GetSlotPrefab",
          "GetEntityFlags",
          "HasFlag",
          "GetEntitySourceBudgetCost",
          "GetEntitySourceChildrenBudgetCosts"
        ]
      },
      {
        "class_name": "SCR_EditableEntityVariantData",
        "methods": [
          "GetVariants"
        ]
      },
      {
        "class_name": "SCR_EditableExplosiveChargeComponent",
        "methods": [
          "OnPostInit",
          "ActivateCharge",
          "IsDestroyed",
          "CanDestroy",
          "Destroy"
        ]
      },
      {
        "class_name": "SCR_EditableFactionComponentClass",
        "methods": [
          "GetEntitySourceBudgetCost"
        ]
      },
      {
        "class_name": "SCR_EditableFactionComponent",
        "methods": [
          "SetFactionIndex",
          "SetFactionIndexBroadcast",
          "Rpc",
          "GetFactionIndex",
          "SetFactionIndexBroadcast",
          "SetInfoInstance",
          "InitSpawnPointCount",
          "InitSpawnPointCountBroadcast",
          "Rpc",
          "InitSpawnPointCountBroadcast",
          "OnSpawnpointFactionChanged",
          "OnSpawnPointsChanged",
          "OnSpawnPointCountChangedBroadcast",
          "Rpc",
          "OnSpawnPointCountChangedBroadcast",
          "InitTaskCount",
          "InitTaskCountBroadcast",
          "Rpc",
          "InitTaskCountBroadcast",
          "OnTasksChanged",
          "OnTaskCountChangedBroadcast",
          "Rpc",
          "OnTaskCountChangedBroadcast",
          "SetFactionPlayableServer",
          "OnFactionplayableChangedBroadcast",
          "Rpc",
          "OnFactionplayableChangedBroadcast",
          "SetVisible",
          "GetFactionSpawnPointCount",
          "GetFactionTasksCount",
          "GetOnSpawnPointCountChanged",
          "GetOnTaskCountChanged",
          "GetAllowedArsenalItemTypes",
          "SetAllowedArsenalItemTypes",
          "CanDuplicate",
          "GetFaction",
          "GetPos",
          "GetEntityBudgetCost",
          "OnPostInit",
          "RplSave",
          "RplLoad",
          "SetFactionIndexBroadcast",
          "InitSpawnPointCountBroadcast",
          "InitTaskCountBroadcast"
        ]
      },
      {
        "class_name": "SCR_EditableGroupComponentClass",
        "methods": [
          "GetEntitySourceBudgetCost",
          "GetGroupSourceBudgetCost"
        ]
      },
      {
        "class_name": "SCR_EditableGroupComponent",
        "methods": [
          "EnableCycledWaypoints",
          "RemoveAllWaypointsFromGroup",
          "AddWaypoints",
          "ReindexWaypoints",
          "AddWaypoints",
          "RemoveAllWaypointsFromGroup",
          "EnableCycledWaypointsBroadcast",
          "AreCycledWaypointsEnabled",
          "OnAgentAdded",
          "OnAgentRemoved",
          "OnLeaderChanged",
          "Refresh",
          "OnCurrentWaypointChanged",
          "ReindexWaypoints",
          "OnWaypointCompleted",
          "ReindexWaypoints",
          "OnWaypointAdded",
          "ReindexWaypoints",
          "OnWaypointRemoved",
          "ReindexWaypoints",
          "GetGroupWaypoints",
          "ReindexWaypoints",
          "Log",
          "Log",
          "OnLeaderIdChanged",
          "SetLeader",
          "Refresh",
          "OnFactionChanged",
          "OnIdentityChange",
          "SetInfoInstance",
          "GetAIGroupComponent",
          "GetOnUIRefresh",
          "GetFaction",
          "GetAIGroup",
          "GetAIEntity",
          "GetSize",
          "GetWaypointCount",
          "GetChildren",
          "ClearWaypoints",
          "GetEntityBudgetCost",
          "GetRuntimeBudgetCost",
          "GetPrefabBudgetCost",
          "CanDuplicate",
          "GetChild",
          "GetPos",
          "CanDestroy",
          "GetChildren",
          "IsDestroyed",
          "GetChildren",
          "HideIfEmpty",
          "SetVisible",
          "RplSave",
          "RplLoad",
          "EnableCycledWaypointsBroadcast",
          "Destroy",
          "GetChildren",
          "ForceVehicleCompartments",
          "OnParentEntityChanged",
          "GetChildren",
          "OnCreatedServer",
          "OnAllMembersSpawned",
          "OnChildEntityChanged",
          "SetLeader",
          "OnPostInit",
          "SCR_EditableGroupComponent"
        ]
      },
      {
        "class_name": "SCR_EditableMineComponent",
        "methods": [
          "OnPostInit",
          "ActivateMine",
          "IsDestroyed",
          "CanDestroy",
          "Destroy"
        ]
      },
      {
        "class_name": "SCR_EditablePlayerDelegateComponent",
        "methods": [
          "InitPlayerDelegate",
          "OnRplPlayerID",
          "GetPlayerID",
          "GetOnLimitedEditorChanged",
          "HasLimitedEditor",
          "SetControlledEntity",
          "SetControlledEntityOwner",
          "Rpc",
          "SetControlledEntityOwner",
          "GetControlledEntity",
          "OnRplPlayerID",
          "OnRplLimitedEditor",
          "OnEditorLimitedChange",
          "OnRplLimitedEditor",
          "GetEntityType",
          "GetInfo",
          "GetOnUIReset",
          "GetFaction",
          "GetAIGroup",
          "GetVehicle",
          "GetHealth",
          "GetEntityBudgetCost",
          "GetPos",
          "GetLogText",
          "RplSave",
          "RplLoad",
          "SetControlledEntityOwner",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_EditablePreviewComponent",
        "methods": [
          "InitFromEntity",
          "RestoreParentEntity",
          "InitFromSource",
          "RestoreParentEntity",
          "GetPos",
          "UpdateGameHierarchy",
          "GetEntityType",
          "GetInfo"
        ]
      },
      {
        "class_name": "SCR_EditableSpawnPointComponent",
        "methods": [
          "UpdateText",
          "UpdateInfo",
          "GetOnLocationChange",
          "UpdateText",
          "SetTransform",
          "UpdateNearestLocation",
          "GetOnUIRefresh",
          "SCR_EditableSpawnPointComponent"
        ]
      },
      {
        "class_name": "SCR_EditableSystemComponent",
        "methods": [
          "OnFactionChanged",
          "GetFaction",
          "GetOnUIRefresh",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_EditableTaskComponentClass",
        "methods": [
          "GetObjectiveTypeName"
        ]
      },
      {
        "class_name": "SCR_EditableTaskComponent",
        "methods": [
          "AttachTo",
          "UpdateText",
          "OnAttachedToId",
          "AttachTo",
          "GetAttachedTo",
          "ActivateTask",
          "IsTaskActivated",
          "GetTextType",
          "GetTextIndex",
          "SetTextIndex",
          "SetTextIndexBroadcast",
          "Rpc",
          "SetTextIndexBroadcast",
          "UpdateText",
          "GetTaskCompletionType",
          "SetTaskCompletionType",
          "SetTaskCompletionTypeBroadcast",
          "Rpc",
          "SetTaskCompletionTypeBroadcast",
          "UpdateText",
          "GetOnLocationChange",
          "UpdateText",
          "GetFaction",
          "SetTransform",
          "AttachTo",
          "UpdateNearestLocation",
          "Serialize",
          "Deserialize",
          "GetOnUIRefresh",
          "RplSave",
          "RplLoad",
          "OnAttachedToId",
          "UpdateText",
          "EOnEditorPlace",
          "UpdateNearestLocation",
          "OnParentEntityChanged",
          "AttachTo",
          "SCR_EditableTaskComponent",
          "Delete",
          "IsAttachable",
          "IsAttached"
        ]
      },
      {
        "class_name": "SCR_EditableVehicleComponent",
        "methods": [
          "GetPlayerCountInVehicle",
          "OnFactionUpdate",
          "OnDestroyed",
          "GetFaction",
          "GetOnUIRefresh",
          "GetAIGroup",
          "GetAIEntity",
          "GetPlayerID",
          "UpdatePlayerCountInVehicle",
          "GetCrew",
          "PlayerTeleportedFeedback",
          "SetTransform",
          "PlayerTeleportedFeedback",
          "CanOccupyVehicleWithCharacters",
          "HasEnoughBudgetForDefaultOccupants",
          "OccupyVehicleWithDefaultCharacters",
          "GetCompartmentManager",
          "EOnEditorPlace",
          "OccupyVehicleWithDefaultCharacters",
          "OccupyVehicleWithDefaultCharacters",
          "OccupyVehicleWithDefaultCharacters",
          "EOnPhysicsActive",
          "SetParentEntity",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_EditableWaypointComponent",
        "methods": [
          "GetAttachedTo",
          "AttachTo",
          "OnAttachedToId",
          "AttachTo",
          "SetWaypointIndex",
          "GetWaypointIndex",
          "IsCurrent",
          "GetPrevWaypoint",
          "OnPreWaypointIdRpl",
          "CanDuplicate",
          "GetFaction",
          "GetAIGroup",
          "OnParentEntityChanged",
          "AttachTo",
          "SetTransform",
          "DetachFromTarget",
          "SetTransformBroadcast",
          "DetachFromTarget",
          "DetachFromTarget",
          "AttachTo",
          "GetPos",
          "CanSetParent",
          "EOnEditorPlace",
          "OnDelete",
          "IsAttachable",
          "IsAttached",
          "SCR_EditableWaypointComponent"
        ]
      },
      {
        "class_name": "SCR_EditableWorldEntityComponent",
        "methods": [
          "SetOwnerScripted",
          "GetOwnerScripted"
        ]
      },
      {
        "class_name": "SCR_EditableEntityBaseChildComponent",
        "methods": [
          "EOnStateChanged",
          "UpdateFromCurrentState",
          "EOnStateChanged",
          "CanApply",
          "SCR_EditableEntityBaseChildComponent"
        ]
      },
      {
        "class_name": "SCR_EditableEntityMaterialChildComponent",
        "methods": [
          "SetMaterial",
          "EOnStateChanged",
          "SetMaterial",
          "SetMaterial",
          "OnPostInit",
          "UpdateFromCurrentState"
        ]
      },
      {
        "class_name": "SCR_EditableEntityVehicleCompartmentVisibilityChildComponent",
        "methods": [
          "OnAddedToParent",
          "UpdateFromCurrentState"
        ]
      },
      {
        "class_name": "SCR_EditableEntityVisibilityChildComponent",
        "methods": [
          "EOnStateChanged",
          "EOnInit",
          "UpdateFromCurrentState",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_AccessKeysEditorComponent",
        "methods": [
          "AddAccessKey",
          "Rpc",
          "RemoveAccessKey",
          "Rpc",
          "AddAccessKeyServer",
          "Rpc",
          "RemoveAccessKeyServer",
          "Rpc",
          "AccessKeyChangedOwner",
          "GetAccessKey",
          "HasAccess",
          "AddEntityAccessKey",
          "RemoveEntityAccessKey",
          "AddEntityAccessKeyServer",
          "RemoveEntityAccessKeyServer",
          "GetKeyDebug",
          "LogAvailableEntities",
          "LogAccessKey",
          "IsAdmin",
          "EOnEditorDebug",
          "EOnFrame",
          "LogAvailableEntities",
          "LogAccessKey",
          "AddAccessKey",
          "RemoveAccessKey",
          "LogAccessKey",
          "RplSave",
          "RplLoad",
          "EOnEditorActivate",
          "EOnEditorInit",
          "EOnEditorDelete"
        ]
      },
      {
        "class_name": "SCR_ActionsRadialMenuEditorComponent",
        "methods": [
          "OnInputDeviceChanged",
          "CleanMenu",
          "OnBeforeMenuOpen",
          "CleanMenu",
          "CleanMenu",
          "CleanMenu",
          "OnActionRadialMenuOpen",
          "OnBeforeMenuOpen",
          "OnCommandsRadialMenu",
          "OnBeforeMenuOpen",
          "OnAddCommandsRadialMenu",
          "OnBeforeMenuOpen",
          "EOnEditorActivate",
          "EOnEditorDelete"
        ]
      },
      {
        "class_name": "SCR_AttributesManagerEditorComponentClass",
        "methods": [
          "GetAttribute",
          "GetAttributesCount",
          "FindAttribute",
          "SCR_AttributesManagerEditorComponentClass"
        ]
      },
      {
        "class_name": "SCR_AttributesManagerEditorComponent",
        "methods": [
          "StartEditing",
          "StartEditing",
          "StartEditing",
          "StartEditing",
          "Rpc",
          "StartEditingOwner",
          "StartEditingServer",
          "GetVariables",
          "Rpc",
          "StartEditingOwner",
          "Clean",
          "GetVariables",
          "GetIsAttributeDuplicate",
          "ConfirmEditing",
          "Rpc",
          "Clean",
          "ConfirmEditingServer",
          "Clean",
          "CancelEditing",
          "Reset",
          "Rpc",
          "Clean",
          "CancelEditingServer",
          "Clean",
          "Reset",
          "Clean",
          "GetVariables",
          "CanOpenAttributeDialog",
          "SetAttributeVariable",
          "GetAttributeVariable",
          "GetActiveAttributesOfType",
          "GetActiveAttribute",
          "SetAttributeEnabled",
          "SetAttributeSelected",
          "SetAttributeAsSubAttribute",
          "GetAttributeRef",
          "GetEditedAttributes",
          "GetEditedItems",
          "GetOnAttributesRequest",
          "GetOnAttributesStart",
          "GetOnAttributesConfirm",
          "GetOnAttributesCancel",
          "GetOnResetAttributes",
          "GetOnAttributeChangesApplied",
          "GetOnAttributeDescriptionChanged",
          "GetOnAttributeCategoryChanged",
          "GetConflictingAttributeUIInfo",
          "SetCurrentCategory",
          "GetCurrentCategory",
          "GetChangedAttributesOnce",
          "SetAttributeDescription",
          "EOnEditorActivate",
          "EOnEditorDeactivate",
          "CancelEditing",
          "EOnEditorInit",
          "EOnEditorInitServer"
        ]
      },
      {
        "class_name": "SCR_BaseActionsEditorComponentClass",
        "methods": [
          "GetActions",
          "GetAction",
          "FindAction",
          "SetShortcuts",
          "SCR_BaseActionsEditorComponentClass"
        ]
      },
      {
        "class_name": "SCR_BaseActionsEditorComponent",
        "methods": [
          "GetHoveredEntity",
          "GetActions",
          "EvaluateActions",
          "GetAndEvaluateActions",
          "GetActions",
          "EvaluateActions",
          "ValidateSelection",
          "ActionCanBeShown",
          "ActionCanBePerformed",
          "ActionPerformInstantly",
          "ActionPerformInstantlyNoDialog",
          "ActionPerformInstantlyNoDialog",
          "ActionPerform",
          "GetInstantActionTraceFlags",
          "ActionPerform",
          "ActionPerformRpc",
          "ActionPerform",
          "ActionPerformLocal",
          "ActionPerformRpc",
          "SerializeEntities",
          "Rpc",
          "ActionPerform",
          "ActionPerformLocal",
          "ActionPerformServer",
          "DeSerializeEntities",
          "ActionPerform",
          "Rpc",
          "ActionPerformOwner",
          "ActionPerformLocal",
          "SerializeEntities",
          "GetRplIdFromEditableEntity",
          "DeSerializeEntities",
          "GetEditableEntityFromRplId",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_BaseEditorComponentClass",
        "methods": [
          "GetInstance"
        ]
      },
      {
        "class_name": "SCR_BaseEditorComponent",
        "methods": [
          "EOnEditorInit",
          "EOnEditorDelete",
          "EOnEditorRequest",
          "EOnEditorOpen",
          "EOnEditorClose",
          "EOnEditorPreActivate",
          "EOnEditorActivate",
          "EOnEditorActivateAsync",
          "EOnEditorPostActivate",
          "EOnEditorDeactivate",
          "EOnEditorDeactivateAsync",
          "EOnEditorPostDeactivate",
          "EOnEditorDebug",
          "EOnEffect",
          "EOnEditorInitServer",
          "EOnEditorDeleteServer",
          "EOnEditorOpenServer",
          "EOnEditorOpenServerCallback",
          "EOnEditorCloseServer",
          "EOnEditorCloseServerCallback",
          "EOnEditorActivateServer",
          "EOnEditorDeactivateServer",
          "OnInitBase",
          "EOnEditorInit",
          "OnDeleteBase",
          "EOnEditorDelete",
          "OnRequestBase",
          "EOnEditorRequest",
          "OnOpenedBase",
          "EOnEditorOpen",
          "OnClosedBase",
          "EOnEditorClose",
          "OnPreActivateBase",
          "EOnEditorPreActivate",
          "OnActivateBase",
          "Activate",
          "EOnEditorActivate",
          "OnActivateAsyncBase",
          "EOnEditorActivateAsync",
          "OnPostActivateBase",
          "EOnEditorPostActivate",
          "OnDeactivateBase",
          "Deactivate",
          "EOnEditorDeactivate",
          "OnPostDeactivateBase",
          "EOnEditorPostDeactivate",
          "OnDeactivateAsyncBase",
          "EOnEditorDeactivateAsync",
          "OnEffectBase",
          "EOnEffect",
          "GetInstance",
          "GetInstance",
          "GetAllInstances",
          "GetManager",
          "FindEditorComponent",
          "GetEditorComponentData",
          "GetComponentData",
          "IsRemoved",
          "ResetEditorComponent",
          "GetOnEffect",
          "IsOnEditorManager",
          "IsOwner",
          "IsProxy",
          "IsMaster",
          "IsAdmin",
          "GetParentComponent",
          "SetParentComponent",
          "SendNotification",
          "InitServer",
          "EOnEditorInitServer",
          "InitOwner",
          "OnPostInit",
          "SCR_BaseEditorComponent",
          "Deactivate",
          "EOnEditorDeleteServer"
        ]
      },
      {
        "class_name": "SCR_BudgetEditorComponentClass",
        "methods": [
          "ScriptInvoker_EntityBudgetMaxUpdated",
          "ScriptInvoker_EntityBudgetUpdated",
          "ScriptInvoker_EntityBudgetMaxReached"
        ]
      },
      {
        "class_name": "SCR_BudgetEditorComponent",
        "methods": [
          "CanPlaceEntityInfo",
          "CanPlaceEntityInfo",
          "CanPlaceEntityInfo",
          "CanPlaceResult",
          "CanPlaceEntitySource",
          "UpdatePreviewCost",
          "CanPlaceResult",
          "CanPlaceEntityType",
          "GetEntityTypeBudgetCost",
          "CanPlace",
          "CanPlace",
          "CanPlace",
          "CanPlace",
          "GetEntityPreviewBudgetCosts",
          "FilterAvailableBudgets",
          "GetEntitySourcePreviewBudgetCosts",
          "GetEntityPreviewBudgetCosts",
          "GetVehicleOccupiedBudgetCosts",
          "GetVehicleOccupiedBudgetCosts",
          "GetVehicleOccupiedBudgetCosts",
          "UpdatePreviewCost",
          "ResetPreviewCost",
          "ResetPreviewCost",
          "IsBudgetAvailable",
          "GetMaxBudget",
          "GetMaxBudget",
          "GetMaxBudgetValue",
          "SetMaxBudgetValue",
          "Rpc",
          "DelayedSetMaxBudgetSetup",
          "DelayedSetMaxBudget",
          "SetMultiMaxBudgetValues",
          "SetMultiMaxBudgetValues",
          "SetMaxBudgetValue",
          "GetEntityTypeBudgetCost",
          "GetEntityTypeBudgetCost",
          "GetCurrentBudgetValue",
          "SetCurrentBudgetValue",
          "Rpc",
          "GetCurrentBudgetInfo",
          "GetBudgets",
          "GetCurrentBudgetSettings",
          "RefreshBudgetSettings",
          "UpdateMaxBudgetOwner",
          "CanPlaceResult",
          "Rpc",
          "CanPlaceOwner",
          "OnEntityCoreBudgetUpdated",
          "Rpc",
          "OnEntityCoreBudgetUpdatedOwner",
          "CheckMaxBudgetReached",
          "FilterAvailableBudgets",
          "GetBudgetSetting",
          "GetFirstAvailableBudget",
          "DemandBudgetUpdateFromServer",
          "Rpc",
          "RpcServer_UpdateBudget",
          "RpcOwner_UpdateBudget",
          "IsBudgetCapEnabled",
          "EOnEditorDebug",
          "GetMaxBudget",
          "EOnEditorInitServer",
          "EOnEditorDeleteServer",
          "EOnEditorActivate",
          "RefreshBudgetSettings",
          "Rpc",
          "EOnEditorInit"
        ]
      },
      {
        "class_name": "SCR_CameraDataEditorComponent",
        "methods": [
          "SaveComponents",
          "LoadComponents",
          "IsSave"
        ]
      },
      {
        "class_name": "SCR_CameraEditorComponentClass",
        "methods": [
          "SCR_CameraEditorComponent_OnCameraCreated"
        ]
      },
      {
        "class_name": "SCR_CameraEditorComponent",
        "methods": [
          "GetCamera",
          "GetCamera",
          "GetCameraInstance",
          "SetInitTransform",
          "InitCameraTransform",
          "TryCreateCamera",
          "InitCameraTransform",
          "CreateCamera",
          "TryForceCamera",
          "ReplaceCamera",
          "CreateCamera",
          "CreateCamera",
          "OnCameraDectivate",
          "GetCameraPrefab",
          "ResetEditorComponent",
          "EOnEditorInit",
          "EOnEditorPreActivate",
          "EOnEditorPostActivate",
          "EOnFrame",
          "TryCreateCamera",
          "TryForceCamera",
          "EOnEditorDeactivate",
          "EOnEditorPostDeactivate"
        ]
      },
      {
        "class_name": "SCR_CameraFiltersEditorComponentClass",
        "methods": [
          "GetFilters",
          "GetFiltersCount",
          "GetFilter"
        ]
      },
      {
        "class_name": "SCR_CameraFiltersEditorComponent",
        "methods": [
          "GetFilters",
          "RefreshCurrentFilter",
          "SetCurrentFilter",
          "SetCurrentFilter",
          "GetCurrentFilter",
          "ResetEditorComponent",
          "SetCurrentFilter",
          "EOnEditorPostActivate",
          "RefreshCurrentFilter",
          "EOnEditorDeactivate",
          "EOnEditorInit"
        ]
      },
      {
        "class_name": "SCR_CameraFilterEditor",
        "methods": [
          "GetDisplayName",
          "Apply",
          "Revert",
          "GetPostProcessComponent"
        ]
      },
      {
        "class_name": "SCR_CameraFilterEffectEditor",
        "methods": [
          "Apply",
          "Revert"
        ]
      },
      {
        "class_name": "SCR_CameraLimitedEditorComponent",
        "methods": [
          "GetCameraPrefab",
          "EOnFrame",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_CameraParticlesEditorComponentClass",
        "methods": [
          "GetEffects",
          "GetEffectsCount",
          "GetEffect"
        ]
      },
      {
        "class_name": "SCR_CameraParticlesEditorComponent",
        "methods": [
          "GetEffects",
          "RefreshCurrentEffect",
          "SetCurrentEffect",
          "SetCurrentEffect",
          "GetCurrentEffect",
          "EOnEditorPostActivate",
          "RefreshCurrentEffect",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_CameraParticleEditor",
        "methods": [
          "GetDisplayName",
          "Create",
          "spawnParams",
          "Destroy"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingBudgetEditorComponent",
        "methods": [
          "EOnEditorActivateServer",
          "RefreshBudgetSettings",
          "EOnEditorActivate",
          "RefreshBudgetSettings",
          "EOnEditorDeactivate",
          "OnResourceTypeEnabledChanged",
          "RefreshResourcesComponent",
          "RefreshSuppliesComponent",
          "OnBaseResourcesChanged",
          "RefreshResourcesComponent",
          "OnBaseSuppliesChanged",
          "RefreshResourcesComponent",
          "OnTargetBaseChanged",
          "RefreshBudgetSettings",
          "GetMaxBudgetValue",
          "GetCurrentBudgetValue",
          "HasCooldownTime",
          "GetProviderMaxValue",
          "HasCooldownTime",
          "GetCooldownTime",
          "GetUserRank",
          "OnEntityCoreBudgetUpdatedOwner",
          "GetMaxBudgetValue",
          "RefreshResourcesComponent",
          "RefreshBudgetSettings",
          "RefreshResourcesComponent",
          "CanPlaceEntitySource",
          "UpdatePreviewCost",
          "CanPlaceResultCampaignBuilding",
          "CanPlaceResultCampaignBuilding",
          "Rpc",
          "CanPlaceOwnerCampaignBuilding",
          "GetMaxBudget",
          "CanPlace",
          "IsBudgetCapEnabled",
          "GetEntityPreviewBudgetCosts",
          "FilterAvailableBudgets"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingCameraEditorComponent",
        "methods": [
          "CreateCamera"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingEditorComponent",
        "methods": [
          "GetOnProviderChanged",
          "GetOnObstructionEventTriggered",
          "AddProviderEntityEditorComponent",
          "RemoveProviderEntityEditorComponent",
          "SetForcedProvider",
          "GetProviderComponent",
          "SetForcedProvider",
          "GetProviderEntitiesCount",
          "IsActiveProvider",
          "GetProviderResourceComponent",
          "GetShownBudget",
          "GetProviderSuppliesComponent",
          "GetProviderFactionComponent",
          "GetTrigger",
          "RemoveProviderEntityEditorComponent",
          "AddRemoveFactionLabel",
          "SpawnClientTrigger",
          "EOnEditorActivate",
          "SetOnEnterEvent",
          "ToggleBuildingTool",
          "CanBeShown",
          "TabContainLabel",
          "IsProviderBase",
          "ToggleBuildingTool",
          "SetOnEnterEvent",
          "EntityEnterTrigger",
          "SetOnEntityKilled",
          "EntityLeaveTrigger",
          "RemoveOnEntityKilled",
          "CanBlockView",
          "SetOnEntityKilled",
          "RemoveOnEntityKilled",
          "GetUserRank",
          "EOnEditorOpenServer",
          "EOnEditorCloseServer",
          "ToggleBuildingTool",
          "AssociateCompositionsToProvider",
          "UnassignCompositionProvider",
          "EOnEditorDeactivate",
          "ToggleBuildingTool",
          "GetProviderEntity",
          "GetMasterProviderEntity",
          "GetMasterProviderEntity",
          "SetProviderFromRplID",
          "AddProviderEntityEditorComponent",
          "RplSave",
          "RplLoad",
          "AddProviderEntityEditorComponent"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingObstructionExceptionComponent",
        "methods": [
          "IsWhitelistEmpty",
          "IsOnWhitelist"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingPlacingEditorComponentClass",
        "methods": [
          "ContainPrefab"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingPlacingEditorComponent",
        "methods": [
          "GetProviderBase",
          "OnPreviewCreated",
          "SetInitialCanBeCreatedState",
          "OnBeforeEntityCreatedServer",
          "OnEntityCreatedServer",
          "SetAiFlag",
          "SetProviderAndBuilder",
          "SetCooldownTimer",
          "SetAIBudget",
          "GetCooldownTimeClient",
          "GetAIBudgetClient",
          "GetEntityBudgetValue",
          "SetProviderAndBuilder",
          "InitGroup",
          "SetAiFlag",
          "SetAiFlag",
          "OnPlaceEntityServer",
          "Rpc",
          "PlaySoundEvent",
          "PlaySoundEvent",
          "CreateEntityServer",
          "IsPreviewOutOfRange",
          "GetOutlineToSpawn",
          "CanCreateEntity",
          "EOnEditorActivate",
          "InitVariables",
          "SetInitialEvent",
          "EOnEditorActivateServer",
          "InitVariables",
          "EOnEditorOpen",
          "InitVariables",
          "EOnEditorClose",
          "EOnEditorOpenServer",
          "InitVariables",
          "SetInitialEvent",
          "InitVariables",
          "EOnEditorDeactivateServer",
          "UseCooldown",
          "SetCooldownTimer",
          "SetAIBudget"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingPlacingObstructionEditorComponent",
        "methods": [
          "EOnEditorActivate",
          "InitVariables",
          "EOnEditorActivateServer",
          "InitVariables",
          "EOnEditorOpen",
          "InitVariables",
          "EOnEditorClose",
          "EOnEditorOpenServer",
          "InitVariables",
          "OnPreviewCreated",
          "SetInitialCanBeCreatedState",
          "GetAllEntitiesToEvaluate",
          "CanBeCreated",
          "SetSuperiorCanBeCreated",
          "SetInitialCanBeCreatedState",
          "InitVariables",
          "IsPreviewOutOfRange",
          "GetAllEntitiesToEvaluate",
          "IsPreviewVehicle",
          "CanCreate",
          "GetEntityProtectionRadius",
          "IsCompositionTilted",
          "CheckEntityPosition",
          "CheckVehiclePosition",
          "EvaluateBlockingEntity",
          "EvaluateBlockingEntityVehicle",
          "HasObstructionException",
          "HasObstructionException",
          "TraceEntityOnPosition",
          "TraceCylinder"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingTransformingEditorComponent",
        "methods": [
          "OnPreviewCreated",
          "OnPreviewDeleted",
          "StartEditing",
          "StartEditingServer",
          "StartEditingOwner",
          "CancelEditing",
          "EOnEditorActivate",
          "EOnEditorDeactivate",
          "IsInBuildingRadius",
          "IsInBuildingRadiusVector",
          "ConfirmEditing",
          "CancelEditing",
          "ReleaseLastRejectedPivot",
          "ConfirmEditingServer",
          "CancelEditingServer"
        ]
      },
      {
        "class_name": "SCR_CommandActionsEditorComponent",
        "methods": [
          "GetOnCurrentActionChanged",
          "IsActionCurrent",
          "SetCurrentAction",
          "PerformDefaultAction",
          "ActionPerformInstantly",
          "StartPlacing",
          "SetCurrentAction",
          "OnPlacingSelectedPrefabChange",
          "SetCurrentAction",
          "ValidateSelection",
          "GetInstantActionTraceFlags",
          "ActionCanBeShown",
          "ActionCanBePerformed",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserEditorComponentClass",
        "methods": [
          "ScriptInvoker_BrowserBudgetPreviewRefresh"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserEditorComponent",
        "methods": [
          "GetResourceNamePrefabID",
          "GetFilteredPrefabID",
          "GetFilteredPrefabCount",
          "AreFactionsShownOnContentCards",
          "FilterExtendedSlots",
          "IsExtendedEntity",
          "GetValidBlackListedLabels",
          "FindExtendedEntityCache",
          "FilterEntries",
          "GetValidBlackListedLabels",
          "isMatchingToggledLabelsOfState",
          "IsMatchingToggledLabels",
          "IsMatchingToggledLabels",
          "IsLabelActive",
          "IsAnyLabelActive",
          "SetLabel",
          "ResetAllLabels",
          "SetConfigLabels",
          "GetActiveLabels",
          "GetActiveLabelCount",
          "GetLabelGroups",
          "GetLabelGroupType",
          "GetLabelGroupOrder",
          "GetLabelsOfGroup",
          "GetLabelUIInfo",
          "GetLabelUIInfoIfValid",
          "OrderLabels",
          "GetLabelOrderInGroup",
          "GetLabelGroupType",
          "GetLabelsOfGroup",
          "GetLabelName",
          "SetPageIndex",
          "GetPageIndex",
          "SetPageEntryCount",
          "GetPageEntryCount",
          "SetBrowserStateIndex",
          "GetBrowserStateIndex",
          "GetHiddenStateTabs",
          "SetStateTabVisible",
          "GetContentBrowserTabStates",
          "GetContentBrowserTabState",
          "GetLastSearch",
          "GetCurrentSearch",
          "SetCurrentSearch",
          "SetSaveStateTabsEnabled",
          "CanSavePersistentBrowserStates",
          "GetOnLabelChanged",
          "GetOnBrowserStatesSaved",
          "GetOnBrowserStatePreload",
          "GetOnBrowserStateLoaded",
          "GetOnBrowserEntriesFiltered",
          "GetOnBrowserStateCleared",
          "GetOnEnableSaveStateTabs",
          "GetOnSearchConfirm",
          "GetOnStateTabVisibilityChanged",
          "SetExtendedEntity",
          "GetExtendedEntity",
          "GetInfoCount",
          "GetInfo",
          "FindIndexOfInfo",
          "GetFirstAvailabeBudgetCost",
          "CanPlace",
          "CanPlace",
          "RefreshPreviewCost",
          "OpenBrowserInstance",
          "OpenBrowserInstance",
          "OpenBrowserLabelConfigInstance",
          "OpenBrowserExtended",
          "SetExtendedEntity",
          "SetExtendedEntity",
          "SetExtendedEntity",
          "OpenBrowser",
          "SetBrowserState",
          "OpenBrowserMenu",
          "OpenBrowserState",
          "LoadBrowserState",
          "SaveBrowserState",
          "OpenBrowserMenu",
          "OpenBrowserLabelConfig",
          "OpenBrowser",
          "SetExtendedEntity",
          "SetBrowserState",
          "OpenBrowserMenu",
          "SetBrowserState",
          "SaveBrowserState",
          "LoadBrowserState",
          "SetBrowserStateIndex",
          "LoadBrowserState",
          "SetCustomBrowserState",
          "LoadBrowserState",
          "SetBrowserState",
          "LoadBrowserState",
          "ClearBrowserState",
          "SaveBrowserState",
          "AddRemoveLabelOfPersistentBrowserState",
          "ResetBrowserState",
          "ClearBrowserState",
          "FilterEntries",
          "OnPlaceEntityServer",
          "OnMenuClosed",
          "SetExtendedEntity",
          "LoadBrowserState",
          "SetBrowserState",
          "SaveAllPersistentBrowserState",
          "OpenBrowserMenu",
          "ClearBrowserState",
          "ResetAllLabels",
          "SetPageIndex",
          "SetCurrentSearch",
          "LoadBrowserState",
          "LoadBrowserState",
          "LoadBrowserState",
          "ClearBrowserState",
          "SetLabel",
          "SetConfigLabels",
          "FilterEntries",
          "GetConfigState",
          "SetConfigLabels",
          "SetLabel",
          "GetContentBrowserDisplayConfig",
          "SaveAllPersistentBrowserState",
          "LoadAllPersistentBrowserState",
          "EOnEditorInit",
          "LoadAllPersistentBrowserState",
          "SetBrowserState",
          "EOnEditorActivateServer",
          "EOnEditorDeactivateServer",
          "EOnEditorActivate",
          "EOnEditorActivateAsync",
          "FilterEntries",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_ContextActionsEditorComponent",
        "methods": [
          "GetOnMenuOpen",
          "ValidateSelection",
          "EvaluateActions",
          "ActionCanBeShown",
          "ActionCanBePerformed",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_DebugEditorComponent",
        "methods": [
          "GetFakePlayerName",
          "GetFakePlayerName",
          "GetFakePlayerName",
          "CreateFakePlayerServer",
          "PingFakePlayer",
          "EOnFrame",
          "Rpc",
          "PingFakePlayer",
          "EOnEditorDebug",
          "EOnEditorPostActivate",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_DynamicSimulationEditorComponent",
        "methods": [
          "EnableStreaming",
          "EnableStreamingForEntity",
          "EnableStreamingForEntity",
          "OnEntityRegistered",
          "OnEntityUnregistered",
          "EnableStreamingForEntity",
          "EOnEditorActivateServer",
          "EnableStreaming",
          "EOnEditorDeactivateServer",
          "EnableStreaming"
        ]
      },
      {
        "class_name": "SCR_EntitiesManagerEditorComponent",
        "methods": [
          "GetFilter",
          "GetEntities",
          "SetInSuccessors",
          "OnEntityRegistered",
          "OnEntityUnregistered",
          "OnParentEntityChanged",
          "SetParentEntityServer",
          "SetParentEntity",
          "Rpc",
          "EOnEditorDebug",
          "EOnFrame",
          "EOnEditorActivate",
          "EOnEditorActivateAsync",
          "EOnEditorDeactivate",
          "EOnEditorDeactivateAsync",
          "EOnEditorInit"
        ]
      },
      {
        "class_name": "SCR_FactionWarningManagerEditorComponent",
        "methods": [
          "EOnEditorInit",
          "SetServerHandler",
          "OnSpawnPointChanged",
          "OnTaskChanged",
          "EOnEditorOpenServer",
          "SetServerHandler",
          "EOnEditorCloseServer",
          "SetServerHandler",
          "OnDelete",
          "SetServerHandler"
        ]
      },
      {
        "class_name": "SCR_HighlightedEditorComponent",
        "methods": [
          "Rpc",
          "Rpc",
          "CleanupHighlightedMap",
          "AddHighlightRpc",
          "CleanupHighlightedMap",
          "AddHighlightToListRpc",
          "CleanupHighlightedMap",
          "RemoveHighlight",
          "Rpc",
          "Rpc",
          "CleanupHighlightedMap",
          "RemoveHighlightRpc",
          "CleanupHighlightedMap",
          "RemoveHighlightFromListRpc",
          "CleanupHighlightedMap",
          "CleanupHighlightedMap",
          "IsEntityHighlighted",
          "GetEntityHighlightedState",
          "HasSpecificHighlight",
          "GetHighlightCount",
          "FactionSpawnPointsInit",
          "AddHighlight",
          "OnFactionSpawnPointsUpdated",
          "AddHighlight",
          "RemoveHighlight",
          "FactionTasksInit",
          "AddHighlight",
          "OnFactionTasksUpdated",
          "AddHighlight",
          "RemoveHighlight",
          "GetOnAddHighlight",
          "GetOnRemoveHighlight",
          "GetOnUpdateHighlight",
          "EOnEditorOpenServer",
          "FactionSpawnPointsInit",
          "FactionTasksInit",
          "EOnEditorCloseServer"
        ]
      },
      {
        "class_name": "SCR_HintEditorComponentClass",
        "methods": [
          "Init",
          "Exit"
        ]
      },
      {
        "class_name": "SCR_HintEditorComponent",
        "methods": [
          "EOnEditorActivate",
          "EOnEditorDeactivate",
          "EOnEditorClose"
        ]
      },
      {
        "class_name": "SCR_InputLayoutEditorComponent",
        "methods": [
          "EOnEditorInit",
          "EOnEditorDelete"
        ]
      },
      {
        "class_name": "SCR_LayersEditorComponent",
        "methods": [
          "IsEditingLayersEnabled",
          "SetEditingLayersEnabled",
          "SetCurrentLayer",
          "GetOnCurrentLayerChange",
          "OnEditorModeChanged",
          "SetCurrentLayer",
          "SetCurrentLayer",
          "SetCurrentLayerToParent",
          "ToggleCurrentLayer",
          "SetCurrentLayer",
          "GetCurrentLayer",
          "CreateNewLayerWithSelected",
          "CreateNewLayerWithSelectedRpl",
          "GetParentBelowCurrentLayer",
          "IsUnderCurrentLayer",
          "MoveToCurrentLayer",
          "MoveToLayer",
          "MoveToLayer",
          "MoveToLayerAndSelect",
          "SetCurrentLayer",
          "MoveToLayer",
          "SplitGroupAndAddCharacters",
          "MoveToLayer",
          "AddCharactersToGroup",
          "MoveToLayer",
          "OnEditableParentChanged",
          "AddCharactersToGroup",
          "EntitiesSelectAfterMoveDone",
          "DelayedSelectMovedEntity",
          "EntitiesSelectAfterMoveDone",
          "OnSelectionChanged",
          "ClearEntitiesSelectAfterMove",
          "ClearEntitiesSelectAfterMove",
          "ClearEntitiesSelectAfterMove",
          "EntitiesSelectAfterMoveDone",
          "ClearEntitiesSelectAfterMove",
          "MoveToLayerServer",
          "OnUserSettingsChanged",
          "SetEditingLayersEnabled",
          "OnEntityUnregistered",
          "SetCurrentLayer",
          "OnEntityAccessKeyChanged",
          "SetCurrentLayer",
          "OnEntityVisibilityChanged",
          "SetCurrentLayer",
          "OnAccessKeysChanged",
          "SetCurrentLayer",
          "EOnEditorDebug",
          "EOnEditorInit",
          "OnUserSettingsChanged",
          "EOnEditorDelete",
          "ClearEntitiesSelectAfterMove",
          "EOnEditorOpen",
          "EOnEditorClose",
          "SetCurrentLayer",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_MapEditorComponent",
        "methods": [
          "GetMapAvailable",
          "SetMapHandler",
          "ShowMap",
          "GetMapConfigPrefab",
          "ToggleMap",
          "ShowMap",
          "OnPlacingPreviewCreate",
          "ShowMap",
          "IsEditorMapOpen",
          "OnLimitedChange",
          "ShowMap",
          "FindMapHandler",
          "OnPostInit",
          "EOnDeactivate"
        ]
      },
      {
        "class_name": "SCR_MenuEditorComponent",
        "methods": [
          "SetVisible",
          "ToggleVisible",
          "SetVisible",
          "IsVisible",
          "GetMenu",
          "GetMenuComponent",
          "GetOnVisibilityChange",
          "OnModeChange",
          "SetVisible",
          "EOnEditorPostActivate",
          "EOnEditorDeactivate",
          "EOnEditorClose",
          "EOnEditorActivate",
          "EOnEditorInit"
        ]
      },
      {
        "class_name": "SCR_MenuLayoutEditorComponentClass",
        "methods": [
          "GetEditableEntityUI"
        ]
      },
      {
        "class_name": "SCR_MenuLayoutEditorComponent",
        "methods": [
          "GetEditableEntityUI",
          "GetCursorWorldPos",
          "GetTraceEntity",
          "EOnEditorPostActivate",
          "EOnEditorPostDeactivate"
        ]
      },
      {
        "class_name": "SCR_MenuOverlaysEditorComponent",
        "methods": [
          "GetOverlayLayer",
          "ResetEditorComponent",
          "EOnEditorDebug",
          "EOnEditorActivate",
          "EOnEditorPostActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_EditorMenuOverlayLayer",
        "methods": [
          "GetLayer",
          "GetOverlays",
          "SetCurrentOverlay",
          "ResetOverlay",
          "SetCurrentOverlay",
          "GetCurrentOverlay",
          "GetCurrentOverlayIndex",
          "GetOverlayWidget",
          "ActivateLayer",
          "PostActivateLayer",
          "SetCurrentOverlay",
          "ExitLayer",
          "GetOnOverlayChanged",
          "OnHide",
          "RefreshOverlay",
          "SetCurrentOverlay",
          "UpdateCustomRoot",
          "GetRootWidget",
          "SCR_EditorMenuOverlayLayer"
        ]
      },
      {
        "class_name": "SCR_EditorMenuOverlay",
        "methods": [
          "GetDisplayName",
          "DeleteWidget",
          "SetWidgetOpacity",
          "GetWidget"
        ]
      },
      {
        "class_name": "SCR_MusicEditorComponent",
        "methods": [
          "OnEditorOpened",
          "OpenedEditorDelay",
          "OnEditorClosed",
          "EOnEditorInit",
          "OnEditorOpened",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_PauseGameTimeEditorComponent",
        "methods": [
          "TogglePause",
          "SetPause",
          "IsPaused",
          "SetPauseOnOpen",
          "IsPauseOnOpen",
          "OnSaved",
          "SetPause",
          "EOnEditorOpen",
          "EOnEditorClose",
          "SetPause",
          "EOnEditorInit"
        ]
      },
      {
        "class_name": "SCR_PingEditorComponentClass",
        "methods": [
          "ActivateEffects"
        ]
      },
      {
        "class_name": "SCR_PingEditorComponent",
        "methods": [
          "SendPing",
          "CallEvents",
          "ActivateCooldown",
          "ActivateCooldown",
          "UpdateCooldown",
          "OnCooldownDone",
          "OnCooldownDone",
          "SendPingServer",
          "ReceivePing",
          "Rpc",
          "ReceivePingOwner",
          "CallEvents",
          "GetPlayerPings",
          "GetOnPingSend",
          "GetOnPingReceive",
          "GetOnPingEntityRegister",
          "GetOnPingEntityUnregister",
          "IsPingOnCooldown",
          "CallEvents",
          "Expire",
          "Expire",
          "EOnEffect",
          "SCR_PingEditorComponent",
          "OnCooldownDone"
        ]
      },
      {
        "class_name": "SCR_PlacingEditorComponentClass",
        "methods": [
          "GetPrefab",
          "GetPrefabID",
          "CountPrefabs",
          "GetPrefabs",
          "HasPlacingFlag",
          "GetTestPrefab",
          "SCR_PlacingEditorComponentClass"
        ]
      },
      {
        "class_name": "SCR_PlacingEditorComponent",
        "methods": [
          "SetPlacingBlocked",
          "GetPrefabID",
          "CreateEntity",
          "SendNotification",
          "SendNotification",
          "SetSelectedPrefab",
          "SetSelectedPrefab",
          "SendNotification",
          "SetSelectedPrefab",
          "Rpc",
          "SetSelectedPrefab",
          "CreateEntity",
          "SetInstantPlacing",
          "CreateEntity",
          "CreateEntityServer",
          "OnBeforeEntityCreatedServer",
          "OnEntityCreatedServer",
          "Rpc",
          "CreateEntityOwner",
          "SetPlacingFlag",
          "SetPlacingFlag",
          "SetPlacingFlag",
          "SetSelectedPrefab",
          "CanCreateEntity",
          "OnBeforeEntityCreatedServer",
          "OnEntityCreatedServer",
          "CheckBudgetOwner",
          "SetSelectedPrefab",
          "OnBudgetMaxReached",
          "SetSelectedPrefab",
          "SpawnEntityResource",
          "SpawnEntityResource",
          "OnAIGroupAllEntitiesSpawned",
          "GetCompatiblePlacingFlags",
          "CanPlaceEntityServer",
          "CanSelectEntityPrefab",
          "CanPlaceEntityServer",
          "OnEntityUnregistered",
          "SetSelectedPrefab",
          "SetInstantPlacing",
          "SetSelectedPrefab",
          "CreateEntity",
          "SetPlacingFlag",
          "GetSelectedPrefab",
          "IsPlacing",
          "SetSlot",
          "GetSlot",
          "SetPlacingFlag",
          "UpdatePlacingFlagBudget",
          "UpdatePlacingFlagBudget",
          "TogglePlacingFlag",
          "HasPlacingFlag",
          "IsPlacingFlagCompatible",
          "IsPlacingFlagAllowed",
          "GetOnSelectedPrefabChange",
          "GetOnPlacingFlagsChange",
          "GetOnRequestEntity",
          "GetOnPlaceEntity",
          "GetOnPlaceEntityServer",
          "EOnEditorDebug",
          "EOnEditorActivate",
          "EOnEditorDeactivate",
          "SetCycleWaypoints",
          "Rpc",
          "SetCycleWaypointsServer"
        ]
      },
      {
        "class_name": "SCR_PlayerDelegateEditorComponent",
        "methods": [
          "RegisterDelegate",
          "UnegisterDelegate",
          "GetDelegates",
          "GetDelegate",
          "HasPlayerWithUnlimitedEditor",
          "GetOnLimitedEditorChanged",
          "OnLimitedEditorChanged",
          "OnSpawnServer",
          "OnDeathServer",
          "OnPlayerDeletedServer",
          "EOnEditorInitServer",
          "EOnEditorDeleteServer"
        ]
      },
      {
        "class_name": "SCR_PlayersManagerEditorComponent",
        "methods": [
          "GetPlayerEntity",
          "GetPlayerID",
          "IsPossessed",
          "GetPlayers",
          "GetPlayersCount",
          "TeleportPlayerToPosition",
          "Rpc",
          "TeleportPlayerToPositionServer",
          "TeleportPlayerToPositionOwner",
          "Rpc",
          "TeleportPlayerToPositionOwner",
          "HasLocalPlayerSpawnedOnce",
          "GetOnDeath",
          "GetOnSpawn",
          "GetOnPossessed",
          "GetOnConnected",
          "GetOnDisconnected",
          "Log",
          "OnSpawnServer",
          "UpdatePlayerFaction",
          "UpdatePlayerGroup",
          "UpdatePlayerGroup",
          "UpdatePlayerFaction",
          "OnSpawnOwner",
          "OnPossessedServer",
          "OnPossessedOwner",
          "OnDeathServer",
          "OnDeathOwner",
          "OnConnectedServer",
          "Rpc",
          "OnConnectedOwner",
          "OnDisconnectedServer",
          "Rpc",
          "OnDisconnectedOwner",
          "StopPosessing",
          "OnLimitedChange",
          "StopPosessing",
          "OnEntityRegistered",
          "SetServerHandler",
          "EOnEditorOpen",
          "EOnEditorClose",
          "EOnEditorOpenServerCallback",
          "SetServerHandler",
          "StopPosessing",
          "EOnEditorCloseServer",
          "SetServerHandler",
          "EOnEditorInit",
          "EOnEditorInitServer",
          "EOnEditorDeleteServer",
          "StopPosessing"
        ]
      },
      {
        "class_name": "SCR_PrefabsCacheEditorComponent",
        "methods": [
          "IsPrefabInherited"
        ]
      },
      {
        "class_name": "SCR_PreviewEntityEditorComponent",
        "methods": [
          "SetPreviewTransform",
          "ResetPreviewTransform",
          "ResetPreviewTransform",
          "GetPreviewTransform",
          "GetPreviewTransformOrigin",
          "SetPreviewHeight",
          "ResetPreviewHeight",
          "GetPreviewHeightAboveTerrain",
          "GetPreviewHeightAboveSea",
          "GetLocalOffset",
          "SetVerticalMode",
          "GetVerticalMode",
          "GetVerticalModeReal",
          "SetVerticalSnap",
          "IsVerticalSnap",
          "SnapVertically",
          "IsSnappedVertically",
          "CanUnsnap",
          "GetSnapBaseHeight",
          "CanMoveInRoot",
          "ShowAsDisabled",
          "SetPreviewState",
          "SetLastPreviewState",
          "SetTarget",
          "CanInteractWith",
          "GetTarget",
          "GetTargetInteraction",
          "IsSnappedToTarget",
          "GetPreviewEntity",
          "GetActionContext",
          "IsEditing",
          "IsChange",
          "IsRotating",
          "IsFixedPosition",
          "GetSlotPrefab",
          "SetIsMovingVertically",
          "IsMovingVertically",
          "SetIsRotating",
          "IsUnderwater",
          "GetOnPreviewCreate",
          "GetOnPreviewDelete",
          "GetOnPreviewChange",
          "GetOnTargetChange",
          "GetOnWaitingPreviewCreate",
          "GetOnVerticalModeChange",
          "GetOnVerticalSnapChange",
          "InitTransform",
          "SetPreviewHeight",
          "CreatePreview",
          "DeletePreview",
          "SetPreviewHeight",
          "ResetPreviewTransform",
          "CreatePreview",
          "DeletePreview",
          "DeletePreview",
          "CreateWaitingPreview",
          "LerpTranslation",
          "LerpAngles",
          "OnUserSettingsChanged",
          "SetVerticalSnap",
          "SetVerticalMode",
          "EOnEditorDebug",
          "EOnFrame",
          "SetVerticalMode",
          "EOnEditorActivate",
          "EOnEditorDeactivate",
          "DeletePreview",
          "EOnEditorInit",
          "OnUserSettingsChanged",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_ServerInfoEditorComponent",
        "methods": [
          "GetOnReceive",
          "Transmit",
          "Rpc",
          "Receive",
          "EOnEditorActivateServer",
          "EOnEditorDeactivateServer"
        ]
      },
      {
        "class_name": "SCR_ShowHideInEditorComponent",
        "methods": [
          "OnEditorOpen",
          "OnEditorClosed",
          "OnEditorModeChanged",
          "OnEditorMenuVisibilityChanged",
          "ShowHideEntity",
          "EOnInit",
          "Init",
          "Init",
          "OnEditorOpen",
          "OnEditorClosed",
          "OnDelete",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_StatesEditorComponent",
        "methods": [
          "IsDefaultState",
          "GetState",
          "SetState",
          "UnsetState",
          "CanSet",
          "SetIsWaiting",
          "IsWaiting",
          "SetSafeDialog",
          "GetOnStateChange",
          "GetOnIsWaitingChange",
          "EOnEditorDebug"
        ]
      },
      {
        "class_name": "SCR_TestEditorComponent",
        "methods": [
          "EOnEditorInit",
          "PrintFormat",
          "EOnEditorDelete",
          "PrintFormat",
          "EOnEditorRequest",
          "PrintFormat",
          "EOnEditorOpen",
          "PrintFormat",
          "EOnEditorClose",
          "PrintFormat",
          "EOnEditorPreActivate",
          "PrintFormat",
          "EOnEditorActivate",
          "PrintFormat",
          "EOnEditorActivateAsync",
          "PrintFormat",
          "EOnEditorPostActivate",
          "PrintFormat",
          "EOnEditorDeactivate",
          "PrintFormat",
          "EOnEditorDeactivateAsync",
          "PrintFormat",
          "EOnEditorPostDeactivate",
          "PrintFormat",
          "EOnEditorDebug",
          "EOnEffect",
          "PrintFormat",
          "EOnEditorInitServer",
          "PrintFormat",
          "EOnEditorDeleteServer",
          "PrintFormat",
          "EOnEditorOpenServer",
          "PrintFormat",
          "EOnEditorOpenServerCallback",
          "PrintFormat",
          "EOnEditorCloseServer",
          "PrintFormat",
          "EOnEditorCloseServerCallback",
          "PrintFormat",
          "EOnEditorActivateServer",
          "PrintFormat",
          "EOnEditorDeactivateServer",
          "PrintFormat"
        ]
      },
      {
        "class_name": "SCR_ToolbarActionsEditorComponent",
        "methods": [
          "OnFilterChange",
          "ValidateSelection",
          "ActionCanBeShown",
          "ActionCanBePerformed",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_TransformingEditorComponent",
        "methods": [
          "StartEditing",
          "Clean",
          "Clean",
          "StartEditingServer",
          "Rpc",
          "StartEditingOwner",
          "CancelEditing",
          "ConfirmEditing",
          "SendNotification",
          "Rpc",
          "ConfirmEditingServer",
          "Rpc",
          "Rpc",
          "Clean",
          "ConfirmEditingOwner",
          "Clean",
          "CancelEditing",
          "Rpc",
          "Clean",
          "CancelEditingServer",
          "Clean",
          "IsEditing",
          "IsEditing",
          "GetOnTransformationRequest",
          "GetOnTransformationStart",
          "GetOnTransformationConfirm",
          "GetOnTransformationConfirmServer",
          "GetOnTransformationCancel",
          "CanBeTransformed",
          "SetCanBeTransformed",
          "Clean",
          "OnEntityUnregistered",
          "CancelEditing",
          "OnEntityVisibilityChanged",
          "OnEntityAccessKeyChanged",
          "EOnFrame",
          "StartEditing",
          "ConfirmEditing",
          "CancelEditing",
          "EOnEditorActivate",
          "EOnEditorDeactivate",
          "Clean"
        ]
      },
      {
        "class_name": "SCR_WorldEntityDelegateEditorComponent",
        "methods": [
          "PerformFirstAction",
          "Rpc",
          "PerformFirstActionServer",
          "PerformFirstActionBroadcast",
          "Rpc",
          "PerformFirstActionBroadcast",
          "EOnFrame",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_EditorVONControllerComponent",
        "methods": [
          "EOnEditorOpen",
          "OnEditorModeChange",
          "EOnEditorClose",
          "SetVONMenuDisabled",
          "OnEditorModeChange",
          "SetVONMenuDisabled",
          "SetVONMenuDisabled"
        ]
      },
      {
        "class_name": "SCR_BaseEditorServerComponent",
        "methods": [
          "GetInstance"
        ]
      },
      {
        "class_name": "SCR_EditorCameraDefaultsComponent",
        "methods": [
          "GetRandomPosition",
          "GetInstance",
          "_WB_OnContextMenu",
          "_WB_AfterWorldUpdate"
        ]
      },
      {
        "class_name": "SCR_CameraCoordinates",
        "methods": [
          "GetTransform"
        ]
      },
      {
        "class_name": "SCR_EditorLinkComponent",
        "methods": [
          "GetOnLinkedEntitiesSpawned",
          "IsSpawningIgnored",
          "IgnoreSpawning",
          "IsSpawned",
          "IsSpawned",
          "EOnInit",
          "SpawnComposition",
          "OnPostInit",
          "SetEventMask",
          "SpawnComposition"
        ]
      },
      {
        "class_name": "SCR_EditorLinkEntry",
        "methods": [
          "SetSpawnParams",
          "SCR_EditorLinkEntry"
        ]
      },
      {
        "class_name": "SCR_DelegateFactionManagerComponent",
        "methods": [
          "GetInstance",
          "GetFactionDelegates",
          "GetSortedFactionDelegates",
          "GetFactionDelegateCount",
          "GetPlayableFactionDelegates",
          "GetPlayableFactionDelegateCount",
          "GetFactionDelegate",
          "SetFactionDelegate",
          "OnFactionsInit"
        ]
      },
      {
        "class_name": "SCR_BaseCommandAction",
        "methods": [
          "FilterEntities",
          "FilterEntities",
          "StartPlacing",
          "Perform",
          "OnCurrentActionChanged",
          "Track",
          "OnCurrentActionChanged",
          "Untrack",
          "IsServer"
        ]
      },
      {
        "class_name": "SCR_SpawnPointBaseCommandAction",
        "methods": [
          "FilterEntities",
          "CanBeShown"
        ]
      },
      {
        "class_name": "SCR_TaskBaseCommandAction",
        "methods": [
          "FilterEntities",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_WaypointBaseCommandAction",
        "methods": [
          "FilterEntities",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CaptureBasesContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "PerformOn",
          "PerformOn",
          "PerformOn"
        ]
      },
      {
        "class_name": "SCR_SupplyBasesContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "PerformOn",
          "PerformOn",
          "PerformOn"
        ]
      },
      {
        "class_name": "SCR_AttachToParentContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CopyAttributesContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CopyIngameTimestampContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CopyPrefabNameContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CopyServerTimestampContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CopyWorldPositionContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CreateLayerContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CycleContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_DeleteContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_DetachContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_DisableSimulationContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_EnableSimulationContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_FillVehicleContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_FindInWorkshopContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_HideSelectionContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_LockLayerContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_MoveInFormationContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_MoveToFlightAltitudeContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_MoveToSeatPositionContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_PasteAttributesContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_PasteOnOriginalPositionContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_PatrolContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_RefuelContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_ReplaceWithContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SelectCrewContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SelectOccupantContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SelectPassengersContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SetAsLeaderContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_ShowSelectionContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SpawnPassengersContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SuppressContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_TransportContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_UnloadContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_UnlockLayerContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_AssetBrowserContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_BaseContextAction",
        "methods": [
          "IsServer"
        ]
      },
      {
        "class_name": "SCR_BleedCharacterContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_BombardContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingDeleteSelectedContextAction",
        "methods": [
          "GetParam",
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "CanBeDeleted",
          "SendNotification",
          "SendNotification"
        ]
      },
      {
        "class_name": "SCR_ChooseAndSpawnOccupantsContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CopyContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CreateLayerWithSelectionContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "OnEditableParentChanged",
          "OnSelectionChanged"
        ]
      },
      {
        "class_name": "SCR_CreateNewGroupContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CutContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_DefendContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_DeleteSelectedContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_DisembarkContextAction",
        "methods": [
          "IsCharacterInVehicle",
          "CanBeShown",
          "IsCharacterInVehicle",
          "CanBePerformed",
          "IsCharacterInVehicle",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_DoubleClickAction",
        "methods": [
          "CachePosition",
          "OnLMB",
          "GetMousePosVector",
          "Vector",
          "DidCursorMoveDuringDoubleClick",
          "AddShortcut",
          "RemoveShortcut"
        ]
      },
      {
        "class_name": "SCR_DuplicateContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_FindInContentBrowserContextAction",
        "methods": [
          "GetEntityLabels",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_FocusHereContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_FuelEntityContextAction",
        "methods": [
          "GetFuelManagerComponent",
          "IsAlive",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_GeneralContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_GetInContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_GetOutContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_HealEntitiesContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_KickPlayerContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_LayerContextAction",
        "methods": [
          "CanExit",
          "CanBeShown",
          "CanBePerformed",
          "CanExit",
          "Perform",
          "IsServer"
        ]
      },
      {
        "class_name": "SCR_LightningContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_MoveToRootContextAction",
        "methods": [
          "ParentInSelection",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_NeutralizeEntityContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_OpenAttributeWindowContextAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_OrientToSeaNormalContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_OrientToTerrainContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_PasteContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_PingContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_PlaceEntityContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform",
          "IsServer"
        ]
      },
      {
        "class_name": "SCR_RemoveWeaponContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_ResupplyContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SelectContextAction",
        "methods": [
          "IsEntityIsInView",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SelectedEntitiesContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "Perform",
          "PerformOwner",
          "PerformOwner",
          "CanBeShown",
          "CanBePerformed",
          "InitPerform",
          "Perform",
          "PerformOwner"
        ]
      },
      {
        "class_name": "SCR_SelectOccupantsContextAction",
        "methods": [
          "EntityIsOccupied",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SetFireVehicleContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SnapToTerrainContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SpawnCrewContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SpawnOccupantsContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "Perform",
          "Perform",
          "SpawnNextOccupantsInEntity",
          "SpawnNextOccupantsInEntity",
          "SetSpawningDone",
          "SpawnNextOccupantsInEntity",
          "SpawnNextOccupantsInEntity",
          "SpawnNextOccupantsInEntity",
          "SpawnNextOccupantsInEntity",
          "SetSpawningDone"
        ]
      },
      {
        "class_name": "SCR_SwitchCameraToContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SwitchToPlayerContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform",
          "IsServer"
        ]
      },
      {
        "class_name": "SCR_TakeControlContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform",
          "GetParam",
          "IsServer"
        ]
      },
      {
        "class_name": "SCR_TaskActivateContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_TaskContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_TeleportCameraContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_TeleportCameraToPlayerContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_TeleportPlayerHereContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_UserContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAction",
        "methods": [
          "IsEnabled",
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "PerformOwner",
          "GetInfo",
          "GetActionType",
          "GetActionGroup",
          "GetShortcut",
          "SetShortcutRef",
          "GetOrder",
          "IsServer",
          "GetParam",
          "OnShortcut",
          "AddShortcut",
          "RemoveShortcut",
          "CheckAndSetCooldown",
          "ActivateCooldown",
          "IsOnCooldown",
          "ActivateCooldown",
          "UpdateCooldown",
          "OnCooldownDone",
          "OnCooldownDone",
          "OnCooldownDone"
        ]
      },
      {
        "class_name": "SCR_EditorActionData",
        "methods": [
          "GetAction",
          "GetCanBePerformed",
          "SCR_EditorActionData"
        ]
      },
      {
        "class_name": "SCR_BaseEditorActionParameters",
        "methods": [
          "SCR_BaseEditorActionParameters",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject"
        ]
      },
      {
        "class_name": "SCR_ContextActionParameters",
        "methods": [
          "SCR_ContextActionParameters",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject"
        ]
      },
      {
        "class_name": "SCR_ToolbarActionParameters",
        "methods": [
          "SCR_ToolbarActionParameters",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject"
        ]
      },
      {
        "class_name": "SCR_RemoveBleedCharacterContextAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_AttachToEntityToolbarAction",
        "methods": [
          "GetToggled",
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "GetTargetEntity",
          "GetAttachCameraComponent"
        ]
      },
      {
        "class_name": "SCR_BasePlacingToolbarAction",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "PerformCancel",
          "PerformFinish",
          "GetPrefab"
        ]
      },
      {
        "class_name": "SCR_BaseToggleToolbarAction",
        "methods": [
          "GetOnToggleChange",
          "Toggle",
          "Track",
          "Untrack",
          "GetInfoToggled",
          "GetInfo"
        ]
      },
      {
        "class_name": "SCR_BrowserToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_CameraAttributesToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_DeleteDestroyedToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_EditorToolbarAction",
        "methods": [
          "OnInit",
          "OnExit"
        ]
      },
      {
        "class_name": "SCR_EndGameToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_FlashlightToolbarAction",
        "methods": [
          "OnFlashlightStateChanged",
          "InitFlashlight",
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "Track",
          "InitFlashlight",
          "Untrack"
        ]
      },
      {
        "class_name": "SCR_GlobalAttributesToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_HintSequenceToolbarAction",
        "methods": [
          "OnSequenceChange",
          "Toggle",
          "GetSequence",
          "IsServer",
          "CanBeShown",
          "Perform",
          "Track",
          "Untrack"
        ]
      },
      {
        "class_name": "SCR_InstantActionTest",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_LoadSessionToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_MapToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_NewSessionToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform",
          "SCR_NewSessionDialog"
        ]
      },
      {
        "class_name": "SCR_NewSessionDialog",
        "methods": [
          "OnConfirm",
          "SCR_NewSessionDialog"
        ]
      },
      {
        "class_name": "SCR_OpenWorldToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_PauseGameTimeToolbarAction",
        "methods": [
          "UpdateGameTimePause",
          "Toggle",
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "Track",
          "Toggle",
          "Untrack"
        ]
      },
      {
        "class_name": "SCR_PlacingFlagToolbarAction",
        "methods": [
          "OnPlacingFlagsChange",
          "Toggle",
          "Track",
          "Untrack",
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_ResetEditorComponentsToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_RewindToolbarAction",
        "methods": [
          "OnSaveChanged",
          "CanBeShown",
          "Perform",
          "SCR_RewindDialog",
          "OnInit",
          "OnExit"
        ]
      },
      {
        "class_name": "SCR_SaveSessionToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_SnapToTerrainToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_ToggleInterfaceToolbarAction",
        "methods": [
          "IsServer",
          "CanBeShown",
          "Perform"
        ]
      },
      {
        "class_name": "SCR_ToggleLocalEditorNightModeToolbarAction",
        "methods": [
          "OnLocalEditorNightModeEnabledChanged",
          "IsServer",
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "Track",
          "Untrack"
        ]
      },
      {
        "class_name": "SCR_ArsenalSaveTypeAttributeDynamicDescription",
        "methods": [
          "InitDynamicDescription",
          "IsValid",
          "GetDescriptionData"
        ]
      },
      {
        "class_name": "SCR_BaseAttributeDynamicDescription",
        "methods": [
          "InitDynamicDescription",
          "IsValid",
          "GetDescriptionData"
        ]
      },
      {
        "class_name": "SCR_BaseButtonAttributeDynamicDescription",
        "methods": [
          "HasPriorityOverButton"
        ]
      },
      {
        "class_name": "SCR_BasicDisabledAttributeDynamicDescription",
        "methods": [
          "IsValid"
        ]
      },
      {
        "class_name": "SCR_BoolAttributeDynamicDescription",
        "methods": [
          "InitDynamicDescription",
          "IsValid"
        ]
      },
      {
        "class_name": "SCR_CharacterBloodAttributeDynamicDescription",
        "methods": [
          "InitDynamicDescription",
          "IsUnconsciousnessEnabled",
          "IsValid"
        ]
      },
      {
        "class_name": "SCR_DateAttributeDynamicDescription",
        "methods": [
          "InitDynamicDescription",
          "IsValid",
          "GetDescriptionData"
        ]
      },
      {
        "class_name": "SCR_DayDurationAttributeDynamicDescription",
        "methods": [
          "InitDynamicDescription",
          "IsValid",
          "GetDescriptionData"
        ]
      },
      {
        "class_name": "SCR_GameOverTypeAttributeDynamicDescription",
        "methods": [
          "InitDynamicDescription",
          "IsValid",
          "GetDescriptionData"
        ]
      },
      {
        "class_name": "SCR_LoadoutSavingBlackListAttributeDynamicDescription",
        "methods": [
          "InitDynamicDescription",
          "IsValid"
        ]
      },
      {
        "class_name": "SCR_PlayableFactionKillingAttributeDynamicDescription",
        "methods": [
          "InitDynamicDescription",
          "GetDisabledFactions",
          "IsValid",
          "UpdateTotalToBeKilledPlayers",
          "GetDescriptionData",
          "UpdateTotalToBeKilledPlayers",
          "UpdateTotalToBeKilledPlayers",
          "GetDisabledFactions",
          "GetDisabledFactions"
        ]
      },
      {
        "class_name": "SCR_ValueAttributeDynamicDescription",
        "methods": [
          "InitDynamicDescription",
          "IsValid"
        ]
      },
      {
        "class_name": "SCR_AIFormationEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_AIGroupFactionEditorAttribute",
        "methods": [
          "ValidEntity",
          "GetFaction",
          "SetFaction"
        ]
      },
      {
        "class_name": "SCR_AiMovementSpeedEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_AiSkillEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_AiStanceEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_AmbientSoundToggleEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_ArsenalAmmunitionModeAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_ArsenalBaseEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_ArsenalEnabledTypesEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_ArsenalFactionEditorAttribute",
        "methods": [
          "ValidEntity",
          "GetFaction",
          "SetFaction"
        ]
      },
      {
        "class_name": "SCR_ArsenalGameModeTypeEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_ArsenalSaveTypeAttribute",
        "methods": [
          "ReadVariable",
          "GetArsenalSaveTypeInfoHolder",
          "GetEntries",
          "FillValues",
          "FillValues",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_ArsenalWeaponsEditorAttribute",
        "methods": [
          "UpdateInterlinkedVariables"
        ]
      },
      {
        "class_name": "SCR_AutomatedWeatherEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "WriteVariable",
          "PreviewVariable"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAttribute",
        "methods": [
          "ResetAttribute",
          "SetInitCalled",
          "ClearCopyVar",
          "SetIsOverridingValues",
          "SetConflictingAttributeWasReset",
          "GetUIInfo",
          "GetDynamicDescriptionArray",
          "IsServer",
          "GetCategoryConfig",
          "GetLayout",
          "BoolAllowDuplicate",
          "IsSerializable",
          "SetVariable",
          "ClearVar",
          "ClearCopyVar",
          "GetOnVarChanged",
          "Enable",
          "ToggleSelected",
          "SetAsSubAttribute",
          "GetInitCalled",
          "SetInitCalled",
          "GetIsMultiSelect",
          "SetIsMultiSelect",
          "GetHasConflictingValues",
          "SetHasConflictingValues",
          "SetIsOverridingValues",
          "GetIsOverridingValues",
          "IsEnabled",
          "GetIsSubAttribute",
          "GetOnToggleEnable",
          "GetOnToggleButtonSelected",
          "GetOnSetAsSubAttribute",
          "GetVariable",
          "GetCopyVariable",
          "GetVariableOrCopy",
          "CreateCopyVariable",
          "GetConflictingAttributeWasReset",
          "SetConflictingAttributeWasReset",
          "GetSnapshot",
          "GetOnExternalnChange",
          "StartEditing",
          "StopEditing",
          "PreviewVariable",
          "TelegraphChange",
          "SetConflictingAttributeWasReset",
          "SetIsOverridingValues",
          "CreateDefaultVariable",
          "ReadVariable",
          "WriteVariable",
          "PreviewVariable",
          "UpdateInterlinkedVariables",
          "GetEntries",
          "IsGameMode",
          "Initialize"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAttributeEntryText",
        "methods": [
          "GetText",
          "SCR_BaseEditorAttributeEntryText"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAttributeEntryUIInfo",
        "methods": [
          "GetInfo",
          "GetValue",
          "SCR_BaseEditorAttributeEntryUIInfo"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAttributeEntrySlider",
        "methods": [
          "GetSliderMinMaxStep",
          "SetSliderLabel",
          "GetSliderlabel",
          "GetText",
          "GetSliderValueFormating",
          "SCR_BaseEditorAttributeEntrySlider"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAttributeEntryTimeSlider",
        "methods": [
          "GetTimeSliderValues",
          "SCR_BaseEditorAttributeEntryTimeSlider"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAttributeFloatStringValues",
        "methods": [
          "SCR_BaseEditorAttributeFloatStringValues",
          "GetValueCount",
          "GetValuesEntry",
          "GetEntryFloatValue"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeEntryBool",
        "methods": [
          "SCR_EditorAttributeEntryBool",
          "SetBool",
          "SetBool",
          "GetBool"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeEntryStringArray",
        "methods": [
          "SCR_EditorAttributeEntryStringArray",
          "GetCount",
          "GetEntry"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeEntryIntArray",
        "methods": [
          "SCR_EditorAttributeEntryIntArray",
          "GetCount",
          "GetEntry"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeEntryInt",
        "methods": [
          "SCR_EditorAttributeEntryInt",
          "GetInt"
        ]
      },
      {
        "class_name": "SCR_EditorAttributePresetEntry",
        "methods": [
          "SCR_EditorAttributePresetEntry",
          "GetPresetValues"
        ]
      },
      {
        "class_name": "SCR_EditorAttributePresetMultiSelectEntry",
        "methods": [
          "SCR_EditorAttributePresetMultiSelectEntry",
          "SCR_EditorAttributePresetEntry",
          "GetUsesCustomFlags"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeEntryOverride",
        "methods": [
          "SCR_EditorAttributeEntryOverride",
          "GetToggleStateAndTypename"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAttributeDefaultFloatValue",
        "methods": [
          "SCR_BaseEditorAttributeDefaultFloatValue",
          "GetDefaultFloatValue"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAttributeCustomTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseFactionEditableAttribute",
        "methods": [
          "ReadVariable",
          "ValidEntity",
          "GetFaction",
          "SetFaction",
          "CreatePresets",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_BaseFloatValueHolderEditorAttribute",
        "methods": [
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeFloatStringValueHolder",
        "methods": [
          "SetIcon",
          "GetIcon",
          "SetName",
          "GetName",
          "SetDescription",
          "GetDescription",
          "SetFloatValue",
          "GetFloatValue",
          "SetWithUIInfo",
          "SetFloatValue",
          "SetWithUIInfo",
          "SetFloatValue"
        ]
      },
      {
        "class_name": "SCR_BaseMultiSelectPresetsEditorAttribute",
        "methods": [
          "AddOrderedState",
          "ResetLoopValues",
          "GetOrderedState",
          "ResetLoopValues",
          "GetStateVectorIndex",
          "AddFlag",
          "SetFlags",
          "GetFlags",
          "HasFlag",
          "ResetLoopValues",
          "GetFlagVector",
          "ReadVariable",
          "ResetLoopValues",
          "WriteVariable",
          "ResetLoopValues",
          "GetEntries",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_BasePlayerBudgetEditorAttribute",
        "methods": [
          "SetEditorManager",
          "ReadVariable",
          "SetEditorManager",
          "WriteVariable",
          "SetEditorManager",
          "GetBudgetType"
        ]
      },
      {
        "class_name": "SCR_BasePlayerBudgetEnableEditorAttribute",
        "methods": [
          "SetEditorManager",
          "ReadVariable",
          "SetEditorManager",
          "WriteVariable",
          "SetEditorManager",
          "GetBudgetType",
          "GetEnableNotification",
          "GetDisableNotification"
        ]
      },
      {
        "class_name": "SCR_BasePresetsEditorAttribute",
        "methods": [
          "CreatePresets",
          "GetEntries",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_BaseSupportStationEnableEditorAttribute",
        "methods": [
          "GetSupportStationType",
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_BaseValueListEditorAttribute",
        "methods": [
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeBaseValues",
        "methods": [
          "GetSliderValues",
          "GetMaxValue",
          "SetMaxValue"
        ]
      },
      {
        "class_name": "SCR_BloodEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_BuildingCostMultiplierEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_BuildingRefundMultiplierEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_CameraFilterEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "PreviewVariable",
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_CameraParticleEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "PreviewVariable",
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_CharBleedingEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_CharRegenEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_CharUnconsciousnessEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_DateEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "CreateYearArray",
          "UpdateInterlinkedVariables",
          "GetYearArray",
          "CreateYearArray",
          "CreateYearArray",
          "GetYearIndex",
          "CreateYearArray",
          "GetYearByIndex",
          "CreateYearArray",
          "GetEntries",
          "CreateYearArray",
          "PreviewVariable"
        ]
      },
      {
        "class_name": "SCR_DayDurationEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_DaytimeEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "WriteVariable",
          "PreviewVariable",
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_DeployableRadioTicketEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_EnableArsenalAttribute",
        "methods": [
          "UpdateInterlinkedVariables",
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_EnableDeployableSpawnPointsEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "UpdateInterlinkedVariables"
        ]
      },
      {
        "class_name": "SCR_EnableGlobalResourceTypeEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_EnableSpawnPointEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_EntityEnableResourceEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_EntityFactionEditorAttribute",
        "methods": [
          "ValidEntity",
          "GetFaction",
          "SetFaction"
        ]
      },
      {
        "class_name": "SCR_ExplosiveFuzeArmingAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_ExplosiveFuzeTimerAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_FactionLoadoutBaseEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_FuelEditorAttribute",
        "methods": [
          "GetFuelNodeFlags",
          "GetFuelNodeIgnoreFlags",
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_FuelProviderEditorAttribute",
        "methods": [
          "GetFuelNodeFlags",
          "GetFuelNodeIgnoreFlags"
        ]
      },
      {
        "class_name": "SCR_GameOverFactionsEditorAttribute",
        "methods": [
          "ReadVariable",
          "AddOrderedState",
          "WriteVariable",
          "GetEditorGameOverInfoArray",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_GameOverTypeEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "GetEditorGameOverInfoArray",
          "WriteVariable",
          "GetEditorGameOverInfoArray",
          "GetEditorGameOverInfoArray",
          "SetGameOverConfig",
          "CreatePresets",
          "GetEditorGameOverInfoArray",
          "IsSerializable",
          "GetEntries",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_GlobalCharBleedingEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_GlobalCharRegenEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_GlobalDeployableRadioSettingEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "UpdateInterlinkedVariables"
        ]
      },
      {
        "class_name": "SCR_GlobalFuelConsumptionScaleEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_GlobalUnconsciousnessEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_HealthCharacterEditorAttribute",
        "methods": [
          "ReadVariable"
        ]
      },
      {
        "class_name": "SCR_HealthEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_HealthOtherEditorAttribute",
        "methods": [
          "ReadVariable"
        ]
      },
      {
        "class_name": "SCR_HealthVehicleEditorAttribute",
        "methods": [
          "ReadVariable"
        ]
      },
      {
        "class_name": "SCR_KillfeedReceiveTypeEditorAttribute",
        "methods": [
          "ReadVariable",
          "GetEntries",
          "FillValues",
          "FillValues",
          "WriteVariable",
          "FillValues"
        ]
      },
      {
        "class_name": "SCR_KillfeedTypeEditorAttribute",
        "methods": [
          "ReadVariable",
          "GetEntries",
          "FillValues",
          "FillValues",
          "UpdateInterlinkedVariables",
          "WriteVariable",
          "FillValues"
        ]
      },
      {
        "class_name": "SCR_LensFlareEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "PreviewVariable"
        ]
      },
      {
        "class_name": "SCR_LoadoutBaseEditorAttribute",
        "methods": [
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_LoadoutSavingBlackListEditorAttribute",
        "methods": [
          "ReadVariable",
          "AddOrderedState",
          "UpdateInterlinkedVariables",
          "WriteVariable",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_LoadoutSavingClearOnChangeEditorAttribute",
        "methods": [
          "IsSerializable",
          "ReadVariable",
          "UpdateInterlinkedVariables"
        ]
      },
      {
        "class_name": "SCR_LoadoutSupplyCostMultiplierEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_LogoOverlayEditorAttribute",
        "methods": [
          "UpdateInterlinkedVariables"
        ]
      },
      {
        "class_name": "SCR_MenuOverlayEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "PreviewVariable",
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_ModesEditorAttribute",
        "methods": [
          "ReadVariable",
          "SetFlags",
          "WriteVariable",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_ModeOverrideEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "UpdateInterlinkedVariables"
        ]
      },
      {
        "class_name": "SCR_NightModeEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_OverrideCharacterMedicalEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_PlayableFactionEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_PlayableFactionsEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_PlayerBudgetAIEditorAttribute",
        "methods": [
          "GetBudgetType"
        ]
      },
      {
        "class_name": "SCR_PlayerBudgetAIEnableEditorAttribute",
        "methods": [
          "GetBudgetType",
          "GetEnableNotification",
          "GetDisableNotification"
        ]
      },
      {
        "class_name": "SCR_PlayerBudgetPropEditorAttribute",
        "methods": [
          "GetBudgetType"
        ]
      },
      {
        "class_name": "SCR_PlayerBudgetPropEnableEditorAttribute",
        "methods": [
          "GetBudgetType",
          "GetEnableNotification",
          "GetDisableNotification"
        ]
      },
      {
        "class_name": "SCR_PlayerBudgetSystemEditorAttribute",
        "methods": [
          "GetBudgetType"
        ]
      },
      {
        "class_name": "SCR_PlayerBudgetSystemEnableEditorAttribute",
        "methods": [
          "GetBudgetType",
          "GetEnableNotification",
          "GetDisableNotification"
        ]
      },
      {
        "class_name": "SCR_PlayerBudgetVehicleEditorAttribute",
        "methods": [
          "GetBudgetType"
        ]
      },
      {
        "class_name": "SCR_PlayerBudgetVehicleEnableEditorAttribute",
        "methods": [
          "GetBudgetType",
          "GetEnableNotification",
          "GetDisableNotification"
        ]
      },
      {
        "class_name": "SCR_PlayerModesEditorAttribute",
        "methods": [
          "GetEditorManager",
          "ReadVariable",
          "SetFlags",
          "UpdateInterlinkedVariables",
          "WriteVariable",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_PositionEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_RespawnEnabledEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_RespawnTicketsEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_RespawnTimeEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_RotationEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetEntries"
        ]
      },
      {
        "class_name": "SetAIBaseBudgetEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetProviderComponent"
        ]
      },
      {
        "class_name": "SetBuildingProgressEditorAttribute",
        "methods": [
          "ReadVariable",
          "GetLayoutComponent",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_SetEnableDamageCharacterEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables"
        ]
      },
      {
        "class_name": "SCR_SetEnableDamageEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_SetEnableDamageVehicleEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables"
        ]
      },
      {
        "class_name": "SCR_SetEnableDamageOtherEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables"
        ]
      },
      {
        "class_name": "SetPropBaseBudgetEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetProviderComponent"
        ]
      },
      {
        "class_name": "SCR_SetSuppliesBaseEditorAttribute",
        "methods": [
          "ReadVariable",
          "CanDisplay",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_SetSuppliesVehicleEditorAttribute",
        "methods": [
          "CanDisplay"
        ]
      },
      {
        "class_name": "SCR_SetTaskCompletionAutomaticEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_SimulateAndShowToggle",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_SnapYPositionEditorAttribute",
        "methods": [
          "ReadVariable",
          "GetOnChanged",
          "PreviewVariable"
        ]
      },
      {
        "class_name": "SCR_SpawnAtPlayersEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_SpawnAtRadioVehicleAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_SupplyContainerDecayAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetResourceContainer"
        ]
      },
      {
        "class_name": "SCR_SupplyContainerValueAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetContainer"
        ]
      },
      {
        "class_name": "SCR_SupportStationEnableFuelEditorAttribute",
        "methods": [
          "GetSupportStationType"
        ]
      },
      {
        "class_name": "SCR_SupportStationEnableHealEditorAttribute",
        "methods": [
          "GetSupportStationType"
        ]
      },
      {
        "class_name": "SCR_SupportStationEnableRepairEditorAttribute",
        "methods": [
          "GetSupportStationType"
        ]
      },
      {
        "class_name": "SCR_SupportStationEnableResupplyEditorAttribute",
        "methods": [
          "GetSupportStationType"
        ]
      },
      {
        "class_name": "SCR_TaskTextBaseEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetEntries",
          "IsValidTaskType"
        ]
      },
      {
        "class_name": "SCR_TaskTextEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_TestEditorAttribute",
        "methods": [
          "ReadVariable",
          "CreateDefaultVariable",
          "WriteVariable",
          "PreviewVariable",
          "SCR_TestEditorAttribute"
        ]
      },
      {
        "class_name": "SCR_TimeAdvancementEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_TimePresetsEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "CreatePresets",
          "WriteVariable",
          "CreatePresets",
          "PreviewVariable"
        ]
      },
      {
        "class_name": "SCR_ToggleDamageEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_ValidTypeBaseEditorAttribute",
        "methods": [
          "IsValidEntityType"
        ]
      },
      {
        "class_name": "SCR_ValidTypeBaseValueListEditorAttribute",
        "methods": [
          "IsValidEntityType"
        ]
      },
      {
        "class_name": "SCR_WeatherInstantEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "PreviewVariable",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_WeatherInstantTransitionTimeEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetEntries"
        ]
      },
      {
        "class_name": "SCR_WeatherUseAdvancedEditorAttribute",
        "methods": [
          "UpdateInterlinkedVariables",
          "WriteVariable"
        ]
      },
      {
        "class_name": "SCR_WindAutomaticEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "WriteVariable",
          "PreviewVariable"
        ]
      },
      {
        "class_name": "SCR_WindDirectionEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "CreatePresets",
          "PreviewVariable",
          "GetEntries",
          "CreatePresets"
        ]
      },
      {
        "class_name": "SCR_WindOverrideEditorAttribute",
        "methods": [
          "ReadVariable",
          "UpdateInterlinkedVariables",
          "WriteVariable",
          "PreviewVariable"
        ]
      },
      {
        "class_name": "SCR_WindSpeedEditorAttribute",
        "methods": [
          "ReadVariable",
          "WriteVariable",
          "GetEntries",
          "PreviewVariable"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAttributeVar",
        "methods": [
          "SetInt",
          "GetInt",
          "SetFloat",
          "GetFloat",
          "SetBool",
          "GetBool",
          "SetVector",
          "GetVector",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject",
          "Extract",
          "CreateInt",
          "CreateFloat",
          "CreateBool",
          "CreateVector"
        ]
      },
      {
        "class_name": "SCR_BoolEditorAttributeVar",
        "methods": [
          "GetValue",
          "SetValue",
          "PropCompareScripted",
          "ExtractScripted",
          "InjectScripted",
          "SCR_BoolEditorAttributeVar"
        ]
      },
      {
        "class_name": "SCR_FloatEditorAttributeVar",
        "methods": [
          "GetValue",
          "SetValue",
          "PropCompareScripted",
          "ExtractScripted",
          "InjectScripted",
          "SCR_FloatEditorAttributeVar"
        ]
      },
      {
        "class_name": "SCR_IntEditorAttributeVar",
        "methods": [
          "GetValue",
          "SetValue",
          "PropCompareScripted",
          "ExtractScripted",
          "InjectScripted",
          "SCR_IntEditorAttributeVar"
        ]
      },
      {
        "class_name": "SCR_EditorPlaceCharacterAvailableActionCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_EditableEntityStruct",
        "methods": [
          "SerializeEntities",
          "SerializeEntity",
          "SerializeEntity",
          "DeserializeEntities",
          "RequestLocalPlayerSpawn",
          "ClearEntities",
          "LogEntities",
          "OnExpand",
          "OnPack",
          "OnSuccess",
          "OnError",
          "SCR_EditableEntityStruct"
        ]
      },
      {
        "class_name": "SCR_EditableFactionStruct",
        "methods": [
          "SerializeFactions",
          "SerializeFaction",
          "SerializeFaction",
          "DeserializeFactions",
          "LogFactions",
          "PrintFormat",
          "SCR_EditableFactionStruct"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeStruct",
        "methods": [
          "SerializeAttributes",
          "DeserializeAttributes",
          "LogAttributes",
          "SCR_EditorAttributeStruct"
        ]
      },
      {
        "class_name": "SCR_EditorMetaStruct",
        "methods": [
          "Serialize",
          "Deserialize",
          "OnEditorManagerCreated",
          "ClearCache",
          "OnEditorManagerCreated",
          "OnEditorManagerCreatedDelayed",
          "OnCameraCreated",
          "OnCameraCreated",
          "Log",
          "SCR_EditorMetaStruct"
        ]
      },
      {
        "class_name": "SCR_EditorStruct",
        "methods": [
          "Log",
          "Serialize",
          "Deserialize",
          "ClearCache",
          "ResetEditor",
          "SCR_EditorStruct"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCache",
        "methods": [
          "GetPrefab",
          "SetPrefab",
          "GetExtendedEntities",
          "SetExtendedEntities"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCampaignBuildingLabelSetting",
        "methods": [
          "GetLinkedConflictServicePoint"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCampaignBuildingModeLabelData",
        "methods": [
          "GetEntityLabel",
          "GetUIInfo",
          "GetServicePointType",
          "SCR_EditableEntityCampaignBuildingModeLabelData"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCoreBudgetSetting",
        "methods": [
          "GetBudgetType",
          "GetMinBudgetCost",
          "GetCurrentBudget",
          "GetInfo",
          "GetReservedBudget",
          "ReserveBudget",
          "UnreserveBudget",
          "SetCurrentBudget",
          "AddToBudget",
          "AddToBudget",
          "SubtractFromBudget",
          "SubtractFromBudget",
          "SetBudgetComponent",
          "SCR_EditableEntityCoreBudgetSetting"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCoreLabelGroupSetting",
        "methods": [
          "GetInfo",
          "GetOrder",
          "GetLabelGroupType",
          "GetConditionalLabelType",
          "GetRequiresAllLabelsMatch"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCoreLabelSetting",
        "methods": [
          "GetInfo",
          "GetOrder",
          "GetLabelType",
          "GetLabelGroupType",
          "GetFilterEnabled",
          "IsValid",
          "InitalizeGrouplessLabel",
          "CreateGrouplessLabel"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCoreLabelSettingExtended",
        "methods": [
          "IsValid"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCoreTypeInteraction",
        "methods": [
          "GetType",
          "GetInteraction"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCoreTypeInteractionTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCoreTypeSetting",
        "methods": [
          "GetType",
          "GetMaxDrawDistance",
          "GetCanBePlayer",
          "GetInteraction",
          "GetInteraction",
          "SCR_EditableEntityCoreTypeSetting"
        ]
      },
      {
        "class_name": "SCR_EntityBudgetValue",
        "methods": [
          "GetBudgetType",
          "GetBudgetValue",
          "SetBudgetValue",
          "AddBudgetValue",
          "MergeBudgetCosts",
          "AddBudgetValueToBudgetArray",
          "SCR_EntityBudgetValue"
        ]
      },
      {
        "class_name": "SCR_BaseEditableEntityFilter",
        "methods": [
          "SCR_BaseEditableEntityFilter_OnChange",
          "InitVariables",
          "GetInstance",
          "GetFirstEntity",
          "GetEnititiesStatic",
          "GetState",
          "GetStateName",
          "GetPredecessorState",
          "GetPredecessor",
          "GetAutoAdd",
          "GetEntities",
          "InsertChildren",
          "GetEntitiesCount",
          "IsEmpty",
          "GetFirstEntity",
          "Contains",
          "GetEntitiesPointer",
          "GetParentBelowCurrentLayer",
          "GetManager",
          "GetCore",
          "InitEntities",
          "GetEntities",
          "Add",
          "OnChanged",
          "OnChanged",
          "Add",
          "Add",
          "Add",
          "Remove",
          "Remove",
          "Remove",
          "Toggle",
          "Add",
          "Remove",
          "Toggle",
          "Set",
          "Replace",
          "Replace",
          "Clear",
          "Replace",
          "Set",
          "Set",
          "Set",
          "Add",
          "Remove",
          "Set",
          "InsertChildren",
          "InsertChildren",
          "SetFromPredecessor",
          "Replace",
          "Validate",
          "Clear",
          "Remove",
          "Copy",
          "Replace",
          "InsertChildren",
          "AddToArray",
          "RemoveFromArray",
          "Log",
          "GetEntitiesPointer",
          "OnFrameBase",
          "EOnEditorFrame",
          "EOnEditorActivate",
          "InitEntities",
          "OnDeactivateBase",
          "EOnEditorDeactivate",
          "CanAdd",
          "EOnEditorActivate",
          "EOnEditorDeactivate",
          "EOnEditorFrame"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingEditableEntityFilter",
        "methods": [
          "GetComposition",
          "IsCompositionOwned",
          "CanAddCharacter",
          "IsInBaseArea",
          "CanAddWaypoint",
          "IsInBaseArea",
          "CanAdd",
          "IsInBaseArea",
          "OnEntityRefreshed",
          "Add",
          "GetProviderComponent"
        ]
      },
      {
        "class_name": "SCR_CompatibleSlotEditableEntityFilter",
        "methods": [
          "OnPreviewCreate",
          "SetFromPredecessor",
          "OnPreviewDelete",
          "Clear",
          "CanAdd",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_ControlModeEditableEntityFilter",
        "methods": [
          "OnControlModeChanged",
          "Validate",
          "CanAdd",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_CurrentLayerEditableEntityFilter",
        "methods": [
          "OnCurrentLayerChange",
          "Replace",
          "CanAdd",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_DestroyedEditableEntityFilter",
        "methods": [
          "OnDestroyed",
          "Add",
          "OnPredecessorChanged",
          "CanAdd",
          "OnChanged",
          "EOnEditorActivate",
          "EOnEditorDeactivate",
          "SCR_DestroyedEditableEntityFilter"
        ]
      },
      {
        "class_name": "SCR_DummyEditableEntityFilter",
        "methods": [
          "OnDummyChanged",
          "GetEntities",
          "GetEntitiesPointer",
          "GetEntitiesCount",
          "GetFirstEntity",
          "Contains",
          "InitEntities",
          "EOnEditorActivate",
          "OnDummyChanged",
          "EOnEditorDeactivate",
          "OnDummyChanged"
        ]
      },
      {
        "class_name": "SCR_EditedEditableEntityFilter",
        "methods": [
          "OnTransformationStart",
          "Replace",
          "OnTransformationEnd",
          "Clear",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_EntityTypesEditableEntityFilter",
        "methods": [
          "CanAdd"
        ]
      },
      {
        "class_name": "SCR_FriendlyEditableEntityFilter",
        "methods": [
          "CachePlayerFaction",
          "IsFriendly",
          "OnLimitedChange",
          "SetFromPredecessor",
          "OnSpawn",
          "SetFromPredecessor",
          "CanAdd",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_HasFactionEditableEntityFilter",
        "methods": [
          "CanAdd"
        ]
      },
      {
        "class_name": "SCR_HighlightedEditableEntityFilter",
        "methods": [
          "OnHighlightAdded",
          "Add",
          "OnHighlightRemoved",
          "Remove",
          "CanAdd",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_HoverEditableEntityFilter",
        "methods": [
          "UpdateEntityUnderCursor",
          "Replace",
          "SetEntityUnderCursor",
          "GetEntityUnderCursor",
          "GetFirstEntity",
          "GetInteractiveEntityUnderCursor",
          "GetEntityUnderCursorCandidate",
          "SetEntityUnderCursorEnabled",
          "SetEntityUnderCursor",
          "UpdateEntityUnderCursor",
          "GetEntityUnderCursorEnabled",
          "IsDelegate",
          "EOnEditorFrame",
          "UpdateEntityUnderCursor",
          "EOnEditorActivate"
        ]
      },
      {
        "class_name": "SCR_LayerEditableEntityFilter",
        "methods": [
          "OnCurrentLayerChange",
          "Replace",
          "CanAdd",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_PingedEditableEntityFilter",
        "methods": [
          "OnPingEntityRegister",
          "Add",
          "OnPingEntityUnregister",
          "Remove",
          "EOnEditorActivate",
          "InitEntities",
          "OnPingEntityRegister",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_PlayerDelegateEditableEntityFilter",
        "methods": [
          "AddDelayed",
          "Add",
          "CanAdd"
        ]
      },
      {
        "class_name": "SCR_PlayerEditableEntityFilter",
        "methods": [
          "OnPlayerEnterCompartment",
          "Add",
          "OnPlayerExitCompartment",
          "ProcessPlayerExitingCompartment",
          "Remove",
          "OnSpawn",
          "Set",
          "OnDeath",
          "Remove",
          "OnPossessed",
          "Add",
          "Remove",
          "CanAdd",
          "GetVehiclePlayer",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_PreviewEditableEntityFilter",
        "methods": [
          "GetPreviewEntities",
          "GetPreviewEntities",
          "OnPreviewCreate",
          "GetPreviewEntities",
          "Add",
          "CanAdd",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_RenderedEditableEntityFilter",
        "methods": [
          "GetCameraDisCoef",
          "CacheCameraPos",
          "OnEntityRefreshed",
          "Add",
          "EOnEditorFrame",
          "CacheCameraPos",
          "Add",
          "Remove",
          "IsNear",
          "EOnEditorActivate",
          "CacheCameraPos",
          "EOnEditorDeactivate",
          "CanAdd",
          "IsNear",
          "SCR_RenderedEditableEntityFilter"
        ]
      },
      {
        "class_name": "SCR_SelectedEditableEntityFilter",
        "methods": [
          "SaveSelection",
          "LoadSelection",
          "Replace",
          "TeleportSelection",
          "GetSelection",
          "OnParentEntityChanged",
          "Add",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_UnlockedEditableEntityFilter",
        "methods": [
          "OnEntityAccessKeyChanged",
          "Toggle",
          "OnEditorAccessKeyChanged",
          "Toggle",
          "CanAdd",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_VisibleEditableEntityFilter",
        "methods": [
          "OnEntityVisibilityChanged",
          "Toggle",
          "OnVisiblityChange",
          "SetFromPredecessor",
          "Clear",
          "CanAdd",
          "EOnEditorActivate",
          "EOnEditorDeactivate"
        ]
      },
      {
        "class_name": "SCR_EntitiesEditorUIRule",
        "methods": [
          "GetLayout",
          "GetStates",
          "GetStatesArray",
          "IsInteractive",
          "IsDependent",
          "SCR_EntitiesEditorUIRule"
        ]
      },
      {
        "class_name": "SCR_EditableEntityUIRuleTracker",
        "methods": [
          "GetRule",
          "HasState",
          "AddEntity",
          "OnChanged",
          "SCR_EditableEntityUIRuleTracker",
          "OnChanged"
        ]
      },
      {
        "class_name": "SCR_EditableEntityUIConfig",
        "methods": [
          "GetConfig"
        ]
      },
      {
        "class_name": "SCR_EntitiesEditorUIPrefab",
        "methods": [
          "GetType",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_EntityEditorEffect",
        "methods": [
          "GetEntity",
          "EOnActivate"
        ]
      },
      {
        "class_name": "SCR_BaseEditorEffect",
        "methods": [
          "Activate",
          "EOnActivate"
        ]
      },
      {
        "class_name": "SCR_ParticleEditorEffect",
        "methods": [
          "EOnActivate",
          "spawnParams",
          "spawnParams"
        ]
      },
      {
        "class_name": "SCR_SoundEditorEffect",
        "methods": [
          "EOnActivate"
        ]
      },
      {
        "class_name": "SCR_UIEditorEffect",
        "methods": [
          "EOnActivate"
        ]
      },
      {
        "class_name": "SCR_EditableWaypointInteraction",
        "methods": [
          "CanSetParent"
        ]
      },
      {
        "class_name": "SCR_EditableAttachableEntityInteraction",
        "methods": [
          "CanSetParent",
          "SCR_EditableAttachableEntityInteraction"
        ]
      },
      {
        "class_name": "SCR_EditableCharacterInteraction",
        "methods": [
          "CanSetParent"
        ]
      },
      {
        "class_name": "SCR_EditableEntityInteraction",
        "methods": [
          "CanSetParent",
          "CanSetParent",
          "CanSetParent",
          "CanSetParent",
          "CanSetParent",
          "CanSetParent",
          "CanCreateParentFor",
          "CanSetParent"
        ]
      },
      {
        "class_name": "SCR_EditableGroupInteraction",
        "methods": [
          "CanSetParent"
        ]
      },
      {
        "class_name": "SCR_PlaceableEntitiesMeta",
        "methods": [
          "GetDisplayName"
        ]
      },
      {
        "class_name": "SCR_PlaceableEntitiesRegistry",
        "methods": [
          "GetAddon",
          "GetSourceDirectory",
          "IsExposed",
          "SetPrefabs",
          "AddPrefabs"
        ]
      },
      {
        "class_name": "SCR_PlaceableEntitiesRegistryTitleField",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_PlaceableEntitiesRegistryFromCatalog",
        "methods": [
          "Init",
          "ProcessCatalog",
          "ProcessCatalog",
          "AddPrefabs",
          "SCR_PlaceableEntitiesRegistryFromCatalog",
          "Init"
        ]
      },
      {
        "class_name": "BaseContainerCatalogPlacableEntitiesTitleField",
        "methods": [
          "BaseContainerCatalogPlacableEntitiesTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeCategory",
        "methods": [
          "GetInfo",
          "GetPriority",
          "GetIsGlobalAttributeCategory"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeList",
        "methods": [
          "GetAttribute",
          "GetAttributesCount",
          "FindAttribute",
          "InsertAllAttributes"
        ]
      },
      {
        "class_name": "SCR_EditorContentBrowserDisplayConfig",
        "methods": [
          "GetHeader",
          "CanShowLabelGroup",
          "CanShowLabel",
          "GetAlwaysActiveLabels",
          "GetWhiteListeLabels",
          "GetWhiteListeLabelGroups",
          "IsAlwaysActiveLabel",
          "CanShowLabelInActiveFilters",
          "GetSaveContentBrowserState",
          "SCR_EditorContentBrowserDisplayConfig"
        ]
      },
      {
        "class_name": "SCR_EditorContentBrowserDisplayGroupLabel",
        "methods": [
          "GetGroupLabel",
          "GetEnabled",
          "SCR_EditorContentBrowserDisplayGroupLabel"
        ]
      },
      {
        "class_name": "SCR_EditorContentBrowserDisplayLabel",
        "methods": [
          "GetLabel",
          "IsEnabled",
          "SCR_EditorContentBrowserDisplayLabel"
        ]
      },
      {
        "class_name": "SCR_EditorContentBrowserSaveStateData",
        "methods": [
          "GetSavedLabelCount",
          "SetLabels",
          "AddRemoveLabel",
          "GetLabels",
          "ContainsLabel",
          "SetPageIndex",
          "GetPageIndex",
          "SetSearchString",
          "GetSearchString",
          "HasSearchSaved"
        ]
      },
      {
        "class_name": "SCR_EditorContentBrowserSaveStateDataUI",
        "methods": [
          "CanBeShown",
          "GetUIInfo",
          "GetTabInfo"
        ]
      },
      {
        "class_name": "SCR_EditorContentBrowserSaveStateDataUIHQ",
        "methods": [
          "CanBeShown"
        ]
      },
      {
        "class_name": "SCR_EditorPreviewParams",
        "methods": [
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject",
          "GetWorldTransform",
          "Deserialize",
          "SetTarget",
          "CreateParams",
          "CreateParamsFromPreview"
        ]
      },
      {
        "class_name": "SCR_BaseTextureResource",
        "methods": [
          "ApplyTo"
        ]
      },
      {
        "class_name": "SCR_ImageSetResource",
        "methods": [
          "ApplyTo"
        ]
      },
      {
        "class_name": "SCR_TextureResource",
        "methods": [
          "ApplyTo"
        ]
      },
      {
        "class_name": "SCR_EntityTooltipConfig",
        "methods": [
          "GetTooltipData"
        ]
      },
      {
        "class_name": "SCR_AIGroupUIInfo",
        "methods": [
          "SetGroupFlag",
          "GetGroupFlag",
          "SetFlagIsFromImageSet",
          "GetFlagIsFromImageSet"
        ]
      },
      {
        "class_name": "SCR_ArsenalSaveTypeUIInfo",
        "methods": [
          "GetPlayerActionDisplayName",
          "CopyFrom"
        ]
      },
      {
        "class_name": "SCR_BaseSupplyItemHintUIInfo",
        "methods": [
          "CanBeShown",
          "GetResourceComponent"
        ]
      },
      {
        "class_name": "SCR_BlockUIInfo",
        "methods": [
          "HasDescription",
          "GetDescription",
          "GetUnformattedDescriptionBlockName",
          "SetDescriptionBlockName"
        ]
      },
      {
        "class_name": "SCR_SubBlockUIName",
        "methods": [
          "IsInline"
        ]
      },
      {
        "class_name": "SCR_BulletPointBlockUIName",
        "methods": [
          "GetName"
        ]
      },
      {
        "class_name": "SCR_TipBlockUIName",
        "methods": [
          "GetName"
        ]
      },
      {
        "class_name": "SCR_DeviceBlockUIName",
        "methods": [
          "HasName"
        ]
      },
      {
        "class_name": "SCR_ActionBlockUIName",
        "methods": [
          "GetName"
        ]
      },
      {
        "class_name": "SCR_KeyBlockUIName",
        "methods": [
          "GetName"
        ]
      },
      {
        "class_name": "SCR_SimpleTagBlockUIName",
        "methods": [
          "GetName",
          "IsInline"
        ]
      },
      {
        "class_name": "SCR_ImageBlockUIName",
        "methods": [
          "GetName"
        ]
      },
      {
        "class_name": "SCR_TagBlockUIName",
        "methods": [
          "GetName"
        ]
      },
      {
        "class_name": "SCR_BaseTagBlockEntry",
        "methods": [
          "GetStart",
          "GetEnd"
        ]
      },
      {
        "class_name": "SCR_CustomTagBlockEntry",
        "methods": [
          "GetStart",
          "GetEnd"
        ]
      },
      {
        "class_name": "SCR_BoldTagBlockEntry",
        "methods": [
          "GetStart",
          "GetEnd"
        ]
      },
      {
        "class_name": "SCR_ItalicTagBlockEntry",
        "methods": [
          "GetStart",
          "GetEnd"
        ]
      },
      {
        "class_name": "SCR_HeaderTagBlockEntry",
        "methods": [
          "GetStart",
          "GetEnd"
        ]
      },
      {
        "class_name": "SCR_SubHeaderTagBlockEntry",
        "methods": [
          "GetStart",
          "GetEnd"
        ]
      },
      {
        "class_name": "SCR_ColoredTextNotificationUIInfo",
        "methods": [
          "GetNotificationTextColor"
        ]
      },
      {
        "class_name": "SCR_ColorUIInfo",
        "methods": [
          "GetColor",
          "CopyFrom"
        ]
      },
      {
        "class_name": "SCR_DamageStateUIInfo",
        "methods": [
          "GetColor",
          "GetBackgroundColor",
          "GetOutlineColor",
          "GetBackgroundColorRegen",
          "GetOutlineColorRegen",
          "GetOutlineImage",
          "GetBackgroundImage",
          "GetOutlineQuadName",
          "GetBackgroundQuadName",
          "SetImageTo",
          "SetIconTo",
          "GetIconSetName",
          "GetIconSetName"
        ]
      },
      {
        "class_name": "SCR_EditableDescriptorUIInfo",
        "methods": [
          "GetLocationName",
          "SetLocationName",
          "SetLocationName",
          "EncodeName",
          "GetName",
          "GetDescription",
          "SetNameTo",
          "SetDescriptionTo",
          "CopyFrom",
          "SCR_EditableDescriptorUIInfo"
        ]
      },
      {
        "class_name": "SCR_EditableEntityUIInfo",
        "methods": [
          "GetName",
          "IsFullBackgroundAssetCard",
          "GetImage",
          "GetEntityTypex",
          "GetFactionKey",
          "GetFaction",
          "GetEntityLabels",
          "HasEntityLabel",
          "GetEntityBudgetCost",
          "GetEntityAndChildrenBudgetCost",
          "GetEntityChildrenBudgetCost",
          "GetSlotPrefab",
          "GetEntityType",
          "HasEntityFlag",
          "SetAssetImageTo",
          "InitFromSource",
          "CopyFrom"
        ]
      },
      {
        "class_name": "SCR_EditableGroupUIInfo",
        "methods": [
          "GetMilitarySymbol",
          "SetInstance",
          "GetName",
          "GetEntityBudgetCost",
          "GetGroupBudgetCost",
          "CopyFrom"
        ]
      },
      {
        "class_name": "SCR_EditableLinkedContentBrowserUIInfo",
        "methods": [
          "GetContentBrowserDisplayConfig"
        ]
      },
      {
        "class_name": "SCR_EditableVehicleUIInfo",
        "methods": [
          "GetEditorPlaceAsOneGroup",
          "GetOccupantFillCompartmentTypes",
          "CanFillWithCrew",
          "CanFillWithGivenTypes",
          "CanFillWithPassengers",
          "CanFillWithGivenTypes",
          "CanFillWithGivenTypes",
          "GetFillBudgetCostsOfCrew",
          "GetFillBudgetCostsOfPassengers"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeUIInfo",
        "methods": [
          "CopyFromEditorAttributeUIInfo",
          "CopyFrom",
          "CopyFrom",
          "GetDescriptionIconColor"
        ]
      },
      {
        "class_name": "SCR_EditorModeUIInfo",
        "methods": [
          "GetModeColor",
          "GetOrder"
        ]
      },
      {
        "class_name": "SCR_FormatUIInfo",
        "methods": [
          "SetNameTo",
          "SetDescriptionTo",
          "Param"
        ]
      },
      {
        "class_name": "SCR_BaseFormatParam",
        "methods": [
          "GetParam"
        ]
      },
      {
        "class_name": "SCR_ActionFormatParam",
        "methods": [
          "GetParam"
        ]
      },
      {
        "class_name": "SCR_ImageSetFormatParam",
        "methods": [
          "GetParam"
        ]
      },
      {
        "class_name": "SCR_FuelItemHintsUIInfo",
        "methods": [
          "CanBeShown",
          "GetItemHintName"
        ]
      },
      {
        "class_name": "SCR_HintUIInfo",
        "methods": [
          "GetType",
          "GetShowLimit",
          "IsTimerVisible",
          "GetPriority",
          "GetDuration",
          "GetTimeStarted",
          "SetTimeStamp",
          "GetHighlightWidgetNames",
          "GetFieldManualLink",
          "InitSequence",
          "GetSequencePage",
          "GetSequenceCount",
          "IsInSequence",
          "CreateInfo",
          "SetDescriptionTo"
        ]
      },
      {
        "class_name": "SCR_InputActionUIInfo",
        "methods": [
          "GetActionName"
        ]
      },
      {
        "class_name": "SCR_InventoryItemHintUIInfo",
        "methods": [
          "CanBeShown",
          "SetIconTo",
          "SetItemHintNameTo",
          "GetItemHintName",
          "GetName"
        ]
      },
      {
        "class_name": "SCR_ItemHintUIInfo",
        "methods": [
          "GetHintResource",
          "GetImageSet",
          "GetImageName",
          "GetHintText"
        ]
      },
      {
        "class_name": "SCR_MoonPhaseUIInfo",
        "methods": [
          "GetSimplifiedName",
          "SetMoonphaseImageRotation",
          "GetMoonphaseImageRotation"
        ]
      },
      {
        "class_name": "SCR_UINotificationInfo",
        "methods": [
          "GetNotificationColor",
          "GetEditorSetPositionData"
        ]
      },
      {
        "class_name": "SCR_OverridableUIInfo",
        "methods": [
          "SetName",
          "SetDescription",
          "SetIcon",
          "SetIconSetName"
        ]
      },
      {
        "class_name": "SCR_PlayerUIInfo",
        "methods": [
          "SetPlayerID",
          "GetPlayerID",
          "GetName"
        ]
      },
      {
        "class_name": "SCR_SimpleMessageUIInfo",
        "methods": [
          "GetImageColor",
          "GetDisplayLoading"
        ]
      },
      {
        "class_name": "SCR_SplitNotificationUIInfo",
        "methods": [
          "GetSplitRightMessageText",
          "GetLeftTextColor",
          "GetRightTextColor",
          "ShouldReplaceLeftColorWithRightColorIfAlly"
        ]
      },
      {
        "class_name": "SCR_SupplyAvailableItemHintUIInfo",
        "methods": [
          "CanBeShown",
          "GetItemHintName"
        ]
      },
      {
        "class_name": "SCR_SupplyCostItemHintUIInfo",
        "methods": [
          "SetSupplyCost",
          "CanBeShown",
          "GetItemHintName"
        ]
      },
      {
        "class_name": "SCR_SupplyMoveItemHintUIInfo",
        "methods": [
          "CanBeShown"
        ]
      },
      {
        "class_name": "SCR_SupplyRefundItemHintUIInfo",
        "methods": [
          "SetSupplyRefund",
          "CanBeShown",
          "GetItemHintName"
        ]
      },
      {
        "class_name": "SCR_SupplyStoredItemHintUIInfo",
        "methods": [
          "CanBeShown",
          "GetItemHintName"
        ]
      },
      {
        "class_name": "SCR_UIDescription",
        "methods": [
          "GetUnformattedDescription",
          "SetDescription",
          "GetDescription",
          "HasDescription",
          "SetDescriptionTo",
          "Log",
          "CopyFrom"
        ]
      },
      {
        "class_name": "SCR_UIInfo",
        "methods": [
          "GetIconPath",
          "GetIconSetName",
          "HasIcon",
          "SetIconTo",
          "Log",
          "GetInfo",
          "CreateInfo",
          "CreateInfo",
          "CreatePlaceholderInfo",
          "CopyFrom"
        ]
      },
      {
        "class_name": "SCR_UIInfoSpawnRequestResult",
        "methods": [
          "GetNameWithTimer"
        ]
      },
      {
        "class_name": "SCR_UIName",
        "methods": [
          "GetUnformattedName",
          "SetName",
          "GetName",
          "HasName",
          "SetNameTo",
          "Log",
          "CopyFrom"
        ]
      },
      {
        "class_name": "SCR_VotingUIInfo",
        "methods": [
          "GetStartVotingName",
          "GetCancelVotingName",
          "GetRevoteName",
          "GetName",
          "GetAbstainVoteName",
          "GetStickyNotificationText",
          "GetVotingStartNotification",
          "GetVotingSucceedNotification",
          "GetVotingFailNotification",
          "GetLocalVoteCastNotification",
          "GetLocalVoteAbstainedNotification"
        ]
      },
      {
        "class_name": "UIInfoAssetCard",
        "methods": [
          "GetTextColor",
          "GetTitleBackgroundPath",
          "GetImagePath",
          "GetFactionColor",
          "GetIconBackgroundPath",
          "GetModded",
          "GetModsetIcon",
          "GetModsetFrame",
          "GetModsetLabel",
          "GetCardBackground",
          "GetTraits"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCore",
        "methods": [
          "ScriptInvoker_EntityCoreBudgetUpdated",
          "AddToRoot",
          "RemoveFromRoot",
          "RegisterEntity",
          "UnRegisterEntity",
          "UpdateBudgets",
          "AddOrphan",
          "RemoveOrphans",
          "GetAllEntities",
          "GetAllEntities",
          "FindNearestEntity",
          "GetAllEntities",
          "GetEntityInteraction",
          "GetEntityCanBeControlled",
          "GetBudgetForEntityType",
          "GetBudgets",
          "GetBudget",
          "GetLabelGroups",
          "GetLabelGroupOrder",
          "GetLabelGroupType",
          "GetLabelsOfGroup",
          "GetLabelUIInfo",
          "GetLabelUIInfoIfValid",
          "GetBuildModeLabelData",
          "SCR_EditableEntityCampaignBuildingModeLabelData",
          "GetCampaignBuildingModeLabelsData",
          "GetBuildModeLabelUIInfo",
          "GetBuildModeLabelLinkedConflictService",
          "GetLabelOrder",
          "GetLabelGroupType",
          "OrderLabels",
          "GetLabelGroupType",
          "LoadSettings",
          "GetSettings",
          "GetPlayerDrawDistanceSq",
          "Log",
          "UpdateBudgets",
          "UpdateBudgetForEntity",
          "UpdateBudgetForEntity",
          "UpdateBudget",
          "OnUpdate",
          "Log",
          "OnGameStart",
          "OnGameEnd",
          "SCR_EditableEntityCore"
        ]
      },
      {
        "class_name": "SCR_EditorManagerCore",
        "methods": [
          "CreateEditorManager",
          "OnPlayerRoleChange",
          "DeleteEditorManager",
          "GetEditorEntities",
          "SetEditorManager",
          "GetEditorManager",
          "GetEditorManager",
          "GetEditorServer",
          "SetSettingsEntity",
          "GetSettingsEntity",
          "GetBaseModePrefab",
          "GetBaseModePrefabs",
          "GetBaseModes",
          "GetBaseModePrefabs",
          "GetBaseModePrefabs",
          "GetDefaultModeInfo",
          "OnPlayerRegistered",
          "CreateEditorManager",
          "OnPlayerSpawn",
          "OnPlayerDisconnected",
          "DeleteEditorManager",
          "OnPlayerSpawn",
          "OnPlayerKilled",
          "OnPlayerDeleted",
          "OnPlayerRoleChange",
          "OnPlayFromCameraPos",
          "CreateEditorManager",
          "OnReconnectOnPreviousCharacter",
          "OnPlayerSpawn",
          "OnGameStart",
          "OnGameEnd",
          "SCR_EditorManagerCore"
        ]
      },
      {
        "class_name": "SCR_EditorManagerDisconnectData",
        "methods": [
          "SCR_EditorManagerDisconnectData"
        ]
      },
      {
        "class_name": "SCR_EditorBaseEntity",
        "methods": [
          "GetOnInit",
          "GetOnRequest",
          "GetOnOpened",
          "GetOnPreActivate",
          "GetOnActivate",
          "GetOnPostActivate",
          "GetOnDeactivate",
          "GetOnClosed",
          "GetOnDebug",
          "GetOnOpenedServer",
          "GetOnOpenedServerCallback",
          "GetOnClosedServer",
          "GetOnClosedServerCallback",
          "GetOnActivateServer",
          "GetOnDeactivateServer",
          "IsOpened",
          "GetManager",
          "FindEditorComponents",
          "InitComponents",
          "InitComponent"
        ]
      },
      {
        "class_name": "SCR_EditorImageGeneratorEntity",
        "methods": [
          "GetInstance",
          "FindSuitablePosition",
          "IsPositionSelected",
          "AddPosition",
          "AddSelectedPosition",
          "AddSelectedPrefab",
          "RequestClose",
          "Init",
          "EOnFrame",
          "SCR_EditorImageGeneratorEntity",
          "SetName",
          "SetEventMask",
          "_WB_AfterWorldUpdate",
          "_WB_GetBoundBox",
          "CreatePreviewImageFile"
        ]
      },
      {
        "class_name": "SCR_EditorImageGeneratorPrefab",
        "methods": [
          "SCR_EditorImageGeneratorPrefab"
        ]
      },
      {
        "class_name": "SCR_EditorImagePositionCharacterPose",
        "methods": [
          "GetFactionKey",
          "GetPoseGraph",
          "GetPosesInstance",
          "GetStartNode",
          "GetPosVar",
          "GetPosId",
          "GetArmIK",
          "GetForceWeaponType",
          "BindAnimValueInteger"
        ]
      },
      {
        "class_name": "SCR_EditorImagePositionEntity",
        "methods": [
          "GetDelay",
          "GetPriority",
          "IsSuitable",
          "FindSuitableSubPosition",
          "ActivatePosition",
          "GetTransform",
          "ActivateCharacterPosition",
          "DeactivatePosition",
          "UpdateNearbyEntities",
          "AddSubPosition",
          "UpdateNearbyEntities",
          "QueryEntitiesCallback",
          "GetPositionName",
          "GetName",
          "EOnImagePositonActivate",
          "EOnInit",
          "UpdateNearbyEntities",
          "SCR_EditorImagePositionEntity",
          "SetEventMask",
          "_WB_AfterWorldUpdate",
          "ActivateCharacterPosition",
          "CloneCharacter",
          "SetPose",
          "CurrentPose",
          "SetPose",
          "CharacterWeaponIK",
          "CloneCharacter",
          "ActivateGroupPosition",
          "CloneCharacter",
          "EOnImagePositonActivate"
        ]
      },
      {
        "class_name": "SCR_EditorManagerEntity",
        "methods": [
          "IsOpened",
          "Toggle",
          "Close",
          "Open",
          "Open",
          "StartEvents",
          "Rpc",
          "Close",
          "StartEvents",
          "Rpc",
          "ToggleServer",
          "Rpc",
          "ToggleOwner",
          "StartEvents",
          "StartEvents",
          "ToggleOwnerServerCallback",
          "GetEnumSum",
          "CanToggle",
          "CanClose",
          "CanOpen",
          "CanOpen",
          "CanOpen",
          "SetCanOpen",
          "Rpc",
          "SetCanOpenOwner",
          "SetCanOpenDebug",
          "Rpc",
          "CanClose",
          "CanClose",
          "SetCanClose",
          "Rpc",
          "SetCanCloseOwner",
          "SetCanCloseDebug",
          "Rpc",
          "SetAutoInit",
          "IsAutoInit",
          "SetAutoModes",
          "GetPlayerID",
          "IsAuthority",
          "IsOwner",
          "IsInTransition",
          "IsLimited",
          "IsLimitedInstance",
          "GetManager",
          "SendNotification",
          "SendNotificationRpc",
          "SendNotificationImpl",
          "UpdateLimited",
          "GetOnInit",
          "GetOnOpened",
          "GetOnPreActivate",
          "GetOnActivate",
          "GetOnPostActivate",
          "GetOnDeactivate",
          "GetOnClosed",
          "GetOnDebug",
          "GetOnOpenedServer",
          "GetOnOpenedServerCallback",
          "GetOnClosedServer",
          "GetOnClosedServerCallback",
          "GetOnActivateServer",
          "GetOnDeactivateServer",
          "GetOnRequest",
          "GetOnCanOpen",
          "GetOnCanClose",
          "GetOnModeAdd",
          "GetOnModeRemove",
          "GetOnModeChangeRequest",
          "GetOnModeChange",
          "GetOnLimitedChange",
          "GetOnAsyncLoad",
          "GetOnCanEndGameChanged",
          "ToggleInstance",
          "OpenInstance",
          "CloseInstance",
          "IsOpenedInstance",
          "CanOpenInstance",
          "CanCloseInstance",
          "GetInstance",
          "CreateEditorMode",
          "AddMode",
          "SetCanOpen",
          "SetCurrentMode",
          "AddEditorModes",
          "RemoveEditorModes",
          "SetEditorModes",
          "RepairEditorModes",
          "RepairEditorModes",
          "CreateEditorMode",
          "GetEditorModes",
          "GetDefaultMode",
          "RestorePreviousMode",
          "SetCurrentMode",
          "SetCurrentMode",
          "SetCurrentMode",
          "Rpc",
          "GetCurrentMode",
          "GetCurrentModeEntity",
          "HasMode",
          "FindModeEntity",
          "GetModeEntities",
          "GetModes",
          "GetModes",
          "IsModeChangeRequested",
          "AddMode",
          "UpdateLimited",
          "RemoveMode",
          "StartEvents",
          "UpdateLimited",
          "RemoveModeServer",
          "SetCurrentMode",
          "ToggleServer",
          "SetCanOpen",
          "CreateEditorModeOwner",
          "AddMode",
          "StartEvents",
          "SetCurrentModeServer",
          "Rpc",
          "SetCurrentModeOwner",
          "StartEvents",
          "StartEvents",
          "ProcessEvent",
          "ToggleOwner",
          "GetAllComponents",
          "ProcessEvent",
          "FindEditorComponents",
          "ProcessEvent",
          "GetAllComponents",
          "ProcessEvent",
          "FindEditorComponents",
          "ProcessEvent",
          "GetAllComponents",
          "ProcessEvent",
          "FindEditorComponents",
          "ProcessEvent",
          "ProcessEvent",
          "ProcessEvent",
          "ProcessEvent",
          "ProcessEvent",
          "GetAllComponents",
          "ProcessEvent",
          "ProcessEvent",
          "Rpc",
          "Rpc",
          "ProcessEvent",
          "ProcessAsyncEvent",
          "GetAllComponents",
          "FindEditorComponents",
          "Action_EditorToggle",
          "Toggle",
          "Action_GoToLatestNotification",
          "ShowDebug",
          "ProcessDebug",
          "SetCanOpenDebug",
          "SetCanCloseDebug",
          "Toggle",
          "SetCanOpenDebug",
          "SetCanCloseDebug",
          "SetCurrentMode",
          "InitServer",
          "InitComponents",
          "Rpc",
          "InitOwner",
          "InitComponents",
          "StartEvents",
          "SetEventMask",
          "PostInitServer",
          "SetCurrentModeServer",
          "AutoInit",
          "Open",
          "EOnInit",
          "ProcessDebug",
          "ProcessEvent",
          "SCR_EditorManagerEntity",
          "SetFlags",
          "RemoveMode",
          "StartEvents"
        ]
      },
      {
        "class_name": "SCR_EditorModePrefab",
        "methods": [
          "GetMode",
          "GetPrefab",
          "GetFlags",
          "GetInfo"
        ]
      },
      {
        "class_name": "SCR_EditorModeEntity",
        "methods": [
          "GetModeType",
          "GetOrder",
          "GetInfo",
          "IsLimited",
          "ShouldCloseAfterRemoval",
          "IsCurrent",
          "GetInstance",
          "PreActivateMode",
          "ActivateMode",
          "SetFlags",
          "PostActivateMode",
          "DeactivateMode",
          "ClearFlags",
          "ActivateModeServer",
          "DeactivateModeServer",
          "SendNotificationLocalOnly",
          "GetOnAddNotification",
          "GetOnRemoveNotification",
          "GetOnInit",
          "GetOnRequest",
          "GetOnOpened",
          "GetOnOpenedServer",
          "GetOnOpenedServerCallback",
          "GetOnPreActivate",
          "GetOnActivate",
          "GetOnPostActivate",
          "GetOnDeactivate",
          "GetOnClosed",
          "GetOnClosedServer",
          "GetOnClosedServerCallback",
          "GetOnActivateServer",
          "GetOnDeactivateServer",
          "GetOnDebug",
          "IsOpened",
          "GetManager",
          "InitServer",
          "InitComponents",
          "InitOwner",
          "SetFlags",
          "InitComponents",
          "SCR_EditorModeEntity",
          "SetFlags"
        ]
      },
      {
        "class_name": "SCR_EditorSettingsEntity",
        "methods": [
          "GetInstance",
          "GetPrefab",
          "IsEditorDisabled",
          "IsUnlimitedEditorLegal",
          "EnableBaseOverride",
          "IsBaseOverrideEnabled",
          "GetBaseModes",
          "SetBaseModes",
          "GetSkipStreamingRules",
          "SCR_EditorSettingsEntity"
        ]
      },
      {
        "class_name": "SCR_PlayerHubAreaTriggerEntity",
        "methods": [
          "TimerDone",
          "OnActivate",
          "OnDeactivate",
          "SCR_PlayerHubAreaTriggerEntity"
        ]
      },
      {
        "class_name": "SCR_VirtualAreaEntity",
        "methods": [
          "GetShape",
          "GetSize",
          "InArea",
          "SetMaterial",
          "Generate",
          "Generate",
          "Generate",
          "Generate",
          "GetTransform",
          "SCR_VirtualAreaEntity",
          "Generate",
          "_WB_GetBoundBox"
        ]
      },
      {
        "class_name": "SCR_AttributeButtonUIComponent",
        "methods": [
          "ButtonDescriptionInit",
          "OnButtonFocus",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnMouseLeaveDelay"
        ]
      },
      {
        "class_name": "SCR_AttributeDescriptionUIComponent",
        "methods": [
          "SetAttributeDescription",
          "OnCategoryChanged",
          "HandlerAttached",
          "SetAttributeDescription",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_AttributeTickboxUIComponent",
        "methods": [
          "ToggleTickbox",
          "ToggleEnableByAttribute",
          "SetEnabled",
          "OnButtonToggle",
          "ToggleTickbox",
          "GetToggled",
          "IsVisibleAndEnabled",
          "GetOnToggleChanged",
          "SetVisible",
          "SetEnabled",
          "GetEnabled",
          "InitTickbox",
          "SetVisible",
          "ToggleTickbox",
          "InitDisabled",
          "SetVisible",
          "SetEnabled",
          "OnAttributeEnabledByAttribute",
          "SetEnabled",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_BaseEditorAttributeUIComponent",
        "methods": [
          "GetAttribute",
          "SetFromVarExternal",
          "SetFromVar",
          "SetFromVar",
          "SetFromVarOrDefault",
          "SetFromVarOrDefault",
          "ShowAttributeDescription",
          "Init",
          "SetAsSubAttribute",
          "ToggleButtonSelected",
          "SetAsSubAttribute",
          "OnChange",
          "AttributeValueChanged",
          "AttributeValueChanged",
          "ShowAttributeDescription",
          "ShowAttributeDescription",
          "HideAttributeDescription",
          "ShowButtonDescription",
          "ShowAttributeDescription",
          "GetOnAttributeChanged",
          "GetOnAttributeUIFocusChanged",
          "GetOnEnabledByAttribute",
          "GetOnMouseLeave",
          "SetVariableToDefaultValue",
          "SetFromVarOrDefault",
          "ToggleEnableAttribute",
          "ToggleEnable",
          "ToggleEnable",
          "GetTickboxEnabled",
          "ToggleEnableAttributeTickbox",
          "OnTickboxToggleChanged",
          "ToggleEnable",
          "AttributeValueChanged",
          "ShowAttributeDescription",
          "GamePadLockedSelectorFocusChanged",
          "ShowAttributeDescription",
          "HideAttributeDescription",
          "GetIsFocused",
          "OnFocusAttributeWidget",
          "OnFocus",
          "OnFocus",
          "ShowButtonDescription",
          "ShowAttributeDescription",
          "OnFocusLost",
          "OnMouseEnter",
          "OnFocus",
          "OnMouseLeave",
          "SetGamepadLockSelectorActive",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ButtonBoxAttributeUIComponent",
        "methods": [
          "Init",
          "DelayedInit",
          "SetVariableToDefaultValue",
          "ToggleButtonSelected",
          "ToggleButtonSelected",
          "SetFromVarOrDefault",
          "SetFromVar",
          "SetFromVarOrDefault",
          "GetToolboxComponent",
          "GetButtonBoxData",
          "ToggleButtonSelected",
          "OnSingleButton",
          "OnChange",
          "OnSelectableButton",
          "OnChange",
          "OnMultiSelectButton",
          "UpdateButtonBorder",
          "OnChange",
          "DelayedButtonRandomizer",
          "UpdateButtonBorder",
          "OnFocus",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ButtonBoxMultiSelectAttributeUIComponent",
        "methods": [
          "Init",
          "SetFromVar",
          "SetFromVarOrDefault",
          "OnChange",
          "AttributeValueChanged",
          "OnMultiSelectButton"
        ]
      },
      {
        "class_name": "SCR_CheckboxEditorAttributeUIComponent",
        "methods": [
          "Init",
          "SetVariableToDefaultValue",
          "SetFromVar",
          "OnChangeCheckbox",
          "OnChange",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_DateAttributeUIComponent",
        "methods": [
          "Init",
          "SetMonthWidgetFillWeight",
          "SetFromVar",
          "SetDateComboBoxes",
          "UpdateDateMoonPhaseIcon",
          "CreateDayList",
          "GetCorrectDateTime",
          "UpdateDateMoonPhaseIcon",
          "GetCorrectDateTime",
          "GetCorrectDateTime",
          "FillMonthComboBox",
          "FillYearComboBox",
          "SetMonthWidgetFillWeight",
          "GetCorrectComboBox",
          "GetCorrectLabel",
          "SetDateComboBoxes",
          "OnChange",
          "OnComboBoxChanged",
          "UpdateDateMoonPhaseIcon",
          "OnChange",
          "OnMouseEnter",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_DropdownEditorAttributeUIComponent",
        "methods": [
          "Init",
          "CreateDropdownEntries",
          "CreateDropdownEntries",
          "GetFullDropdownEntryText",
          "GetComboBoxData",
          "SetVariableToDefaultValue",
          "SetFromVar",
          "OnChange",
          "OnChangeComboBox",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_DropdownWithParamAttributeUIComponent",
        "methods": [
          "CreateDropdownEntries",
          "GetFullDropdownEntryText"
        ]
      },
      {
        "class_name": "SCR_EditorAttributeHolderUIComponent",
        "methods": [
          "GetAttributeHolder",
          "SetAttributeReference",
          "SetHintText",
          "ShowHintText",
          "GamePadLockedSelectorFocusChanged",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_GameOverTypeAttributeUIComponent",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_OverrideModesEditorAttributeUIComponent",
        "methods": [
          "ToggleEnableAttribute",
          "SetFromVar"
        ]
      },
      {
        "class_name": "SCR_PositionEditorAttributeUIComponent",
        "methods": [
          "Init",
          "OnSnapYChanged",
          "OnSnapYChanged",
          "OnChange",
          "OnInputDeviceIsGamepad",
          "SetVisible",
          "SetVisible",
          "SetVariableToDefaultValue",
          "SetFromVar",
          "OnChange",
          "OnEditBoxValueChanged",
          "OnChange",
          "CapValueToString",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_SliderBloodAttributeComponent",
        "methods": [
          "Init",
          "GetUnconsciousLevel",
          "SetSliderSettings",
          "UpdateBloodSlider",
          "SetVariableToDefaultValue",
          "UpdateBloodSlider",
          "SetFromVar",
          "UpdateBloodSlider",
          "OnChange",
          "UpdateBloodSlider",
          "UpdateBloodSlider"
        ]
      },
      {
        "class_name": "SCR_SliderEditorAttributeUIComponent",
        "methods": [
          "Init",
          "SetSliderSettings",
          "SetSliderSettings",
          "SetVariableToDefaultValue",
          "SetFromVar",
          "OnChange",
          "OnChange",
          "GetSliderValueText"
        ]
      },
      {
        "class_name": "SCR_SpinboxEditorAttributeUIComponent",
        "methods": [
          "Init",
          "SetVariableToDefaultValue",
          "SetFromVar",
          "OnChange",
          "OnChangeSpinbox",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_TimePresetsAttributeUIComponent",
        "methods": [
          "SetFromVar",
          "DelayedReset",
          "OnChange"
        ]
      },
      {
        "class_name": "SCR_VectorSliderEditorAttributeUIComponent",
        "methods": [
          "SetSliderSettings"
        ]
      },
      {
        "class_name": "SCR_AttributesButtonEditorUIComponent",
        "methods": [
          "OnButtonAction",
          "IsUnique",
          "HandlerAttachedScripted"
        ]
      },
      {
        "class_name": "SCR_AttributesEditorUIComponent",
        "methods": [
          "ButtonClose",
          "OnCancelEndGame",
          "EndGamePopupComfirm",
          "OnAcceptEndGame",
          "ButtonReset",
          "OnReset",
          "ButtonAttributeEnableToggle",
          "OnAttributeChanged",
          "RefreshAttributes",
          "SetHasConflictingAttribute",
          "SetHasConflictingAttribute",
          "OnCurrentTabChanged",
          "RefreshAttributes",
          "GetCurrentCategory",
          "SetWidgetVisible",
          "SetGamepadAttributeFocus",
          "SetHasConflictingAttribute",
          "InitWidget",
          "SetHasConflictingAttribute",
          "SetHeaderText",
          "SetHeaderPart",
          "SetHeaderPart",
          "SetHeaderPart",
          "SetHeaderPart",
          "TranslateEntityType",
          "OnInputDeviceIsGamepad",
          "SetHasConflictingAttribute",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_EntityAttributeTitleType",
        "methods": [
          "GetType",
          "GetTypeName"
        ]
      },
      {
        "class_name": "SCR_BaseContextMenuEditorUIComponent",
        "methods": [
          "CloseContextMenu",
          "GetOnContextMenuToggle",
          "OnInputDeviceIsGamepad",
          "CloseContextMenu",
          "PopulateContextMenu",
          "IsContextMenuOpen",
          "OpenContextMenu",
          "RemoveButtonWidgets",
          "PopulateContextMenu",
          "GetCursorWorldPos",
          "RemoveButtonWidgets",
          "OnMouseLeftDown",
          "CloseContextMenu",
          "OnOpenActionsMenuDown",
          "CloseContextMenu",
          "OnContextMenuOptionClicked",
          "CloseContextMenu",
          "OnEditorModeChanged",
          "HandlerAttachedScripted",
          "OnEditorModeChanged",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_BaseEditorUIComponent",
        "methods": [
          "OnCancelDown",
          "OnCancelUp",
          "OnCancelExpired"
        ]
      },
      {
        "class_name": "SCR_BudgetEditorUIComponent",
        "methods": [
          "OnBudgetMaxUpdate",
          "SetBudgetData",
          "SetBudgetPreviewData",
          "OnBudgetUpdate",
          "SetBudgetData",
          "SetBudgetPreviewData",
          "OnBudgetAdd",
          "OnBudgetPreviewUpdate",
          "SetBudgetPreviewData",
          "InitializeBudgets",
          "OnBudgetAdd",
          "SetBudgetData",
          "SetBudgetPreviewData",
          "ResetWidgetPreviewData",
          "SetBudgetPreviewData",
          "UnregisterEvents",
          "HandlerAttachedScripted",
          "InitializeBudgets",
          "HandlerDeattached",
          "UnregisterEvents"
        ]
      },
      {
        "class_name": "SCR_BudgetUIInfo",
        "methods": [
          "GetPriorityOrder"
        ]
      },
      {
        "class_name": "SCR_BuildModeShowHideOnSupplyEnabledUIComponent",
        "methods": [
          "OnResourceTypeEnabledChanged",
          "OnProviderChanged",
          "OnResourceTypeEnabledChanged",
          "OnGlobalResourceEnabledChanged",
          "OnResourceTypeEnabledChanged",
          "HandlerAttached",
          "OnResourceTypeEnabledChanged",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ButtonCloseEditorUIComponent",
        "methods": [
          "GetButtonIndex",
          "Refresh",
          "OnPlayerKilled",
          "Refresh",
          "OnPlayerSpawnedOrDeleted",
          "Refresh",
          "OnClick",
          "HandlerAttached",
          "Refresh",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ButtonHintEditorUIComponent",
        "methods": [
          "RefreshVisibility",
          "OnMenuFocusGained",
          "RefreshVisibility",
          "OnMenuFocusLost",
          "RefreshVisibility",
          "OnInputDeviceIsGamepad",
          "RefreshVisibility",
          "IsUnique",
          "HandlerAttachedScripted",
          "OnMenuFocusGained",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_CameraInfoEditorUIComponent",
        "methods": [
          "Refresh",
          "InitCamera",
          "Refresh",
          "OnCameraCreate",
          "InitCamera",
          "HandlerAttachedScripted",
          "InitCamera",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingBudgetEditorUIComponent",
        "methods": [
          "InitializeBudgets",
          "UnregisterEvents",
          "OnBudgetAdd",
          "OnBudgetAdd",
          "OnBudgetUpdate",
          "SetBudgetPreviewData",
          "GetProviderComponent",
          "GetMaxBudgetValue",
          "GetCurrentBudgetValue"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingRefreshUIComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingScreenEffectUIComponent",
        "methods": [
          "HandlerAttached",
          "AreaTriggerChange",
          "StartObstructionAnimation",
          "FinishObstructionAnimation",
          "StartObstructionAnimation",
          "FinishObstructionAnimation"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingServicesEditorUIComponent",
        "methods": [
          "HandlerAttached",
          "GetAllServicesUIInfo",
          "SetBaseServices",
          "RefreshServiceUI",
          "HandlerDeattached",
          "RemoveOnServiceStateChangedEvent",
          "FilterServiceLabels",
          "GetAllServicesUIInfo",
          "FilterServiceLabels",
          "SetBaseServices",
          "RemoveOnServiceStateChangedEvent",
          "GetProviderServices",
          "GetProviderServices",
          "RemoveOnServiceStateChangedEvent",
          "GetProviderServices",
          "OnServiceUnregistered",
          "RefreshServiceUI",
          "OnServiceChanged",
          "RefreshServiceUI",
          "RefreshServiceUI",
          "ClearServicesWidget",
          "SetServicesIcon",
          "ClearServicesWidget",
          "CreateWidget",
          "SetServicesIcon",
          "SetIcon",
          "IsAnyServiceBuilt",
          "SetIcon"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingSupplyEditorUIComponent",
        "methods": [
          "HandlerAttached",
          "SetSourceIcon",
          "SetProviderName",
          "UpdateResources",
          "HandlerDeattached",
          "SetSourceIcon",
          "GetColorForFaction",
          "UpdateResources",
          "UpdateSupply",
          "SetProviderName"
        ]
      },
      {
        "class_name": "SCR_CommandActionsEditorUIComponent",
        "methods": [
          "GetCommandState",
          "GetOnCommandStateChange",
          "PerformDefaultCommand",
          "OnOpenActionsMenuDown",
          "OnEditorSetCommand",
          "PerformDefaultCommand",
          "OnEditorAddCommand",
          "PerformDefaultCommand",
          "OnEditorCommandModifier",
          "UpdateState",
          "UpdateState",
          "OnSelectedChanged",
          "UpdateState",
          "UpdateState",
          "OnMenuUpdate",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserActiveFilterEditorUIComponent",
        "methods": [
          "InitFilterButton",
          "GetLabelReference",
          "OnMouseEnter",
          "OnMouseLeave",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserActiveFiltersEditorUIComponent",
        "methods": [
          "OnFilterLabelChanged",
          "InsertOrderedFilter",
          "CreateFilters",
          "InsertOrderedFilter",
          "GetIndexInGroup",
          "OnFiltersReset",
          "CreateFilters",
          "OnActiveFilterPressed",
          "CreateFilters",
          "ClearAllFilterWidgets",
          "ClearAllFilterWidgets",
          "Init",
          "CreateFilters",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserEditorCard",
        "methods": [
          "OnCardLMB",
          "CloseContentBrowser",
          "CloseContentBrowser",
          "ShowEntries",
          "GetEntryCount",
          "AnimateCardFadeIn",
          "ToggleBetweenCardsAndFilters",
          "SwitchToFilters",
          "SwitchToAssetCards",
          "GamepadToggleSelectButtonSwap",
          "SwitchToAssetCards",
          "GamepadToggleSelectButtonSwap",
          "SwitchToFilters",
          "GamePadSwitchToggleSearch",
          "GamePadToggleSearch",
          "GamePadToggleSearch",
          "GamePadToggleSearch",
          "ResetSearch",
          "GamePadToggleSearch",
          "FilterEntries",
          "ResetSearch",
          "OnInputDeviceIsGamepadScripted",
          "OnCardHover",
          "OnCardHover",
          "GamepadToggleSelectButtonSwap",
          "GamePadToggleSearch",
          "OnCardHover",
          "OnCardFocus",
          "GamepadToggleSelectButtonSwap",
          "OnSearchFocusChanged",
          "OnSearchConfirmed",
          "FilterEntries",
          "GamePadToggleSearch",
          "OnBrowserEntriesFiltered",
          "OnMenuClosed",
          "OnResetClicked",
          "OnShowLoadingCircle",
          "RefreshPage",
          "OnApplyLabelChanges",
          "OnShowLoadingCircle",
          "FilterEntries",
          "InitializeLabels",
          "GetHighestOrderedLabelUIInfo",
          "IsUnique",
          "OnButtonPrev",
          "OnButtonNext",
          "HandlerAttachedScripted",
          "InitializeLabels",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserFiltersEditorUIComponent",
        "methods": [
          "SetFilterToggled",
          "CheckConditionalGroup",
          "DisableFilterFromActiveFilters",
          "SetFilterToggled",
          "ApplyFiltersDelayed",
          "GetLabelFromHandler",
          "CheckConditionalGroup",
          "OnFilterToggled",
          "CheckConditionalGroup",
          "OnMouseEnterFilterWidget",
          "OnFilterLabelFocus",
          "GetLastFocusedLabel",
          "OnResetClicked",
          "SetFilterToggled",
          "CheckConditionalGroup",
          "OnBrowserStatePreloaded",
          "SetFilterToggled",
          "OnBrowserStateLoaded",
          "SetFilterToggled",
          "ApplyLabelChanges",
          "ResetLabelsOfGroupLabel",
          "SetContentBrowserCallbacks",
          "InitializeLabels",
          "OnInputDeviceIsGamepad",
          "OnFilterClicked",
          "SetFilterToggled",
          "ApplyFiltersDelayed",
          "OnFilterDoubleClicked",
          "SetFilterToggled",
          "ApplyFiltersDelayed",
          "ApplyFiltersDelayed",
          "OnMenuUpdate",
          "ApplyLabelChanges",
          "HandlerAttachedScripted",
          "InitializeLabels",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserStateManagerEditorUIComponent",
        "methods": [
          "OnBrowserStateChanged",
          "OnBrowserEntriesFiltered",
          "EnableAllTabs",
          "SetTabVisible",
          "CreateBrowserStateTabs",
          "SetTabVisible",
          "UpdateStateTab",
          "HandlerAttached",
          "CreateBrowserStateTabs",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ContextMenuActionsEditorUIComponent",
        "methods": [
          "OnHoveredEntityCheck",
          "CloseContextMenu",
          "PopulateContextMenu",
          "OnEditorModeChanged",
          "OpenContextMenu",
          "CloseContextMenu",
          "DelayedCloseSound",
          "OnOpenActionsMenuUp",
          "OpenContextMenu",
          "OnOpenActionsMenuDown",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ContextMenuButtonEditorUIComponent",
        "methods": [
          "SetData",
          "SetShortcutText",
          "SetShortcutText",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_CursorEditorUIComponent",
        "methods": [
          "SetCursorPos",
          "GetCursorPos",
          "GetCursorPos",
          "GetCursorWorldPos",
          "GetTraceEntity",
          "SetCursorType",
          "ResetCursor",
          "GetCursorRadius",
          "GetCursorRadiusSq",
          "SetCursorAlpha",
          "UpdateCursorDebug",
          "UpdateCursor",
          "UpdateCursor",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "SetCursorType",
          "OnFilterChange",
          "UpdateCursor",
          "TraceFilter",
          "TraceEntity",
          "OnInputDeviceIsGamepad",
          "OnMenuUpdate",
          "OnMapToggled",
          "UpdateCursor",
          "HandlerAttachedScripted",
          "SetCursorType",
          "HandlerDeattached",
          "ResetCursor"
        ]
      },
      {
        "class_name": "SCR_CursorEditor",
        "methods": [
          "GetType",
          "GetID",
          "GetName",
          "GetWidget",
          "InitWidget"
        ]
      },
      {
        "class_name": "SCR_CustomDropdownEditorUIComponent",
        "methods": [
          "SetDropdownEnable",
          "CloseDropdown",
          "OnDropDownClicked",
          "CloseDropdown",
          "OpenDropdown",
          "OnItemClicked",
          "SetCurrentItem",
          "OnDropDownFocus",
          "OpenDropdown",
          "OnMenuActionLeft",
          "CloseDropdown",
          "AddItem",
          "IsOpened",
          "OpenDropdown",
          "CloseDropdown",
          "OnLMB",
          "CloseDropdown",
          "SetCurrentItem",
          "GetSelectedIndex",
          "GetRootWidget",
          "SetItemEnabled",
          "SetItemVisible",
          "GetOnChanged",
          "GetOnOpened",
          "GetOnClosed",
          "OnInputDeviceIsGamepad",
          "OnMouseEnter",
          "OnMouseLeave",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_DialogEditorUIComponent",
        "methods": [
          "AllowFocus",
          "FocusWidget",
          "SetLinkedWidgetVisibility",
          "OnInput",
          "CloseDialog",
          "SetLinkedWidgetVisibility",
          "OnRepeat",
          "CanOpenDialog",
          "CloseDialog",
          "OnInputDeviceIsGamepad",
          "CloseDialog",
          "OnMenuUpdate",
          "OnDialogOpened",
          "OnDialogClosed",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_EditorButtonUIComponent",
        "methods": [
          "OnEditorLimitedChange",
          "OnClick",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_EditorStateConditionUIComponent",
        "methods": [
          "OnStateChanged",
          "IsUnique",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_EditorToggleUIComponent",
        "methods": [
          "ChargeStart",
          "ChargeFail",
          "WaitStart",
          "WaitEnd",
          "OnRadialProgressFadeDone",
          "OnEditorToggleValue",
          "ChargeFail",
          "ChargeFail",
          "ChargeFail",
          "ChargeStart",
          "OnEditorToggleDone",
          "ChargeFail",
          "OnRequest",
          "WaitStart",
          "OnRequestEnd",
          "WaitEnd",
          "OnAsyncLoad",
          "WaitStart",
          "WaitEnd",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_HideEditorUIComponent",
        "methods": [
          "SetVisible",
          "SetWidgetOpacity",
          "GetOnOpacityChange",
          "Show",
          "SetMenuVisible",
          "SetWidgetOpacity",
          "OnMenuUpdate",
          "SetWidgetOpacity",
          "OnMenuInit",
          "HandlerAttachedScripted",
          "OnMenuInit",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_HighlightedEditorUIComponent",
        "methods": [
          "OnUpdateHighlight",
          "OnSelectedChange",
          "StopAnimations",
          "OnInit",
          "OnUpdateHighlight",
          "OnClick",
          "StopAnimations",
          "HandlerDeattached",
          "StopAnimations"
        ]
      },
      {
        "class_name": "SCR_HighlightVisual",
        "methods": [
          "GetHighlightType",
          "GetIcon"
        ]
      },
      {
        "class_name": "SCR_LayerAutoEnterUIComponent",
        "methods": [
          "OnTargetChange",
          "Clear",
          "Clear",
          "ResetGracePeriod",
          "OnMenuUpdate",
          "Clear",
          "IsUnique",
          "HandlerAttachedScripted",
          "Clear",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_LayersEditorUIComponent",
        "methods": [
          "OnMenuUpdate",
          "OnLayerButtonPressed",
          "OnCompositionLayerChanged",
          "RefreshLayerUI",
          "ClearLayerElements",
          "SetVisible",
          "OnInputDeviceIsGamepad",
          "RefreshLayerUI",
          "RefreshLayerUI",
          "ClearLayerElements",
          "CreateWorldRootLayer",
          "CreateNextLayerIndicator",
          "CreateLayerElement",
          "CreateNextLayerIndicator",
          "CreateMoreLayersIndicator",
          "SetVisible",
          "CheckIfSelectedLayerHierarchyChanged",
          "OnParentEntityVisibleChanged",
          "RefreshLayerUI",
          "RefreshLayerUI",
          "RefreshLayerUI",
          "OnEntityStateChanged",
          "RefreshLayerUI",
          "RefreshLayerUI",
          "CreateLayerElement",
          "CreateNextLayerIndicator",
          "CreateMoreLayersIndicator",
          "CreateWorldRootLayer",
          "SetVisible",
          "ClearLayerElements",
          "ClearLayerElements",
          "OnEditorExitLayerButton",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_MapEditorUIComponent",
        "methods": [
          "ToggleMap",
          "OnMapInit",
          "OnMapOpen",
          "OnMapClose",
          "IsEditorMapOpen",
          "IsConfigEditor",
          "OnEditorModeChange",
          "SetCameraIconColor",
          "OnEditorCameraCreate",
          "OnMenuUpdate",
          "HandlerAttachedScripted",
          "HandlerDeattached",
          "ToggleMap"
        ]
      },
      {
        "class_name": "SCR_MenuEditorUIComponent",
        "methods": [
          "GetAlwaysShownWidget",
          "GetHideableWidget",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_ModesEditorUIComponent",
        "methods": [
          "OnModeAdd",
          "RefreshModes",
          "OnModeRemove",
          "RefreshModes",
          "CreateDropdown",
          "RefreshModes",
          "OnModeSelected",
          "OnModeChange",
          "CloseDialog",
          "RefreshModes",
          "RefreshModes",
          "OnDialogOpened",
          "SetSiblingMode",
          "OnEditorModePrev",
          "SetSiblingMode",
          "OnEditorModeNext",
          "SetSiblingMode",
          "OnRepeat",
          "OnInputDeviceIsGamepad",
          "CloseDialog",
          "OnDropdownOpen",
          "OnDropdownClosed",
          "CloseDialog",
          "HandlerAttachedScripted",
          "OnModeAdd",
          "CreateDropdown",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_MouseAreaEditorUIComponent",
        "methods": [
          "IsMouseOn",
          "OnInputDeviceIsGamepad",
          "OnMouseEnter",
          "OnMouseLeave",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PingEditorUIComponent",
        "methods": [
          "OnEditorPing",
          "SendPing",
          "OnEditorPingUnlimitedOnly",
          "SendPing",
          "SendPing",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PingEffectsEditorUIComponent",
        "methods": [
          "HandlerAttached",
          "FadeOut",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PlacingEditorUIComponent",
        "methods": [
          "OnHoverChange",
          "OnEditorTransformRotationModifierUp",
          "OnEditorPlace",
          "Place",
          "OnEditorPlaceAndCancel",
          "Place",
          "OnEditorPlacePlayer",
          "Place",
          "OnEditorPlacePlayerAndCancel",
          "Place",
          "Place",
          "OnEditorCancelPlacingUp",
          "CancelPlacing",
          "CancelPlacing",
          "EnablePlacing",
          "CanClick",
          "IsChildOf",
          "OnSelectedPrefabChange",
          "OnMenuUpdate",
          "ActivatePreviewContext",
          "ProcessInput",
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "GetPreviewStateToShow",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PlayerHubWarningEditorUIComponent",
        "methods": [
          "UpdateTimer",
          "TimerDone",
          "HideTimer",
          "TimerDone",
          "HideTimer",
          "SetWarningTimer",
          "CancelWarningTimer",
          "ShowTimer",
          "HideTimer",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PlayersListEditorUIComponent",
        "methods": [
          "AddPlayer",
          "UpdateCount",
          "RemovePlayer",
          "UpdateCount",
          "UpdateCount",
          "OnPlayerDelegatesChanged",
          "AddPlayer",
          "RemovePlayer",
          "OnSpawn",
          "OnDeath",
          "HandlerAttachedScripted",
          "AddPlayer",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PlayersListEntryEditorUIComponent",
        "methods": [
          "SetName",
          "SetDead",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_PreviewEntityEditorUIComponent",
        "methods": [
          "OnHoverChange",
          "OnPreviewCreate",
          "SetRotationPivot",
          "OnEditorTransformRotationModifierUp",
          "OnHoverChange",
          "OnPreviewDelete",
          "OnEditorTransformSnapToSurface",
          "OnEditorTransformRotationModifierDown",
          "SetRotationPivot",
          "OnEditorTransformRotationModifierUp",
          "OnEditorTransformMoveVerticalModifierDown",
          "OnEditorTransformMoveVerticalModifierUp",
          "SetRotationPivot",
          "SetClickPos",
          "HasMouseMoved",
          "GetCursorPos",
          "GetTraceDis",
          "UpdateDirIndicator",
          "GetPreviewStateToShow",
          "MoveHorizontalTowardsCursor",
          "GetCursorPos",
          "MoveVertical",
          "MoveVerticalTowardsCursor",
          "GetCursorPos",
          "Rotate",
          "RotateInSlot",
          "RotateTowardsCursor",
          "OnEditorTransformRotationModifierUp",
          "GetCursorPos",
          "GetPreviewPosAboveGeometry",
          "GetPreviewPosAboveTerrain",
          "GetPreviewPosAboveTerrain",
          "GetPreviewPosAboveSea",
          "GetPreviewPosAboveSea",
          "ProcessInput",
          "Rotate",
          "RotateTowardsCursor",
          "MoveVerticalTowardsCursor",
          "MoveHorizontalTowardsCursor",
          "UpdateDirIndicator",
          "ActivatePreviewContext",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_QuickPlacingEditorUIComponent",
        "methods": [
          "Show",
          "SetCoef",
          "SetCoef",
          "SetCoef",
          "SetOffsets",
          "SetOffsets",
          "OnMenuUpdate",
          "OnShortcut",
          "Show",
          "OnMouseEnter",
          "Show",
          "OnMouseLeave",
          "Show",
          "HandlerAttachedScripted",
          "SetCoef",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ScenarioPanelEditorUIComponent",
        "methods": [
          "ShowButtonOrFullWindow",
          "OnAttributeChanges",
          "StopListeningToEvents",
          "ShowButtonOrFullWindow",
          "OnPlayerSpawned",
          "StopListeningToEvents",
          "ShowButtonOrFullWindow",
          "OnFactionSetPlayable",
          "StopListeningToEvents",
          "ShowButtonOrFullWindow",
          "StopListeningToEvents",
          "HandlerAttached",
          "ShowButtonOrFullWindow",
          "HandlerDeattached",
          "StopListeningToEvents"
        ]
      },
      {
        "class_name": "SCR_SelectionEditorUIComponent",
        "methods": [
          "DisableMultiSelection",
          "EditorToggleSelection",
          "ShowGUI",
          "EditorSetSelection",
          "ShowGUI",
          "EditorAddSelection",
          "ShowGUI",
          "EditorClearSelection",
          "ShowGUI",
          "EditorSelectAll",
          "ShowGUI",
          "EditorDrawSetSelectionDown",
          "DrawFrameDown",
          "EditorDrawSetSelectionPressed",
          "DrawFramePressed",
          "EditorDrawSetSelectionUp",
          "DrawFrameUp",
          "EditorDrawToggleSelectionDown",
          "DrawFrameDown",
          "EditorDrawToggleSelectionPressed",
          "DrawFramePressed",
          "EditorDrawToggleSelectionUp",
          "DrawFrameUp",
          "EditorDrawSelectionCancel",
          "CancelFrame",
          "DrawFrameDown",
          "DrawFrameUp",
          "ResetFrame",
          "DrawFramePressed",
          "ResetFrame",
          "DrawFrameUp",
          "DrawFrameMouseAndKeyboard",
          "DrawFrameController",
          "ConfirmFrame",
          "EditorToggleSelection",
          "EditorSetSelection",
          "ResetFrame",
          "CancelFrame",
          "ResetFrame",
          "ResetFrame",
          "OnCurrentLayerChange",
          "EnableSelection",
          "EnableSelection",
          "IsMapOpened",
          "OnMenuUpdate",
          "OnMenuFocusLost",
          "CancelFrame",
          "GetFrameWidget",
          "EditorSaveSelection",
          "EditorSaveSelection1",
          "EditorSaveSelection2",
          "EditorSaveSelection3",
          "EditorSaveSelection4",
          "EditorSaveSelection5",
          "EditorSaveSelection6",
          "EditorSaveSelection7",
          "EditorSaveSelection8",
          "EditorSaveSelection9",
          "EditorSaveSelection0",
          "EditorLoadSelection",
          "EditorLoadSelection1",
          "EditorLoadSelection2",
          "EditorLoadSelection3",
          "EditorLoadSelection4",
          "EditorLoadSelection5",
          "EditorLoadSelection6",
          "EditorLoadSelection7",
          "EditorLoadSelection8",
          "EditorLoadSelection9",
          "EditorLoadSelection0",
          "EditorTeleportSelection",
          "EditorTeleportSelection1",
          "EditorTeleportSelection2",
          "EditorTeleportSelection3",
          "EditorTeleportSelection4",
          "EditorTeleportSelection5",
          "EditorTeleportSelection6",
          "EditorTeleportSelection7",
          "EditorTeleportSelection8",
          "EditorTeleportSelection9",
          "EditorTeleportSelection0",
          "IsInputDisabled",
          "ShowGUI",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ServerInfoUIComponent",
        "methods": [
          "OnReceive",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_SetModeColorEditorUIComponent",
        "methods": [
          "OnModeChanged",
          "SetColor",
          "SetColor",
          "HandlerAttached",
          "OnModeChanged",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_SetModeColorSelectedButtonEditorUIComponent",
        "methods": [
          "SetColor"
        ]
      },
      {
        "class_name": "SCR_ShowHideInEditorUIComponent",
        "methods": [
          "OnEditorOpen",
          "OnEditorClosed",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_TransformingEditorUIComponent",
        "methods": [
          "OnHoverChange",
          "OnEditorTransformRotationModifierUp",
          "OnEditorTransformToggleDown",
          "ConfirmEditing",
          "OnEditorTransformDown",
          "OnEditorTransformDown",
          "StartEditing",
          "OnEditorCancelTransformingUp",
          "CancelEditing",
          "StartEditing",
          "ConfirmEditing",
          "CancelEditing",
          "Clean",
          "CancelEditing",
          "Clean",
          "Clean",
          "OnTransformationEnd",
          "Clean",
          "OnInputDeviceIsGamepad",
          "CancelEditing",
          "OnMenuUpdate",
          "ActivatePreviewContext",
          "StartEditing",
          "ProcessInput",
          "HandlerAttachedScripted",
          "OnMapOpen",
          "CancelEditing",
          "HandlerDeattached",
          "GetPreviewStateToShow"
        ]
      },
      {
        "class_name": "SCR_UnlimitedDisclaimerEditorUIComponent",
        "methods": [
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_BaseEditableEntityUIComponent",
        "methods": [
          "OnRefresh",
          "OnInit",
          "OnShownOffScreen",
          "Init",
          "Init",
          "Exit",
          "GetEntity",
          "GetWidget",
          "IsVisible",
          "SetVisible",
          "IsShownOffScreen",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_CharacterEditableEntityUIComponent",
        "methods": [
          "OnInit"
        ]
      },
      {
        "class_name": "SCR_CommentEditableEntityUIComponent",
        "methods": [
          "OnInit",
          "OnEntityChanged"
        ]
      },
      {
        "class_name": "SCR_CustomArrayEditableEntityUIComponent",
        "methods": [
          "OnInit"
        ]
      },
      {
        "class_name": "SCR_CustomEditableEntityUIComponent",
        "methods": [
          "OnInit"
        ]
      },
      {
        "class_name": "SCR_EditableEntityLinkUIComponent",
        "methods": [
          "SetLinkedEntity",
          "GetLinkedEntity",
          "OnMenuUpdate",
          "OnMouseEnter",
          "OnMouseLeave",
          "IsUnique",
          "HandlerAttachedScripted"
        ]
      },
      {
        "class_name": "SCR_GroupEditableEntityUIComponent",
        "methods": [
          "RefreshSymbol",
          "RefreshSymbol",
          "RefreshSymbol",
          "OnRefresh",
          "RefreshSymbol",
          "OnInit",
          "RefreshSymbol"
        ]
      },
      {
        "class_name": "SCR_LayerEditableEntityUIComponent",
        "methods": [
          "OnParentEntityChanged",
          "OnInit",
          "OnParentEntityChanged",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PlayerEditableEntityUIComponent",
        "methods": [
          "SetName",
          "OnShownOffScreen",
          "OnInit"
        ]
      },
      {
        "class_name": "SCR_VehicleEditableEntityUIComponent",
        "methods": [
          "DetermineNameVisibility",
          "OnInit",
          "OnRefresh",
          "OnRefresh",
          "OnUpdate"
        ]
      },
      {
        "class_name": "SCR_BaseEntitiesEditorUIEffect",
        "methods": [
          "GetState",
          "ApplyOn"
        ]
      },
      {
        "class_name": "SCR_BaseEntitiesEditorUIEffectTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_DisabledEntitiesEditorUIEffect",
        "methods": [
          "ApplyOn"
        ]
      },
      {
        "class_name": "SCR_OpacityEntitiesEditorUIEffect",
        "methods": [
          "ApplyOn"
        ]
      },
      {
        "class_name": "SCR_EditableEntityBaseSlotUIComponent",
        "methods": [
          "IsEmpty",
          "GetEntity",
          "CreateWidget",
          "CreateWidget",
          "CreateWidgetForEntity",
          "CreateWidget",
          "CreateWidgetForEntity",
          "CreateWidgetForEntity",
          "CreateWidgetFromLayout",
          "DeleteWidget",
          "SetFactionColor",
          "RefreshSlot",
          "ResetSlot",
          "DeleteWidget",
          "CreateWidget",
          "UpdateSlot",
          "InitSlot",
          "SetFactionColor",
          "DeleteSlot",
          "IsPreview",
          "GetWidget",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_EditableEntityCustomSlotUIComponent",
        "methods": [
          "UpdateSlot",
          "ShowOffScreen",
          "InitSlot"
        ]
      },
      {
        "class_name": "SCR_EditableEntitySceneSlotUIComponent",
        "methods": [
          "UpdateShowOffScreen",
          "IsShownOffScreen",
          "SetOffScreenPadding",
          "GetOffScreenPadding",
          "GetOffScreenWidget",
          "IsPreview",
          "GetIntersectionPoint",
          "ShowOffScreen",
          "UpdateSlot",
          "ShowOffScreen",
          "CreateWidgetForEntity",
          "UpdateShowOffScreen",
          "DeleteWidget",
          "UpdateShowOffScreen",
          "InitSlot",
          "SetOffScreenPadding"
        ]
      },
      {
        "class_name": "SCR_EditableEntitySlotManagerUIComponent",
        "methods": [
          "GetForcedStates",
          "FindSlot",
          "DeleteSlot",
          "InsertSlot",
          "InsertSlotExternal",
          "InitSlotManager",
          "ClearSlots",
          "GetEntitySlot",
          "InitSlotManager",
          "IsUnique",
          "HandlerAttachedScripted",
          "InitSlotManager",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_EntitiesEditorUIComponent",
        "methods": [
          "FindSlot",
          "InsertSlot",
          "ApplyAutoEffect",
          "DeleteSlot",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnInputDeviceIsGamepad",
          "OnEffect",
          "ApplyAutoEffect",
          "ApplyAutoEffect",
          "OnMenuUpdate",
          "PlaceAttachedSlots",
          "PlaceAttachedSlots",
          "PlaceAttachedSlots",
          "OnMenuFocusLost",
          "OnMenuFocusGained",
          "HandlerAttachedScripted",
          "OnMenuFocusLost",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_EditableEntityUISlotSize",
        "methods": [
          "GetType",
          "GetSize"
        ]
      },
      {
        "class_name": "SCR_WaypointLinesEditorUIComponent",
        "methods": [
          "OnMenuUpdate",
          "OnChanged",
          "HandlerAttachedScripted",
          "OnChanged",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_SaveEditorUIComponent",
        "methods": [
          "OnClose",
          "CloseMenu",
          "OnConfirm",
          "OnConfirmPrompt",
          "OnConfirmPrompt",
          "LoadEntry",
          "SaveEntry",
          "CloseMenu",
          "OnDelete",
          "OnDeletePrompt",
          "SelectEntry",
          "CloseMenu",
          "SaveEntry",
          "LoadEntry",
          "OnLoadEntryUploadResponse",
          "CloseMenu",
          "SelectEntry",
          "UpdateButtons",
          "UpdateButtons",
          "OnFrame",
          "OnClick",
          "SelectEntry",
          "OnFocus",
          "SelectEntry",
          "OnDoubleClick",
          "OnClick",
          "OnConfirm",
          "HandlerAttached",
          "UpdateButtons",
          "SelectEntry",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_BudgetProgressEditorUIComponent",
        "methods": [
          "HandlerAttached",
          "ShowBudget",
          "ShowBudgetChange",
          "HideBudgetChange",
          "SetIconTexture",
          "GetIconWidhget"
        ]
      },
      {
        "class_name": "SCR_BudgetUIComponent",
        "methods": [
          "HandlerAttachedScripted",
          "InitializeBudgets",
          "HandlerDeattached",
          "IsUnique",
          "InitializeBudgets",
          "SetBudgetType",
          "OnBudgetUpdate",
          "OnBudgetMaxUpdate",
          "OnBudgetPreviewUpdate",
          "ResetWidgetPreviewData",
          "SetBudgetUIIcon",
          "SetBudgetType",
          "SetBudgetUIIcon",
          "GetBudgetType",
          "GetUIComponent"
        ]
      },
      {
        "class_name": "SCR_ToolbarItemNotificationEditorUIComponent",
        "methods": [
          "SetNotification",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_ActionToolbarItemEditorUIComponent",
        "methods": [
          "OnToggleChange",
          "SetAction",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_BaseToolbarItemEditorUIComponent",
        "methods": [
          "InitToolbarItem"
        ]
      },
      {
        "class_name": "SCR_EntityToolbarItemEditorUIComponent",
        "methods": [
          "InitToolbarItem",
          "SetEntity",
          "SetName",
          "RefreshName",
          "SetName",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PlayerToolbarItemEditorUIComponent",
        "methods": [
          "SetEntity",
          "OnFocus",
          "OnFocusLost"
        ]
      },
      {
        "class_name": "SCR_ActionsToolbarEditorUIComponent",
        "methods": [
          "CreateItem",
          "ShowEntries",
          "Refresh",
          "OnGlobalNightModeEnabledChanged",
          "Refresh",
          "OnRepeat",
          "OnClick",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_BaseToolbarEditorUIComponent",
        "methods": [
          "IsUnderCursor",
          "CreateItem",
          "AllowFocus",
          "DeleteAllItems",
          "SetToolbarVisible",
          "ShowEntries",
          "Refresh",
          "DeleteAllItems",
          "ShowEntries",
          "SetToolbarVisible",
          "MarkForRefresh",
          "OnPageChanged",
          "CopyPage",
          "CanOpenDialog",
          "OnDialogOpened",
          "CopyPage",
          "OnDialogClosed",
          "CopyPage",
          "OnMouseEnter",
          "OnMouseLeave",
          "HandlerAttachedScripted",
          "Refresh",
          "HandlerAttached",
          "SetToolbarVisible"
        ]
      },
      {
        "class_name": "SCR_CommandToolbarEditorUIComponent",
        "methods": [
          "CreateItem",
          "OnEditorQuickCommand",
          "OnEditorQuickCommand1",
          "OnEditorQuickCommand2",
          "OnEditorQuickCommand3",
          "OnEditorQuickCommand4",
          "OnEditorQuickCommand5",
          "OnEditorQuickCommand6",
          "OnEditorQuickCommand7",
          "OnEditorQuickCommand8",
          "OnEditorQuickCommand9",
          "OnEditorQuickCommand10",
          "ShowEntries",
          "CreateItem",
          "Refresh",
          "OnFilterChange",
          "Refresh",
          "IsUnique",
          "OnInputDeviceIsGamepad",
          "Refresh",
          "DeleteAllItems",
          "OnClick",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_CycleWaypointEditorUIComponent",
        "methods": [
          "OnInputDeviceIsGamepad",
          "UpdateInputVisuals",
          "UpdateInputVisuals",
          "OnSelectedEntitiesChange",
          "HandlerAttached",
          "UpdateInputVisuals",
          "HandlerDeattached",
          "ToggleCycleWaypoints",
          "EnableCycleWaypoints",
          "DisableCycleWaypoints",
          "EnableCycleWaypoints",
          "DisableCycleWaypoints",
          "GetSelectedGroups",
          "GetHasCycleWaypointsActivated",
          "CanShowToggleCycleWaypoint"
        ]
      },
      {
        "class_name": "SCR_EntitiesToolbarEditorUIComponent",
        "methods": [
          "CreateItem",
          "Clear",
          "OnChanged",
          "Refresh",
          "OnEditorSetSelection",
          "CloseDialog",
          "OnTypeTab",
          "Refresh",
          "ShowEntries",
          "Clear",
          "CreateItem",
          "IsUnique",
          "SetToolbarVisible",
          "Refresh",
          "OnRepeat",
          "CopyPage",
          "OnMenuUpdate",
          "OnFocus",
          "HandlerAttachedScripted",
          "OnTypeTab",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_EntityToolbarTypeList",
        "methods": [
          "GetType",
          "GetTypeBlackList"
        ]
      },
      {
        "class_name": "SCR_FactionsToolbarEditorUIComponent",
        "methods": [
          "CanOpenDialog",
          "FactionPlayabilityChanged",
          "Refresh",
          "HandlerAttachedScripted",
          "Refresh",
          "HandlerDeattached",
          "OnEditorMenuConfirmInput"
        ]
      },
      {
        "class_name": "SCR_ModeInfoBarEditorUIComponent",
        "methods": [
          "OpenPauseMenuButton",
          "CloseEditorButton",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_PlacingToolbarEditorUIComponent",
        "methods": [
          "OnCardHover",
          "OnCardLMB",
          "CreateItem",
          "OnPageChanged",
          "ShowEntries",
          "CreateItem",
          "OnBudgetMaxReached",
          "OnBrowserEntriesChanged",
          "Refresh",
          "OnResourceTypeEnabledChanged",
          "Refresh",
          "Refresh",
          "OnRepeat",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ToolbarContextBrowserBuildingUIComponent",
        "methods": [
          "OpenAssetBrowserButton",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_ToolbarContextBrowserEditorUIComponent",
        "methods": [
          "OpenAssetBrowserButton",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_TooltipAreaEditorUIComponent",
        "methods": [
          "GetAreaWidget",
          "GetOffsets",
          "ClearTooltips",
          "ClearAreaWidget",
          "ClearAreaWidget",
          "ClearAreaWidget",
          "HandlerAttachedScripted"
        ]
      },
      {
        "class_name": "SCR_TooltipManagerEditorUIComponent",
        "methods": [
          "SetInfo",
          "ResetInfo",
          "ResetInfo",
          "ResetAnimation",
          "RefreshInfo",
          "PlayAnimation",
          "ResetAnimation",
          "ShowEntityTooltip",
          "OnHover",
          "ResetInfo",
          "ShowEntityTooltip",
          "OnInputDeviceIsGamepad",
          "OnRadialMenuToggle",
          "ResetInfo",
          "OnContextMenuToggle",
          "ResetInfo",
          "OnMenuUpdate",
          "OnMenuFocusLost",
          "ResetInfo",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_TooltipEditorEntry",
        "methods": [
          "GetTooltipType",
          "GetTooltipLayout"
        ]
      },
      {
        "class_name": "SCR_BaseTooltipTargetEditorUIComponent",
        "methods": [
          "SetTooltipType",
          "GetInfo",
          "GetTarget",
          "ShowTooltip",
          "HideTooltip",
          "RefreshTooltip",
          "OnFocus",
          "ShowTooltip",
          "OnFocusLost",
          "HideTooltip",
          "OnMouseEnter",
          "OnFocus",
          "OnMouseLeave",
          "OnFocusLost",
          "IsUnique",
          "HandlerDeattached",
          "HideTooltip"
        ]
      },
      {
        "class_name": "SCR_CustomTooltipTargetEditorUIComponent",
        "methods": [
          "GetInfo"
        ]
      },
      {
        "class_name": "SCR_LinkTooltipTargetEditorUIComponent",
        "methods": [
          "SetInfo",
          "RefreshTooltip",
          "GetInfo",
          "GetTarget",
          "SetInfo"
        ]
      },
      {
        "class_name": "SCR_AIStateTooltipDetail",
        "methods": [
          "UpdateDetail",
          "SetAIStateText",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_ArsenalSaveTypeTooltipDetail",
        "methods": [
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_BaseResourceTooltipDetail",
        "methods": [
          "NeedUpdate",
          "TEMP_OnInteractorReplicated",
          "GetConsumer",
          "UpdateDetail",
          "InitDetail",
          "UpdateDetail",
          "IsValid"
        ]
      },
      {
        "class_name": "SCR_BloodTooltipDetail",
        "methods": [
          "NeedUpdate",
          "UpdateDetail",
          "SetBarAndPercentageValue",
          "SetBarAndPercentageValue",
          "UpdateBloodBar",
          "SetBarColor",
          "InitDetail",
          "UpdateDetail"
        ]
      },
      {
        "class_name": "SCR_BloodTooltipDetailBlockEditorUIComponent",
        "methods": [
          "SetBloodStateVisuals",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_BuilderNameTooltipDetail",
        "methods": [
          "InitDetail",
          "GetPlayerName"
        ]
      },
      {
        "class_name": "SCR_CommentPlacablePrefabDetail",
        "methods": [
          "UpdateDetail",
          "GetExtendedEntityCount",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_DamageDisabledTooltipDetail",
        "methods": [
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_DebugTooltipDetail",
        "methods": [
          "GetGUID",
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_DescriptionTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_DpsConditionBarBaseTooltipDetail",
        "methods": [
          "NeedUpdate",
          "UpdateDetail",
          "SetBarColor",
          "SetBarColor",
          "SetBarAndPercentageValue",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_EntityConditionTooltipDetail",
        "methods": [
          "CreateDetail",
          "NeedUpdate",
          "UpdateDetail",
          "CreateDestroyIcon",
          "CreateConditionIcons",
          "CreateConditionIcons",
          "ClearConditionHolder",
          "CreateDestroyIcon",
          "ClearConditionHolder",
          "ClearConditionHolder",
          "InitDetail",
          "UpdateDetail",
          "HasConditions"
        ]
      },
      {
        "class_name": "SCR_EntityTooltipDetail",
        "methods": [
          "NeedUpdate",
          "CreateDetail",
          "UpdateDetail",
          "InitDetail",
          "GetShowLabel"
        ]
      },
      {
        "class_name": "SCR_ExplosiveChargeDetail",
        "methods": [
          "NeedUpdate",
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_FactionGroupsTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_FactionHintTooltipDetail",
        "methods": [
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_FactionPlayersTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_FactionTasksAndSpawnPointsTooltipDetail",
        "methods": [
          "UpdateDetail",
          "ToggleWarning",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_FactionTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_FrequencyTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_FuelTooltipDetail",
        "methods": [
          "NeedUpdate",
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_MapGridTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_GroupOwnerTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_GroupSizeTooltipDetail",
        "methods": [
          "NeedUpdate",
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_HealthTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_LabelDescriptionTooltipDetail",
        "methods": [
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_MultiOccupantVehcileTooltipDetail",
        "methods": [
          "NeedUpdate",
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_PassagerTooltipDetail",
        "methods": [
          "NeedUpdate",
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_ResourceAvailableTooltipDetail",
        "methods": [
          "GetConsumer",
          "IsValid",
          "UpdateDetail"
        ]
      },
      {
        "class_name": "SCR_ResourceStorageTooltipDetail",
        "methods": [
          "GetConsumer",
          "IsValid",
          "UpdateDetail"
        ]
      },
      {
        "class_name": "SCR_SuppliesBaseTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_SupplyCapacityTooltipDetail",
        "methods": [
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_SupplyRefundTooltipDetail",
        "methods": [
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_TaskCompleteDescriptionTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_TextAndWarningTooltipDetail",
        "methods": [
          "InitDetail",
          "ToggleWarning"
        ]
      },
      {
        "class_name": "SCR_WaypointIndexTooltipDetail",
        "methods": [
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_WeaponsTooltipDetail",
        "methods": [
          "NeedUpdate",
          "UpdateDetail",
          "InitDetail"
        ]
      },
      {
        "class_name": "SCR_ActionTooltipEditorUIComponent",
        "methods": [
          "SetTooltip"
        ]
      },
      {
        "class_name": "SCR_BaseTooltipEditorUIComponent",
        "methods": [
          "UpdateTooltip",
          "SetTooltip",
          "IsUnique"
        ]
      },
      {
        "class_name": "SCR_EntityTooltipEditorUIComponent",
        "methods": [
          "UpdateTooltip",
          "SetTooltip"
        ]
      },
      {
        "class_name": "SCR_EntityTooltipDetailType",
        "methods": [
          "UpdateDetailType",
          "CreateDetailType"
        ]
      },
      {
        "class_name": "SCR_MultiTextTooltipUIComponent",
        "methods": [
          "ClearAllText",
          "SetInitTextColor",
          "AddText",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_EditorPingInfoDisplay",
        "methods": [
          "OnEditorPingAction",
          "SendPing",
          "OnEditorPingUnlimitedOnlyAction",
          "SendPing",
          "SendPing",
          "OnPingEntityRegister",
          "OnPingEntityUnregister",
          "UpdateValues",
          "OnStartDraw",
          "OnStopDraw"
        ]
      },
      {
        "class_name": "EditorAttributesDialogUI",
        "methods": [
          "InitCategories",
          "RemoveAutoClose",
          "OnMenuOpen",
          "InitCategories",
          "OnMenuClose",
          "RemoveAutoClose"
        ]
      },
      {
        "class_name": "EditorBrowserDialogUI",
        "methods": [
          "CloseWithoutPlacing",
          "CloseSelf",
          "OnMenuOpen",
          "OnMenuClose"
        ]
      },
      {
        "class_name": "EditorMenuBase",
        "methods": [
          "OpenDialog",
          "OpenMenu",
          "CloseSelf",
          "DeleteAllChildWidgets",
          "GetWidgetByName"
        ]
      },
      {
        "class_name": "EditorMenuUI",
        "methods": [
          "OnShowPlayerList",
          "OpenPauseMenu",
          "OnMenuInit",
          "OnMenuClose",
          "ChatToggle"
        ]
      },
      {
        "class_name": "SCR_EditorActionRadialEntry",
        "methods": [
          "OnPerform",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetEntryNameScript",
          "GetEntryDescriptionScript",
          "GetEntryIconPathScript",
          "SCR_EditorActionRadialEntry"
        ]
      },
      {
        "class_name": "SCR_EditorActionSelectionMenuEntry",
        "methods": [
          "GetAction",
          "GetActionShortcut",
          "OnPerform",
          "SCR_EditorActionSelectionMenuEntry"
        ]
      },
      {
        "class_name": "SCR_EditorModeRadialEntry",
        "methods": [
          "OnPerform",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetEntryNameScript",
          "GetEntryDescriptionScript",
          "GetEntryIconPathScript",
          "SCR_EditorModeRadialEntry"
        ]
      },
      {
        "class_name": "BTRBodyDustTrail",
        "methods": [
          "BTRBodyDustTrail",
          "SetEffectPath",
          "UpdateVehicleDustEffect"
        ]
      },
      {
        "class_name": "VehicleBodyEffectBase",
        "methods": [
          "VehicleBodyEffectBase",
          "UpdateVehicleDustEffect"
        ]
      },
      {
        "class_name": "SCR_CampaignRadioMsg",
        "methods": [
          "SetRadioMsg",
          "SetFactionId",
          "SetBaseCallsign",
          "SetCallerCallsign",
          "SetCalledCallsign",
          "SetIsPublic",
          "SetParam",
          "SetPlayerID",
          "GetSeed",
          "OnDelivery"
        ]
      },
      {
        "class_name": "SCR_CleanSweepArea",
        "methods": [
          "_WB_AfterWorldUpdate",
          "SCR_CleanSweepArea"
        ]
      },
      {
        "class_name": "SCR_DebrisBuildingEntity",
        "methods": [
          "SpawnBuildingDebris",
          "SetParentBuilding",
          "GetLinearVelocity",
          "GetAngularVelocity",
          "SetLinearVelocity",
          "SetAngularVelocity",
          "SetBuildingRegion",
          "GetTransform",
          "SetTransform",
          "SCR_DebrisBuildingEntity",
          "SetEventMask",
          "SetFlags"
        ]
      },
      {
        "class_name": "SCR_DebrisSmallEntity",
        "methods": [
          "IsGamePlaying",
          "RegisterDebris",
          "UnregisterDebris",
          "GetDistanceToCamera",
          "EOnContact",
          "PlaySound",
          "DeleteDebris",
          "PlaySound",
          "GetTransform",
          "EOnFrame",
          "DeleteDebris",
          "DeleteDebris",
          "SpawnDebris",
          "DeleteRandomDebris",
          "DeleteDebris",
          "UnregisterDebris",
          "ClearEventMask",
          "EOnPostFrame",
          "EOnInit",
          "RegisterDebris",
          "SCR_DebrisSmallEntity",
          "SetEventMask",
          "SetFlags",
          "UnregisterDebris"
        ]
      },
      {
        "class_name": "CommentEntity",
        "methods": [
          "DrawComment",
          "GetWorldTransform",
          "_WB_GetBoundBox",
          "_WB_AfterWorldUpdate",
          "DrawComment",
          "DrawComment",
          "CommentEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_GridSpawnerEntity",
        "methods": [
          "GetObjectCount",
          "GetObjectName",
          "GetObjectType",
          "Spawn",
          "Spawn",
          "Spawn",
          "DeleteEntities",
          "DeleteEntities",
          "EOnFrame",
          "EOnInit",
          "SCR_GridSpawnerEntity",
          "SetEventMask",
          "DeleteEntities"
        ]
      },
      {
        "class_name": "SCR_Joint6DOFEntity",
        "methods": [
          "DebugDisplay",
          "GetTransform",
          "GetSpringScale",
          "GetSpringLinDampScale",
          "GetSpringAngDampScale",
          "CreateJoint"
        ]
      },
      {
        "class_name": "SCR_JointBaseEntity",
        "methods": [
          "MoveJointToParentBone",
          "GetBoneMatrix",
          "_WB_AfterWorldUpdate",
          "DebugDisplay",
          "DestroyJoint",
          "TryCreateJoint",
          "DestroyJoint",
          "CreateFailedJointDebug",
          "CreateFailedJointDebug",
          "CreateFailedJointDebug",
          "CreateFailedJointDebug",
          "GetTransform",
          "GetTransform",
          "RotateJoint",
          "CreateJoint",
          "RotateJoint",
          "CreateJoint",
          "CreateFailedJointDebug",
          "DebugDisplay",
          "MoveJointToParentBone",
          "SCR_JointBaseEntity",
          "SetEventMask",
          "DestroyJoint"
        ]
      },
      {
        "class_name": "SCR_JointConeTwistEntity",
        "methods": [
          "DebugDisplay",
          "GetTransform",
          "RotateJoint",
          "CreateJoint"
        ]
      },
      {
        "class_name": "SCR_JointDummyHolderEntity",
        "methods": [
          "SetDummyTransform",
          "SetTransform",
          "SetTransform",
          "GetTransform",
          "SCR_JointDummyHolderEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_JointFixedEntity",
        "methods": [
          "DebugDisplay",
          "GetTransform",
          "CreateJoint"
        ]
      },
      {
        "class_name": "SCR_JointHingeEntity",
        "methods": [
          "DebugDisplay",
          "GetTransform",
          "RotateJoint",
          "CreateJoint"
        ]
      },
      {
        "class_name": "SCR_JointSliderEntity",
        "methods": [
          "DebugDisplay",
          "GetTransform",
          "RotateJoint",
          "CreateJoint"
        ]
      },
      {
        "class_name": "SCR_ModelAutotestCamera",
        "methods": [
          "GetIsRelativeToCenter",
          "GetLabel",
          "GetPosition",
          "GetRotation",
          "GetDuration",
          "LogFramesPerSecond",
          "ClearFramesPerSecond",
          "GetFramesPerSecondsData",
          "SetAsCamera"
        ]
      },
      {
        "class_name": "SCR_ModelAutotestEntity",
        "methods": [
          "GetPersistentDataPath",
          "GetFormattedTimestamp",
          "ValidateAutotestSettings",
          "SetCamera",
          "OnSetCamera",
          "WriteMeasurementData",
          "OnSetCamera",
          "OnSetModel",
          "OnAutotestInitialized",
          "OnAutotestFrame",
          "EOnFrame",
          "WriteMeasurementData",
          "OnSetModel",
          "OnAutotestFrame",
          "GetCurrentTestDuration",
          "GetCurrentTestMaxDuration",
          "EOnInit",
          "OnAutotestInitialized"
        ]
      },
      {
        "class_name": "PolylineArea",
        "methods": [
          "IsPointInsideBBox",
          "IsEntityInside",
          "IsPosInside",
          "EOnFrame",
          "EOnInit",
          "GetWorldTransform",
          "LoadPolyline",
          "PolylineArea",
          "SetFlags",
          "SetEventMask",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_BranchedJunctionPowerPole",
        "methods": [
          "SCR_BranchedJunctionPowerPole"
        ]
      },
      {
        "class_name": "SCR_JunctionPowerPole",
        "methods": [
          "GetSlotsCount",
          "TryGetSlot",
          "CoordToParent",
          "CoordToParent",
          "CoordToParent",
          "SCR_JunctionPowerPole"
        ]
      },
      {
        "class_name": "SCR_PowerLineJointEntity",
        "methods": [
          "GetJoint",
          "OnChildMoved",
          "GenerateCurve",
          "GetPivots",
          "DrawDebugShape",
          "DrawDebugShapePivots",
          "ModifyShape",
          "DrawDebug",
          "ModifyShape",
          "DrawDebugShape",
          "_WB_OnKeyChanged",
          "GenerateCurve",
          "GetPivots",
          "_WB_AfterWorldUpdate",
          "GenerateCurve",
          "GetPivots",
          "DrawDebug",
          "SCR_PowerLineJointEntity"
        ]
      },
      {
        "class_name": "SCR_PowerPole",
        "methods": [
          "GetSlotsCount",
          "TryGetSlot",
          "CoordToParent",
          "_WB_OnKeyChanged",
          "UpdateDebugShapes",
          "_WB_AfterWorldUpdate",
          "UpdateDebugShapes",
          "UpdateDebugShapes",
          "SCR_PowerPole",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_BasePreviewConfig",
        "methods": [
          "SaveContainer"
        ]
      },
      {
        "class_name": "SCR_BasePreviewEntity",
        "methods": [
          "SpawnPreview",
          "SetPreviewTransform",
          "SetWorldTransform",
          "SetChildTransform",
          "Update",
          "SetChildTransform",
          "SetWorldTransform",
          "Update",
          "SetLocalTransform",
          "GetWorldTransform",
          "SetPreviewObject",
          "SetObject",
          "GetSourceEntity",
          "GetPreviewBounds",
          "HasMultipleEditableEntities",
          "EOnPreviewInit",
          "EOnRootPreviewInit",
          "SCR_BasePreviewEntity",
          "GetChildren",
          "_WB_GetBoundBox",
          "GetBounds",
          "_WB_AfterWorldUpdate"
        ]
      },
      {
        "class_name": "SCR_BasePreviewEntry",
        "methods": [
          "SetScale",
          "GetScale",
          "SaveTransform",
          "LoadTransform",
          "Log",
          "PrintFormat",
          "CopyFrom",
          "SCR_BasePreviewEntry",
          "SetScale",
          "SaveToContainer"
        ]
      },
      {
        "class_name": "SCR_EditablePreviewEntity",
        "methods": [
          "SpawnPreviewFromEditableOwner",
          "SpawnPreviewFromEditableEntity",
          "SpawnPreviewFromEditableEntity",
          "SpawnPreview",
          "SpawnPreviewFromEditableEntities",
          "GetPreviewEntries",
          "SpawnPreview",
          "GetPreviewEntries",
          "GetPreviewEntries",
          "SaveRootTransform",
          "SaveTerrainTransform",
          "GetPreviewEntries",
          "GetPreviewEntries",
          "GetEditableEntity",
          "EOnPreviewInit",
          "EOnRootPreviewInit"
        ]
      },
      {
        "class_name": "SCR_GenericPreviewEntity",
        "methods": [
          "SpawnPreviewFromEntity",
          "SpawnPreview",
          "GetPreviewEntries",
          "GetPreviewEntries",
          "SaveRootTransform",
          "GetPreviewEntries",
          "GetLocalScale",
          "GetPivotName",
          "GetMesh",
          "SaveTerrainTransform",
          "SaveRootTransform"
        ]
      },
      {
        "class_name": "SCR_PrefabPreviewEntity",
        "methods": [
          "SpawnPreviewFromPrefab",
          "GetPreviewEntries",
          "GetPreviewEntries",
          "GetPreviewEntriesFromSlot",
          "GetPreviewEntries",
          "GetPreviewEntriesFromSlot",
          "GetPreviewEntries",
          "GetPreviewEntriesFromLink",
          "GetPreviewEntries",
          "CreatePrefabFromSource",
          "GetPreviewEntries",
          "_WB_OnContextMenu",
          "CreatePrefabFromSource"
        ]
      },
      {
        "class_name": "SCR_PreviewEntityComponentClass",
        "methods": [
          "GetPreviewPrefab",
          "GetPreviewEntries",
          "IsRuntime"
        ]
      },
      {
        "class_name": "SCR_PreviewEntityComponent",
        "methods": [
          "GetPreviewPrefab",
          "GetPreviewEntries",
          "IsRuntime",
          "GeneratePreviewEntries",
          "GeneratePreviewPrefab",
          "_WB_OnContextMenu",
          "GeneratePreviewEntries",
          "GeneratePreviewPrefab"
        ]
      },
      {
        "class_name": "SCR_RefPreviewEntity",
        "methods": [
          "SpawnAndApplyReference",
          "ApplyReference",
          "UpdateReference",
          "SetAsInstant",
          "ApplyChild",
          "GetWorldTransform",
          "UpdateReference",
          "SetPreviewTransform",
          "EOnPreviewInit"
        ]
      },
      {
        "class_name": "PreviewWorldExample",
        "methods": [
          "PreviewWorldExample",
          "SetEventMask",
          "LoadModel",
          "LoadModel",
          "EOnFrame",
          "LoadModel"
        ]
      },
      {
        "class_name": "ScriptModel",
        "methods": [
          "ScriptModel",
          "SetFlags",
          "SetObject",
          "GetBounds"
        ]
      },
      {
        "class_name": "SCR_AIGroupClass",
        "methods": [
          "ScriptInvokerAIGroup",
          "GetMembers"
        ]
      },
      {
        "class_name": "SCR_AIGroup_DelayedSpawn",
        "methods": [
          "ScriptInvoker_AIGroupOnEmpty_Callback"
        ]
      },
      {
        "class_name": "SCR_AIGroup",
        "methods": [
          "GetGroupUtilityComponent",
          "GetNumberOfMembersToSpawn",
          "SetNumberOfMembersToSpawn",
          "EOnFrame",
          "EndDelayedSpawn",
          "SpawnDelayedGroupMember",
          "SpawnAllImmediately",
          "SpawnDelayedGroupMember",
          "IsInitializing",
          "BeginDelayedSpawn",
          "SetEventMask",
          "DeactivateAI",
          "EndDelayedSpawn",
          "ClearEventMask",
          "ActivateAI",
          "HasRequesterID",
          "RemoveRequester",
          "RPC_DoRemoveRequester",
          "Rpc",
          "GetDeniedRequesters",
          "AddDeniedRequester",
          "RPC_DoAddDeniedRequester",
          "Rpc",
          "ClearRequesters",
          "RPC_DoClearRequesterIDs",
          "Rpc",
          "ClearDeniedRequester",
          "RPC_DoClearDeniedRequester",
          "Rpc",
          "GetRequesterIDs",
          "AddRequester",
          "RPC_DoAddRequester",
          "Rpc",
          "SetFlagIsFromImageSet",
          "SetCustomGroupFlag",
          "GetFlagIsFromImageSet",
          "GetGroupFlag",
          "GetOnFlagSelected",
          "GetOnJoinPrivateGroupRequest",
          "GetOnJoinPrivateGroupConfirm",
          "GetOnJoinPrivateGroupCancel",
          "IsPlayerInGroup",
          "IsPlayerLeader",
          "GetLeaderID",
          "SetPrivate",
          "RPC_SetPrivate",
          "Rpc",
          "IsPrivate",
          "GetDeleteIfNoPlayer",
          "SetCanDeleteIfNoPlayer",
          "IsFull",
          "IsSlave",
          "GetPlayerAndAgentCount",
          "GetAgentCountIncludingMasterAndSlaves",
          "GetTotalAgentCount",
          "GetTotalPlayerCount",
          "SetGroupFlag",
          "RPC_DoSetGroupFlag",
          "Rpc",
          "RPC_DoSetGroupFlag",
          "SetCustomName",
          "RPC_DoSetCustomName",
          "Rpc",
          "RPC_DoSetCustomName",
          "SetCustomDescription",
          "RPC_DoSetCustomDescription",
          "Rpc",
          "SetMaxGroupMembers",
          "RPC_DoSetMaxGroupMembers",
          "Rpc",
          "RPC_DoSetMaxGroupMembers",
          "RPC_DoSetCustomDescription",
          "GetCustomDescription",
          "GetCustomName",
          "GetDescriptionAuthorID",
          "GetNameAuthorID",
          "GetCustomNameWithOriginal",
          "GetCallsigns",
          "GetGroupID",
          "SetGroupID",
          "GetMaxMembers",
          "SetMaxMembers",
          "RPC_DoSetMaxMembers",
          "Rpc",
          "RPC_DoSetMaxMembers",
          "GetPlayerCount",
          "GetOnMemberStateChange",
          "GetOnPlayerAdded",
          "GetOnPlayerRemoved",
          "GetOnPlayerLeaderChanged",
          "GetOnPrivateGroupChanged",
          "GetOnCustomNameChanged",
          "GetOnFrequencyChanged",
          "GetOnCustomDescriptionChanged",
          "BelongedToGroup",
          "AddAgentFromControlledEntity",
          "AddAgent",
          "NotificateGroupAIChange",
          "OnGroupMemberStateChange",
          "RemoveAgentFromControlledEntity",
          "RemoveAgent",
          "NotificateGroupAIChange",
          "OnGroupMemberStateChange",
          "NotificateGroupAIChange",
          "OnPlayerDisconnected",
          "RemovePlayer",
          "OnPlayerConnected",
          "AddPlayer",
          "RPC_DoOnGroupMemberStateChange",
          "OnGroupMemberStateChange",
          "RPC_DoOnGroupMemberStateChange",
          "Rpc",
          "OnMemberDeath",
          "QueueAddAgent",
          "RemovePlayerAgent",
          "OnGroupMemberStateChange",
          "ListenToMemberDeath",
          "AddOnGadgetsLoadedListener",
          "OnControllableEntitySpawned",
          "ListenToMemberDeath",
          "AddAgentFromControlledEntity",
          "QueueAddAgent",
          "RPC_DoAddPlayer",
          "CheckForLeader",
          "SetGroupLeader",
          "SetGroupLeader",
          "RPC_SetLeaderID",
          "Rpc",
          "RPC_SetLeaderID",
          "RPC_SetPrivate",
          "ClearRequesters",
          "ClearDeniedRequester",
          "AddPlayer",
          "RPC_DoAddPlayer",
          "Rpc",
          "QueueAddAgent",
          "AddAgentFromControlledEntity",
          "RPC_DoAddRequester",
          "RPC_DoRemoveRequester",
          "RPC_DoClearDeniedRequester",
          "RPC_DoClearRequesterIDs",
          "RPC_DoAddDeniedRequester",
          "RPC_DoRemovePlayer",
          "RemovePlayerAgent",
          "RemoveAgent",
          "RemovePlayer",
          "RPC_DoRemovePlayer",
          "Rpc",
          "CheckForLeader",
          "RemovePlayerAgent",
          "GetCallsigns",
          "SetRadioFrequency",
          "RPC_DoSetFrequency",
          "Rpc",
          "RPC_DoSetFrequency",
          "GetRadioFrequency",
          "IsPlayable",
          "CreateUnitEntities",
          "SpawnAllImmediately",
          "BeginDelayedSpawn",
          "SpawnGroupMember",
          "GetWorldTransform",
          "AddAIEntityToGroup",
          "SetWaypointParams",
          "AddWaypointsDynamic",
          "AddWaypoint",
          "AddWaypoint",
          "SetWaypointParams",
          "AddWaypointsStatic",
          "AddVehiclesStatic",
          "DestroyEntities",
          "RemoveAIEntityFromGroup",
          "RemoveStaticWaypointRefs",
          "ClearRefs",
          "AddAIEntityToGroup",
          "AddAgent",
          "RemoveAIEntityFromGroup",
          "RemoveAgent",
          "RemoveAgent",
          "AddWaypointToGroup",
          "AddWaypoint",
          "RemoveWaypointFromGroup",
          "AddUsableVehicle",
          "RemoveUsableVehicle",
          "IsUsableVehicle",
          "GetUsableVehicles",
          "GetUsableVehiclesCount",
          "GetAllocatedCompartments",
          "GetAllocatedSmartActions",
          "AllocateSmartActions",
          "AllocateCompartment",
          "ReleaseCompartment",
          "ReleaseCompartments",
          "ReleaseSmartAction",
          "ReleaseSmartActions",
          "InitFactionKey",
          "SetFaction",
          "GetAgents",
          "SetFactionDelayed",
          "Rpc",
          "BroadCastSetFaction",
          "GetFactionName",
          "GetFaction",
          "GetFactionIndex",
          "IgnoreSnapToTerrain",
          "IgnoreSpawning",
          "GetOnInit",
          "GetOnEmpty",
          "GetOnAgentAdded",
          "GetOnAgentRemoved",
          "GetOnLeaderChanged",
          "GetOnCurrentWaypointChanged",
          "GetOnWaypointCompleted",
          "GetOnWaypointAdded",
          "GetOnWaypointRemoved",
          "GetOnFactionChanged",
          "OnEmpty",
          "OnAgentAdded",
          "OnAgentRemoved",
          "OnLeaderChanged",
          "OnCurrentWaypointChanged",
          "InvokeSubagentsOnWaypointChanged",
          "OnWaypointCompleted",
          "InvokeSubagentsOnWaypointChanged",
          "OnWaypointAdded",
          "OnWaypointRemoved",
          "InvokeSubagentsOnWaypointChanged",
          "InvokeSubagentsOnWaypointChanged",
          "GetAgents",
          "_WB_OnKeyChanged",
          "DestroyEntities",
          "CreateUnitEntities",
          "EOnInit",
          "SpawnUnits",
          "GetSpawnImmediately",
          "SetSpawnImmediately",
          "SetMaxUnitsToSpawn",
          "SetMemberSpawnDelay",
          "SpawnUnits",
          "CreateUnitEntities",
          "AddVehiclesStatic",
          "AddWaypointsStatic",
          "AddWaypointsDynamic",
          "CreateUnitEntities",
          "AddVehiclesStatic",
          "AddWaypointsStatic",
          "AddWaypointsDynamic",
          "GetSlave",
          "SetSlave",
          "GetMaster",
          "SetMaster",
          "IsAIControlledCharacterMember",
          "RplSave",
          "RplLoad",
          "BroadCastSetFaction",
          "RPC_SetLeaderID",
          "LeaderLifeStateChanged",
          "SetNewConsciousLeader",
          "SetNewConsciousLeader",
          "GetAgents",
          "IncreaseDeployedRadioCount",
          "DecreaseDeployedRadioCount",
          "GetDeployedRadioCount",
          "SetDeleteWhenEmpty",
          "SCR_AIGroup",
          "SetEventMask",
          "DestroyEntities",
          "DestroyEntities",
          "RemoveStaticWaypointRefs",
          "ClearRefs"
        ]
      },
      {
        "class_name": "SCR_AirstrikePrototype",
        "methods": [
          "SCR_AirstrikePrototype",
          "SetFlags",
          "SetEventMask",
          "AddRandomDelayToNextProjectile",
          "EOnInit",
          "Do_LaunchMissile",
          "ClearFlags",
          "ClearEventMask",
          "AddRandomDelayToNextProjectile",
          "ReadyProjectile",
          "ReadyProjectile",
          "AdvanceProjectilePrefab",
          "ComputeProjectileTransform",
          "FireProjectile",
          "AdvanceProjectilePrefab",
          "ComputeMissileTarget",
          "GetTransform",
          "ComputeProjectileTransform",
          "GetTransform",
          "FireProjectile",
          "Do_LaunchMissile",
          "LaunchMissile",
          "RpcLaunchMissile_BC",
          "LaunchMissile",
          "AddRandomDelayToNextProjectile"
        ]
      },
      {
        "class_name": "SCR_CustomMaterialAnimatorEntity",
        "methods": [
          "EOnFrame",
          "ClearEventMask",
          "ClearFlags",
          "SCR_CustomMaterialAnimatorEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_DummyTargetEntity",
        "methods": [
          "EOnInit",
          "GetPathFromPolyline",
          "EOnFrame",
          "GetPathFromPolyline",
          "VectorEqualApprox",
          "SCR_DummyTargetEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_ExplosionGenerator",
        "methods": [
          "SCR_ExplosionGenerator",
          "SetEventMask",
          "ClearEventMask",
          "CreateExplosion",
          "CreateExplosion",
          "AdvanceExplosionPrefab",
          "AdvanceExplosionPrefab"
        ]
      },
      {
        "class_name": "HeatmapData",
        "methods": [
          "HeatmapData"
        ]
      },
      {
        "class_name": "SCR_RestCallbackExample",
        "methods": [
          "OnError",
          "OnTimeout",
          "OnSuccess"
        ]
      },
      {
        "class_name": "SCR_HeatMap_Autotest",
        "methods": [
          "SCR_HeatMap_Autotest",
          "SetEventMask",
          "SetFlags",
          "EOnInit",
          "EOnFrame",
          "CalculateAvgFPS",
          "GenerateDDS",
          "GenerateGeoJSON",
          "GenerateCSV",
          "CalculateAvgFPS",
          "ReverseArray",
          "GenerateDDS",
          "ReverseArray",
          "ReverseArray",
          "GenerateGeoJSON",
          "WriteDataGJSON",
          "GenerateCSV",
          "WriteDataCSV",
          "WriteDataGJSON",
          "WriteDataCSV",
          "FormatTimestamp"
        ]
      },
      {
        "class_name": "SCR_GenericBoxEntity",
        "methods": [
          "Generate",
          "SCR_GenericBoxEntity",
          "Generate",
          "_WB_GetBoundBox"
        ]
      },
      {
        "class_name": "SCR_MapLocator",
        "methods": [
          "EOnInit",
          "ShowMapHint",
          "CalculateClosestLocation",
          "HideMapHint",
          "CalculateClosestLocation",
          "GetGridIndex",
          "SCR_MapLocator",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_MapLocationQuadHint",
        "methods": [
          "GetPlayerPositionHint",
          "GetQuadHint"
        ]
      },
      {
        "class_name": "SCR_ShedulePreloadEntity",
        "methods": [
          "_WB_AfterWorldUpdate",
          "GetDesiredCameraTransform",
          "GetDesiredCameraTransform",
          "SCR_ShedulePreloadEntity",
          "GetDesiredCameraTransform"
        ]
      },
      {
        "class_name": "SCR_TerrainMeshEntity",
        "methods": [
          "Generate",
          "SetObject",
          "SCR_TerrainMeshEntity",
          "Generate",
          "_WB_OnContextMenu"
        ]
      },
      {
        "class_name": "SCR_TestRaycaster",
        "methods": [
          "DBG_Line",
          "DBG_Sphere",
          "DoTraceLine",
          "TraceResult",
          "DoTraceSphere",
          "TraceResult",
          "TraceResult",
          "DoRaycast",
          "DoTraceLine",
          "DoTraceSphere",
          "EOnFrame",
          "DoRaycast",
          "DBG_Line",
          "SCR_TestRaycaster",
          "SetEventMask",
          "SetFlags",
          "GetWorldTransform"
        ]
      },
      {
        "class_name": "SCR_AudioSource",
        "methods": [
          "SetSignalValue",
          "SetGlobalOcclusionSignals",
          "SetEnvironmentalSignals",
          "SetSignalValue",
          "SetSignalValue",
          "SetSignalValue",
          "SetSignalValue",
          "Play",
          "SetTransformation",
          "UpdateTransformation",
          "Ternimate",
          "SCR_AudioSource",
          "SetSignalValue"
        ]
      },
      {
        "class_name": "SCR_AudioSourceConfiguration",
        "methods": [
          "IsValid"
        ]
      },
      {
        "class_name": "SCR_InteriorRequestCallback",
        "methods": [
          "OnCompleted",
          "SCR_InteriorRequestCallback"
        ]
      },
      {
        "class_name": "SCR_SoundManagerEntity",
        "methods": [
          "CreateAudioSource",
          "SCR_AudioSource",
          "CreateAudioSource",
          "SCR_AudioSource",
          "CreateAndPlayAudioSource",
          "PlayAudioSource",
          "CreateAndPlayAudioSource",
          "PlayAudioSource",
          "CreateAndPlayAudioSource",
          "PlayAudioSource",
          "PlayAudioSource",
          "PlaySoundEvent",
          "PlayAudioSource",
          "PlaySoundEvent",
          "PlaySoundEvent",
          "TerminateAudioSource",
          "TerminateAudioSource",
          "TerminateAll",
          "HandleAudioSources",
          "GetGInteriorSignalIdx",
          "GetGCurrVehicleCoverageSignalIdx",
          "GetGIsThirdPersonCamSignalIdx",
          "GetRoomSizeIdx",
          "SetDynamicRangeSignalValue",
          "SetTinnitusSignalValue",
          "OnEditorOpen",
          "OnEditorClose",
          "OnEditorManagerInit",
          "OnEditorManagerExit",
          "EditorManagerEventsInit",
          "OnEditorManagerInit",
          "EditorManagerEventsExit",
          "OnEditorManagerExit",
          "EOnPostFrame",
          "HandleAudioSources",
          "EOnInit",
          "SetDynamicRangeSignalValue",
          "SetTinnitusSignalValue",
          "EditorManagerEventsInit",
          "SCR_SoundManagerEntity",
          "SetEventMask",
          "SetFlags",
          "TerminateAll",
          "EditorManagerEventsExit"
        ]
      },
      {
        "class_name": "SCR_SoundManagerEntityCore",
        "methods": [
          "OnGameStart"
        ]
      },
      {
        "class_name": "SCR_BaseFactionTriggerEntity",
        "methods": [
          "SetOwnerFaction",
          "ScriptedEntityFilterForQuery",
          "EOnInit",
          "SCR_BaseFactionTriggerEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_BaseTriggerEntity",
        "methods": [
          "IsAlive",
          "GetOnActivate",
          "GetOnDeactivate",
          "OnActivate",
          "OnDeactivate"
        ]
      },
      {
        "class_name": "SCR_FactionControlTriggerEntity",
        "methods": [
          "GetSideCounts",
          "ScriptedEntityFilterForQuery",
          "OnQueryFinished"
        ]
      },
      {
        "class_name": "SCR_FactionDominanceTriggerEntity",
        "methods": [
          "OnQueryFinished"
        ]
      },
      {
        "class_name": "SCR_FactionPlayerTriggerEntity",
        "methods": [
          "ScriptedEntityFilterForQuery",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_UnitDisplayManager",
        "methods": [
          "EOnInit",
          "SCR_UnitDisplayManager",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogEntry",
        "methods": [
          "IsEnabled",
          "GetCatalogIndex",
          "GetPrefab",
          "GetCatalogParent",
          "GetEntityUiInfo",
          "GetEntityName",
          "GetEditableEntityLabels",
          "HasEditableEntityLabel",
          "HasAnyEditableEntityLabels",
          "HasAllEditableEntityLabels",
          "GetEntityDataOfType",
          "GetEntityDataList",
          "HasEntityDataOfType",
          "HasAllEntityDataOfTypes",
          "HasAnyEntityDataOfTypes",
          "InitEntry",
          "ClassSpecificInit",
          "GetEntityDataList",
          "PostInitEntry",
          "GetEntityDataList",
          "ClassSpecificInit"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogEntryCustomInfo",
        "methods": [
          "GetEntityUiInfo"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogEntryNonEditable",
        "methods": [
          "GetEditableEntityLabels",
          "HasEditableEntityLabel",
          "HasAnyEditableEntityLabels",
          "HasAllEditableEntityLabels",
          "ClassSpecificInit"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogInventoryItem",
        "methods": [
          "ClassSpecificInit"
        ]
      },
      {
        "class_name": "SCR_BaseContainerCustomInventoryCatalogEntry",
        "methods": [
          "SCR_BaseContainerCustomInventoryCatalogEntry",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseEntityCatalogData",
        "methods": [
          "IsEnabled",
          "InitData",
          "PostInitData"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogAmbientPatrolData",
        "methods": [
          "GetGroupType",
          "GetProbabilityOfPresence"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogEditorData",
        "methods": [
          "IsValidInEditorMode",
          "GetValidEditorModes"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogLoadoutData",
        "methods": [
          "GetLoadoutSpawnCost"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogSpawnerData",
        "methods": [
          "SetEnabled",
          "GetEntityCount",
          "GetOverwriteName",
          "CanSpawnInSlot",
          "GetValidSlotSizes",
          "HasRequiredRank",
          "GetMinimumRequiredRank",
          "GetSupplyCost",
          "GetRandomDefaultOrVariantPrefab",
          "GetVariantDataList",
          "GetVariantPrefabList",
          "GetVariantDataOfType",
          "GetVariantPrefabOfType",
          "InitData"
        ]
      },
      {
        "class_name": "SCR_SpawnerVariantData",
        "methods": [
          "GetVariantPrefabData",
          "GetVariantType"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogSpawnerOverrideData",
        "methods": [
          "InitData"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogSupportStationResupplyData",
        "methods": [
          "GetResupplyType"
        ]
      },
      {
        "class_name": "SCR_NonArsenalItemCostCatalogData",
        "methods": [
          "GetSupplyCost",
          "InitData"
        ]
      },
      {
        "class_name": "SCR_ResourceContainerItemData",
        "methods": [
          "GetMaxResourceValue",
          "SetMaxResourceValue",
          "GetResourceContainer",
          "InitData"
        ]
      },
      {
        "class_name": "SCR_EntityCatalog",
        "methods": [
          "Example",
          "GetCatalogType",
          "GetEntityList",
          "GetEntryWithPrefab",
          "GetCatalogEntry",
          "GetEntityListWithLabel",
          "GetEntityListExcludingLabel",
          "GetFullFilteredEntityListWithLabels",
          "GetEntityListWithData",
          "GetEntityListExcludingData",
          "GetFullFilteredEntityListWithData",
          "GetFullFilteredEntityList",
          "MergeCatalogs",
          "InitCatalog",
          "PostInitCatalog",
          "ClearCatalogOnMerge"
        ]
      },
      {
        "class_name": "SCR_BaseContainerCustomEntityCatalogCatalog",
        "methods": [
          "SCR_BaseContainerCustomEntityCatalogCatalog",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogManagerComponent",
        "methods": [
          "GetInstance",
          "GetEntityCatalogOfType",
          "Init",
          "GetFactionEntityCatalogOfType",
          "GetFactionEntityCatalogOfType",
          "GetFactionEntityCatalogOfType",
          "GetAllEntityCatalogs",
          "GetAllFactionEntityCatalogs",
          "GetAllFactionEntityCatalogs",
          "GetAllFactionEntityCatalogs",
          "GetEntryWithPrefabFromCatalog",
          "GetEntryWithPrefabFromFactionCatalog",
          "GetEntryWithPrefabFromGeneralOrFactionCatalog",
          "GetEntryWithPrefabFromAnyCatalog",
          "GetFilteredEditorPrefabsOfAllFactions",
          "GetFilteredEditorPrefabs",
          "GetFilteredEditorPrefabs",
          "GetFilteredEditorPrefabs",
          "GetArsenalItems",
          "GetArsenalItems",
          "GetFactionArsenalItems",
          "GetArsenalItems",
          "GetArsenalItems",
          "GetAllArsenalItems",
          "GetFactionArsenalItems",
          "GetArsenalItems",
          "GetFactionArsenalItems",
          "GetArsenalItems",
          "InitCatalogs",
          "EOnInit",
          "Init",
          "Init",
          "InitCatalogs",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_EntityCatalogMultiList",
        "methods": [
          "GetMultiList",
          "ClearCatalogOnMerge",
          "InitCatalog"
        ]
      },
      {
        "class_name": "SCR_BaseContainerCustomEntityCatalogMultiListEntry",
        "methods": [
          "SCR_BaseContainerCustomEntityCatalogMultiListEntry",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_ExampleDoxygen",
        "methods": [
          "Example",
          "ExampleWithParam",
          "ExampleWithOutParam",
          "ExampleWithInOutParam",
          "ExampleWithReturnValue",
          "ExampleWithEverything"
        ]
      },
      {
        "class_name": "SCR_CampaignFaction",
        "methods": [
          "GetStartingVehiclePrefabs",
          "SendHQMessage",
          "SetControlPointsHeld",
          "GetControlPointsHeld",
          "SetMainBase",
          "SetPrimaryTarget",
          "RefreshTaskPriorities",
          "GetPrimaryTarget",
          "SetMobileAssembly",
          "GetRadioPrefab",
          "GetDefendersGroupPrefab",
          "GetMobileHQPrefab",
          "GetBuildingPrefab",
          "GetFactionNameUpperCase",
          "GetMainBase",
          "GetMobileAssembly",
          "SetVictoryTimestamp",
          "GetVictoryTimestamp",
          "SetPauseByBlockTimestamp",
          "GetPauseByBlockTimestamp"
        ]
      },
      {
        "class_name": "SCR_Faction",
        "methods": [
          "ScriptInvoker_FactionPlayableChangedMethod",
          "GetOrder",
          "GetCanCreateOnlyPredefinedGroups",
          "GetPredefinedGroups",
          "GetFlagName",
          "GetFlagNames",
          "GetGroupFlagImageSet",
          "GetGroupFlagImageSetOutlines",
          "GetGroupFlagTextures",
          "GetFactionFlag",
          "GetFactionFlagMaterial",
          "SetFactionFlagMaterial",
          "GetFactionLabel",
          "GetCallsignInfo",
          "GetNotificationFactionColor",
          "GetNotificationTextFactionColor",
          "GetOutlineFactionColor",
          "InitializeFaction",
          "SetAncestors",
          "IsPlayable",
          "IsShownInWelcomeScreenIfNonPlayable",
          "InitFactionIsPlayable",
          "IsInherited",
          "SetIsPlayable",
          "GetOnFactionPlayableChanged",
          "DoCheckIfFactionFriendly",
          "SetFactionFriendly",
          "SetFactionHostile",
          "GetPlayerCount",
          "GetPlayersInFaction",
          "GetFactionRadioEncryptionKey",
          "GetFactionRadioFrequency",
          "GetRankByID",
          "GetRankName",
          "GetRankNameUpperCase",
          "GetRankNameShort",
          "GetRankInsignia",
          "GetFactionEntityCatalogOfType",
          "GetAllFactionEntityCatalogs",
          "GetFriendlyFactions",
          "Init",
          "SetFactionFriendly",
          "GetEntityFaction",
          "GetBaseCallsignByIndex",
          "GetFactionBackground",
          "IsMilitary"
        ]
      },
      {
        "class_name": "SCR_MilitaryBaseCallsign",
        "methods": [
          "GetCallsign",
          "GetCallsignShort",
          "GetCallsignUpperCase",
          "GetSignalIndex"
        ]
      },
      {
        "class_name": "SCR_FreeForAllFaction",
        "methods": [
          "DoCheckIfFactionFriendly"
        ]
      },
      {
        "class_name": "SCR_FieldManual_StatisticsLineComponent",
        "methods": [
          "SCR_FieldManual_StatisticsLineComponent",
          "SetValue",
          "RemoveWidgetFromHierarchy",
          "SetTranslatedValue",
          "GetComponent",
          "GetComponent",
          "GetComponent",
          "SCR_FieldManual_StatisticsLineComponent"
        ]
      },
      {
        "class_name": "SCR_FieldManualConfigEntry",
        "methods": [
          "SCR_FieldManualConfigEntry",
          "CreateWidget",
          "CreateWidgetFromLayout",
          "CanRefresh"
        ]
      },
      {
        "class_name": "SCR_FieldManualConfigEntry_Standard",
        "methods": [
          "SCR_FieldManualConfigEntry_Standard",
          "CreateWidget",
          "CreateWidgetFromLayout"
        ]
      },
      {
        "class_name": "SCR_FieldManualConfigEntry_Weapon",
        "methods": [
          "SCR_FieldManualConfigEntry_Weapon",
          "CreateWidget",
          "CreateWidgetFromLayout"
        ]
      },
      {
        "class_name": "SCR_FieldManualConfigCategory",
        "methods": [
          "SCR_FieldManualConfigCategory",
          "CreateWidget",
          "CreateMainCategory",
          "CreateSubCategory",
          "CreateMainCategory",
          "CreateSubCategory"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece",
        "methods": [
          "CreateWidget",
          "CanCreateWidget",
          "CanRefresh"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece_ConfigEntry",
        "methods": [
          "InitContainerAndPaths",
          "CreateWidget",
          "SetConfigValue",
          "SetConfigValue",
          "InitContainerAndPaths"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece_ConfigEntryList",
        "methods": [
          "SCR_FieldManualPiece_ConfigEntryList",
          "CreateWidget",
          "CreateConfigEntries",
          "CreateConfigEntries"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece_Header",
        "methods": [
          "CreateWidget"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece_Image",
        "methods": [
          "CreateWidget",
          "GetImagePath",
          "GetSetName",
          "GetImageColor",
          "GetCaption"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece_ImageGallery",
        "methods": [
          "CreateWidget",
          "SCR_FieldManualPiece_ImageGallery"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece_Keybind",
        "methods": [
          "CreateWidget",
          "CreateWidget",
          "CreateWidget"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece_KeybindList",
        "methods": [
          "CreateWidget",
          "CreateKeybinds",
          "SCR_FieldManualPiece_KeybindList"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece_LineBreak",
        "methods": [
          "CreateWidget"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece_Separator",
        "methods": [
          "CreateWidget"
        ]
      },
      {
        "class_name": "SCR_FieldManualPiece_Text",
        "methods": [
          "SCR_FieldManualPiece_Text",
          "CreateWidget"
        ]
      },
      {
        "class_name": "SCR_FieldManualConfigLoader",
        "methods": [
          "LoadConfigRoot",
          "FillCategories",
          "FillCategories",
          "FillCategories",
          "FillEntries",
          "FillEntries",
          "FillEntries_Weapon",
          "FillEntries_Weapon"
        ]
      },
      {
        "class_name": "SCR_FiringRangeController",
        "methods": [
          "EOnInit",
          "CollectAllDistances",
          "AnimateTargets",
          "ErectRandomTarget",
          "BackToDefaultTarget",
          "FoldTarget",
          "BackToDefaultTarget",
          "SetIndicator",
          "BackToDefaultTargetsFromLineArea",
          "CollectAllDistances",
          "GetFiringLineOwnerId",
          "IsLowestDistanceSet",
          "IsHighestDistanceSet",
          "CalculateTargetDistance",
          "UpdateNumberOfTargets",
          "SetControllerCounter",
          "GetSignalValue",
          "CountPopUpTargets",
          "ResetCountPopUpTargets",
          "AddIndicator",
          "GetIndicator",
          "RemoveIndicators",
          "GetTargetDistance",
          "GetTargetsInRound",
          "GetMaxScoreInRound",
          "CheckMasterOnlyMethod",
          "SetControllerLight",
          "SetEmissivity",
          "IsProxy",
          "RplSave",
          "RplLoad",
          "AddIndicator",
          "SetControllerLight",
          "SetControllerCounter",
          "SetControllerCounter",
          "SCR_FiringRangeController",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_FiringRangeLineArea",
        "methods": [
          "EOnInit",
          "OnDeactivate",
          "SCR_FiringRangeLineArea"
        ]
      },
      {
        "class_name": "SCR_FiringRangeManager",
        "methods": [
          "ClearPlayerScore",
          "CountPlayerScore",
          "SetPlayerScoreMax",
          "UpdateScoreboardData",
          "GetHighScoreInfo",
          "ScoreChanged",
          "ScoreMaxChanged",
          "NameChanged",
          "PlayerCountChangedInArea",
          "EOnFrame",
          "GenerateRows",
          "UpdateScoreboardData",
          "UpdateScoreboardData",
          "OnActivate",
          "RegisterPlayerInArea",
          "OnDeactivate",
          "RemovePlayerFromArea",
          "IsProxy",
          "GenerateRows",
          "UpdateScoreboardData",
          "EOnInit",
          "SpawnCommunicationPrefab",
          "RegisterFiringRangeController",
          "RemoveAssignedPlayerFromFireline",
          "GetPlayerID",
          "RegisterPlayerInArea",
          "RemovePlayerFromArea",
          "RpcAsk_ClearWidgets",
          "Rpc",
          "IsPlayerInFiringRangeArea",
          "GetInstance",
          "GetMainManagerInstance",
          "GetRootWidget",
          "GetPlayerName",
          "SpawnCommunicationPrefab",
          "AddIndicator",
          "RemoveIndicators",
          "Rpc",
          "RpcAsk_RemoveIndicators",
          "ControllerLight",
          "SetControllerCounter",
          "RpcAsk_RemoveIndicators",
          "RpcAsk_AddIndicator",
          "RpcAsk_ClearWidgets",
          "RpcAsk_ControllerLight",
          "RpcAsk_SetControllerCounter",
          "CheckMasterOnlyMethod",
          "SCR_FiringRangeManager",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_FiringRangeNetworkEntity",
        "methods": [
          "GetInstance",
          "CalculateTargetDistance",
          "ClearPlayerScore",
          "SetPlayerScoreMax",
          "ErectRandomTargets",
          "BackToDefaultTarget",
          "RemoveIndicators",
          "RegisterCommEntity",
          "Rpc",
          "AddTarget",
          "RpcAsk_RegisterCommEntity",
          "RpcAsk_RemoveIndicatorsServer",
          "RpcAsk_CalculateTargetDistance",
          "RpcAsk_ClearPlayerScore",
          "RpcAsk_ErectRandomTargets",
          "RpcAsk_BackToDefaultTarget",
          "RpcAsk_SetMaxLineScore",
          "RpcAsk_CountPlayerScore",
          "RpcAsk_AddTarget",
          "SCR_FiringRangeNetworkEntity",
          "SetEventMask",
          "SetFlags"
        ]
      },
      {
        "class_name": "SCR_FiringRangeScoringComponent",
        "methods": [
          "OnDisconnected",
          "RemovePlayer",
          "ClearScore",
          "OnKill",
          "ClearScore",
          "AddPlayer",
          "RemovePlayer",
          "ClearScore",
          "AddScore",
          "SetScoreMax",
          "GetScore",
          "GetPlayersCount",
          "GetPlayerScoreInfo",
          "GetAllPlayersScoreInfo",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "AddPlayer",
          "SCR_FiringRangeScoringComponent"
        ]
      },
      {
        "class_name": "SCR_FiringRangeTarget",
        "methods": [
          "OnDamage",
          "SetState",
          "SetEventMask",
          "SetState",
          "Rpc",
          "SetStateMP",
          "SetStateMP",
          "IsProxy",
          "GetState",
          "GetSetDistance",
          "GetTargetOwner",
          "SetTargetOwner",
          "SetTargetMode",
          "GetErectedDuration",
          "GetValidityOfHit",
          "SetAutoResetTarget",
          "IsHitValid",
          "IsIndicator",
          "GetHitValue",
          "EOnFrame",
          "SetState",
          "ClearEventMask",
          "RplSave",
          "RplLoad",
          "SetState",
          "EOnInit",
          "SetTargetMode",
          "SCR_FiringRangeTarget",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_PlayerScoreInfoFiringRange",
        "methods": [
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject",
          "GetName",
          "Clear",
          "Insert",
          "GetScore",
          "GetScoreMax",
          "GetScore",
          "GetPlayerID"
        ]
      },
      {
        "class_name": "ArmaReforgerScripted",
        "methods": [
          "SpawnEntityPrefab",
          "SpawnEntityPrefab",
          "GetDataCollector",
          "GetResourceGrid",
          "GetResourceSystemSubscriptionManager",
          "RegisterDataCollector",
          "UnregisterBuildingDestructionManager",
          "RegisterBuildingDestructionManager",
          "GetBuildingDestructionManager",
          "GetLoadoutManager",
          "RegisterSoundManagerEntity",
          "GetSoundManagerEntity",
          "GetSettingsManager",
          "GetProfanityFilter",
          "GetSaveManager",
          "GetHasKeyboard",
          "GetCallqueue",
          "OnUserSettingsChangedInvoker",
          "OnInputDeviceUserChangedInvoker",
          "OnInputDeviceIsGamepadInvoker",
          "OnWorldSimulatePhysicsInvoker",
          "OnWindowResizeInvoker",
          "OnMissionSet",
          "SetGameFlags",
          "OnCinematicStart",
          "OnCinematicEnd",
          "OnCinematicBlending",
          "OnKickedFromGame",
          "GetFullKickReason",
          "AddRejoinAttempt",
          "GetFullKickReason",
          "AddRejoinAttempt",
          "OnWorldPostProcess",
          "ShowErrorMessage",
          "ShowNextErrorDialog",
          "GetGameStarted",
          "GetGameFlags",
          "SetGameFlags",
          "InvokeGameFlags",
          "AreGameFlagsObtained",
          "AreGameFlagsSet",
          "GetOnObtainedGameFlagsInvoker",
          "InvokeGameFlags",
          "GetMenuPreset",
          "CreateLoadingAnim",
          "ArmaReforgerLoadingAnim",
          "OnAfterInit",
          "OnGameStart",
          "InvokeGameFlags",
          "AddActionListeners",
          "OnMenuOpen",
          "OpenPauseMenu",
          "OnShowPlayerList",
          "OpenPlayerList",
          "OnShowGroupMenu",
          "OpenGroupMenu",
          "OpenPauseMenu",
          "OpenPlayerList",
          "OpenGroupMenu",
          "OnGameEnd",
          "RemoveActionListeners",
          "ShutdownBackend",
          "OnUserSettingsChangedEvent",
          "OnInputDeviceUserChangedEvent",
          "OnInputDeviceIsGamepadEvent",
          "OnWorldSimulatePhysics",
          "OnWindowResize",
          "AddActionListeners",
          "RemoveActionListeners",
          "GetQueryTargetInfo",
          "OnUpdate",
          "ShowNextErrorDialog",
          "ShutdownBackend",
          "SetHUDManager",
          "LoadSave",
          "RegisterLoadoutManager",
          "UnregisterLoadoutManager",
          "GetHUDManager",
          "GetWorldEditorLink",
          "GetPlayerDataStats",
          "GetMissionName",
          "PlayGameConfig",
          "HostGameConfig",
          "ReadGameConfig",
          "InsertNewScenario",
          "CheckMissionHeader",
          "GetCurrentPIPSights",
          "IsScreenPointInPIPSights",
          "IsPlatformGameConsole",
          "OnGamepadConnectionStatus",
          "CreateGame",
          "GetGame"
        ]
      },
      {
        "class_name": "QueryTargetDiag",
        "methods": [
          "Prepare",
          "DoQuery",
          "QueryTargetEntity",
          "GetFirstEntity",
          "GetClosestEntity"
        ]
      },
      {
        "class_name": "SCR_DebugCameraCore",
        "methods": [
          "ToggleCamera",
          "DeleteCamera",
          "CreateCamera",
          "CreateCamera",
          "CreateCamera",
          "CreateCamera",
          "DeleteCamera",
          "GetCamera",
          "GetCameraInstance",
          "CanCreate",
          "OnUpdate",
          "CreateCamera",
          "DeleteCamera",
          "OnGameStart",
          "OnGameEnd"
        ]
      },
      {
        "class_name": "SCR_GameCoreBase",
        "methods": [
          "OnAfterInit",
          "OnGameStart",
          "OnWorldPostProcess",
          "OnUpdate",
          "OnGameEnd",
          "GetPriority",
          "IsEnabled",
          "CanCreate",
          "GetInstance"
        ]
      },
      {
        "class_name": "SCR_GameCoresManager",
        "methods": [
          "OnAfterInit",
          "OnGameStart",
          "OnWorldPostProcess",
          "OnUpdate",
          "OnGameEnd",
          "GetCore",
          "CreateCoresManager",
          "SCR_GameCoresManager",
          "OnAfterInit"
        ]
      },
      {
        "class_name": "SCR_CaptureAreaClass",
        "methods": [
          "CaptureAreaCharacterEventDelegate",
          "CaptureAreaOwnerFactionEventDelegate"
        ]
      },
      {
        "class_name": "SCR_CaptureArea",
        "methods": [
          "GetCharacterEnterInvoker",
          "GetCharacterExitInvoker",
          "GetOwnershipChangedEvent",
          "GetOwningFaction",
          "OnInit",
          "SetEventMask",
          "RplLoad",
          "RplSave",
          "ScriptedEntityFilterForQuery",
          "OnActivate",
          "OnCharacterEntered",
          "OnCharacterEntered",
          "OnDeactivate",
          "OnCharacterExit",
          "OnCharacterExit",
          "GetOccupants",
          "GetOccupantsCount",
          "EvaluateOwnerFaction",
          "OnFrame",
          "SetOwningFactionInternal",
          "Rpc",
          "SetOwningFactionInternal",
          "OnOwningFactionChanged",
          "Rpc_SetOwningFaction_BC",
          "SetOwningFactionInternal",
          "OnOwningFactionChanged"
        ]
      },
      {
        "class_name": "SCR_SpawnAreaClass",
        "methods": [
          "SpawnAreaCharacterEventDelegate",
          "SpawnAreaAlertEventDelegate"
        ]
      },
      {
        "class_name": "SCR_SpawnArea",
        "methods": [
          "GetCharacterEnterInvoker",
          "GetCharacterExitInvoker",
          "GetOnAlertInvoker",
          "GetAffiliatedFaction",
          "GetAffiliatedFactionKey",
          "IsInside",
          "IsFriendly",
          "GetFriendlyCharactersInside",
          "GetEnemyCharactersInside",
          "GetCharactersInside",
          "ScriptedEntityFilterForQuery",
          "IsLocalEntity",
          "OnActivate",
          "OnCharacterEnter",
          "OnDeactivate",
          "OnCharacterExit",
          "OnInit",
          "SetEventMask",
          "OnFrame",
          "OnAlert",
          "OnAlert"
        ]
      },
      {
        "class_name": "SCR_AntennaServicePointComponent",
        "methods": [
          "OnFactionChanged",
          "ChangeRadioSettings",
          "ChangeRadioSettings",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_CampaignSeizingComponent",
        "methods": [
          "EvaluateEntityFaction",
          "RefreshSeizingTimer",
          "HandleGradualReset",
          "OnSeizingTimestampChanged",
          "OnBaseRegistered",
          "UnregisterBase"
        ]
      },
      {
        "class_name": "SCR_MilitaryBaseLogicComponent",
        "methods": [
          "RegisterBase",
          "OnBaseRegistered",
          "OnBaseRegistered",
          "UnregisterBase",
          "OnBaseUnregistered",
          "OnBaseUnregistered",
          "GetBases",
          "OnBaseFactionChanged",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_PlayerListedAdminManagerComponentClass",
        "methods": [
          "SCR_PlayerAdminManager_OnListedAdminsChanged"
        ]
      },
      {
        "class_name": "SCR_PlayerListedAdminManagerComponent",
        "methods": [
          "GetInstance",
          "OnPlayerAuditSuccess",
          "OnListedAdminsChanged",
          "OnPlayerDisconnected",
          "OnListedAdminsChanged",
          "IsPlayerOnAdminList",
          "GetActiveListedAdmins",
          "OnListedAdminsChanged",
          "SCR_PlayerListedAdminManagerComponent"
        ]
      },
      {
        "class_name": "SCR_PossessingManagerComponentClass",
        "methods": [
          "ScriptInvokerOnPossessedProxyMethod"
        ]
      },
      {
        "class_name": "SCR_PossessingManagerComponent",
        "methods": [
          "GetInstance",
          "GetOnPossessed",
          "GetOnPossessedProxy",
          "GetMainEntity",
          "GetMainRplId",
          "GetPossessedEntity",
          "GetPossessedRplId",
          "GetIdFromMainEntity",
          "GetIdFromMainRplId",
          "GetIdFromControlledEntity",
          "GetIdFromMainEntity",
          "GetIdFromControlledRplId",
          "GetIdFromMainRplId",
          "IsPossessing",
          "SetMainEntity",
          "SetMainEntityBroadcast",
          "Rpc",
          "SetMainEntityBroadcast",
          "GetPlayerMainEntity",
          "GetPlayerMainRplId",
          "GetPlayerIdFromMainEntity",
          "GetPlayerIdFromMainRplId",
          "GetPlayerIdFromControlledEntity",
          "GetPlayerIdFromControlledEntity",
          "OnControllableDeleted",
          "GetRplId",
          "OnControllableDestroyed",
          "HandlePlayerKilled",
          "OnPlayerDisconnected",
          "OnPostInit",
          "OnDelete",
          "RplSave",
          "RplLoad"
        ]
      },
      {
        "class_name": "SCR_ReconnectData",
        "methods": [
          "SCR_ReconnectData"
        ]
      },
      {
        "class_name": "SCR_ReconnectComponentClass",
        "methods": [
          "DependsOn"
        ]
      },
      {
        "class_name": "SCR_ReconnectComponent",
        "methods": [
          "GetInstance",
          "GetOnAddedToList",
          "GetOnReconnect",
          "IsReconnectListEmpty",
          "IsReconnectEnabled",
          "IsInReconnectList",
          "IsEntityReconnectList",
          "ReturnControlledEntity",
          "OnPlayerDC",
          "Init",
          "OnPlayerAuditTimeouted",
          "OnPostInit",
          "SetEventMask",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_RestoreEditorModesComponent",
        "methods": [
          "OnEditorManagerCreatedServer",
          "OnGameEnd",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_SeizingComponentClass",
        "methods": [
          "GetTriggerPrefab",
          "OnTimerChangeFn"
        ]
      },
      {
        "class_name": "SCR_SeizingComponent",
        "methods": [
          "IsProxy",
          "GetRadius",
          "AllowNotifications",
          "NotificationsAllowed",
          "GetOnCaptureStart",
          "GetOnCaptureInterrupt",
          "GetOnCaptureFinish",
          "GetOnTimerChange",
          "EvaluatePrevailingFaction",
          "OnQueryFinished",
          "OnPrevailingFactionChanged",
          "OnPrevailingFactionChanged",
          "RefreshSeizingTimer",
          "EvaluateEntityFaction",
          "OnPrevailingFactionChanged",
          "Rpc",
          "RpcDo_OnCaptureInterrupt",
          "RefreshSeizingTimer",
          "Rpc",
          "RpcDo_OnCaptureStart",
          "OnSeizingTimestampChanged",
          "OnSeizingTimestampChanged",
          "RefreshSeizingTimer",
          "HandleGradualReset",
          "OnSeizingTimestampChanged",
          "HandleGradualReset",
          "GetSeizingStartTimestamp",
          "GetSeizingEndTimestamp",
          "RpcDo_OnCaptureStart",
          "RpcDo_OnCaptureInterrupt",
          "RpcDo_OnCaptureFinish",
          "UpdateFlagsInHierarchy",
          "NotifyPlayerInRadius",
          "OnPlayerSpawned",
          "UpdateFlagsInHierarchy",
          "GetIsLocalPlayerPresent",
          "NotifyPlayerInRadius",
          "GetFaction",
          "OnBaseFactionChanged",
          "IsDisabledAI",
          "Disable",
          "OnPostInit",
          "EOnFrame",
          "OnSeizingTimestampChanged",
          "Rpc",
          "RpcDo_OnCaptureFinish",
          "Rpc",
          "RpcDo_OnCaptureInterrupt"
        ]
      },
      {
        "class_name": "SCR_ServicePointComponent",
        "methods": [
          "GetFaction",
          "GetDelegatePrefab",
          "GetOnServiceStateChanged",
          "GetType",
          "GetLabel",
          "GetServiceState",
          "SetServiceState",
          "ServiceStateChanged",
          "SetDelegate",
          "OnBaseUnregistered",
          "OnFactionChanged",
          "RegisterService",
          "OnFactionChanged",
          "SpawnAsOffline",
          "SetServiceOnline",
          "SetServiceState",
          "OnPostInit",
          "RegisterService",
          "SetServiceState",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_ServicePointDelegateComponent",
        "methods": [
          "GetType",
          "GetLabel",
          "SetParentBaseId",
          "OnParentBaseIdSet",
          "OnParentBaseIdSet",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_BaseFactionManagerComponent",
        "methods": [
          "OnFactionsInit",
          "SCR_BaseFactionManagerComponent"
        ]
      },
      {
        "class_name": "SCR_RankIDCampaign",
        "methods": [
          "GetRankRequestCooldown",
          "GetRankRadioRespawnCooldown",
          "GetRankFastTravelCooldown",
          "GetRadioMsg"
        ]
      },
      {
        "class_name": "SCR_CampaignFactionManager",
        "methods": [
          "GetEnemyFaction",
          "GetFactionsList",
          "GetCampaignFactionByKey",
          "GetCampaignFactionByIndex",
          "GetRankRequestCooldown",
          "GetRankRadioRespawnCooldown",
          "GetRankFastTravelCooldown"
        ]
      },
      {
        "class_name": "SCR_FactionManagerClass",
        "methods": [
          "SCR_FactionManager_PlayerFactionChanged"
        ]
      },
      {
        "class_name": "SCR_FactionManager",
        "methods": [
          "GetOnPlayerFactionCountChanged",
          "OnPlayerFactionInfoChanged",
          "OnPlayerFactionCountChanged",
          "OnPlayerFactionSet_S",
          "OnPlayerFactionCountChanged",
          "GetPlayerFaction",
          "GetFactionByIndex",
          "SGetPlayerFaction",
          "GetLocalPlayerFaction",
          "GetPlayerFaction",
          "SGetLocalPlayerFaction",
          "GetFactionPlayerCount",
          "SGetFactionPlayerCount",
          "GetSortedFactionsList",
          "GetRankByID",
          "IsRankRenegade",
          "GetRequiredRankXP",
          "GetRenegadeRank",
          "GetRankByXP",
          "GetRankNext",
          "GetRankPrev",
          "EOnInit",
          "GetFactionsList",
          "EOnDiag",
          "GetFactionsList",
          "SCR_FactionManager",
          "SetEventMask",
          "ConnectToDiagSystem",
          "DisconnectFromDiagSystem",
          "CanChangeFactionsPlayable",
          "SetFactionsFriendly",
          "RequestUpdateAllTargetsFactions",
          "RequestUpdateAllTargetsFactions",
          "SetFactionsHostile",
          "RequestUpdateAllTargetsFactions",
          "RequestUpdateAllTargetsFactions",
          "RequestUpdateAllTargetsFactions",
          "UpdatePlayerFaction_S",
          "OnPlayerFactionCountChanged",
          "OnPlayerFactionCountChanged",
          "OnPlayerFactionSet_S",
          "OnPlayerFactionCountChanged",
          "OnPlayerFactionSet_S",
          "OnPlayerDisconnected"
        ]
      },
      {
        "class_name": "SCR_PlayerFactionInfo",
        "methods": [
          "GetFactionIndex",
          "SetFactionIndex",
          "GetPlayerId",
          "SCR_PlayerFactionInfo",
          "Create",
          "Extract",
          "Inject",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare"
        ]
      },
      {
        "class_name": "SCR_ArsenalPlayerLoadout",
        "methods": [
          "SCR_ArsenalManagerComponent_OnPlayerLoadoutChanged"
        ]
      },
      {
        "class_name": "SCR_ArsenalManagerComponent",
        "methods": [
          "GetArsenalLoadoutComponentsToCheck",
          "GetArsenalManager",
          "GetItemRefundAmount",
          "GetEnabledArsenalTypes",
          "IsArsenalTypeEnabled_Static",
          "IsArsenalTypeEnabled",
          "SetEnabledArsenalTypes",
          "OnArsenalTypeEnabledChanged",
          "GetOnArsenalTypeEnabledChanged",
          "OnArsenalTypeEnabledChanged",
          "GetArsenalSaveTypeInfoHolder",
          "GetArsenalGameModeType_Static",
          "GetArsenalGameModeType",
          "SetArsenalGameModeType_S",
          "OnArsenalGameModeTypeChanged",
          "GetArsenalGameModeUIInfo",
          "GetArsenalGameModeUIInfoList",
          "OnArsenalGameModeTypeChanged",
          "GetOnArsenalGameModeTypeChanged",
          "GetLoadoutSaveBlackListHolder",
          "SetLoadoutBlackListActiveStates",
          "Rpc",
          "RPC_OnPlayerLoadoutCleared",
          "RPC_OnPlayerLoadoutCleared",
          "GetLocalPlayerLoadoutAvailable",
          "GetPlayerArsenalLoadout",
          "SetLoadoutSpawnCostMultiplier_S",
          "OnLoadoutSpawnSupplyCostMultiplierChanged",
          "GetCalculatedLoadoutSpawnSupplyCostMultiplier",
          "GetLoadoutSpawnSupplyCostMultiplier",
          "OnLoadoutSpawnSupplyCostMultiplierChanged",
          "GetOnLoadoutSpawnSupplyCostMultiplierChanged",
          "GetLoadoutCalculatedSupplyCost",
          "CanSaveLoadout",
          "SetPlayerArsenalLoadout",
          "DoSetPlayerLoadout",
          "GetPlayerLoadoutData",
          "loadoutData",
          "clothingData",
          "weaponData",
          "ComputeSuppliesCost",
          "ComputeEntity",
          "ComputeStorage",
          "ComputeStorageEntity",
          "ComputeStorageEntity",
          "ComputeEntity",
          "ComputeEntity",
          "ComputeStorage",
          "DoSetPlayerLoadout",
          "DoSendPlayerLoadout",
          "Rpc",
          "DoSetPlayerHasLoadout",
          "Rpc",
          "OnPlayerAuditSuccess",
          "DoSendPlayerLoadout",
          "Rpc",
          "DoSetPlayerHasLoadout",
          "Rpc",
          "DoSetPlayerHasLoadout",
          "DoSendPlayerLoadout",
          "DoPlayerClearHasLoadout",
          "EOnInit",
          "OnPostInit",
          "GetArsenalLoadoutComponentsToCheck",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_ArsenalGameModeUIDataHolder",
        "methods": [
          "GetArsenalGameModeUIInfo",
          "GetArsenalGameModeUIInfoList"
        ]
      },
      {
        "class_name": "SCR_ArsenalSaveTypeInfoHolder",
        "methods": [
          "GetArsenalSaveTypeInfoList",
          "GetUIInfoOfType",
          "HasSaveType"
        ]
      },
      {
        "class_name": "SCR_ArsenalSaveTypeInfo",
        "methods": [
          "GetSaveType",
          "GetUIInfo"
        ]
      },
      {
        "class_name": "SCR_BasePlayerLoadout",
        "methods": [
          "GetLoadoutResource",
          "GetLoadoutName",
          "GetLoadoutImageResource",
          "IsLoadoutAvailable",
          "IsLoadoutAvailableClient",
          "OnLoadoutSpawned"
        ]
      },
      {
        "class_name": "SCR_LoadoutManager",
        "methods": [
          "GetPlayerLoadout",
          "GetLoadoutByIndex",
          "SGetPlayerLoadout",
          "GetLocalPlayerLoadout",
          "GetPlayerLoadout",
          "SGetLocalPlayerLoadout",
          "GetLoadoutPlayerCount",
          "SGetLoadoutPlayerCount",
          "OnPlayerLoadoutInfoChanged",
          "OnPlayerLoadoutCountChanged",
          "OnPlayerLoadoutCountChanged",
          "OnPlayerLoadoutSet_S",
          "UpdatePlayerLoadout_S",
          "OnPlayerLoadoutCountChanged",
          "OnPlayerLoadoutCountChanged",
          "OnPlayerLoadoutSet_S",
          "OnPlayerLoadoutCountChanged",
          "OnPlayerLoadoutSet_S",
          "CanAssignLoadout_S",
          "GetLoadoutCount",
          "GetLoadoutIndex",
          "GetLoadoutByIndex",
          "GetLoadoutByName",
          "GetRandomFactionLoadout",
          "GetPlayerLoadoutsByFaction",
          "GetPlayerLoadouts",
          "GetRandomLoadoutIndex",
          "GetRandomLoadoutIndex",
          "GetRandomLoadout",
          "GetOnMappedPlayerLoadoutInfoChanged",
          "EOnDiag",
          "SCR_LoadoutManager",
          "ConnectToDiagSystem",
          "DisconnectFromDiagSystem"
        ]
      },
      {
        "class_name": "SCR_LoadoutSaveBlackListHolder",
        "methods": [
          "Init",
          "GetLoadoutSaveBlackLists",
          "GetBlackListsCount",
          "IsPrefabBlacklisted",
          "IsBlackListActive",
          "SetBlackListActive",
          "GetOrderedBlackListsActive",
          "GetLoadoutSaveBlackLists",
          "SetOrderedBlackListsActive",
          "SetBlackListActive"
        ]
      },
      {
        "class_name": "SCR_LoadoutSaveBlackList",
        "methods": [
          "Init",
          "IsEnabled",
          "IsActive",
          "SetActive",
          "DoesBlackListContaintPrefab",
          "GetUIInfo",
          "SCR_UIInfo"
        ]
      },
      {
        "class_name": "SCR_PlayerArsenalLoadout",
        "methods": [
          "IsLoadoutAvailable",
          "IsLoadoutAvailableClient",
          "GetLoadoutSuppliesCost",
          "GetLoadoutSuppliesCost",
          "GetLoadoutSuppliesCost",
          "OnLoadoutSpawned"
        ]
      },
      {
        "class_name": "SCR_FactionPlayerLoadout",
        "methods": [
          "GetFactionKey",
          "OnLoadoutSpawned"
        ]
      },
      {
        "class_name": "SCR_PlayerLoadout",
        "methods": [
          "GetLoadoutResource",
          "GetLoadoutImageResource",
          "GetLoadoutName"
        ]
      },
      {
        "class_name": "SCR_PlayerLoadoutData",
        "methods": [
          "Extract",
          "Inject",
          "clothingData",
          "weaponData",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare"
        ]
      },
      {
        "class_name": "SCR_PlayerLoadoutInfo",
        "methods": [
          "GetLoadoutIndex",
          "SetLoadoutIndex",
          "GetPlayerId",
          "Create",
          "Extract",
          "Inject",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare"
        ]
      },
      {
        "class_name": "SCR_GameModeHealthSettings",
        "methods": [
          "GetBleedingScale",
          "SetBleedingScale",
          "GetResilienceHzRegenScale",
          "SetResilienceHzRegenScale",
          "GetRegenScale",
          "SetRegenScale",
          "IsUnconsciousnessPermitted",
          "SetUnconsciousnessPermitted",
          "IsUnconsciousVONPermitted",
          "SetUnconsciousVONPermitted",
          "GetTourniquettedLegMovementSlowdown",
          "SetTourniquettedLegMovementSlowdown",
          "GetTourniquetStrengthMultiplier",
          "SetTourniquetStrengthMultiplier",
          "GetCompartmentRegenRateMultiplier",
          "SetCompartmentRegenRateMultiplier",
          "GetRegenerationDelay",
          "SetRegenerationDelay"
        ]
      },
      {
        "class_name": "SCR_InitWeatherComponent",
        "methods": [
          "InitWeatherServer",
          "EOnInit",
          "InitWeatherServer",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_BasePrefabCategory",
        "methods": [
          "GetRatio",
          "Spawn"
        ]
      },
      {
        "class_name": "SCR_PrefabCategory",
        "methods": [
          "Spawn"
        ]
      },
      {
        "class_name": "SCR_PrefabsCategory",
        "methods": [
          "Spawn"
        ]
      },
      {
        "class_name": "SCR_PrefabSpawnPoint",
        "methods": [
          "GetType",
          "ShouldSnapToGroud",
          "ShouldSnapToGround",
          "ShouldSnapToGround",
          "SCR_PrefabSpawnPoint",
          "SetFlags",
          "SetFlags"
        ]
      },
      {
        "class_name": "SCR_PrefabsSpawner",
        "methods": [
          "GetType",
          "Spawn",
          "SpawnPrefabsCategories",
          "SpawnPrefabsCategories",
          "SpawnPrefabCategory",
          "GetTotalRatio"
        ]
      },
      {
        "class_name": "SCR_PrefabsSpawnerManager",
        "methods": [
          "RegisterPrefabSpawnPoint",
          "UnregisterPrefabSpawnPoint",
          "EOnFrame",
          "ClearEventMask",
          "ClearEventMask",
          "SCR_PrefabsSpawnerManager",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_StressTestGroupActivation",
        "methods": [
          "SCR_StressTestGroupActivation",
          "SetEventMask",
          "SetFlags",
          "EOnInit",
          "EOnFrame",
          "ClearEventMask"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenUnevenFourTiles",
        "methods": [
          "InitContent"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenBigImageContent",
        "methods": [
          "InitContent",
          "GetImage"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenSummaryContent",
        "methods": [
          "InitContent",
          "FillSummaryWidget",
          "FillSummaryWidget",
          "UpdateSummarySubtitle",
          "UpdateSummaryDescription",
          "GetTitleText",
          "GetSubtitleText",
          "GetSubtitleLostText",
          "GetDescriptionText"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenFinishedObjectivesContent",
        "methods": [
          "InitContent",
          "FillFinishedObjectivesWidget",
          "InitPagination",
          "HandlePagination",
          "ToggleInteractions",
          "HandlePagination",
          "ProcessTasks",
          "FillFinishedObjectivesWidget",
          "ProcessTasks",
          "InitPagination",
          "ButtonClicked",
          "HandlePagination",
          "PreviousButtonActivated",
          "FlipPage",
          "FlipPage",
          "NextButtonActivated",
          "FlipPage",
          "FlipPage",
          "SetCurrentPage",
          "GetCurrentPage",
          "SetCurrentPage",
          "GetTitleText"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenStatisticsContent",
        "methods": [
          "InitContent",
          "FillStatisticsWidget",
          "FillStatisticsWidget",
          "GetStatistics",
          "GetTitleText"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenStatisticBaseClass",
        "methods": [
          "InitStatistic",
          "GetStatisticResult"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenStatisticShotsFired",
        "methods": [
          "InitStatistic"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenStatisticKills",
        "methods": [
          "InitStatistic"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenStatisticDeaths",
        "methods": [
          "InitStatistic"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenStatisticDistanceWalked",
        "methods": [
          "InitStatistic"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenStatisticDistanceDriven",
        "methods": [
          "InitStatistic"
        ]
      },
      {
        "class_name": "SCR_DeployMenuBaseScreenComponent",
        "methods": [
          "GetHeaderTitle",
          "GetHeaderSubtitle",
          "GetBaseLayout"
        ]
      },
      {
        "class_name": "SCR_DeployMenuBaseScreenLayout",
        "methods": [
          "InitContent",
          "GetScreenBaseContents"
        ]
      },
      {
        "class_name": "SCR_EditorRespawnBriefingComponent",
        "methods": [
          "GetInfo"
        ]
      },
      {
        "class_name": "SCR_PlayerRadioSpawnPoint",
        "methods": [
          "OnItemAdded",
          "OnItemRemoved",
          "ActivateSpawnPoint",
          "OnItemAdded",
          "DeactivateSpawnPoint"
        ]
      },
      {
        "class_name": "SCR_PlayerRadioSpawnPointCampaign",
        "methods": [
          "OnItemAdded",
          "GetCachedFaction",
          "ActivateSpawnPointPublic",
          "DeactivateSpawnPointPublic"
        ]
      },
      {
        "class_name": "SCR_PlayerSpawnPoint",
        "methods": [
          "GetTargetPlayer",
          "SetPlayerID",
          "OnSetPlayerID",
          "EnablePoint",
          "DisablePoint",
          "GetPlayerID",
          "OnSetPlayerID",
          "LinkInfo",
          "GetSpawnPointName",
          "EnablePoint",
          "ActivateSpawnPoint",
          "DisablePoint",
          "DeactivateSpawnPoint",
          "ActivateSpawnPoint",
          "SetFaction",
          "ClearFlags",
          "IsSpawnPointActive",
          "DeactivateSpawnPoint",
          "SetFaction",
          "SetFlags",
          "UpdateSpawnPos",
          "UpdateSpawnPosBroadcast",
          "Rpc",
          "UpdateSpawnPosBroadcast",
          "SetOrigin",
          "GetPositionAndRotation",
          "GetTargetVehicle",
          "CanReserveFor_S",
          "PrepareSpawnedEntity_S",
          "PrepareSpawnedEntityForVehicle_S",
          "PrepareSpawnedEntityForVehicle_S",
          "CanFinalizeSpawn_S",
          "OnFinalizeSpawnDone_S"
        ]
      },
      {
        "class_name": "SCR_PlayerSpawnPointManagerComponentClass",
        "methods": [
          "SCR_DeployableSpawnPointBudgetChangedDelegate"
        ]
      },
      {
        "class_name": "SCR_PlayerSpawnPointManagerComponent",
        "methods": [
          "EnablePlayerSpawnPoints",
          "AddSpawnPoint",
          "IsPlayerSpawnPointsEnabled",
          "AddSpawnPoint",
          "RemoveSpawnPoint",
          "EnableRadioVehicleSpawning",
          "Rpc",
          "RPC_EnableRadioVehicleSpawning",
          "RPC_EnableRadioVehicleSpawning",
          "IsRadioVehicleSpawningEnabled",
          "GetOnRadioVehicleSpawningChanged",
          "EnableDeployableSpawnPoints",
          "Rpc",
          "RPC_EnableDeployableSpawnPoints",
          "RPC_EnableDeployableSpawnPoints",
          "IsDeployingSpawnPointsEnabled",
          "GetOnSpawnPointDeployingEnabledChanged",
          "SetDeployableSpawnPointBudgetType",
          "RPC_SetDeployableSpawnPointBudgetType",
          "Rpc",
          "RPC_SetDeployableSpawnPointBudgetType",
          "GetDeployableSpawnPointBudgetType",
          "GetOnSpawnPointBudgetTypeChanged",
          "SetDeployableSpawnPointTicketAmount",
          "RPC_SetDeployableSpawnPointTicketAmount",
          "Rpc",
          "RPC_SetDeployableSpawnPointTicketAmount",
          "GetDeployableSpawnPointTicketAmount",
          "GetOnSpawnPointTicketAmountChanged",
          "OnPlayerConnected",
          "AddSpawnPoint",
          "OnPlayerDisconnected",
          "RemoveSpawnPoint",
          "OnPlayerSpawnFinalize_S",
          "OnPlayerKilled",
          "RplSave",
          "RplLoad",
          "RPC_EnableRadioVehicleSpawning",
          "RPC_EnableDeployableSpawnPoints",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_Position",
        "methods": [
          "SetColorAndText",
          "_WB_AfterWorldUpdate",
          "SetColorAndText",
          "GetWorldTransform",
          "SCR_Position",
          "SetEventMask",
          "SetFlags"
        ]
      },
      {
        "class_name": "SCR_RadioVehicleSpawnPoint",
        "methods": [
          "EOnInit",
          "IsSpawnPointEnabled",
          "CanReserveFor_S",
          "InitFactionAffiliation"
        ]
      },
      {
        "class_name": "SCR_RespawnBriefingComponent",
        "methods": [
          "RplSave",
          "RplLoad",
          "RewriteEntryMain",
          "RewriteEntry_SA",
          "RewriteEntryMain",
          "Rpc",
          "RpcDo_RewriteEntry",
          "RewriteEntryMain",
          "RewriteEntryMain",
          "RewriteEntry",
          "RewriteEntry",
          "LoadJournalConfig",
          "OnLanguageChanged",
          "RewriteEntry",
          "GetJournalSetup",
          "LoadJournalConfig",
          "ResetConfig",
          "LoadJournalConfig",
          "GetInstance",
          "GetInfo",
          "GetSimpleBriefingBackground",
          "GetJournalConfigPath",
          "GetGameModeHints",
          "GetWinConditions",
          "SetBriefingShown",
          "GetWasBriefingShown"
        ]
      },
      {
        "class_name": "SCR_BriefingVictoryCondition",
        "methods": [
          "GetName",
          "GetDescription",
          "GetConditionType"
        ]
      },
      {
        "class_name": "SCR_RespawnComponent",
        "methods": [
          "SGetOnLocalPlayerSpawned",
          "GetOnRespawnReadyInvoker_O",
          "GetOnCanRespawnRequestInvoker_O",
          "GetOnCanRespawnRequestInvoker_S",
          "GetOnCanRespawnResponseInvoker_O",
          "GetOnCanRespawnResponseInvoker_S",
          "GetOnRespawnRequestInvoker_O",
          "GetOnRespawnRequestInvoker_S",
          "GetOnRespawnResponseInvoker_O",
          "GetOnRespawnResponseInvoker_S",
          "GetOnRespawnFinalizeBeginInvoker_O",
          "GetInstance",
          "SGetLocalRespawnComponent",
          "SGetPlayerRespawnComponent",
          "GetRplComponent",
          "RequestClearPlayerFaction",
          "RequestClearPlayerLoadout",
          "RequestClearPlayerSpawnPoint",
          "RequestPlayerLoadout",
          "RequestPlayerFaction",
          "RequestPlayerSpawnPoint",
          "RequestPlayerSuicide",
          "RequestPlayerLoadoutIndex",
          "RequestPlayerFactionIndex",
          "RequestPlayerSpawnPointIdentity",
          "NotifyReadyForSpawn_S",
          "Rpc",
          "Rpc_NotifyReadyForSpawn_O",
          "Diag_RequestCLISpawn",
          "RequestQuickRespawn",
          "RequestRespawn",
          "OnDiag",
          "OnPostInit",
          "ConnectToDiagSystem",
          "RegisterRespawnRequestComponents",
          "OnDelete",
          "DisconnectFromDiagSystem",
          "RequestSpawn",
          "CanSpawn",
          "RegisterRespawnRequestComponents",
          "FindComponents",
          "GetRequestComponent",
          "Diag_IsCLISpawnEnabled",
          "Diag_RequestCLISpawn",
          "Rpc",
          "Rpc_RequestCLISpawn_S",
          "Rpc",
          "Rpc_ResponseCLISpawn_O",
          "SCR_RespawnComponent"
        ]
      },
      {
        "class_name": "SCR_RespawnSystemComponent",
        "methods": [
          "GetSpawnPointRequestResultInfo",
          "GetInstance",
          "GetLocalPlayerFaction",
          "GetRplComponent",
          "RequestSpawn",
          "CustomRespawn",
          "CanSetLoadout",
          "DoSetPlayerLoadout",
          "CanSetFaction",
          "CanSetSpawnPoint",
          "DoSetPlayerSpawnPoint",
          "GetFactionPlayerCount",
          "GetLoadoutPlayerCount",
          "SetPlayerLoadout",
          "SetPlayerFaction",
          "GetFactionByIndex",
          "GetFactionIndex",
          "GetPlayerFaction",
          "GetLoadoutByIndex",
          "GetPlayerLoadout",
          "GetLoadoutIndex",
          "OpenRespawnMenu",
          "CloseRespawnMenu",
          "IsRespawnMenuOpened",
          "ToggleRespawnMenu",
          "CloseRespawnMenu",
          "OpenRespawnMenu",
          "ServerSetEnableRespawn",
          "SetEnableRespawnBroadcast",
          "Rpc",
          "SetEnableRespawnBroadcast",
          "IsRespawnEnabled",
          "IsFactionChangeAllowed",
          "GetOnRespawnEnabledChanged",
          "CanRequestSpawn_S",
          "PreparePlayerEntity_S",
          "OnPlayerEntityChange_S",
          "OnSpawnPlayerEntityFailure_S",
          "OnPlayerSpawnFinalize_S",
          "OnPlayerRegistered_S",
          "OnPlayerDisconnected_S",
          "OnPlayerKilled_S",
          "OnPlayerDeleted_S",
          "GetDeployMenuOpenDelay_ms",
          "CanOpenDeployMenu",
          "GetSpawnLogic",
          "OnInit",
          "OnRplSave",
          "OnRplLoad",
          "SetEnableRespawnBroadcast"
        ]
      },
      {
        "class_name": "SCR_RespawnTimer",
        "methods": [
          "Start",
          "GetStartTime",
          "IsFinished",
          "GetRemainingTime",
          "GetDuration",
          "SetDuration",
          "RplSave",
          "RplLoad",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject"
        ]
      },
      {
        "class_name": "SCR_RespawnTimerComponent",
        "methods": [
          "RplSave",
          "RplLoad",
          "IsMaster",
          "GetCurrentTime",
          "SetRespawnTime",
          "RpcDo_SetDuration_BC",
          "Rpc",
          "IsPlayerEnqueued",
          "GetCanPlayerSpawn",
          "GetPlayerRemainingTime",
          "OnPlayerKilled",
          "RpcDo_StartTimer_BC",
          "Rpc",
          "OnPlayerDeleted",
          "RpcDo_StartTimer_BC",
          "RpcDo_SetDuration_BC",
          "RpcDo_SetDurationAll_BC",
          "OnPlayerRegistered",
          "SetRespawnTime",
          "RpcDo_SetDurationAll_BC",
          "Rpc",
          "GetRespawnTime",
          "DrawDebugInfo",
          "EOnDiag",
          "DrawDebugInfo",
          "OnPostInit",
          "ConnectToDiagSystem",
          "OnDelete",
          "DisconnectFromDiagSystem",
          "SCR_RespawnTimerComponent"
        ]
      },
      {
        "class_name": "SCR_SpawnPointClass",
        "methods": [
          "SpawnPointDelegateMethod",
          "SpawnPointFinalizeSpawnInvoker",
          "SpawnPointNameChangedInvoker"
        ]
      },
      {
        "class_name": "SCR_SpawnPoint",
        "methods": [
          "IsSpawnPointVisibleForPlayer",
          "IsSpawnPointEnabled",
          "SetSpawnPointEnabled_S",
          "OnSetEnabled",
          "OnSetEnabled",
          "GetOnSpawnPointEnabled",
          "GetOnSpawnPointFinalizeSpawn",
          "GetRespawnTime",
          "SetRespawnTime",
          "CanReserveFor_S",
          "IsReservedFor_S",
          "ReserveFor_S",
          "ClearReservationFor_S",
          "GetSpawnRadius",
          "SetSpawnRadius",
          "ShowSpawnPointDescriptors",
          "GetRplId",
          "GetSpawnPointByRplId",
          "GetEmptyPositionAndRotationInRange",
          "SetUseNearbySpawnPositions",
          "GetPositionAndRotation",
          "GetSpawnPointByIndex",
          "GetSpawnPointIndex",
          "IsSpawnPointActive",
          "CountSpawnPoints",
          "GetVisibleInDeployMapOnly",
          "SetVisibleInDeployMapOnly",
          "ApplyFactionChange",
          "SetFaction",
          "SetFaction",
          "SetFactionKey",
          "SetFactionKey",
          "OnSetFactionKey",
          "OnSetFactionKey",
          "SetSpawnPositionRange",
          "GetSpawnPositionRange",
          "GetFactionKey",
          "GetIsInRange",
          "GetRandomSpawnPointDeathmatch",
          "GetRandomSpawnPoint",
          "GetSpawnPointsForFaction",
          "GetSpawnPointCountForFaction",
          "GetRandomSpawnPointForFaction",
          "GetInfo",
          "SetInfo",
          "GetSpawnPointName",
          "SetSpawnPointName",
          "IsTimed",
          "SetIsTimed",
          "LinkInfo",
          "SetColorAndText",
          "PrepareSpawnedEntity_S",
          "GetPositionAndRotation",
          "CanFinalizeSpawn_S",
          "IsSpawnPointEnabled",
          "OnFinalizeSpawnDone_S",
          "EOnInit",
          "InitFactionAffiliation",
          "ClearFlags",
          "InitFactionAffiliation",
          "RplSave",
          "RplLoad",
          "OnSetFactionKey",
          "SCR_SpawnPoint",
          "SetEventMask",
          "SetFlags"
        ]
      },
      {
        "class_name": "SCR_SpawnPositionComponentClass",
        "methods": [
          "GetMinBoundsVector",
          "GetMaxBoundsVector"
        ]
      },
      {
        "class_name": "SCR_SpawnPositionComponent",
        "methods": [
          "IsFree",
          "CheckEntity",
          "FilterEntity",
          "EOnInit",
          "OnPostInit",
          "SetEventMask",
          "DrawDebugShape",
          "_WB_AfterWorldUpdate",
          "DrawDebugShape"
        ]
      },
      {
        "class_name": "SCR_SpawnPositionComponentManager",
        "methods": [
          "GetInstance",
          "AddSpawnPosition",
          "DeleteSpawnPosition",
          "GetSpawnPositionsInRange"
        ]
      },
      {
        "class_name": "SCR_WaveRespawnTimerComponent",
        "methods": [
          "DrawDebugInfo",
          "GetCanPlayerSpawn",
          "GetPlayerRemainingTime",
          "OnPlayerSpawnFinalize_S",
          "OnPlayerKilled",
          "OnPlayerDeleted",
          "OnPlayerConnected",
          "RpcDo_StartFactionTimer",
          "EOnFrame",
          "RpcDo_StartFactionTimer",
          "Rpc",
          "OnPostInit",
          "SetEventMask",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenThreeHorizontalColumns",
        "methods": [
          "InitContent"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenBaseContent",
        "methods": [
          "InitContent",
          "ToggleInteractions",
          "GetContentName",
          "GetIsInteractible"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenMissionObjectivesContent",
        "methods": [
          "InitContent",
          "FillMissionObjectivesWidget",
          "GetMissionObjectives",
          "GetTitleText",
          "GetBottomTitleText"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenMissionObjectives",
        "methods": [
          "GetImageSet",
          "GetObjectiveQuadName",
          "GetDescription"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenDynamicObjectivesContent",
        "methods": [
          "InitContent",
          "FillDynamicObjectivesWidget",
          "InitPagination",
          "HandlePagination",
          "ToggleInteractions",
          "HandlePagination",
          "FillDynamicObjectivesWidget",
          "AddTask",
          "AddTaskCalledLater",
          "RemoveTask",
          "InitPagination",
          "ButtonClicked",
          "HandlePagination",
          "PreviousButtonActivated",
          "FlipPage",
          "NextButtonActivated",
          "FlipPage",
          "FlipPage",
          "SetCurrentPage",
          "GetCurrentPage",
          "SetCurrentPage",
          "GetTitleText"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenDynamicTaskFaction",
        "methods": [
          "GetFactionKey",
          "AddFactionTask",
          "RemoveFactionTask"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenIntroductionContent",
        "methods": [
          "InitContent",
          "FillIntroductionWidget",
          "ToggleInteractions",
          "HandlePagination",
          "FillIntroductionWidget",
          "InitPagination",
          "HandlePagination",
          "InitPagination",
          "ButtonClicked",
          "HandlePagination",
          "PreviousButtonActivated",
          "NextButtonActivated",
          "FlipPage",
          "SetCurrentPage",
          "GetIntroduction",
          "GetTitleText",
          "GetCurrentPage",
          "SetCurrentPage"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenIntroduction",
        "methods": [
          "GetImage",
          "GetTitleText",
          "GetDescriptionText"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenFactionContent",
        "methods": [
          "InitContent",
          "AddFactionWidget",
          "AddFactionWidget",
          "FillFactionWidget",
          "FillFactionWidget",
          "UpdateFactionPlayerCount",
          "UpdateFactionPlayability",
          "GetTitleText",
          "GetBottomTitleText"
        ]
      },
      {
        "class_name": "SCR_AnyInvalidSpawnPointRequestResultInfo",
        "methods": [
          "IsValidRequestResultInfo"
        ]
      },
      {
        "class_name": "SCR_BaseEnumSpawnPointRequestResultInfo",
        "methods": [
          "IsValidRequestResultInfo"
        ]
      },
      {
        "class_name": "SCR_BaseSpawnPointRequestResultInfo",
        "methods": [
          "GetUIInfo",
          "ShowRespawnTime",
          "IsValidRequestResultInfo"
        ]
      },
      {
        "class_name": "SCR_SpawnPointRequestResultInfoConfig",
        "methods": [
          "SCR_SpawnPointRequestResultInfoConfig",
          "GetFirstValidRequestResultInfo"
        ]
      },
      {
        "class_name": "SCR_DSSessionCallback",
        "methods": [
          "GetSaveType",
          "GetInfo",
          "SaveSession",
          "LoadSession",
          "Delete",
          "Delete",
          "FileExists",
          "GetMeta",
          "SetStruct",
          "GetStruct",
          "Log",
          "IsConfigured",
          "IsCompatible",
          "GetMissionFileName",
          "GetCustomName",
          "GetCurrentCustomName",
          "GetCustomName",
          "GetFileName",
          "OnGameStart",
          "OnGameEnd",
          "OnLatestSave",
          "InvokeOnSaved",
          "OnSaving",
          "OnSaveSuccess",
          "InvokeOnSaved",
          "OnSaveFailed",
          "OnLoaded",
          "OnLoadFailed",
          "OnDeleteSuccess",
          "OnDeleteFailed",
          "SCR_DSSessionCallback"
        ]
      },
      {
        "class_name": "SCR_NumberedDSSessionCallback",
        "methods": [
          "GetFileName"
        ]
      },
      {
        "class_name": "SCR_DisposableDSSessionCallback",
        "methods": [
          "DeleteDelayed",
          "Delete",
          "DeleteIfNotToLoad",
          "Delete",
          "OnLoaded",
          "OnGameStart",
          "DeleteIfNotToLoad",
          "OnGameEnd",
          "DeleteIfNotToLoad"
        ]
      },
      {
        "class_name": "SCR_JsonApiStruct",
        "methods": [
          "Serialize",
          "Deserialize",
          "ClearCache",
          "Log"
        ]
      },
      {
        "class_name": "SCR_LatestSaveDSSessionCallback",
        "methods": [
          "SetFileName",
          "WriteToFile",
          "RemoveFileName",
          "WriteToFile",
          "FindFileName",
          "Log",
          "WriteToFile",
          "ReadFromFile",
          "OnSaving",
          "OnLoaded",
          "OnLoadFailed",
          "OnSaveSuccess",
          "IsLoaded"
        ]
      },
      {
        "class_name": "SCR_LatestSaveStruct",
        "methods": [
          "SetFileName",
          "RemoveFileName",
          "FindFileName",
          "Log",
          "PrintFormat",
          "PrintFormat",
          "SCR_LatestSaveStruct"
        ]
      },
      {
        "class_name": "SCR_LatestSaveEntryStruct",
        "methods": [
          "SCR_LatestSaveEntryStruct",
          "RegAll"
        ]
      },
      {
        "class_name": "SCR_MetaStruct",
        "methods": [
          "IsVersionCompatible",
          "GetHeaderResource",
          "GetDateAndTime",
          "AreAddonsCompatible",
          "IsValid",
          "Serialize",
          "Deserialize",
          "ClearCache",
          "Log",
          "PrintFormat",
          "PrintFormat",
          "SCR_MetaStruct",
          "RegAll"
        ]
      },
      {
        "class_name": "SCR_MissionStruct",
        "methods": [
          "GetMeta",
          "ContainsStruct",
          "Serialize",
          "Deserialize",
          "ClearCache",
          "Log",
          "SCR_MissionStruct"
        ]
      },
      {
        "class_name": "SCR_SaveLoadComponent",
        "methods": [
          "GetInstance",
          "CanSaveOnExit",
          "GetDebugHeaderResourceName",
          "ContainsStruct",
          "Autosave",
          "OnGameModeEnd",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_SaveManagerCore",
        "methods": [
          "ScriptInvoker_SaveManagerCoreMethod",
          "Save",
          "OverrideCurrentSave",
          "Load",
          "RestartAndLoad",
          "RestartAndLoad",
          "RestartAndLoad",
          "RestartAndLoad",
          "UploadToWorkshop",
          "Delete",
          "Delete",
          "FileExists",
          "FileExists",
          "CanSaveToCloud",
          "GetMeta",
          "GetLocalSaveFiles",
          "GetLocalSaveFiles",
          "GetLocalSaveFiles",
          "IsDownloaded",
          "CanSave",
          "SetStruct",
          "Log",
          "GetMissionFileName",
          "GetCustomName",
          "GetSaveTypeInfo",
          "FindCallback",
          "FindCallback",
          "UploadToWorkshop",
          "DownloadFromWorkshop",
          "OnDownloadFromWorkshop",
          "SetFileNameToLoad",
          "SetFileNameToLoad",
          "SetFileNameToLoad",
          "ResetFileNameToLoad",
          "FindFileNameToLoad",
          "SetCurrentMissionLatestSave",
          "SetLatestSave",
          "RemoveCurrentMissionLatestSave",
          "RemoveLatestSave",
          "FindCurrentMissionLatestSave",
          "FindLatestSave",
          "SetLatestSave",
          "RemoveLatestSave",
          "FindLatestSave",
          "FindLatestSave",
          "HasLatestSave",
          "FindLatestSave",
          "HasLatestSave",
          "GetOnSaved",
          "GetOnLoaded",
          "GetOnDeleted",
          "GetOnLatestSave",
          "GetUploadCallback",
          "LoadOnInit",
          "Load",
          "ResetFileNameToLoad",
          "InitDebugMissionHeader",
          "OnUpdate",
          "Save",
          "Log",
          "Load",
          "RestartAndLoad",
          "PrintFormat",
          "PrintFormat",
          "UploadToWorkshop",
          "DownloadFromWorkshop",
          "DownloadFromWorkshop",
          "OnGameStart",
          "OnGameStorageInitialize",
          "InitDebugMissionHeader",
          "InitDebugMissionHeader",
          "OnGameStorageInitialize",
          "OnGameEnd"
        ]
      },
      {
        "class_name": "SCR_SaveManager_BackendCallback",
        "methods": [
          "OnError",
          "OnSuccess",
          "OnTimeout"
        ]
      },
      {
        "class_name": "SCR_SaveManager_PageParams",
        "methods": [
          "OnPack",
          "StoreBoolean"
        ]
      },
      {
        "class_name": "SCR_DSSessionCallbackSessionStorage",
        "methods": [
          "GetOnInitialize",
          "OnInitialize"
        ]
      },
      {
        "class_name": "SCR_ServerSaveRequestCallback",
        "methods": [
          "OnSuccess",
          "OnError",
          "OnTimeout",
          "SCR_ServerSaveRequestCallback"
        ]
      },
      {
        "class_name": "SCR_UploadSaveCallback_PageParams",
        "methods": [
          "OnPack",
          "StoreBoolean",
          "StoreString"
        ]
      },
      {
        "class_name": "SCR_ServerSaveUploadCallback",
        "methods": [
          "OnSuccess",
          "OnError",
          "OnTimeout",
          "SCR_ServerSaveUploadCallback"
        ]
      },
      {
        "class_name": "SCR_BaseScoringSystemComponentClass",
        "methods": [
          "OnPlayerEventDelegate",
          "OnPlayerScoreChangedDelegate",
          "OnFactionScoreChangedDelegate"
        ]
      },
      {
        "class_name": "SCR_BaseScoringSystemComponent",
        "methods": [
          "GetOnPlayerScoreChanged",
          "GetOnFactionScoreChanged",
          "GetOnPlayerAdded",
          "GetOnPlayerRemoved",
          "RplSave",
          "RplLoad",
          "GetPlayerFactionIndex",
          "GetFactionByIndex",
          "GetFactionIndex",
          "RpcDo_AddKill",
          "OnPlayerScoreChanged",
          "OnFactionScoreChanged",
          "AddKill",
          "RpcDo_AddKill",
          "Rpc",
          "RpcDo_AddDeath",
          "OnPlayerScoreChanged",
          "OnFactionScoreChanged",
          "AddDeath",
          "RpcDo_AddDeath",
          "Rpc",
          "RpcDo_AddTeamKill",
          "OnPlayerScoreChanged",
          "OnFactionScoreChanged",
          "AddTeamKill",
          "RpcDo_AddTeamKill",
          "Rpc",
          "RpcDo_AddSuicide",
          "OnPlayerScoreChanged",
          "OnFactionScoreChanged",
          "AddSuicide",
          "RpcDo_AddSuicide",
          "Rpc",
          "RpcDo_AddObjective",
          "OnPlayerScoreChanged",
          "OnFactionScoreChanged",
          "AddObjective",
          "RpcDo_AddObjective",
          "Rpc",
          "RpcDo_AddFactionObjective",
          "OnFactionScoreChanged",
          "AddFactionObjective",
          "RpcDo_AddFactionObjective",
          "Rpc",
          "OnPlayerScoreChanged",
          "OnFactionScoreChanged",
          "CalculateScore",
          "GetPlayerScore",
          "CalculateScore",
          "GetPlayerScoreInfo",
          "GetFactionScore",
          "CalculateScore",
          "GetFactionScoreInfo",
          "OnPlayerRegistered",
          "OnPlayerDisconnected",
          "EOnDiag",
          "AddKill",
          "AddDeath",
          "AddTeamKill",
          "AddSuicide",
          "AddObjective",
          "AddFactionObjective",
          "GetScoreLimit",
          "EOnInit",
          "OnPostInit",
          "SetEventMask",
          "ConnectToDiagSystem",
          "OnDelete",
          "DisconnectFromDiagSystem"
        ]
      },
      {
        "class_name": "SCR_ScoreInfo",
        "methods": [
          "RplSave",
          "RplLoad",
          "Clear"
        ]
      },
      {
        "class_name": "IScoringAction",
        "methods": [
          "OnPlayerScoreChanged",
          "OnFactionScoreChanged"
        ]
      },
      {
        "class_name": "EndGameAction",
        "methods": [
          "GetScoreLimit",
          "Execute",
          "OnPlayerScoreChanged",
          "Execute",
          "OnFactionScoreChanged",
          "Execute"
        ]
      },
      {
        "class_name": "SCR_ScoringSystemComponent",
        "methods": [
          "GetScoreLimit",
          "CalculateScore",
          "OnPlayerKilled",
          "AddDeath",
          "AddSuicide",
          "AddTeamKill",
          "AddKill",
          "OnGameModeEnd",
          "OnPlayerScoreChanged",
          "OnFactionScoreChanged"
        ]
      },
      {
        "class_name": "SCR_BaseGameModeClass",
        "methods": [
          "SCR_BaseGameMode_OnPlayerDisconnected",
          "SCR_BaseGameMode_OnPlayerKilled",
          "SCR_BaseGameMode_PlayerId",
          "SCR_BaseGameMode_PlayerIdAndEntity",
          "SCR_BaseGameMode_OnPlayerRoleChanged",
          "SCR_BaseGameMode_OnResourceEnabledChanged",
          "OnPreloadFinished"
        ]
      },
      {
        "class_name": "SCR_BaseGameMode",
        "methods": [
          "IsResourceTypeEnabled",
          "GetDisabledResourceTypes",
          "SetResourceTypeEnabled",
          "OnResourceTypeEnabledChanged",
          "OnResourceTypeEnabledChanged",
          "CanStartSpawnPreload",
          "IsRunning",
          "GetState",
          "IsMaster",
          "GetElapsedTime",
          "GetTimeLimit",
          "GetRemainingTime",
          "IsHosted",
          "OnGameStateChanged",
          "OnGameModeEnd",
          "OnGameModeStart",
          "CachePlayerSpawnPosition",
          "GetRespawnSystemComponent",
          "GetGameModeHealthSettings",
          "GetScoringSystemComponent",
          "StartGameMode",
          "OnGameStateChanged",
          "CanStartGameMode",
          "EndGameMode",
          "OnGameStateChanged",
          "GetEndGameData",
          "GetOnGameStart",
          "GetOnGameEnd",
          "GetOnWorldPostProcess",
          "GetOnControllableSpawned",
          "GetOnControllableDestroyed",
          "GetOnControllableDeleted",
          "GetOnGameModeEnd",
          "OnGameModeStart",
          "OnGameModeEnd",
          "GetGameEndTimeStamp",
          "GetAutoReloadDelay",
          "RestartSession",
          "OnGameStart",
          "OnGameEnd",
          "IsFactionChangeAllowed",
          "OnPlayerAuditSuccess",
          "OnPlayerAuditFail",
          "OnPlayerAuditTimeouted",
          "OnPlayerAuditRevived",
          "OnPlayerConnected",
          "OnPlayerDisconnected",
          "OnPlayerRegistered",
          "OnPlayerSpawned",
          "HandlePlayerKilled",
          "OnPlayerKilledHandled",
          "OnPlayerKilled",
          "OnPlayerKilledHandled",
          "OnPlayerRoleChange",
          "OnWorldPostProcess",
          "OnControllableSpawned",
          "OnControllableDestroyed",
          "OnControllableDeleted",
          "OnPlayerDeleted",
          "OnSpawnPlayerEntityFailure_S",
          "OnPlayerEntityChanged_S",
          "PreparePlayerEntity_S",
          "OnPlayerSpawnFinalize_S",
          "OnPlayerSpawnOnPoint_S",
          "OnPlayerSpawnOnPoint_S",
          "ConsumeSuppliesOnPlayerSpawn_S",
          "OnPlayerLoadoutSet_S",
          "OnPlayerFactionSet_S",
          "CanPlayerSpawn_S",
          "GetPlayerRemainingRespawnTime",
          "RplSave",
          "RplLoad",
          "Diag_DrawPlayersWindow",
          "Diag_DrawPlayerInfo",
          "Diag_DrawPlayerInfo",
          "Diag_DrawPlayerInfo",
          "Diag_DrawControlledEntitiesWindow",
          "Diag_DrawControlledEntityInfo",
          "Diag_DrawControlledEntityInfo",
          "Diag_DrawComponentsWindow",
          "Diag_DrawComponentInfo",
          "Diag_DrawComponentInfo",
          "Diag_DrawGameModeWindow",
          "RestartSession",
          "HandleOnTasksInitialized",
          "SetLocalControls",
          "UpdateStatistics",
          "GetAllowControls",
          "GetAllowControlsTarget",
          "GetStateComponent",
          "EOnFrame",
          "UpdateStatistics",
          "HandleSpawnPreload",
          "StartGameMode",
          "EndGameMode",
          "SetLocalControls",
          "Diag_DrawGameModeWindow",
          "Diag_DrawComponentsWindow",
          "Diag_DrawPlayersWindow",
          "Diag_DrawControlledEntitiesWindow",
          "EOnInit",
          "GetOnPreloadFinished",
          "StartSpawnPreload",
          "HandleSpawnPreload",
          "SCR_BaseGameMode",
          "Activate",
          "SetEventMask",
          "IsGameModeStatisticsEnabled"
        ]
      },
      {
        "class_name": "SCR_BaseGameModeComponent",
        "methods": [
          "GetGameMode",
          "OnGameEnd",
          "OnGameStateChanged",
          "OnGameModeStart",
          "OnGameModeEnd",
          "OnPlayerConnected",
          "OnPlayerAuditSuccess",
          "OnPlayerAuditFail",
          "OnPlayerAuditTimeouted",
          "OnPlayerAuditRevived",
          "OnPlayerRegistered",
          "OnPlayerDisconnected",
          "OnPlayerSpawned",
          "PreparePlayerEntity_S",
          "OnSpawnPlayerEntityFailure_S",
          "OnPlayerSpawnFinalize_S",
          "HandlePlayerKilled",
          "OnPlayerKilled",
          "OnPlayerKilledHandled",
          "OnPlayerDeleted",
          "OnPlayerRoleChange",
          "OnWorldPostProcess",
          "HandleOnLoadoutAssigned",
          "HandleOnFactionAssigned",
          "HandleOnSpawnPointAssigned",
          "OnControllableSpawned",
          "OnControllableDestroyed",
          "OnControllableDeleted",
          "SCR_BaseGameModeComponent"
        ]
      },
      {
        "class_name": "SCR_BaseGameModeStateComponent",
        "methods": [
          "GetAllowControls",
          "GetDuration",
          "CanAdvanceState",
          "OnStateEntered",
          "OnGameStateChanged",
          "OnStateEntered",
          "GetAffiliatedState"
        ]
      },
      {
        "class_name": "SCR_GameGameModeStateComponent",
        "methods": [
          "GetDuration",
          "CanAdvanceState",
          "GetAllowControls",
          "GetAffiliatedState"
        ]
      },
      {
        "class_name": "SCR_GameModeCampaign",
        "methods": [
          "GetOnFactionAssignedLocalPlayer",
          "GetOnStarted",
          "GetOnMatchSituationChanged",
          "GetOnCallsignOffsetChanged",
          "GetSuppliesReplenishThreshold",
          "GetQuickSuppliesReplenishThreshold",
          "GetQuickSuppliesReplenishMultiplier",
          "GetSuppliesArrivalInterval",
          "GetRegularSuppliesIncome",
          "GetRegularSuppliesIncomeBase",
          "GetRegularSuppliesIncomeExtra",
          "GetSupplyDepotIconThreshold",
          "GetBaseManager",
          "GetVictoryTimer",
          "GetControlPointTreshold",
          "GetMinStartingSupplies",
          "GetMaxStartingSupplies",
          "GetStartingSuppliesInterval",
          "WasRemnantsStateLoaded",
          "IsSessionLoadInProgress",
          "GetSeekDestroyWaypointPrefab",
          "GetWinningFactionId",
          "GetVictoryTimestamp",
          "GetVictoryPauseTimestamp",
          "IsTutorial",
          "GetIsMatchOver",
          "HasStarted",
          "GetCallsignOffset",
          "OnMatchSituationChanged",
          "RplSave",
          "RplLoad",
          "GetInstance",
          "SetControlPointsHeld",
          "Rpc",
          "RPC_DoSetControlPointsHeld",
          "OnMatchSituationChanged",
          "SetPrimaryTarget",
          "Rpc",
          "RPC_DoSetPrimaryTarget",
          "BroadcastMHQFeedback",
          "Rpc",
          "RpcDo_BroadcastMHQFeedback",
          "RpcDo_BroadcastMHQFeedback",
          "RequestStart",
          "Start",
          "Start",
          "DisableExtraSpawnpoint",
          "OnStarted",
          "OnStarted",
          "OnCallsignOffsetChanged",
          "DisableExtraSpawnpoint",
          "CheckForWinner",
          "RPC_DoEndMatch",
          "Rpc",
          "OnMatchSituationChanged",
          "OnMatchSituationChanged",
          "OnMatchSituationChanged",
          "RPC_DoEndMatch",
          "EndGameMode",
          "OnWorldPostProcess",
          "Start",
          "GetFactionKeyByEnum",
          "GetFactionByEnum",
          "IsProxy",
          "CanRequestVehicleWithoutRank",
          "StoreLoadedData",
          "ApplyLoadedData",
          "ApplyLoadedData",
          "EndSessionLoadProgress",
          "StoreRemnantsStates",
          "LoadRemnantsStates",
          "OnStructureBuilt",
          "SetIsTutorial",
          "ApplyClientData",
          "LoadClientData",
          "WriteAllClientsData",
          "WriteClientData",
          "WriteClientData",
          "SpawnMobileHQ",
          "GetWorldTransform",
          "GetClientsData",
          "GetClientData",
          "OnAmbientVehicleSpawned",
          "OnRankChanged",
          "OnPlayerRegistered",
          "ApplyClientData",
          "OnPlayerAuditSuccess",
          "OnPlayerDisconnected",
          "WriteClientData",
          "OnPlayerSpawnFinalize_S",
          "OnPlayerSpawnOnPoint_S",
          "OnSpawnPointFactionAssigned",
          "OnPlayerKilled",
          "UpdateRespawnPenalty",
          "OnSuicide",
          "UpdateRespawnPenalty",
          "FindComponents",
          "OnSuicide",
          "FindComponents",
          "CanPlayerSpawn_S",
          "OnControllableDestroyed",
          "OnPlayerFactionResponse_S",
          "OnPlayerFactionResponse_O",
          "ProcessFactionAssignment",
          "ProcessFactionAssignment",
          "OnEntityRequested",
          "EOnDiag",
          "SCR_GameModeCampaign",
          "SetFlags",
          "ConnectToDiagSystem",
          "DisconnectFromDiagSystem"
        ]
      },
      {
        "class_name": "SCR_GameModeCleanSweep",
        "methods": [
          "OnAreaChanged",
          "SpawnEnemies",
          "RespawnPlayers",
          "RespawnPlayers",
          "SetSwapSides",
          "SetArea",
          "OnAreaChanged",
          "CheckActiveAreaState",
          "ReplicatedShowHint",
          "ShowHint",
          "ShowAreaSelectionToGameMaster",
          "EOnFrame",
          "ReplicatedShowHint",
          "Rpc",
          "RPC_ShowHint",
          "ShowHint",
          "ShowHint",
          "HideHint",
          "SpawnEnemies",
          "OnPlayerKilled",
          "GetPlayersCenter",
          "GetActiveAreas",
          "InitializeServer",
          "GetGameMaster",
          "PickNewGameMaster",
          "PickNewGameMaster",
          "ShowAreaSelectionToGameMaster",
          "ShowAreaSelectionUI",
          "OnPlayerRegistered",
          "ShowAreaSelectionToGameMaster",
          "OnPlayerDisconnected",
          "PickNewGameMaster",
          "ShowAreaSelectionToGameMaster",
          "EOnInit",
          "InitializeServer"
        ]
      },
      {
        "class_name": "SCR_GameModeCombatOpsManager",
        "methods": [
          "LoadHeaderSettings"
        ]
      },
      {
        "class_name": "SCR_GameModeEditor",
        "methods": [
          "GetGameMasterTarget",
          "OnEditorManagerCreatedServer",
          "OnEditorManagerDeletedServer",
          "OnEditorManagerInitOwner",
          "OnLimitedChanged",
          "OnPlayerTerminated",
          "OnPlayerKilled",
          "OnPlayerTerminated",
          "OnPlayerDeleted",
          "OnPlayerTerminated",
          "OnGameStart",
          "OnEditorManagerCreatedServer",
          "OnGameEnd",
          "SCR_GameModeEditor"
        ]
      },
      {
        "class_name": "SCR_GameModeEndData",
        "methods": [
          "CreateSimple",
          "Create",
          "GetEndReason",
          "GetWinnerId",
          "GetWinnerIds",
          "GetWinnerFactionId",
          "GetFactionWinnerIds",
          "Extract",
          "Inject",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare"
        ]
      },
      {
        "class_name": "SCR_GameModeLastStand",
        "methods": [
          "EOnFrame",
          "SpawnEnemies",
          "ShowHint",
          "ShowHint",
          "ShowHint",
          "HideHint",
          "SpawnEnemies",
          "OnControllableDestroyed",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_NightModeGameModeComponent",
        "methods": [
          "EOnFrame",
          "IsLocalEditorNightModeEnabled",
          "ToggleLocalNightModeShortcut",
          "EnableLocalEditorNightMode",
          "EnableLocalEditorNightMode",
          "EnableNightMode",
          "IsGlobalNightModeAllowed",
          "IsGlobalNightModeEnabled",
          "EnableGlobalNightMode",
          "RPC_EnableGlobalNightMode",
          "Rpc",
          "RPC_EnableGlobalNightMode",
          "EnableNightMode",
          "IsNightModeEnabled",
          "CanEnableNightMode",
          "EnableNightMode",
          "UpdatePreviewingTimeOrWeather",
          "OnEditorOpened",
          "EnableLocalEditorNightMode",
          "OnEditorClosed",
          "EnableLocalEditorNightMode",
          "OnEditorLimitedChanged",
          "EnableLocalEditorNightMode",
          "UpdatePreviewingTimeOrWeather",
          "OnWeatherStatePreview",
          "UpdatePreviewingTimeOrWeather",
          "OnWindPreview",
          "UpdatePreviewingTimeOrWeather",
          "OnDateTimePreview",
          "UpdatePreviewingTimeOrWeather",
          "GetOnLocalEditorNightModeEnabledChanged",
          "GetOnGlobalNightModeEnabledChanged",
          "GetOnNightModeEnabledChanged",
          "OnEditorManagerCreated",
          "OnEditorOpened",
          "EOnInit",
          "OnEditorManagerCreated",
          "OnPostInit",
          "SetEventMask",
          "OnDelete",
          "RplSave",
          "RplLoad",
          "RPC_EnableGlobalNightMode"
        ]
      },
      {
        "class_name": "SCR_NotificationSenderComponent",
        "methods": [
          "OnControllableDestroyed",
          "OnControllableDestroyedBroadCast",
          "Rpc",
          "OnControllableDestroyedBroadCast",
          "OnControllableDestroyedHotfix",
          "OnControllableDestroyedHotfix",
          "GetKillerFromVehicle",
          "OnEditorLimitedChanged",
          "OnPlayerRegistered",
          "OnPlayerDisconnected",
          "OnPlayerSpawned",
          "OnWeatherChangedNotification",
          "OnWeatherChangedNotificationDelay",
          "GetKillFeedTypeNames",
          "GetKillFeedReceiveTypeNames",
          "GetKillFeedType",
          "SetKillFeedType",
          "SetKillFeedTypeBroadcast",
          "Rpc",
          "GetReceiveKillFeedType",
          "SetReceiveKillFeedType",
          "SetReceiveKillFeedTypeBroadcast",
          "Rpc",
          "SetKillFeedTypeBroadcast",
          "SetReceiveKillFeedTypeBroadcast",
          "RplSave",
          "RplLoad",
          "SetKillFeedTypeBroadcast",
          "SetReceiveKillFeedTypeBroadcast",
          "EOnInit",
          "OnPostInit",
          "SetEventMask",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_NotificationKillfeedTypeName",
        "methods": [
          "GetKillfeedType",
          "GetName"
        ]
      },
      {
        "class_name": "SCR_NotificationKillfeedreceiveTypeName",
        "methods": [
          "GetKillfeedReceiveType",
          "GetName"
        ]
      },
      {
        "class_name": "SCR_PostGameGameModeStateComponent",
        "methods": [
          "GetAllowControls",
          "GetAffiliatedState"
        ]
      },
      {
        "class_name": "SCR_PreGameGameModeStateComponent",
        "methods": [
          "GetDuration",
          "CanAdvanceState",
          "GetAllowControls",
          "GetAffiliatedState"
        ]
      },
      {
        "class_name": "SCR_RewindComponent",
        "methods": [
          "GetInstance",
          "HasRewindPoint",
          "CreateRewindPoint",
          "DeleteRewindPoint",
          "Rewind",
          "OnSaved",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_RewindDialog",
        "methods": [
          "OnConfirm",
          "SCR_RewindDialog"
        ]
      },
      {
        "class_name": "SCR_IGameModeRecord",
        "methods": [
          "GetRecordType",
          "GetTimestamp",
          "SaveToString",
          "Save",
          "Load",
          "LoadFromString"
        ]
      },
      {
        "class_name": "SCR_DeathRecord",
        "methods": [
          "GetRecordType",
          "Save",
          "Load",
          "CreateNew"
        ]
      },
      {
        "class_name": "SCR_MovementRecord",
        "methods": [
          "GetRecordType",
          "Save",
          "Load",
          "CreateNew"
        ]
      },
      {
        "class_name": "SCR_ConnectionRecord",
        "methods": [
          "GetRecordType",
          "Save",
          "Load",
          "CreateNew"
        ]
      },
      {
        "class_name": "SCR_SpawnRecord",
        "methods": [
          "GetRecordType",
          "Save",
          "Load",
          "SCR_SpawnRecord",
          "CreateNew"
        ]
      },
      {
        "class_name": "SCR_AILODRecord",
        "methods": [
          "GetRecordType",
          "Save",
          "Load",
          "CreateNew"
        ]
      },
      {
        "class_name": "SCR_GameModeStatistics",
        "methods": [
          "IsRecording",
          "StartRecording",
          "CanFlush",
          "Flush",
          "StopRecording",
          "Flush",
          "RecordDeath",
          "RecordMovement",
          "RecordConnection",
          "RecordSpawn",
          "RecordAILOD",
          "OpenStatistics",
          "FilterRecords",
          "FilterRecordsRefRef",
          "FilterRecordsWeakRef",
          "FormatTimestamp"
        ]
      },
      {
        "class_name": "SCR_StatisticsDrawerEntity",
        "methods": [
          "IsEmpty",
          "OpenStatisticsFile",
          "Clear",
          "Close",
          "Clear",
          "LoadRecords",
          "Clear",
          "DrawCheck",
          "DrawSlider",
          "DrawAdvancementButton",
          "EOnFrame",
          "OpenStatisticsFile",
          "LoadRecords",
          "Repaint",
          "Close",
          "FocusCamera",
          "Repaint",
          "Repaint",
          "RepaintMovement",
          "RepaintDeaths",
          "RepaintAILODs",
          "DrawPlayerList",
          "GetAlpha",
          "GetShapeFlags",
          "RepaintAILODs",
          "RepaintDeaths",
          "RepaintMovement",
          "FocusCamera",
          "SCR_StatisticsDrawerEntity",
          "SetEventMask",
          "Activate",
          "Close"
        ]
      },
      {
        "class_name": "SCR_BaseCampaignTutorialArlandStage",
        "methods": [
          "CancelHintOnVoiceOver",
          "HintOnVoiceOver",
          "ShowHintOnVoiceOver",
          "PlaySoundSystem",
          "IsSupplyTruckInArea",
          "Setup",
          "GetIsFinished",
          "Reset",
          "OnInputDeviceChanged",
          "DelayedPopup",
          "RegisterWaypoint",
          "RegisterWaypoint",
          "FlushWaypoints",
          "GetWaypoint",
          "GetWaypointArray",
          "SetPlayer",
          "OnStructureBuilt",
          "CreateString",
          "IsBuildingModeOpen",
          "SetupHintConfig",
          "EOnPostFrame",
          "GetWaypointArray",
          "EOnFrame",
          "SCR_BaseCampaignTutorialArlandStage",
          "SetEventMask",
          "SetupHintConfig",
          "Setup"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageInfo",
        "methods": [
          "GetIndex",
          "GetClassName"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStages",
        "methods": [
          "GetConfigClassName",
          "GetStages",
          "GetStagesFromConfig",
          "GetPlayerLoadout",
          "GetWeatherOverride",
          "ShouldWeatherLoop",
          "GetTime",
          "GetVoiceOverDataConfig"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStagesConfig",
        "methods": [
          "GetConfigs"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandComponent",
        "methods": [
          "HideSubtitles",
          "SetupVoiceSystem",
          "GetVoiceSystem",
          "RemovePlayerMapMarkers",
          "HandleAchievement",
          "SetStagesComplete",
          "StageReset_Helicopter",
          "HelicopterDrownedCheck",
          "SetActiveConfig",
          "RemoveHelicopterInvokers",
          "OnHelicopterDamaged",
          "SetActiveConfig",
          "OnVehicleDamaged",
          "SetActiveConfig",
          "OnEngineStoppedJeep",
          "SetActiveConfig",
          "OnEngineStoppedHmw",
          "SetActiveConfig",
          "OnEngineStoppedTruck",
          "SetActiveConfig",
          "OnTruckDamaged",
          "SetActiveConfig",
          "OnHmwDamaged",
          "SetActiveConfig",
          "FindBuiltComposition",
          "GetActiveStage",
          "SetActiveStage",
          "ShowMapDescriptor",
          "IsMyAngleInRange",
          "GetEntityCompassAngle",
          "SetPreviewBunker",
          "GetPreviewBunker",
          "OnModeAdded",
          "SetupEditorModeListener",
          "GetPlacingComponent",
          "OnPlacedPreview",
          "OnObjectDestroyed",
          "SetActiveConfig",
          "GetOnStructureBuilt",
          "OnPlayerKilled",
          "delete",
          "TrySpawnPlayer",
          "OnInputDeviceIsGamepad",
          "OnInputDeviceChangedDelayed",
          "GetPlayer",
          "FadeToBlack",
          "SetConfigEnvironmentOverride",
          "SetActiveConfig",
          "RemovePlayerMapMarkers",
          "RemoveHelicopterInvokers",
          "FlushWaypoints",
          "ResetPlayerPosition",
          "SetConfigEnvironmentOverride",
          "SetupVoiceSystem",
          "SetupStageCounts",
          "FiringRangeInit",
          "MobileHQInit",
          "SupplyTruckInit",
          "StageReset_RifleRespawn",
          "SpawnAsset",
          "SpawnAsset",
          "SpawnAsset",
          "StageReset_MoveInJeep",
          "SpawnAsset",
          "MoveInVehicle",
          "StageReset_SpawnTruck",
          "SpawnAsset",
          "SupplyTruckInit",
          "StageReset_ProcessTruck",
          "MoveInVehicle",
          "StageReset_ResetSeizing",
          "SpawnAsset",
          "SpawnAsset",
          "StageReset_DeployMHQ",
          "PrepareMedicalAmbulance",
          "PrepareAccidentArea",
          "ResetStage_Medical",
          "SetActiveConfig",
          "SetActiveConfig",
          "SpawnAsset",
          "ResetStage_VehiclesSimple",
          "ResetStage_VehiclesHeavy",
          "ResetStage_ShootingRange",
          "ResetStage_CampaignBuilding",
          "RefreshVictimResilience",
          "RefreshVictimBloodLevel",
          "GetVictimDamageManager",
          "ResetStage",
          "ResetPlayerPosition",
          "GetHummer",
          "GetRepairTruck",
          "SpawnAsset",
          "DeleteVehicleWhenEmpty",
          "CollectAllTargets",
          "GetTargetHits",
          "SetCheckLeaning",
          "SetPlayerStanceToCheck",
          "SetPlayerDeployedCheck",
          "SetPlayerDeployedBipodCheck",
          "GetPlayerStanceToCheck",
          "CountTargetHit",
          "SetWaypointTruckPosition",
          "OnPlayerRegistered",
          "ForcePlayerFaction",
          "ForcePlayerFaction",
          "TrySetPlayerFaction",
          "TrySetPlayerLoadout",
          "TrySpawnPlayer",
          "OnPlayerFactionResponse",
          "TrySetPlayerFaction",
          "OnPlayerLoadoutResponse",
          "TrySetPlayerLoadout",
          "OnPlayerSpawnResponse",
          "TrySpawnPlayer",
          "TrySetPlayerFaction",
          "TrySetPlayerLoadout",
          "TrySpawnPlayer",
          "OnMapOpen",
          "OnMapClose",
          "GetIsMapOpen",
          "GetPlayerRadio",
          "UpdateSupplyTruckWaypoint",
          "CheckRadioPickup",
          "CheckCharacterStance",
          "GetFirstRun",
          "SetFirstRun",
          "IsCharacterLeaning",
          "Check3rdPersonViewUsed",
          "GetWas3rdPersonViewUsed",
          "MoveInVehicle",
          "CheckCharacterInVehicle",
          "OnSupplyTruckLeft",
          "FinishStage",
          "ResetStage",
          "MovePlayer",
          "ResetPlayerCharacter",
          "DelayedPopup",
          "OnStructureBuilt",
          "OnPlayerSpawnFinalize_S",
          "FiringRangeInit",
          "MobileHQInit",
          "SetActiveConfig",
          "SetEventMask",
          "SetStage",
          "ResetStage",
          "CreateWaypoint",
          "FlushWaypoints",
          "SetWaypointMiscImage",
          "SetResumeStage",
          "GetStage",
          "GetStageDuration",
          "FinishStage",
          "SetPlayerStanceToCheck",
          "FlushWaypoints",
          "SetActiveConfig",
          "SetStage",
          "SetStage",
          "SetActiveConfig",
          "ResetPlayerPosition",
          "ToggleWaypoints",
          "UpdateWaypoints",
          "GetSupplyTruckComponent",
          "FindSupplyTruck",
          "SetupStageCounts",
          "OnPostInit",
          "EOnFrame",
          "ResetStage",
          "CleanUpWaypoints",
          "CleanUpWaypoints"
        ]
      },
      {
        "class_name": "SCR_HintTutorialList",
        "methods": [
          "GetHint"
        ]
      },
      {
        "class_name": "SCR_HintTutorial",
        "methods": [
          "GetEnum",
          "GetHint",
          "GetBaseString"
        ]
      },
      {
        "class_name": "SCR_BaseTourStage",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "RegisterWaypoint",
          "RegisterWaypoint",
          "RegisterWaypoint",
          "RegisterWaypoint",
          "RegisterWaypoint",
          "RegisterWaypoint",
          "RegisterWaypoint",
          "RegisterWaypoint",
          "RegisterWaypoint",
          "IsInRange",
          "ShowServiceHint",
          "CheckVicinity",
          "CancelHintOnVoiceOver",
          "PlaySoundSystem",
          "ShowServiceHint",
          "CancelHintOnVoiceOver",
          "PlaySoundSystem",
          "ShowServiceHint",
          "CancelHintOnVoiceOver",
          "PlaySoundSystem",
          "ShowServiceHint",
          "CancelHintOnVoiceOver",
          "PlaySoundSystem",
          "ShowServiceHint",
          "CancelHintOnVoiceOver",
          "PlaySoundSystem",
          "ShowServiceHint",
          "CancelHintOnVoiceOver",
          "PlaySoundSystem",
          "ShowServiceHint",
          "CancelHintOnVoiceOver",
          "PlaySoundSystem",
          "ShowServiceHint",
          "CancelHintOnVoiceOver",
          "PlaySoundSystem",
          "ShowServiceHint",
          "CancelHintOnVoiceOver",
          "PlaySoundSystem",
          "ShowServiceHint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage1",
        "methods": [
          "Setup",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage10",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage11",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "SetupSupplyConsumer",
          "SetupSupplyConsumer",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage12",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage13",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage14",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage15",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage16",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage17",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "SetupSupplyConsumer",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "SetupSupplyConsumer",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage18",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "CheckVicinity"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage2",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished",
          "IsBuildingModeOpen"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage3",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "OverrideGMHint",
          "GetIsFinished",
          "CheckGMHint",
          "OverrideGMHint",
          "OverrideGMHint"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage4",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage5",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage6",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage7",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage8",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BuildingTutorialStage9",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture1",
        "methods": [
          "Setup",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture10",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture11",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture15",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture16",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture17",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "OnVOIPPress",
          "PlayRadioMsg",
          "OnVOIPRelease",
          "PlayRadioMsg",
          "PlayRadioMsg"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture18",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture19",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture2",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture20",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture21",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture22",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture3",
        "methods": [
          "Setup",
          "GetIsFinished",
          "RegisterTasksShown"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture4",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture5",
        "methods": [
          "Setup",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture6",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture7",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture8",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialConflictCapture9",
        "methods": [
          "Setup"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced1",
        "methods": [
          "Setup",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced10",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced11",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced12",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced13",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced14",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced15",
        "methods": [
          "Setup",
          "RegisterWaypoint"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced16",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced17",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced18",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced19",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced2",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced20",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced21",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced22",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced23",
        "methods": [
          "Setup",
          "StopVehicleSmoke",
          "PlaySoundSystem",
          "StopVehicleSmoke"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced3",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced4",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced5",
        "methods": [
          "Setup",
          "RegisterWaypoint"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced6",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced7",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced8",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDrivingAdvanced9",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage100",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage101",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage102",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage103",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage104",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage105",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage106",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage95",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage97",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage98",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage99",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving1",
        "methods": [
          "Setup"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving10",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving11",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving12",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving13",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving14",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving15",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving16",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving17",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving18",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving19",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving2",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving20",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving21",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving22",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving23",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving24",
        "methods": [
          "Setup",
          "PlaySoundSystem"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving25",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving3",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving4",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving5",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving6",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving7",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving8",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandDriving9",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage107",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage108",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage109",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage110",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage111",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage112",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage113",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage114",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage115",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage116",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage117",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage118",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage119",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage120",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage121",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage122",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage123",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage124",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage125",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage126",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage127",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage94",
        "methods": [
          "Setup"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage96",
        "methods": [
          "Setup"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage1",
        "methods": [
          "Setup",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage10",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage11",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage12",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetOnEngineStop",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage13",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage14",
        "methods": [
          "Setup",
          "PlaySoundSystem"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage2",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage3",
        "methods": [
          "Setup",
          "HintOnVoiceOver",
          "OnEngineStart",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage4",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage5",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage6",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage7",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage8",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver"
        ]
      },
      {
        "class_name": "SCR_HeliCourse_stage9",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageHub",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "DelayedHint",
          "SetupHintConfig",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "CheckVicinity"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical1",
        "methods": [
          "Setup",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical10",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical11",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical12",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical13",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical14",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical15",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical16",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical17",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical18",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical19",
        "methods": [
          "Setup",
          "PlaySoundSystem"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical2",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical3",
        "methods": [
          "Setup",
          "RegisterWaypoint"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical4",
        "methods": [
          "Setup",
          "RegisterWaypoint"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical5",
        "methods": [
          "Setup",
          "RegisterWaypoint"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical6",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical7",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical8",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMedical9",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement1",
        "methods": [
          "Setup",
          "RegisterWaypoint"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement10",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement11",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement12",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement13",
        "methods": [
          "Setup",
          "RegisterWaypoint"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement14",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement15",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement16",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement2",
        "methods": [
          "Setup",
          "RegisterWaypoint"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement3",
        "methods": [
          "Setup",
          "RegisterWaypoint"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement4",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement5",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement6",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement7",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement8",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageMovement9",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation1",
        "methods": [
          "Setup",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation10",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation11",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation12",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation13",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation14",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation15",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation15a",
        "methods": [
          "Setup",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation16",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "UpdateHint",
          "MarkerPlaced",
          "UpdateHint",
          "PlaySoundSystem",
          "PlaySoundSystem",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation17",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "MarkerPlaced",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation18",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation19",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "TeleportFromVehicle",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation2",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation3",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation4",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation5",
        "methods": [
          "Setup",
          "OnMapClosed",
          "HighlightIcon",
          "HighlightIcon",
          "OnMapClosed",
          "OnMapOpened",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation6",
        "methods": [
          "Setup",
          "HighlightIcon",
          "PlaySoundSystem",
          "SkipTimer",
          "HighlightIcon",
          "OnMapClosed",
          "OnMapOpened",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation7",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_TutorialNavigation9",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage26",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage27",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage28",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStage29",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting1",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting10",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset",
          "OnItemAdded"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting11",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting12",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting13",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting14",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting15",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting16",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting17",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting18",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting19",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting2",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset",
          "OnItemAdded"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting3",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting4",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting5",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting6",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting7",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting8",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_CampaignTutorialArlandStageShooting9",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver",
          "GetIsFinished",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_TutorialBallistic1",
        "methods": [
          "Setup",
          "RegisterWaypoint",
          "PlaySoundSystem",
          "HintOnVoiceOver"
        ]
      },
      {
        "class_name": "SCR_TutorialBallistic2",
        "methods": [
          "Setup",
          "PlaySoundSystem",
          "GetIsFinished"
        ]
      },
      {
        "class_name": "SCR_BaseGameOverScreenInfo",
        "methods": [
          "GetInfoId",
          "GetGameOverContentLayout",
          "HasOptionalParams",
          "GetOptionalParams",
          "GetEditorOptionalParams",
          "GetTitle",
          "GetTitle",
          "GetSubtitle",
          "GetSubtitle",
          "GetImage",
          "GetImage",
          "GetIcon",
          "GetIcon",
          "GetVignetteColor",
          "GetVignetteColor",
          "GetDebriefing",
          "GetDebriefing",
          "GetOneShotAudio",
          "GetOneShotAudio",
          "GetTitleParam",
          "GetTitleParam",
          "GetSubtitleParam",
          "GetSubtitleParam",
          "GetDebriefingParam",
          "GetDebriefingParam",
          "GameOverUICustomization",
          "GameOverUICustomization"
        ]
      },
      {
        "class_name": "SCR_DeathMatchGameOverScreenInfo",
        "methods": [
          "GetSubtitleParam"
        ]
      },
      {
        "class_name": "SCR_EditorFactionGameOverScreenInfo",
        "methods": [
          "GetSubtitle",
          "GetSubtitleParam"
        ]
      },
      {
        "class_name": "SCR_FactionGameOverScreenInfo",
        "methods": [
          "GetImage",
          "GetIcon",
          "GetSubtitleParam"
        ]
      },
      {
        "class_name": "SCR_FactionVictoryGameOverScreenInfo",
        "methods": [
          "GetVignetteColor"
        ]
      },
      {
        "class_name": "SCR_GameOverScreenConfig",
        "methods": [
          "GetGameOverScreenInfo",
          "GetGameOverInfoArray",
          "GetGameOverInfo",
          "SCR_GameOverScreenConfig"
        ]
      },
      {
        "class_name": "SCR_GameOverScreenManagerComponent",
        "methods": [
          "GetGameOverConfig",
          "StartEndGameFade",
          "OnEndScreenFadeDone",
          "ShowGameOverScreen",
          "SetGameOverVarriables",
          "SetGameOverVarriables",
          "GetGameOverType",
          "GetCurrentGameOverType",
          "OpenGameOverScreen",
          "OnEditorEndGameApplyDelayDone",
          "SetEditorGameOverType",
          "SetEditorGameOverFactions",
          "OnGameModeEnd",
          "StartEndGameFade",
          "OnInitDelayedEndGame",
          "StartEndGameFade",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_GameOverScreenUIContentData",
        "methods": [
          "SCR_GameOverScreenUIContentData"
        ]
      },
      {
        "class_name": "AIActionBase",
        "methods": [
          "Evaluate",
          "GetPriority",
          "SetPriority",
          "GetActionIsSuspended",
          "SetActionIsSuspended",
          "GetIsUniqueInActionQueue",
          "SetIsUniqueInActionQueue",
          "GetActionState",
          "SetActionState",
          "Fail",
          "Complete",
          "GetRemoveAction",
          "SetRemoveAction",
          "GetRelatedGroupActivity",
          "SetRelatedGroupActivity",
          "CustomEvaluate",
          "EvaluatePriorityLevel",
          "OnSetSuspended",
          "OnSetActionState",
          "OnFail",
          "OnComplete",
          "OnMessage",
          "OnActionSelected",
          "OnActionDeselected",
          "OnActionRemoved"
        ]
      },
      {
        "class_name": "AIAnimal",
        "methods": [
          "GetSoundMapTag",
          "CallReactToDanger",
          "ManualActivation",
          "OnReactToDanger"
        ]
      },
      {
        "class_name": "AIBaseUtilityComponent",
        "methods": [
          "EvaluateActions",
          "AddAction",
          "RemoveObsoleteActions",
          "SetStateAllActionsOfType",
          "HasActionOfType",
          "FindActionOfType",
          "FindActionOfInheritedType",
          "FindActionsOfType",
          "FindActionsOfInheritedType",
          "SetStateOfRelatedAction",
          "CallActionsOnMessage",
          "GetActions",
          "GetCurrentAction",
          "SetCurrentAction",
          "GetExecutedAction",
          "SetExecutedAction",
          "GetOwner",
          "EOnInit",
          "OnPostInit",
          "EOnDeactivate",
          "EOnDiag",
          "EOnActivate"
        ]
      },
      {
        "class_name": "AICarMovementComponent",
        "methods": [
          "SetCruiseSpeed",
          "ResetCruiseSpeed",
          "GetLastNavlinkEntity"
        ]
      },
      {
        "class_name": "AIChimeraBehaviorTreeComponent",
        "methods": [
          "GetSimulateCounter"
        ]
      },
      {
        "class_name": "AIFlock",
        "methods": [
          "ActivateAllBirds",
          "CreateRandomBirdTarget",
          "CreateRandomBirdCenter",
          "OnTakeOff",
          "OnFlying",
          "OnLanding",
          "OnFinishedLanding"
        ]
      },
      {
        "class_name": "AIGroupMovementComponent",
        "methods": [
          "SetGroupCharactersWantedMovementType",
          "GetGroupCharactersMovementTypeWanted",
          "GetAgentMoveHandlerId",
          "CreateGroupMoveHandler",
          "GetMoveHandlerAgentCount",
          "MoveAgentToHandler",
          "SetMoveHandlerLeader",
          "RemoveGroupMoveHandler",
          "ClearGroupMoveHandlers",
          "SetFormationDefinition",
          "GetFormationDefinition",
          "SetFormationDisplacement",
          "GetFormationDisplacement",
          "GetHandlerLeaderAgent",
          "GetAgentsInHandler",
          "IsFormationDisplaced",
          "OnMoveHandlerAdded",
          "OnMoveHandlerRemoved"
        ]
      },
      {
        "class_name": "AimPoint",
        "methods": [
          "GetType"
        ]
      },
      {
        "class_name": "AIWeaponTargetSelector",
        "methods": [
          "Init",
          "SetSelectionProperties",
          "SetTargetScoreConstants",
          "SelectWeaponAndTarget",
          "GetSelectedTarget",
          "GetSelectedWeapon",
          "GetUnitTypesCanAttack",
          "GetSelectedWeaponProperties",
          "GetMostRelevantTargetCantAttack",
          "SelectWeaponAgainstUnitType",
          "SelectWeaponAgainstUnitTypeAndDistance",
          "CalculateTargetScore",
          "HasWeaponOfType",
          "FindWeaponOfType",
          "GetMagazineCount",
          "FindMagazineWithTraits",
          "FindWeaponAndMuzzleForMagazineWell"
        ]
      },
      {
        "class_name": "AICharacterMovementComponent",
        "methods": [
          "SetMovementTypeWanted",
          "GetMovementTypeWanted",
          "GetMovementTypeOverride"
        ]
      },
      {
        "class_name": "ChimeraCoverManagerComponent",
        "methods": [
          "GetBestCover",
          "SetOccupiedCover"
        ]
      },
      {
        "class_name": "InsectFlyMovementComponent",
        "methods": [
          "SetOriginPosition",
          "GetOriginPosition"
        ]
      },
      {
        "class_name": "MineManagerComponent",
        "methods": [
          "Register",
          "Remove",
          "AddFactionAwareness"
        ]
      },
      {
        "class_name": "AISmartActionComponent",
        "methods": [
          "AISmartActionComponent",
          "GetUser",
          "IsActionAccessible",
          "SetActionAccessible",
          "GetTags",
          "SetActionOffset",
          "GetActionOffset",
          "EOnInit",
          "OnActionBegin",
          "OnActionEnd",
          "OnActionFailed"
        ]
      },
      {
        "class_name": "AnimalControllerComponent",
        "methods": [
          "Die",
          "IsDead"
        ]
      },
      {
        "class_name": "BirdAnimationComponent",
        "methods": [
          "TakeOff",
          "Land",
          "Flap",
          "Glide"
        ]
      },
      {
        "class_name": "BaseAnimPhysComponent",
        "methods": [
          "SetCurrentCommand",
          "GetCommandScripted",
          "BindCommand",
          "BindVariableFloat",
          "BindVariableInt",
          "BindVariableBool",
          "BindTag",
          "BindEvent",
          "BindPrediction",
          "SetVariableFloat",
          "SetVariableInt",
          "SetVariableBool",
          "CallCommand",
          "CallCommand4I",
          "PhysicsIsFalling",
          "PhysicsEnableGravity"
        ]
      },
      {
        "class_name": "BaseCommandHandlerComponent",
        "methods": [
          "SetSimulationDisabled",
          "OnInit",
          "OnCommandActivate",
          "OnCommandDeactivate",
          "Update"
        ]
      },
      {
        "class_name": "BaseStaminaComponent",
        "methods": [
          "GetOwner",
          "GetStamina"
        ]
      },
      {
        "class_name": "HidingCloth",
        "methods": [
          "HidingCloth"
        ]
      },
      {
        "class_name": "ScriptedCommand",
        "methods": [
          "ScriptedCommand"
        ]
      },
      {
        "class_name": "BaseCompartmentDoor",
        "methods": [
          "GetAnimDoorIndex"
        ]
      },
      {
        "class_name": "BaseLightSlot",
        "methods": [
          "ShouldTick",
          "GetLightSide",
          "GetSurfaceID",
          "GetParentSurfaceName",
          "IsPresence",
          "IsLightFunctional",
          "GetOwner",
          "GetLightEntity",
          "GetLightType",
          "GetLightID",
          "SetLightFunctional",
          "OnInit",
          "OnLightStateChanged"
        ]
      },
      {
        "class_name": "BaseZeroingGenerator",
        "methods": [
          "GetOwnerEntity",
          "GetSights",
          "GetWeaponAnimationComponent",
          "SetPointInfoGeneration",
          "SetProjectileResource"
        ]
      },
      {
        "class_name": "BaseBuilding",
        "methods": [
          "OnDamage"
        ]
      },
      {
        "class_name": "BuildingClass",
        "methods": [
          "IsBuilding"
        ]
      },
      {
        "class_name": "BaseSlotComponent",
        "methods": [
          "GetSlotInfo",
          "GetAttachedEntity",
          "OnAttachedEntity",
          "OnDetachedEntity"
        ]
      },
      {
        "class_name": "ClimbingDataComponent",
        "methods": [
          "CanClimbOver"
        ]
      },
      {
        "class_name": "LadderComponent",
        "methods": [
          "IsAbove",
          "SetEnabledEntry"
        ]
      },
      {
        "class_name": "BaseScriptedCameraItem",
        "methods": [
          "OnActivate",
          "OnDeactivate",
          "OnBlendIn",
          "OnBlendOut",
          "OnUpdate",
          "SetBaseAngles"
        ]
      },
      {
        "class_name": "BaseScriptedCameraSet",
        "methods": [
          "RegisterCameraCreator",
          "Init",
          "OnCameraChange"
        ]
      },
      {
        "class_name": "CameraBase",
        "methods": [
          "ApplyTransform",
          "GetWorldCameraTransform",
          "GetCursorTarget",
          "GetCursorTargetWithPosition",
          "GetProjType",
          "GetVerticalFOV",
          "GetNearPlane",
          "GetFarPlane",
          "SetFOVDegree",
          "SetVerticalFOV",
          "SetNearPlane",
          "SetFarPlane",
          "SetCameraIndex",
          "GetCameraIndex",
          "SetLensFlareSet",
          "IsAABBVisible",
          "IsSphereVisible",
          "CameraActivate",
          "CameraDeactivate"
        ]
      },
      {
        "class_name": "CameraHandlerComponent",
        "methods": [
          "GetCameraSet",
          "IsInThirdPerson",
          "SetThirdPerson",
          "GetFocusMode",
          "SetFocusMode",
          "GetBlendAlpha",
          "GetCurrentCamera",
          "IsCameraBlending",
          "SetLensFlareSet",
          "CalculateFovScalar",
          "Init",
          "OnCameraActivate",
          "OnCameraDeactivate",
          "CameraSelector",
          "OnBeforeCameraUpdate",
          "OnAfterCameraUpdate",
          "CollisionSolver",
          "OnThirdPersonSwitch",
          "GetCameraTransitionTime",
          "GetOverlayCameraFOVScalarWeight"
        ]
      },
      {
        "class_name": "CameraManager",
        "methods": [
          "CurrentCamera",
          "SetCamera",
          "SetNextCamera",
          "SetPreviousCamera",
          "GetCamerasList",
          "SetOverlayCamera",
          "GetOverlayCamera",
          "SetFirstPersonFOV",
          "GetFirstPersonFOV",
          "SetThirdPersonFOV",
          "GetThirdPersonFOV",
          "SetVehicleFOV",
          "GetVehicleFOV",
          "GetClampedFOV",
          "GetMinFOV",
          "GetMaxFOV",
          "OnInit"
        ]
      },
      {
        "class_name": "PlayerCamera",
        "methods": [
          "GetFocusMode",
          "GetFocusFOV",
          "GetFocusFOVScale"
        ]
      },
      {
        "class_name": "CharacterAnimationComponent",
        "methods": [
          "SetAnimationLayerTPP",
          "SetAnimationLayerFPP",
          "SetIKTarget",
          "SetIKTargetPlane",
          "GetCollisionMinMax",
          "GetMovementState",
          "GetHeadingComponent",
          "GetKinematicBuoyancyComponent",
          "IsWeaponADSTag",
          "IsPrimaryTag",
          "IsSecondaryTag",
          "GetMaxSpeed",
          "GetTopSpeed",
          "GetInertiaSpeed",
          "SetSharedVariableFloat",
          "SetSharedVariableInt",
          "SetSharedVariableBool",
          "GetCommandHandler",
          "IsRagdollActive",
          "AddRagdollEffectorDamage"
        ]
      },
      {
        "class_name": "CharacterCommandClimb",
        "methods": [
          "GetState",
          "GetGrabPointWS",
          "GetClimbOverStandPointWS",
          "DoClimbTest"
        ]
      },
      {
        "class_name": "CharacterCommandDeath",
        "methods": [
          "StartDeath"
        ]
      },
      {
        "class_name": "CharacterCommandFall",
        "methods": [
          "Land",
          "IsLanding",
          "PhysicsLanded"
        ]
      },
      {
        "class_name": "CharacterCommandHandlerComponent",
        "methods": [
          "GetCharacter",
          "GetControllerComponent",
          "GetMovementState",
          "AlignNewTurns",
          "IsVehicleSwitchingSeats",
          "IsWeaponADSAllowed",
          "IsSprintingAllowed",
          "IsItemInspectionAllowed",
          "IsWeaponInspectionAllowed",
          "IsWeaponDeploymentAllowed",
          "IsThrowingAction",
          "IsProneStanceTransition",
          "IsUsingItem",
          "IsItemActionLoopTag",
          "CancelItemUse",
          "FinishItemUse",
          "WasMovement",
          "WasRotation",
          "StartCommand_Fall",
          "StartCommand_Ladder",
          "StartCommand_Vehicle",
          "StartCommand_Move",
          "StartCommand_Climb",
          "StartCommand_Swim",
          "StartCommand_DamageFullBody",
          "StartCommand_Slide",
          "AddCommandModifier_Damage",
          "DeleteCommandModifier_Damage",
          "GetCommandMove",
          "GetCommandFall",
          "GetCommandClimb",
          "GetCommandVehicle",
          "GetCommandLadder",
          "GetCommandModifier_Death",
          "GetCommandModifier_Unconscious",
          "GetCommandModifier_Melee",
          "GetCommandSwim",
          "GetCommandSlide",
          "GetCommandDamageFullBody",
          "GetCommandModifier_Damage",
          "GetCommandModifier_Weapon",
          "GetCommandModifier_ItemChange",
          "GetCommandModifier_ItemUse",
          "GetCommandModifier_Gadget",
          "GetDefaultCommandMoveSettings",
          "GetCurrentCommandMoveSettings",
          "SetCurrentCommandMoveSettings",
          "GetDefaultCommandClimbSettings",
          "GetCurrentCommandClimbSettings",
          "SetCurrentCommandClimbSettings",
          "GetDefaultCommandSwimSettings",
          "GetCurrentCommandSwimSettings",
          "SetCurrentCommandSwimSettings",
          "GetTargetLadder",
          "FindTargetLadder",
          "IsMovingInProne",
          "HandleFinishedCommandsDefault",
          "HandleDeathDefault",
          "HandleUnconsciousDefault",
          "HandleVehicleDefault",
          "HandleSwimmingDefault",
          "HandleLaddersDefault",
          "HandleClimbingDefault",
          "HandleMeleeDefault",
          "HandleFallingDefault",
          "HandleDamageHitDefault",
          "HandleSlideDefault",
          "HandleWeaponsDefault",
          "HandleThrowingDefault",
          "HandleItemChangeDefault",
          "HandleItemUseDefault",
          "HandleItemGestureDefault",
          "HandleWeaponObstructionDefault",
          "HandleWeaponReloadingDefault",
          "HandleWeaponADSDefault",
          "HandleWeaponDeploymentDefault",
          "HandleWeaponFireDefault",
          "HandleLeftHandGadgetDefault",
          "HandleDynamicStanceDefault",
          "TransitionMove_JumpClimbDefault",
          "TransitionMove_SwimmingDefault",
          "TransitionMove_LadderDefault",
          "DropLiveGrenadeFromHand",
          "CancelThrowDefault",
          "HandleFinishedCommands",
          "HandleDeath",
          "HandleUnconscious",
          "HandleVehicle",
          "HandleSwimming",
          "HandleLadders",
          "HandleClimbing",
          "HandleMelee",
          "HandleFalling",
          "HandleDamageHit",
          "HandleSlide",
          "HandleWeapons",
          "HandleThrowing",
          "HandleItemChange",
          "HandleItemUse",
          "HandleItemGesture",
          "HandleWeaponReloading",
          "HandleWeaponADS",
          "HandleWeaponDeployment",
          "HandleWeaponFire",
          "HandleWeaponObstruction",
          "HandleLeftHandGadget",
          "HandleDynamicStance",
          "TransitionMove_JumpClimb",
          "TransitionMove_Swimming",
          "TransitionMove_Ladder",
          "SubhandlerStatesBegin",
          "SubhandlerStatesEnd",
          "SubhandlerTransitionsMove",
          "SelectMeleeAnimationType"
        ]
      },
      {
        "class_name": "CharacterCommandItemChange",
        "methods": [
          "IsChangingItemTag"
        ]
      },
      {
        "class_name": "CharacterCommandLadder",
        "methods": [
          "CanExit",
          "Exit",
          "CanExitLR",
          "DetectLadder"
        ]
      },
      {
        "class_name": "CharacterCommandMelee",
        "methods": [
          "Attack",
          "Terminate",
          "IsMeleeAttackTag"
        ]
      },
      {
        "class_name": "CharacterCommandMove",
        "methods": [
          "GetAdjustedStanceAmount",
          "GetCurrentInputAngle",
          "GetCurrentMovementAngle",
          "GetCurrentMovementSpeed",
          "GetMovementSlopeAngle",
          "GetLateralSlopeAngle",
          "IsRolling",
          "IsBlendingOutRoll"
        ]
      },
      {
        "class_name": "CharacterCommandScripted",
        "methods": [
          "ShouldForceFreeLook",
          "IsRootMotionControlled",
          "UpdateTransformNoRootMotion",
          "TerminateCommand",
          "OnPossess"
        ]
      },
      {
        "class_name": "CharacterCommandSwim",
        "methods": [
          "StopSwimming"
        ]
      },
      {
        "class_name": "CharacterCommandUnconscious",
        "methods": [
          "StartCommandUnconscious"
        ]
      },
      {
        "class_name": "CharacterCommandVehicle",
        "methods": [
          "GetTurretStandingAngle"
        ]
      },
      {
        "class_name": "CharacterCommandWeapon",
        "methods": [
          "GetAimAngleLR",
          "GetAimAngleUD"
        ]
      },
      {
        "class_name": "CharacterHeadAimingComponent",
        "methods": [
          "GetCharacterAimingComponent",
          "SetLimitAnglesOverride",
          "ResetLimitAnglesOverride",
          "SetPitchLimitReductionMultiplier",
          "GetLookAngles",
          "GetLookTransformationMS",
          "GetLookTransformationLS"
        ]
      },
      {
        "class_name": "CharacterHeadingAnimComponent",
        "methods": [
          "AlignPosDirWS",
          "AlignPosRotWS",
          "AlignRotWS",
          "ResetAligning",
          "SetFiltering",
          "IsAligning"
        ]
      },
      {
        "class_name": "CharacterIdentityComponent",
        "methods": [
          "GetHeadEntity",
          "SetHeadAlpha",
          "SetVisibleAll",
          "IsVisibleAll",
          "SetWoundState",
          "IsCovered",
          "CommitChanges",
          "GetIdentity",
          "CheckIdentityIDs",
          "SetIdentityFromIDs",
          "SetIdentity",
          "OnBodyPartStateChanged"
        ]
      },
      {
        "class_name": "CharacterInputContext",
        "methods": [
          "GetMovement",
          "SetMovement",
          "GetStanceChange",
          "GetRollCommand",
          "SetRoll",
          "GetLean",
          "SetLean",
          "IsMoving",
          "IsSprinting",
          "IsAdjustedStanceEnabled",
          "ToggleAdjustedStance",
          "SetAimChange",
          "GetAimChange",
          "GetHeadingAngle",
          "SetHeadingAngle",
          "SetAimingAngles",
          "GetAimingAngles",
          "SetLookAtAngles",
          "GetLookAtAngles",
          "SetWeaponIKTranslation",
          "GetWeaponIKTranslation",
          "CameraIsFreeLook",
          "SetFreelook",
          "SetTransferFreeaimAfterFreelookRequest",
          "ShouldTransferFreeaimAfterFreelook",
          "WeaponIsRaisedOrADS",
          "WeaponIsRaised",
          "SetRaiseWeapon",
          "SetWeaponPullTrigger",
          "WeaponIsPullingTrigger",
          "WeaponIsStartReloading",
          "GetWeaponReloadType",
          "SetReloadWeapon",
          "SetWeaponADS",
          "IsWeaponADS",
          "IsWeaponObstructionEnabled",
          "ToggleWeaponObstruction",
          "SetJump",
          "GetJump",
          "SetThrow",
          "GetThrow",
          "CancelThrow",
          "IsThrowCanceled",
          "SetDie",
          "GetDie",
          "SetMeleeAttack",
          "GetMeleeAttack",
          "SetHit",
          "GetHitReaction",
          "GetHitDirection",
          "SetVehicleDoorInfoIndex",
          "GetVehicleDoorInfoIndex",
          "SetVehicleTeleportTarget",
          "SetVehicleSteering",
          "GetVehicleSteering",
          "SetVehicleThrottle",
          "GetVehicleThrottle",
          "SetVehicleClutch",
          "GetVehicleClutch",
          "SetVehicleBrake",
          "GetVehicleBrake",
          "SetVehicleCollective",
          "GetVehicleCollective",
          "SetVehicleCyclicForward",
          "GetVehicleCyclicForward",
          "SetVehicleCyclicAside",
          "GetVehicleCyclicAside",
          "SetVehicleAntiTorque",
          "GetVehicleAntiTorque",
          "SetVehicleGearSwitch",
          "GetVehicleGearSwitch",
          "SetVehicleEngineStartStop",
          "GetVehicleEngineStartStop",
          "SetVehicleLights",
          "GetVehicleLights",
          "SetVehicleHorn",
          "GetVehicleHorn",
          "SetVehicleHandBrake",
          "GetVehicleHandBrake",
          "IsPlayingGesture",
          "SetPlayingGesture",
          "GetGestureID",
          "SetGestureID",
          "IsUnconscious",
          "GetLeftHandGadgetEntity",
          "GetWantedLefHandGadgetEntity",
          "SetCancelItemAction",
          "GetWaterBodyApproxDepth",
          "GetWaterCharacterSubmersion",
          "GetWaterNoseSubmersion",
          "GetWaterBodySurfaceY"
        ]
      },
      {
        "class_name": "SCR_CharacterStaminaComp",
        "methods": [
          "OnStaminaDrain",
          "GetBreathProgress",
          "GetBreathFrequency",
          "GetBreathMagnitude",
          "AddStamina",
          "OnStaminaDrain"
        ]
      },
      {
        "class_name": "ChimeraCharacter",
        "methods": [
          "GetInfoDisplay",
          "GetAnimationComponent",
          "GetCompartmentAccessComponent",
          "GetCharacterController",
          "GetDamageManager",
          "GetWeaponManager",
          "IsInVehicle",
          "IsInVehicleADS",
          "AimingPosition",
          "EyePosition",
          "EyePositionModel",
          "GetHeadAimingComponent",
          "GetWeaponAimingComponent",
          "DoStartObjectAction",
          "DoPerformObjectAction",
          "DoPerformContinuousObjectAction",
          "DoCancelObjectAction"
        ]
      },
      {
        "class_name": "DebugShootComponent",
        "methods": [
          "Fire"
        ]
      },
      {
        "class_name": "ItemUseParameters",
        "methods": [
          "GetEntity",
          "SetEntity",
          "ShouldAllowMovementDuringAction",
          "SetAllowMovementDuringAction",
          "ShouldKeepInHandAfterSuccess",
          "SetKeepInHandAfterSuccess",
          "ShouldKeepGadgetVisible",
          "SetKeepGadgetVisible",
          "IsMainUserOfTheItem",
          "SetIsMainUserOfTheItem",
          "GetCommandID",
          "SetCommandID",
          "GetCommandIntArg",
          "SetCommandIntArg",
          "GetCommandFloatArg",
          "SetCommandFloatArg",
          "GetMaxAnimLength",
          "SetMaxAnimLength",
          "GetIntParam",
          "SetIntParam",
          "GetAlignmentPoint",
          "SetAlignmentPoint",
          "GetItemGraphEntryPoint",
          "SetItemGraphEntryPoint",
          "GetCharGraphBindingName",
          "SetCharGraphBindingName",
          "Reset"
        ]
      },
      {
        "class_name": "BaseChatChannel",
        "methods": [
          "GetName",
          "GetStyle",
          "OnInit",
          "IsDelivering",
          "IsAvailable",
          "ProcessMessage"
        ]
      },
      {
        "class_name": "ChimeraGame",
        "methods": [
          "IsExperimentalBuild",
          "GetClock",
          "GetSignalsManager",
          "GetPlayerController",
          "GetPlayerManager",
          "GetPerceptionManager",
          "GetFactionManager",
          "GetChat",
          "GetCameraManager",
          "GetGameMode",
          "GetMapManager",
          "SetViewDistance",
          "GetViewDistance",
          "GetMaximumViewDistance",
          "GetMinimumViewDistance",
          "SetGrassDistance",
          "GetGrassDistance",
          "GetMaximumGrassDistance",
          "GetMinimumGrassDistance",
          "GetViewDistanceServerLimit",
          "IsVONUIDisabledByServer",
          "IsVONDirectSpeechUIDisabledByServer",
          "GetVONCanTransmitCrossFaction",
          "GetMissionHeader",
          "GetAIWorld",
          "GetStatsApi",
          "LogFPS",
          "CanSpawnEntityPrefab",
          "SpawnEntityPrefabLocal",
          "OnCinematicStart",
          "OnCinematicEnd",
          "OnCinematicBlending",
          "OnMissionSet",
          "OnKickedFromGame",
          "ShowErrorMessage",
          "GetPlayerDataStats",
          "GetMissionName"
        ]
      },
      {
        "class_name": "ChimeraWorldUtils",
        "methods": [
          "ChimeraWorldUtils",
          "TryGetWaterSurface",
          "TryGetWaterSurfaceSimple"
        ]
      },
      {
        "class_name": "CompartmentDoorInfo",
        "methods": [
          "UseTeleportForGetIn",
          "UseTeleportForGetOut",
          "GetEntryPointInfo",
          "GetExitPointInfo",
          "HasExitPointInfoDefined",
          "GetStanceChangeOnExit"
        ]
      },
      {
        "class_name": "CompartmentDoorReference",
        "methods": [
          "GetReferencedDoorCompartmentManager"
        ]
      },
      {
        "class_name": "ActionsPerformerComponent",
        "methods": [
          "StartAction",
          "PerformAction",
          "PerformContinuousAction",
          "CancelAction"
        ]
      },
      {
        "class_name": "AIAnimalManagerComponent",
        "methods": [
          "GetClosestDormantAgent"
        ]
      },
      {
        "class_name": "AimingComponent",
        "methods": [
          "GetInitAiming",
          "SetAimingRotationWanted",
          "SetAimingRotation",
          "GetAimingRotationWanted",
          "GetAimingRotation",
          "GetAimingDirection",
          "GetAimingDirectionWorld",
          "GetAimingRotationModification",
          "GetModifiedAimingTranslation",
          "GetCurrentRecoilTranslation",
          "GetAimingLimits",
          "GetRawAimingTranslation",
          "GetRawAimingRotation"
        ]
      },
      {
        "class_name": "AmbientSoundsComponent",
        "methods": [
          "QueryAmbientSoundsBySphere",
          "GetAmbientSoundsCountPerType",
          "GetCameraOrigin",
          "GetRiver",
          "GetRandomTree",
          "GetClosestEntities",
          "TracePointToTerrain"
        ]
      },
      {
        "class_name": "BaseAimingComponent",
        "methods": [
          "GetOwner"
        ]
      },
      {
        "class_name": "BaseChatComponent",
        "methods": [
          "GetOwner",
          "SetChannel",
          "GetChannelState",
          "SendMessage",
          "SendPrivateMessage",
          "OnNewMessage",
          "OnNewPrivateMessage",
          "ShowMessage"
        ]
      },
      {
        "class_name": "BaseControllerComponent",
        "methods": [
          "GetOwner",
          "CanMove",
          "SetCanMove",
          "ValidateCanMove"
        ]
      },
      {
        "class_name": "BaseItemAnimationComponent",
        "methods": [
          "GetOwner",
          "SyncWithCharacter",
          "RemoveSyncReference",
          "IsAnimationTag",
          "IsAnimationEvent",
          "OnAnimationEvent",
          "OnPrepareAnimInput",
          "OnProcessAnimOutput",
          "OnCharacterFloatVariablet",
          "OnCharacterIntVariable",
          "OnCharacterBoolVariable",
          "OnCharacterCommand"
        ]
      },
      {
        "class_name": "BaseLightManagerComponent",
        "methods": [
          "GetLightsEnabled",
          "SetLightsState",
          "GetLightsState",
          "FindLight",
          "GetLights",
          "TrySetSurfaceFunctional",
          "GetEmissiveSurfaces",
          "OnInit",
          "OnFrame"
        ]
      },
      {
        "class_name": "BaseRadioComponent",
        "methods": [
          "GetOwner",
          "TransceiversCount",
          "GetTransceiver",
          "SetEncryptionKey",
          "GetEncryptionKey",
          "SetPower",
          "IsPowered"
        ]
      },
      {
        "class_name": "BaseVehicleControllerComponent",
        "methods": [
          "Shutdown",
          "CanSwitchSeat",
          "GetDrivingAssistanceMode",
          "SetDrivingAssistanceMode",
          "GetBaseSimulation",
          "GetFuelManager",
          "GetLightManager",
          "GetPilotCompartmentSlot",
          "SetPilotCompartmentSlot",
          "GetSignalsManager",
          "GetWeaponManager",
          "CancelStart",
          "TryStartEngine",
          "StartEngine",
          "ForceStartEngine",
          "ForceStopEngine",
          "StopEngine",
          "IsEngineOn",
          "GetEngineStartupChance",
          "SetEngineStartupChance",
          "GetEngineDrowned",
          "SetEngineDrowned",
          "ArePilotControlsLocked",
          "LockPilotControls",
          "OnEngineStartBegin",
          "OnEngineStartProgress",
          "OnEngineStartInterrupt",
          "OnEngineStartSuccess",
          "OnEngineStartFail",
          "OnBeforeEngineStart",
          "OnEngineStart",
          "OnEngineStop",
          "OnPostInit",
          "OnDelete"
        ]
      },
      {
        "class_name": "CharacterControllerComponent",
        "methods": [
          "GetAimingComponent",
          "GetHeadAimingComponent",
          "GetAnimationComponent",
          "GetWeaponManagerComponent",
          "GetCameraHandlerComponent",
          "GetInventoryStorageManager",
          "GetVONComponent",
          "GetAIControlComponent",
          "GetRightHandPointInfo",
          "GetLeftHandPointInfo",
          "GetInputContext",
          "GetMovementSpeed",
          "SetMovement",
          "SetHeadingAngle",
          "GetStance",
          "GetCharacter",
          "SetFireWeaponWanted",
          "SetThrow",
          "SetMovementDirWorld",
          "GetMovementDirWorld",
          "SetWeaponRaised",
          "SetWeaponADS",
          "SetFreeLook",
          "GetFreeLookInput",
          "GetFreeLookMouse",
          "GetFreeLookController",
          "SetForcedFreeLook",
          "IsFreeLookForced",
          "ResetPersistentStates",
          "SetDynamicSpeed",
          "GetDynamicSpeed",
          "SetShouldApplyDynamicSpeedOverride",
          "SetDynamicStance",
          "CanSetDynamicStance",
          "GetDynamicStance",
          "SetInspect",
          "CanInspect",
          "GetInspect",
          "GetInspectCurrentWeapon",
          "GetInspectEntity",
          "SetInspectState",
          "GetInspectState",
          "GetIsWeaponDeployed",
          "CanDeployWeapon",
          "GetIsWeaponDeployedBipod",
          "GetCurrentItemInHands",
          "SetStanceChange",
          "CanChangeStance",
          "ForceStance",
          "ForceStanceUp",
          "SetRoll",
          "IsRoll",
          "CanRoll",
          "ShouldHoldInputForRoll",
          "EnableHoldInputForRoll",
          "IsPlayerControlled",
          "SetJump",
          "SetWantedLeaning",
          "SetBanking",
          "SetMeleeAttack",
          "GetLeaning",
          "GetWantedLeaning",
          "IsAdjustingLeaning",
          "GetCurrentLeanAmount",
          "IsLeaning",
          "GetADSTime",
          "IsWeaponRaised",
          "GetWeaponObstructedState",
          "GetObstructionAlpha",
          "IsClimbing",
          "IsSwimming",
          "IsSprinting",
          "IsChangingStance",
          "IsWeaponADS",
          "IsChangingFireMode",
          "IsPlayingGesture",
          "IsFreeLookEnabled",
          "IsTrackIREnabled",
          "IsFocusMode",
          "GetWeaponADSInput",
          "IsChangingItem",
          "IsFalling",
          "IsReloading",
          "CanFire",
          "IsDead",
          "IsUsingItem",
          "IsMeleeAttack",
          "CanEngageChangeItem",
          "SelectWeapon",
          "SetMuzzle",
          "SetFireMode",
          "SetSightsRange",
          "SetWeaponADSInput",
          "SetSafety",
          "GetStamina",
          "ReloadWeapon",
          "ReloadWeaponWith",
          "GetLifeState",
          "SetUnconscious",
          "IsUnconscious",
          "CanReviveCharacter",
          "CanEnterUnconsciousness",
          "EnableReviveCharacter",
          "Ragdoll",
          "ForceDeath",
          "TakeGadgetInLeftHand",
          "CanEquipGadget",
          "GetAttachedGadgetAtLeftHandSlot",
          "TryUseBandage",
          "RemoveGadgetFromHand",
          "RecoverHiddenGadget",
          "IsGadgetInHands",
          "SetGadgetRaisedModeWanted",
          "IsGadgetRaisedModeWanted",
          "TryEquipRightHandItem",
          "TryRecoverLastRightHandItem",
          "GetRightHandItem",
          "TryUseItem",
          "TryUseItemOverrideParams",
          "CanUseItem",
          "TryStartCharacterGesture",
          "StopCharacterGesture",
          "TryPlayItemGesture",
          "IsPlayingItemGesture",
          "CanPlayItemGesture",
          "CanUseLadder",
          "TryUseLadder",
          "DropWeapon",
          "DropItemFromLeftHand",
          "StopDeployment",
          "RequestActionByID",
          "IsPartiallyLowered",
          "CanPartialLower",
          "SetPartialLower",
          "GetCameraWeaponOffset",
          "GetDisableMovementControls",
          "SetDisableMovementControls",
          "GetDisableViewControls",
          "SetDisableViewControls",
          "SetAimingSensitivity",
          "GetAimingSensitivity",
          "SetStickyGadget",
          "SetStickyADS",
          "SetMaxZoomInADS",
          "GetMaxZoomInADS",
          "SetMouseControlAircraft",
          "GetMouseControlAircraft",
          "GetDisableWeaponControls",
          "SetDisableWeaponControls",
          "GetMovementVelocity",
          "GetMovementInput",
          "GetVelocity",
          "GetIsSprintingToggle",
          "GetLastStanceChangeDelay",
          "GetCurrentMovementPhase",
          "GetCanFireWeapon",
          "GetCanThrow",
          "SetWeaponNoFireTime",
          "IsInThirdPersonView",
          "SetInThirdPersonView",
          "GetStanceChangeDelayTime",
          "GetJumpSpeed",
          "GetMeleeAttackInput",
          "IsFreeLookEnforced",
          "GetPositionInView",
          "GetWeaponModifiers",
          "GetStaminaComponent",
          "IsCharacterStationary",
          "OnInspectionModeChanged",
          "UpdateDrowning",
          "ComputeHitReaction",
          "OnInit",
          "OnDiag",
          "OnReloaded",
          "OnPrepareControls",
          "OnApplyControls",
          "OnMeleeDamage",
          "GetCanMeleeAttack",
          "GetCanEquipGadget",
          "OnPerformAction",
          "CanGetOutVehicleScript",
          "CanJumpOutVehicleScript",
          "OnLifeStateChanged",
          "OnConsciousnessChanged",
          "OnDeath",
          "OnGadgetStateChanged",
          "OnGadgetFocusStateChanged",
          "OnItemUseBegan",
          "OnItemUseEnded",
          "OnAnimationEvent",
          "GetInspectTargetLookAt",
          "ShouldAligningAdjustAimingAngles",
          "ShouldGadgetBeDropped",
          "OnWeaponDropped",
          "OnItemDroppedFromLeftHand",
          "SCR_GetDisableMovementControls",
          "SCR_OnDisabledJumpAction",
          "SCR_GetDisableViewControls",
          "OnControlledByPlayer"
        ]
      },
      {
        "class_name": "CommunicationSoundComponent",
        "methods": [
          "GetMetadata",
          "SoundEventPriority",
          "OnSoundEventFinished",
          "OnSoundEventStarted",
          "HandleMetadata"
        ]
      },
      {
        "class_name": "CompartmentAccessComponent",
        "methods": [
          "GetVehicleCompartmentManagerOwner",
          "GetCompartment",
          "FindFreeCompartment",
          "FindCompartmentReservedBy",
          "IsInCompartment",
          "IsInCompartmentADS",
          "IsTargetVehicleAccessible",
          "GetInVehicle",
          "GetOutVehicle",
          "GetOutVehicle_NoDoor",
          "KickFromVehicle",
          "OpenDoor",
          "AreDoorsFromDifferentVehicle",
          "CloseDoor",
          "InterruptVehicleActionQueue",
          "CanGetInVehicle",
          "GetOwner",
          "CanGetInVehicleViaDoor",
          "CanAccessDoor",
          "IsGettingIn",
          "IsGettingOut",
          "CanGetOutVehicle",
          "CanGetOutVehicleViaDoor",
          "IsSwitchingSeatsAnim",
          "FindSuitableTeleportLocation",
          "CanJumpOutVehicle",
          "IsVehicleFlipped",
          "CompareSeatOutVectorAndGravity",
          "GetVehicleIn",
          "SetActivePilotCompartment",
          "OnCompartmentEntered",
          "OnCompartmentLeft"
        ]
      },
      {
        "class_name": "DamageManagerComponent",
        "methods": [
          "ComputeStruckHitZones",
          "EnableDamageHandling",
          "IsDamageHandlingEnabled",
          "GetMovementDamage",
          "GetAimingDamage",
          "SetMovementDamage",
          "SetAimingDamage",
          "GetHealthScaled",
          "SetHealthScaled",
          "GetHealth",
          "GetMaxHealth",
          "GetState",
          "IsDestroyed",
          "SetInstigatorEntity",
          "SetInstigator",
          "GetInstigator",
          "GetAttachedColliderIDs",
          "HandleDamage",
          "IsDamagedOverTime",
          "GetDamageOverTime",
          "RemoveDamageOverTime",
          "ShouldOverrideInstigator",
          "OverrideHitMaterial",
          "OnDamageOverTimeAdded",
          "OnDamageOverTimeRemoved",
          "OnDamageStateChanged",
          "OnPostInit",
          "OnInit",
          "OnDelete",
          "OnFrame",
          "FilterContact",
          "OnFilteredContact",
          "OnDiag",
          "OnDamage",
          "HijackDamageHandling",
          "ShouldCountAsHit"
        ]
      },
      {
        "class_name": "DoorComponent",
        "methods": [
          "GetDoorPivotPointWS",
          "GetAngleRange",
          "CanCharacterPass",
          "IsOpen",
          "IsOpening",
          "IsClosing",
          "SetActionInstigator",
          "SetControlValue",
          "GetControlValue",
          "GetDoorState",
          "GetDoorNormal"
        ]
      },
      {
        "class_name": "ExtendedDamageManagerComponent",
        "methods": [
          "AddDamageEffect",
          "TerminateDamageEffect",
          "TerminateDamageEffectsOfType",
          "GetEvaluator",
          "SetEvaluator",
          "GetPersistentEffects",
          "IsDamageEffectPresent",
          "FindDamageEffectOfType",
          "FindAllDamageEffectsOfType",
          "FindDamageEffectsOnHitZone",
          "FindDamageEffectOnHitZone",
          "FindAllDamageEffectsOfTypeOnHitZone",
          "IsDamageEffectPresentOnHitZones",
          "GetDamageHistory",
          "ClearDamageHistory",
          "OnDamageEffectAdded",
          "OnDamageEffectRemoved"
        ]
      },
      {
        "class_name": "FactionAffiliationComponent",
        "methods": [
          "GetOwner",
          "GetAffiliatedFaction",
          "GetDefaultAffiliatedFaction",
          "SetAffiliatedFaction",
          "SetAffiliatedFactionByKey",
          "GetDefaultFactionKey",
          "GetAffiliatedFactionKey",
          "OnPostInit",
          "OnCompartmentEntering",
          "OnCompartmentEntered",
          "OnCompartmentLeft",
          "OnFactionChanged"
        ]
      },
      {
        "class_name": "FuelManagerComponent",
        "methods": [
          "GetFuelNodesList",
          "HasFuel",
          "CanBeRefueled",
          "GetTotalFuel",
          "GetTotalMaxFuel",
          "OnInit"
        ]
      },
      {
        "class_name": "GameComponent",
        "methods": [
          "OnTicksOnRemoteProxy"
        ]
      },
      {
        "class_name": "HitZoneContainerComponent",
        "methods": [
          "GetOwner",
          "GetDefaultHitZone",
          "GetHitZoneByColliderID",
          "GetHitZonesByColliderIDs",
          "GetHitZone",
          "GetAllHitZones",
          "GetAllHitZonesInHierarchy",
          "GetParentHitZoneContainer",
          "OnRplSave",
          "OnRplLoad"
        ]
      },
      {
        "class_name": "InventoryItemComponent",
        "methods": [
          "GetOwner",
          "IsLocked",
          "IsUserLocked",
          "IsSystemLocked",
          "GetParentSlot",
          "GetAttributes",
          "HideOwner",
          "ShowOwner",
          "SetTraceable",
          "DisablePhysics",
          "EnablePhysics",
          "ActivateOwner",
          "GetAdditionalWeight",
          "SetAdditionalWeight",
          "GetTotalWeight",
          "GetAdditionalVolume",
          "SetAdditionalVolume",
          "GetTotalVolume",
          "PlaceOnGround",
          "IsHiddenInVicnity",
          "GetUIInfo",
          "RequestUserLock",
          "FindAttribute",
          "CreatePreviewEntity",
          "ShouldHideInVicinity",
          "OverridePlacementTransform",
          "OnDelete",
          "OnLockedStateChanged",
          "OnParentSlotChanged"
        ]
      },
      {
        "class_name": "NwkCarMovementComponent",
        "methods": [
          "SetAllowance",
          "SetPrediction"
        ]
      },
      {
        "class_name": "NwkHeliMovementComponent",
        "methods": [
          "SetAllowance",
          "SetPrediction"
        ]
      },
      {
        "class_name": "NwkMovementComponent",
        "methods": [
          "IsInterpolating",
          "EnableSimulation",
          "EnableInterpolation",
          "IsInterpolationEnabled"
        ]
      },
      {
        "class_name": "ParametricMaterialInstanceComponent",
        "methods": [
          "SetColor",
          "GetColor",
          "SetEmissiveColor",
          "GetEmissiveC",
          "SetEmissiveMultiplier",
          "GetEmissiveM",
          "SetUserParam1",
          "GetUserParam1",
          "SetUserParam2",
          "GetUserParam2",
          "SetUserParam3",
          "GetUserParam3",
          "SetUserParam4",
          "GetUserParam4",
          "SetUserAlphaTestParam",
          "GetUserAlphaTestParam",
          "SetCustomWetnessEnabled",
          "GetCustomWetnessEnabled",
          "SetSlidingDropsEnabled",
          "GetSlidingDropsEnabled",
          "SaveState",
          "LoadState"
        ]
      },
      {
        "class_name": "PerceptionComponent",
        "methods": [
          "GetSimulateCounter",
          "GetTargetsList",
          "GetTargetCount",
          "GetLastSeenTarget",
          "GetTargetPerceptionObject",
          "FindTargetPerceptionObject",
          "GetClosestTarget",
          "SetPerceptionFactor",
          "GetUpdateInterval",
          "GetFriendlyInLineOfFire",
          "SetFriendlyFireCheck"
        ]
      },
      {
        "class_name": "PreviewAnimationComponent",
        "methods": [
          "UpdateFrameStep",
          "SetGraphResource",
          "UpdateAnimInstance",
          "SetHandsIKPose",
          "SetIkState"
        ]
      },
      {
        "class_name": "RadioBroadcastComponent",
        "methods": [
          "GetState",
          "EnableRadio"
        ]
      },
      {
        "class_name": "RplComponent",
        "methods": [
          "DeleteRplEntity",
          "GiveExt",
          "ForceNodeMovement",
          "EnableStreaming",
          "EnableStreamingConNode",
          "EnableStreamingForConnection",
          "InsertMPObserver",
          "RemoveMPObserver",
          "EnableSpatialRelevancy"
        ]
      },
      {
        "class_name": "ScriptedRadioComponent",
        "methods": [
          "OnPostInit",
          "OnInit",
          "OnFrame"
        ]
      },
      {
        "class_name": "ScriptGameComponent",
        "methods": [
          "OnTicksOnRemoteProxy"
        ]
      },
      {
        "class_name": "SignalsComponent",
        "methods": [
          "Update",
          "GetSignalInIndex",
          "GetSignalOutIndex",
          "SetSignalInValue",
          "GetSignalInValue",
          "GetSignalOutValue",
          "GetSignalIns",
          "GetSignalOuts"
        ]
      },
      {
        "class_name": "SignalsManagerComponent",
        "methods": [
          "AddOrFindSignal",
          "AddOrFindMPSignal",
          "FindSignal",
          "SetSignalValue",
          "GetSignalValue"
        ]
      },
      {
        "class_name": "SimpleSoundComponent",
        "methods": [
          "EnableDynamicSimulation",
          "SetScriptedMethodsCall",
          "IsScriptedMethodsCallEnabled",
          "GetOwner",
          "OnPostInit",
          "OnInit",
          "OnFrame",
          "UpdateSoundJob",
          "OnUpdateSoundJobBegin",
          "OnUpdateSoundJobEnd"
        ]
      },
      {
        "class_name": "SlotManagerComponent",
        "methods": [
          "GetSlotInfos",
          "GetSlotByName"
        ]
      },
      {
        "class_name": "SoundComponent",
        "methods": [
          "SoundEvent",
          "SoundEventTransform",
          "SoundEventBone",
          "SoundEventOffset"
        ]
      },
      {
        "class_name": "StreetLampComponent",
        "methods": [
          "IsLightOn",
          "SetBroken"
        ]
      },
      {
        "class_name": "TurretControllerComponent",
        "methods": [
          "GetCompartmentSlot",
          "GetCanAimOnlyInADS",
          "IsFreeLookEnabled",
          "IsWeaponADS",
          "SetWeaponADS",
          "GetWeaponADSInput",
          "SetWeaponADSInput",
          "GetReloadingState",
          "GetADSTime",
          "GetCurrentSights",
          "GetCurrentSightsADS",
          "SetCurrentSightsADS",
          "GetCurrentSightsCameraTransform",
          "GetCurrentSightsCameraLocalTransform",
          "AssembleTurret",
          "DisassembleTurret",
          "GetTurretComponent",
          "GetWeaponManager",
          "GetInventoryManager",
          "SelectWeapon",
          "GetReloadDuration",
          "GetReloadTime",
          "DoReloadWeaponWith",
          "SetFireWeaponWanted",
          "SetAimingAngles"
        ]
      },
      {
        "class_name": "VehicleBaseSimulation",
        "methods": [
          "HasAnyGroundContact",
          "GetGForce",
          "GetGForceMagnitude",
          "IsValid",
          "OnInit"
        ]
      },
      {
        "class_name": "VehicleSoundComponent",
        "methods": [
          "SetMinTimeAfterImpact"
        ]
      },
      {
        "class_name": "VolumeDataProviderComponent",
        "methods": [
          "SetSize",
          "SetCategory"
        ]
      },
      {
        "class_name": "VoNComponent",
        "methods": [
          "SetCapture",
          "SetCommMethod",
          "GetCommMethod",
          "SetTransmitRadio",
          "GetTransmitRadio",
          "SoundEventPriority",
          "OnCapture",
          "OnReceive"
        ]
      },
      {
        "class_name": "Achievements",
        "methods": [
          "Achievements",
          "UnlockAchievement",
          "IncrementAchievementProgress"
        ]
      },
      {
        "class_name": "BallisticInfo",
        "methods": [
          "AllowsDeflection",
          "GetDensity",
          "GetThickness",
          "GetThicknessMax",
          "IsWaterSurface"
        ]
      },
      {
        "class_name": "ChimeraWorld",
        "methods": [
          "GetTimeAndWeatherManager",
          "GetGarbageSystem",
          "GetRadioManager",
          "GetItemPreviewManager",
          "GetMusicManager",
          "GetSoundWorld",
          "GetServerTimestamp",
          "GetLocalTimestamp",
          "PauseGameTime",
          "IsGameTimePaused",
          "RegisterEntityToBeUpdatedWhileGameIsPaused",
          "UnregisterEntityToBeUpdatedWhileGameIsPaused",
          "GetObservers",
          "GetMPObservers",
          "CastFrom"
        ]
      },
      {
        "class_name": "GameMaterial",
        "methods": [
          "GetVehicleInfo",
          "GetSoundInfo",
          "GetHitEffectInfo",
          "GetBallisticInfo",
          "GetParticleEffectInfo"
        ]
      },
      {
        "class_name": "HitEffectInfo",
        "methods": [
          "GetParticleEffectValue",
          "GetDecalMaterialValue",
          "GetBayonetHitParticleEffect",
          "GetDecalScaleValue",
          "GetDecalFarPlaneValue",
          "GetDecalOffsetValue"
        ]
      },
      {
        "class_name": "ParticleEffectInfo",
        "methods": [
          "GetVehicleDustResource",
          "GetBlastResource"
        ]
      },
      {
        "class_name": "PrefabList",
        "methods": [
          "RegisterPrefab"
        ]
      },
      {
        "class_name": "SoundInfo",
        "methods": [
          "GetSignalValue"
        ]
      },
      {
        "class_name": "BaseDamageEffect",
        "methods": [
          "ApplyEffect",
          "GetTotalDamage",
          "GetDamageType",
          "GetInstigator",
          "GetAffectedHitZone",
          "SetDamageType",
          "SetInstigator",
          "SetAffectedHitZone",
          "IsProxy",
          "HijackDamageEffect",
          "OnEffectAdded",
          "OnEffectApplied",
          "HandleConsequences",
          "OnEffectRemoved",
          "OnDiag",
          "Save",
          "Load"
        ]
      },
      {
        "class_name": "DotDamageEffect",
        "methods": [
          "DealDot",
          "DealCustomDot",
          "SetDPS",
          "SetMaxDuration",
          "ExtendMaxDuration",
          "UpdateTimer",
          "GetAccurateTimeSlice",
          "GetDPS",
          "GetCurrentDuration",
          "GetMaxDuration"
        ]
      },
      {
        "class_name": "DotDamageEffectTimerToken",
        "methods": [
          "DotDamageEffectTimerToken"
        ]
      },
      {
        "class_name": "PersistentDamageEffect",
        "methods": [
          "Terminate",
          "SetActive",
          "IsActive",
          "EOnFrame"
        ]
      },
      {
        "class_name": "BaseDestructibleData",
        "methods": [
          "OnRplSave",
          "OnRplLoad"
        ]
      },
      {
        "class_name": "BaseDestructionPhase",
        "methods": [
          "GetThreshold"
        ]
      },
      {
        "class_name": "BaseEffectComponent",
        "methods": [
          "GetParticleEntity",
          "GetSignalsManager",
          "HasActiveParticles"
        ]
      },
      {
        "class_name": "ExplosionDamageContainer",
        "methods": [
          "SetIgnoreList",
          "GetIgnoreList"
        ]
      },
      {
        "class_name": "MuzzleEffectComponent",
        "methods": [
          "OnInit",
          "OnFired"
        ]
      },
      {
        "class_name": "BaseChatEntity",
        "methods": [
          "GetChannelsCount",
          "GetChannelName",
          "GetChannel",
          "GetWhisperChannel",
          "GetDefaultChannel",
          "GetStyle"
        ]
      },
      {
        "class_name": "BaseGameEntity",
        "methods": [
          "Teleport",
          "GetRplComponent"
        ]
      },
      {
        "class_name": "DestructibleEntity",
        "methods": [
          "HandleDamage",
          "GetCorrespondingState",
          "GetCurrentHealth",
          "ComputeEffectiveDamage",
          "OnDamage",
          "OnStateChanged",
          "OnBeforeDestroyed",
          "OnContact"
        ]
      },
      {
        "class_name": "DestructibleEntityClass",
        "methods": [
          "GetMaxHealth",
          "GetDestructionPhase",
          "GetNumDestructionPhases",
          "GetDamageReduction",
          "GetDamageThreshold",
          "GetDamageMultiplier",
          "GetBaseDamageMultiplier"
        ]
      },
      {
        "class_name": "EntityUtils",
        "methods": [
          "EntityUtils",
          "IsPlayer",
          "IsPlayerVehicle",
          "GetPlayer",
          "CanTreatAsProxy",
          "GetAncestorToChildTransform",
          "GetChildToAncestorTransform"
        ]
      },
      {
        "class_name": "MusicManager",
        "methods": [
          "Play",
          "Stop",
          "MuteCategory",
          "RequestServerMuteCategory",
          "ServerIsCategoryMuted",
          "SetManagerSignals",
          "GetSignalIndex",
          "SetSignalValue",
          "SetSignalValueStr"
        ]
      },
      {
        "class_name": "RadioManagerEntity",
        "methods": [
          "GetTransceiversInRange"
        ]
      },
      {
        "class_name": "SoundWorld",
        "methods": [
          "GetMapValuesAtPos",
          "GetMapValuesAdvAtPos",
          "CalculateInterirorAt"
        ]
      },
      {
        "class_name": "EntitySlotInfo",
        "methods": [
          "GetAttachedEntityInvoker",
          "GetDetachedEntityInvoker",
          "GetSlotInfo",
          "GetSlotInfos",
          "IsEnabled",
          "GetAttachedEntity",
          "GetSourceName",
          "SetAdditiveTransformLS",
          "OverrideTransformLS",
          "DetachEntity",
          "AttachEntity",
          "OnAttachedEntity",
          "OnDetachedEntity"
        ]
      },
      {
        "class_name": "EquipmentStorageSlot",
        "methods": [
          "CanAttachItem",
          "IsOccluded",
          "OnOccludedStateChanged"
        ]
      },
      {
        "class_name": "BaseEventHandler",
        "methods": [
          "GetEventName"
        ]
      },
      {
        "class_name": "EventHandlerManagerComponent",
        "methods": [
          "RaiseEvent",
          "RegisterScriptHandler",
          "RemoveScriptHandler",
          "GetEventHandlers"
        ]
      },
      {
        "class_name": "Faction",
        "methods": [
          "GetFactionIdentity",
          "IsFactionFriendly",
          "IsFactionEnemy",
          "GetFactionName",
          "GetFactionKey",
          "GetFactionColor",
          "GetUIInfo"
        ]
      },
      {
        "class_name": "FactionManager",
        "methods": [
          "GetFactionByKey",
          "GetFactionByIndex",
          "GetFactionIndex",
          "GetFactionsCount",
          "GetFactionsList"
        ]
      },
      {
        "class_name": "ScriptedFaction",
        "methods": [
          "Init",
          "DoCheckIfFactionFriendly"
        ]
      },
      {
        "class_name": "GameAnimationUtils",
        "methods": [
          "GameAnimationUtils",
          "RegisterAnimationEvent",
          "RegisterAnimationTag",
          "GetEventString",
          "GetTagString",
          "AnimateColliders",
          "FindMeshIndex",
          "ShowMesh"
        ]
      },
      {
        "class_name": "BaseGameMode",
        "methods": [
          "OnGameStart",
          "OnPlayerAuditSuccess",
          "OnPlayerAuditFail",
          "OnPlayerAuditTimeouted",
          "OnPlayerAuditRevived",
          "OnPlayerConnected",
          "OnPlayerRegistered",
          "OnPlayerDisconnected",
          "OnPlayerSpawned",
          "HandlePlayerKilled",
          "OnPlayerKilled",
          "OnControllableSpawned",
          "OnControllableDestroyed",
          "OnControllableDeleted",
          "OnPlayerRoleChange",
          "OnWorldPostProcess"
        ]
      },
      {
        "class_name": "RespawnComponent",
        "methods": [
          "NotifySpawn",
          "GetPlayerController",
          "OnInit",
          "OnDelete",
          "OnPostInit",
          "OnDiag",
          "OnFrame"
        ]
      },
      {
        "class_name": "RespawnSystemComponent",
        "methods": [
          "DoSpawn",
          "OnRplSave",
          "OnRplLoad",
          "OnInit",
          "RequestSpawn"
        ]
      },
      {
        "class_name": "GameSignalsManager",
        "methods": [
          "AddOrFindSignal",
          "AddOrFindMPSignal",
          "FindSignal",
          "SetSignalValue",
          "GetSignalValue"
        ]
      },
      {
        "class_name": "GameStateTransitions",
        "methods": [
          "GameStateTransitions",
          "IsTransitionRequested",
          "IsTransitionInProgress",
          "IsTransitionRequestedOrInProgress",
          "RequestPublicServerTransition",
          "RequestConnectViaIP",
          "RequestConnectViaRoom",
          "RequestMissionChangeTransition",
          "RequestWorldChangeTransition",
          "RequestScenarioChangeTransition",
          "RequestServerReload",
          "RequestScenarioRestart",
          "RequestServerConfigChange",
          "RequestGameplayEndTransition",
          "RequestGameTerminateTransition",
          "RequestStartEditorTransition",
          "IsInsideMainMenu",
          "IsFirstMainMenu"
        ]
      },
      {
        "class_name": "KickCauseCodeAPI",
        "methods": [
          "KickCauseCodeAPI",
          "NewCode",
          "GetGroup",
          "GetReason"
        ]
      },
      {
        "class_name": "ForestGeneratorGrid",
        "methods": [
          "ForestGeneratorGrid",
          "Clear",
          "IsInBounds",
          "Resize",
          "SetPointOffset",
          "IsColliding",
          "CountEntriesAround",
          "GetEntryCount",
          "GetEntry",
          "AddEntry",
          "RemoveEntry",
          "RemoveEntryByIndex"
        ]
      },
      {
        "class_name": "Graph",
        "methods": [
          "HasNode",
          "GetNode",
          "AddNode",
          "RemoveNode",
          "RemoveNodes",
          "AddEdge",
          "GetEdge",
          "GetEdges",
          "RemoveEdge",
          "HasEdge",
          "GetAdjacentNodes",
          "BFS",
          "DFS",
          "CanAddNode",
          "OnNodeAdded",
          "OnNodeRemoved",
          "CanAddEdge",
          "OnEdgeAdded",
          "OnEdgeRemoved"
        ]
      },
      {
        "class_name": "GraphEdge",
        "methods": [
          "GraphEdge",
          "GetAdjId"
        ]
      },
      {
        "class_name": "GraphNode",
        "methods": [
          "GraphNode",
          "GetID"
        ]
      },
      {
        "class_name": "AABGridMap",
        "methods": [
          "AABGridMap",
          "Insert",
          "UpdateAABB"
        ]
      },
      {
        "class_name": "BaseGridMap",
        "methods": [
          "BaseGridMap",
          "UpdatePosition",
          "Remove",
          "Update",
          "FindEntitiesInRange",
          "SetUpdateOfStaticEntities",
          "SetNmbOfStaticEntitiesUpdated"
        ]
      },
      {
        "class_name": "CircleGridMap",
        "methods": [
          "CircleGridMap",
          "Insert",
          "UpdateRadius"
        ]
      },
      {
        "class_name": "PointGridMap",
        "methods": [
          "PointGridMap",
          "Insert"
        ]
      },
      {
        "class_name": "DamageManagerComponentClass",
        "methods": [
          "GetFallDamageLimitNoDamage",
          "GetFallDamageLimitFullDamage",
          "GetHeavyDamageThreshold"
        ]
      },
      {
        "class_name": "HitZone",
        "methods": [
          "GetBaseDamageMultiplier",
          "HasColliderNodes",
          "GetColliderDescriptorIndex",
          "GetDamageMultiplier",
          "GetDamageReduction",
          "GetDamageThreshold",
          "GetAllColliderNames",
          "SetDamageOverTime",
          "GetDamageOverTime",
          "GetNumColliderDescriptors",
          "GetHitZoneContainer",
          "SetHealth",
          "SetHealthScaled",
          "SetMaxHealth",
          "GetHealth",
          "GetHealthScaled",
          "GetDamageStateThreshold",
          "GetMaxHealth",
          "GetName",
          "GetDamageState",
          "GetCriticalDamageThreshold",
          "GetPreviousDamageState",
          "HandleDamage",
          "IsProxy",
          "GetColliderIDs",
          "TryGetColliderDescription",
          "TryGetColliderDescriptionFromName",
          "OnInit",
          "OnHealthSet",
          "OnMaxHealthChanged",
          "OnDamageStateChanged",
          "OnDamage",
          "ComputeEffectiveDamage"
        ]
      },
      {
        "class_name": "FactionIdentity",
        "methods": [
          "GetSocialIdentities",
          "GetSoundIdentities",
          "GetVisualIdentities",
          "CreateSoundIdentity",
          "CreateVisualIdentity"
        ]
      },
      {
        "class_name": "Identity",
        "methods": [
          "GetName",
          "SetName",
          "GetAlias",
          "SetAlias",
          "GetSurname",
          "SetSurname",
          "GetFullName",
          "GetVisualIdentity",
          "SetVisualIdentity",
          "GetSoundIdentity",
          "SetSoundIdentity"
        ]
      },
      {
        "class_name": "IdentityBodyMesh",
        "methods": [
          "GetPart",
          "GetWounded",
          "GetHealthy"
        ]
      },
      {
        "class_name": "SocialIdentity",
        "methods": [
          "GetRandomName",
          "GetRandomAlias",
          "GetRandomSurname",
          "GetName",
          "GetAlias",
          "GetSurname"
        ]
      },
      {
        "class_name": "SoundIdentity",
        "methods": [
          "GetVoiceID",
          "SetVoiceID",
          "GetPitch",
          "SetPitch"
        ]
      },
      {
        "class_name": "VisualIdentity",
        "methods": [
          "GetHead",
          "SetHead",
          "GetBody",
          "SetBody",
          "GetMeshConfig",
          "SetMeshConfig"
        ]
      },
      {
        "class_name": "InteriorRequestCallback",
        "methods": [
          "OnCompleted"
        ]
      },
      {
        "class_name": "AttachmentAttributes",
        "methods": [
          "GetAttachmentType"
        ]
      },
      {
        "class_name": "BaseInventoryStorageComponent",
        "methods": [
          "SetupSlotHooks",
          "ReleaseSlotHooks",
          "Contains",
          "FindItemSlot",
          "GetSlotsCount",
          "GetSlot",
          "Get",
          "GetAll",
          "GetPriority",
          "GetPurpose",
          "FindSuitableSlotForItem",
          "GetOccupiedSpace",
          "IsCompartment",
          "GetOwnedItems",
          "GetOwnedStorages",
          "PerformVolumeValidation",
          "PerformDimensionValidation",
          "GetMaxVolumeCapacity",
          "GetMaxDimensionCapacity",
          "GetEstimatedCountFitForItem",
          "GetWeightFromResource",
          "GetEstimatedCountFitForResource",
          "PerformVolumeAndDimensionValidationForResource",
          "OnOverrideCanStoreItem",
          "OnOverrideCanStoreResource",
          "OnOverrideCanRemoveItem",
          "OnOverrideCanReplaceItem",
          "OnAddedToSlot",
          "OnRemovedFromSlot",
          "GetEmptySlotForItem",
          "CanStoreItem",
          "CanStoreResource",
          "CanRemoveItem",
          "CanReplaceItem",
          "GetSlotsCountScr",
          "GetSlotScr",
          "RemoveItem",
          "InsertItem",
          "ShouldPreviewAttachedItems",
          "OnManagerChanged",
          "UpdateUI"
        ]
      },
      {
        "class_name": "CharacterModifierAttributes",
        "methods": [
          "SpeedLimit",
          "SpeedLimitADS",
          "SpeedLimitItemAction",
          "SpeedLimitHighReady",
          "IsAdsSpeedModApplied",
          "IsOneHandedShootingSupressed",
          "IsGadgetUseAllowed",
          "CanBeEquippedInVehicle",
          "IsAllowedReloadingWithRoll",
          "IsJumpingAllowed"
        ]
      },
      {
        "class_name": "CharacterVicinityComponent",
        "methods": [
          "GetAvailableItems",
          "SetItemOfInterest",
          "ManipulationComplete",
          "GetItemOfInterest",
          "GetDiscoveryRadius",
          "OnUpdate"
        ]
      },
      {
        "class_name": "EquipedLoadoutStorageComponent",
        "methods": [
          "GetSlotFromArea",
          "GetSlotsFromArea",
          "GetClothFromArea"
        ]
      },
      {
        "class_name": "HolsteredItemAttributes",
        "methods": [
          "IsHiddenHolstered",
          "GetOffset"
        ]
      },
      {
        "class_name": "InventoryStorageManagerComponent",
        "methods": [
          "GetOwner",
          "AddStorage",
          "CanInsertItem",
          "CanInsertItemInStorage",
          "CanInsertResource",
          "CanInsertResourceInStorage",
          "TryInsertItem",
          "TryInsertItemInStorage",
          "CanReplaceItem",
          "TryReplaceItem",
          "CanRemoveItemFromStorage",
          "TryRemoveItemFromStorage",
          "CanMoveItemToStorage",
          "TryMoveItemToStorage",
          "CanSwapItemStorages",
          "TrySwapItemStorages",
          "TryDeleteItem",
          "TrySpawnPrefabToStorage",
          "ValidateStorageRequest",
          "GetStorages",
          "GetItems",
          "Contains",
          "FindStorageForItem",
          "FindStorageForResource",
          "FindStorageForInsert",
          "FindStorageForResourceInsert",
          "GetDepositItemCountByEntity",
          "GetDepositItemCountByResource"
        ]
      },
      {
        "class_name": "SCR_SomeCrazyPredicate",
        "methods": [
          "SCR_SomeCrazyPredicate",
          "IsMatch",
          "FindCrazyItem",
          "FindItem",
          "FindItems",
          "FindGrenadeInDeposit",
          "FindItemWithComponents",
          "FindItemsWithComponents",
          "CountItem",
          "GetMagazineCountByWeapon",
          "GetMagazineCountByMuzzle",
          "GetGrenadesCount",
          "OnDelete",
          "OnItemAdded",
          "OnItemRemoved",
          "OnStorageAdded",
          "OnStorageRemoved",
          "FillInitialStorages",
          "FillInitialPrefabsToStore",
          "ShouldForbidRemoveByInstigator"
        ]
      },
      {
        "class_name": "InventoryStorageSlot",
        "methods": [
          "ScriptOnRplSave",
          "ScriptOnRplLoad",
          "GetInspectionWidgetOffset",
          "IsLocked",
          "GetID",
          "GetParentContainer",
          "GetStorage"
        ]
      },
      {
        "class_name": "BaseInventorySearchPredicate",
        "methods": [
          "IsMatch"
        ]
      },
      {
        "class_name": "BaseInventoryTask",
        "methods": [
          "Then"
        ]
      },
      {
        "class_name": "ScriptedInventoryOperationCallback",
        "methods": [
          "GetItem",
          "OnComplete",
          "OnFailed",
          "OnAllComplete",
          "OnAllFailed"
        ]
      },
      {
        "class_name": "ScriptedInventoryTask",
        "methods": [
          "SetSlotOperation",
          "Initialize",
          "Start",
          "Update",
          "IsComplete",
          "OnTaskCompleted"
        ]
      },
      {
        "class_name": "ItemAnimationAttributes",
        "methods": [
          "GetAdditiveTransformLS"
        ]
      },
      {
        "class_name": "ItemAttributeCollection",
        "methods": [
          "GetUIInfo",
          "FindAttribute",
          "GetCommonType",
          "OnInitCollection"
        ]
      },
      {
        "class_name": "ItemPhysicalAttributes",
        "methods": [
          "GetWeight",
          "GetVolume",
          "GetDimensions"
        ]
      },
      {
        "class_name": "ItemPreviewManagerEntity",
        "methods": [
          "SetPreviewItem",
          "SetPreviewItemFromPrefab",
          "ResolvePreviewEntityForPrefab"
        ]
      },
      {
        "class_name": "LoadoutSlotInfo",
        "methods": [
          "GetAreaType"
        ]
      },
      {
        "class_name": "PreviewRenderAttributes",
        "methods": [
          "RotateItemCamera",
          "ResetDeltaRotation",
          "ZoomCamera"
        ]
      },
      {
        "class_name": "BaseLoadoutClothComponent",
        "methods": [
          "SetAlpha",
          "GetAreaType",
          "GetBlockedSlots"
        ]
      },
      {
        "class_name": "LoadoutAreaType",
        "methods": [
          "GetLoadoutSoundInfo"
        ]
      },
      {
        "class_name": "DrawingItem",
        "methods": [
          "Owner"
        ]
      },
      {
        "class_name": "MapAreaProperties",
        "methods": [
          "SetVisibility",
          "SetVisualizationType",
          "SetAreaColor",
          "SetIndividualColor"
        ]
      },
      {
        "class_name": "MapBuildingProps",
        "methods": [
          "SetVisibility",
          "SetLineType",
          "SetOutlineWidth",
          "SetLineColor",
          "SetOutlineColor",
          "SetVisible",
          "IsVisible"
        ]
      },
      {
        "class_name": "MapContourProps",
        "methods": [
          "EnableVisualisation",
          "EnableLandVisualization",
          "EnableOceanVisualization",
          "EnableCoastVisualization",
          "GetLOD",
          "SetLOD",
          "GetMajorDensity",
          "SetMajorDensity",
          "GetContourDensity",
          "SetContourDensity",
          "GetMajorWidth",
          "SetMajorWidth",
          "GetContourWidth",
          "SetContourWidth",
          "GetCostalWidth",
          "SetCostalWidth",
          "GetWorldScale",
          "SetWorldScale",
          "GetMajorColor",
          "SetMajorColor",
          "GetCoastColor",
          "SetCoastColor",
          "GetOceanColor",
          "SetOceanColor",
          "GetLandColor",
          "SetLandColor"
        ]
      },
      {
        "class_name": "MapDataExporter",
        "methods": [
          "ExportData",
          "SetupColors",
          "ExportRasterization"
        ]
      },
      {
        "class_name": "MapDescriptorComponent",
        "methods": [
          "GetBaseType",
          "GetUnitType",
          "GetGroupType",
          "Item"
        ]
      },
      {
        "class_name": "MapDescriptorProps",
        "methods": [
          "Activate",
          "Setup",
          "IsVisible",
          "SetVisible",
          "IsIconVisible",
          "SetIconVisible",
          "SetFont",
          "IsTextVisible",
          "SetTextVisible",
          "SetTextOffset",
          "SetTextOffsetX",
          "SetTextOffsetY",
          "SetIconTextAlignH",
          "SetIconTextAlignV",
          "SetAlignWithParent",
          "SetTextBold",
          "SetTextItalic",
          "SetIconSize",
          "GetIconSize",
          "SetTextSize",
          "GetTextSize",
          "SetDetail",
          "GetDetail",
          "GetImageDef",
          "SetImageDef",
          "SetTextAngle",
          "GetTextAngle",
          "SetGroupType",
          "GetGroupType",
          "SetGroupScale",
          "GetGroupScale",
          "SetPriority",
          "GetPriority",
          "SetFrontColor",
          "GetFrontColor",
          "SetBackgroundColor",
          "GetBackgroundColor",
          "SetOutlineColor",
          "GetOutlineColor",
          "SetTextColor",
          "GetTextColor"
        ]
      },
      {
        "class_name": "MapDrawingProps",
        "methods": [
          "MapDrawingProps",
          "SetVisible",
          "IsVisible",
          "SetHollow",
          "IsHollow",
          "SetShapeType",
          "SetDetail",
          "GetDetail",
          "SetOutlineType",
          "GetOutlineWidth",
          "SetOutlineWidth",
          "GetOutlineColor",
          "SetOutlineColor",
          "GetInteriorColor",
          "SetInteriorColor"
        ]
      },
      {
        "class_name": "MapEntity",
        "methods": [
          "UpdateTexts",
          "AbsorbData",
          "Offset",
          "Size",
          "TerrainUnitScale",
          "SetSelection",
          "ResetSelection",
          "SetFrame",
          "ZoomChange",
          "PosChange",
          "CursorChange",
          "MinElevation",
          "MaxElevation",
          "ElevationAt",
          "ShowDiag",
          "CreateCustomMapItem",
          "CountOfVisible",
          "GetVisible",
          "GetVisibleAll",
          "GetInsideRect",
          "GetInsideCircle",
          "GetClose",
          "GetSelected",
          "GetByType",
          "ResetSelected",
          "ResetHovering",
          "ResetHighlighted",
          "ShowMultiple",
          "ShowEditor",
          "ShowDebug",
          "EnableVisualisation",
          "EnableGrid",
          "EnableOverlay",
          "EnableLegend",
          "InitializeLayers",
          "LayerCount",
          "GetLayer",
          "SetLayer",
          "GetLayerIndex",
          "SetImagesetMapping"
        ]
      },
      {
        "class_name": "MapGridProps",
        "methods": [
          "SetLineType",
          "GetOverlap",
          "SetOverlap",
          "GetBorderRatio",
          "SetBorderRatio",
          "GetGridClose",
          "SetGridClose",
          "GetGridFar",
          "SetGridFar",
          "GetSquareSize",
          "SetSquareSize",
          "SetMainGridSize",
          "SetGridStepSize",
          "GetLineWidth",
          "SetLineWidth",
          "SetMainLineWidth",
          "GetOutsideWidth",
          "SetOutsideWidth",
          "GetBorderWidth",
          "SetBorderWidth",
          "GetTextColor",
          "SetTextColor",
          "GetLineColor",
          "SetLineColor",
          "SetMainGridLineColor",
          "GetOutsideColor",
          "SetOutsideColor",
          "GetBorderColor",
          "SetBorderColor",
          "GetFontsize",
          "SetFontsize",
          "SetTextBold",
          "SetTextItalic",
          "SetFont"
        ]
      },
      {
        "class_name": "MapHillProps",
        "methods": [
          "SetMajorHillFloorLimit",
          "SetSignificantHillFloorLimit",
          "SetColor",
          "SetTextColor"
        ]
      },
      {
        "class_name": "MapItem",
        "methods": [
          "Entity",
          "Descriptor",
          "Recycle",
          "SetVisible",
          "IsVisible",
          "SetEditor",
          "IsEditor",
          "SetHovering",
          "IsHovering",
          "SetHighlighted",
          "IsHighlighted",
          "Select",
          "IsSelected",
          "SetLayerLinkProps",
          "IsUseLayerLinkProps",
          "GetDisplayName",
          "SetDisplayName",
          "LinkTo",
          "GetGroupType",
          "SetGroupType",
          "GetPriority",
          "SetPriority",
          "UnLink",
          "GetLinks",
          "ClearLinks",
          "GetInfoText",
          "SetInfoText",
          "GetImageDef",
          "SetImageDef",
          "GetRange",
          "SetRange",
          "SetAngle",
          "GetAngle",
          "GetPos",
          "SetPos",
          "GetProps",
          "SetProps",
          "GetBaseType",
          "SetBaseType",
          "GetFactionIndex",
          "SetFactionIndex"
        ]
      },
      {
        "class_name": "MapLayer",
        "methods": [
          "Index",
          "SetFactionSize",
          "GetPropsFor",
          "GetGridProps",
          "GetLegendProps",
          "GetContourProps",
          "GetMapLinkProps",
          "GetSelectionProps",
          "GetRoadProps",
          "GetPowerLineProps",
          "GetBuildingProps",
          "GetWaterBodyProps",
          "GetHillProps",
          "GetAreaProps",
          "GetMapDrawingProps",
          "SetAll",
          "ModifyFaction",
          "SetCeiling",
          "GetCeiling"
        ]
      },
      {
        "class_name": "MapLegendProps",
        "methods": [
          "GetLineWidth",
          "SetLineWidth",
          "GetSegmentNumber",
          "SetSegmentNumber",
          "GetTotalSegmentLength",
          "SetTotalSegmentLength",
          "GetDistanceTextSize",
          "SetDistanceTextSize",
          "GetUnitTextSize",
          "SetUnitTextSize",
          "GetOffsetX",
          "SetOffsetX",
          "GetOffsetY",
          "SetOffsetY",
          "GetAlignRight",
          "SetAlignRight",
          "GetAlignTop",
          "SetAlignTop",
          "GetSegment1Color",
          "SetSegment1Color",
          "GetSegment2Color",
          "SetSegment2Color",
          "GetDistanceTextColor",
          "SetDistanceTextColor",
          "GetUnitTextColor",
          "SetUnitTextColor",
          "SetTextBold",
          "SetTextItalic",
          "SetFont"
        ]
      },
      {
        "class_name": "MapLink",
        "methods": [
          "Owner",
          "Target",
          "GetMapLinkProps"
        ]
      },
      {
        "class_name": "MapLinkProps",
        "methods": [
          "MapLinkProps",
          "SetLineType",
          "GetLineWidth",
          "SetLineWidth",
          "GetOutlineWidth",
          "SetOutlineWidth",
          "GetLineColor",
          "SetLineColor",
          "GetOutlineColor",
          "SetOutlineColor",
          "SetVisible",
          "IsVisible"
        ]
      },
      {
        "class_name": "MapPowerLineProps",
        "methods": [
          "SetVisibility",
          "SetIconViewLayer",
          "SetLineWidth",
          "SetIconQuality",
          "SetIconRadius",
          "SetIconSize",
          "SetLineColor",
          "SetVisible",
          "IsVisible"
        ]
      },
      {
        "class_name": "MapRoadProps",
        "methods": [
          "GetLOD",
          "SetLOD",
          "GetCount",
          "SetCount",
          "SetVisibility",
          "SetBorderVisibility",
          "SetLineWidth",
          "SetBorderLineWidth",
          "SetLineType",
          "SetDashedLineLength",
          "SetDashedLineGapLength",
          "SetColor",
          "SetSecondaryColor",
          "SetBorderColor",
          "SetVisible",
          "IsVisible"
        ]
      },
      {
        "class_name": "MapSelectionProperties",
        "methods": [
          "MapSelectionProperties",
          "SetScale",
          "GetScale",
          "GetColor",
          "SetOffset"
        ]
      },
      {
        "class_name": "MapWaterBodyProps",
        "methods": [
          "GetWaterColor",
          "SetWaterColor",
          "SetVisible",
          "IsVisible"
        ]
      },
      {
        "class_name": "MissionHeader",
        "methods": [
          "GetWorldPath",
          "GetHeaderResourcePath",
          "GetHeaderResourceName",
          "ReadMissionHeader"
        ]
      },
      {
        "class_name": "ScriptedMusic",
        "methods": [
          "GetName",
          "SetName",
          "ShouldPlay",
          "Init",
          "Update",
          "OnDelete",
          "OnPlay",
          "OnStop"
        ]
      },
      {
        "class_name": "GameStatsApi",
        "methods": [
          "PlayerEvent",
          "PlayerScore",
          "EditorStart",
          "EditorClosed",
          "ModEvent"
        ]
      },
      {
        "class_name": "PlayerManager",
        "methods": [
          "KickPlayer",
          "GetPlayerCount",
          "GetAllPlayerCount",
          "GetDisconnectedPlayerCount",
          "GetPlayers",
          "GetAllPlayers",
          "GetDisconnectedPlayers",
          "GetPlayerName",
          "GetPlayerControlledEntity",
          "GetPlayerRespawnComponent",
          "GetPlayerIdFromControlledEntity",
          "GetPlayerIdFromEntityRplId",
          "GetPlayerController",
          "GetPlatformKind",
          "IsPlayerConnected",
          "HasPlayerRole",
          "GetPlayerRoles",
          "GivePlayerRole",
          "ClearPlayerRole",
          "ShowUserProfile",
          "IsUserProfileAvailable",
          "ShowMultiplayerActivityInvite",
          "IsMultiplayerActivityInviteAvailable"
        ]
      },
      {
        "class_name": "BaseTarget",
        "methods": [
          "GetTargetEntity",
          "GetTargetCategory",
          "GetTimeSinceDetected",
          "GetTimeSinceSeen",
          "GetTimeLastSeen",
          "GetTimeLastDetected",
          "GetTimeSinceTypeRecognized",
          "GetTimeSinceSideRecognized",
          "GetTimeSinceEndangered",
          "GetLastSeenPosition",
          "GetLastDetectedPosition",
          "GetDistance",
          "GetUnitType",
          "IsEndangering",
          "IsDisarmed",
          "GetTraceFraction",
          "GetExposure",
          "GetPerceivableComponent",
          "GetDamageManagerComponent",
          "GetWeaponManagerComponent",
          "GetFactionAffiliationComponent",
          "GetAccumulatedRecognition",
          "UpdateLastSeenPosition"
        ]
      },
      {
        "class_name": "PerceivableComponent",
        "methods": [
          "GetUnitType",
          "GetVisualRecognitionFactor",
          "GetIlluminationFactor",
          "GetAmbientLV",
          "GetSoundPower",
          "GetEstimatedVisualSize",
          "GetAimpoints",
          "GetAimpointsOfType",
          "IsDisarmed",
          "SetDisarmed",
          "GetCompartmentAccessComponent",
          "IsInCompartment",
          "EOnInit"
        ]
      },
      {
        "class_name": "PerceptionManager",
        "methods": [
          "GetTime",
          "GetAmbientLV",
          "RequestUpdateAllTargetsFactions"
        ]
      },
      {
        "class_name": "BuoyancyComponent",
        "methods": [
          "GetOwner",
          "IsInWater",
          "IsCenterOfMassInWater",
          "OnEnterWater",
          "OnExitWater"
        ]
      },
      {
        "class_name": "VehicleBuoyancyComponent",
        "methods": [
          "SetHealth"
        ]
      },
      {
        "class_name": "ContactSurface",
        "methods": [
          "GetNoiseSteer",
          "GetNoiseFrequency",
          "GetRoughness",
          "GetFrictionNonTread",
          "GetFrictionTread",
          "GetRollingResistance",
          "GetRollingDrag"
        ]
      },
      {
        "class_name": "PlayerController",
        "methods": [
          "GetControlledEntity",
          "SetControlledEntity",
          "GetPlayerCamera",
          "CanRequestRespawn",
          "RequestRespawn",
          "GetActionManager",
          "GetRespawnComponent",
          "GetHUDManagerComponent",
          "IsChatAllowed",
          "IsVonAllowed",
          "HasRole",
          "SetCharacterCameraRenderActive",
          "GetPlayerId",
          "GetRplIdentity",
          "SetPlayerBlockedState",
          "SetPlayerMutedState",
          "GetPlayerBlockedState",
          "GetPlayerMutedState",
          "CanViewContentCreatedBy",
          "OnInit",
          "OnOwnershipChanged",
          "OnControlledEntityChanged",
          "OnDestroyed",
          "OnUpdate"
        ]
      },
      {
        "class_name": "BaseProjectileComponent",
        "methods": [
          "GetInstigator",
          "SetInstigator",
          "GetParentProjectile"
        ]
      },
      {
        "class_name": "BaseProjectileEffect",
        "methods": [
          "HasFinished",
          "SetHasFinished",
          "IsEnabled",
          "SetIsEnabled",
          "OnInit",
          "OnEffect",
          "OnFrame",
          "ShouldTick"
        ]
      },
      {
        "class_name": "MissileMoveComponent",
        "methods": [
          "GetCurrentEngineState",
          "GetCurrentFlightMode",
          "GetCurrentThrustTime",
          "GetCurrentThrustForce"
        ]
      },
      {
        "class_name": "ProjectileMoveComponent",
        "methods": [
          "EnableSimulation",
          "Launch",
          "GetVelocity",
          "GetRewindDuration",
          "SetRewindDuration"
        ]
      },
      {
        "class_name": "BaseTriggerComponent",
        "methods": [
          "GetOwner",
          "OnUserTrigger",
          "OnUserTriggerOverrideInstigator",
          "WasTriggered",
          "SetLive",
          "GetProjectileEffects",
          "EOnInit",
          "EOnContact"
        ]
      },
      {
        "class_name": "BaseRadioMessage",
        "methods": [
          "GetEncryptionKey",
          "SetEncryptionKey"
        ]
      },
      {
        "class_name": "BaseTransceiver",
        "methods": [
          "GetFrequency",
          "GetMinFrequency",
          "GetMaxFrequency",
          "SetFrequency",
          "GetFrequencyResolution",
          "GetRange",
          "SetRange",
          "GetRadio",
          "BeginTransmission"
        ]
      },
      {
        "class_name": "RadioHandlerComponent",
        "methods": [
          "SetFrequency"
        ]
      },
      {
        "class_name": "ScriptedRadioMessage",
        "methods": [
          "OnDelivery"
        ]
      },
      {
        "class_name": "ScriptedBaseZeroingGenerator",
        "methods": [
          "OnInit",
          "OnUpdate",
          "WB_GetZeroingData",
          "WB_CalculateWeaponZeroingAnimationValue",
          "WB_GetPivotPoint",
          "WB_InitGenerator",
          "WB_CleanupGenerator"
        ]
      },
      {
        "class_name": "ScriptedSightsFOVInfo",
        "methods": [
          "OnInit",
          "OnUpdate",
          "GetCurrentFOV"
        ]
      },
      {
        "class_name": "ScrServerCmdResult",
        "methods": [
          "ScrServerCmdResult"
        ]
      },
      {
        "class_name": "ScrServerCommand",
        "methods": [
          "GetKeyword",
          "OnUpdate",
          "OnRCONExecution",
          "RequiredRCONPermission",
          "IsServerSide",
          "OnChatServerExecution",
          "OnChatClientExecution",
          "RequiredChatPermission"
        ]
      },
      {
        "class_name": "SightsFOVInfo",
        "methods": [
          "GetFOV"
        ]
      },
      {
        "class_name": "AISmartActionSystem",
        "methods": [
          "FindSmartActions",
          "UpdateSmartAction"
        ]
      },
      {
        "class_name": "GameSystem",
        "methods": [
          "ShouldBePaused",
          "ShouldBeEnabledInEditMode"
        ]
      },
      {
        "class_name": "GarbageSystem",
        "methods": [
          "Insert",
          "IsInserted",
          "Withdraw",
          "Bump",
          "GetLifetime",
          "GetRemainingLifetime",
          "Flush",
          "UpdateBlacklist",
          "GetTrackedEntities",
          "OnInsertRequested",
          "OnInsertRequested",
          "OnBeforeDelete"
        ]
      },
      {
        "class_name": "InteractionBlockSystem",
        "methods": [
          "CanCreateInteractionBlocks",
          "Create",
          "CreateSimpleBlock",
          "DoesExist",
          "Remove",
          "RemoveInteractionBlocks",
          "RemoveSimpleBlock"
        ]
      },
      {
        "class_name": "TagSystem",
        "methods": [
          "GetTagsInRange",
          "RegisterEntity",
          "UnregisterEntity"
        ]
      },
      {
        "class_name": "BaseGameTriggerEntity",
        "methods": [
          "GetOnQueryFinished",
          "QueryEntityInside",
          "QueryEntitiesInside",
          "DefaultEntityFilterForQuery",
          "GetEntitiesInside",
          "SetSphereRadius",
          "GetSphereRadius",
          "SetUpdateRate",
          "GetUpdateRate",
          "EnablePeriodicQueries",
          "IsPeriodicQueriesEnabled",
          "AddFilterName",
          "RemoveFilterName",
          "AddClassType",
          "RemoveClassType",
          "AddPrefabFilter",
          "RemovePrefabFilter",
          "GetTraceMask",
          "SetTraceMask",
          "ClearTraceMask",
          "OnActivate",
          "OnDeactivate",
          "OnQueryFinished"
        ]
      },
      {
        "class_name": "PrefabFilter",
        "methods": [
          "GetPrefab",
          "SetPrefab",
          "GetCheckPrefabHierarchy",
          "SetCheckPrefabHierarchy"
        ]
      },
      {
        "class_name": "ScriptedGameTriggerEntity",
        "methods": [
          "OnInit",
          "OnFrame",
          "ScriptedEntityFilterForQuery"
        ]
      },
      {
        "class_name": "TurretComponent",
        "methods": [
          "GetSights",
          "HasMoveableBase",
          "GetCameraAttachmentSlot",
          "IsVehicleMounted",
          "GetBaseRotation",
          "SetBaseRotation",
          "GetAimingAngleExcess",
          "SetSights",
          "NextSights",
          "SwitchNextSights",
          "SwitchPrevSights",
          "IsUsingWeaponSights"
        ]
      },
      {
        "class_name": "BaseFuelNode",
        "methods": [
          "SetShouldSimulate",
          "ShouldSimulate",
          "SetFuel",
          "GetFuel",
          "GetMaxFuel",
          "GetFuelType",
          "GetFuelCapPointInfo",
          "OnInit",
          "OnFixedFrame",
          "OnFuelChanged"
        ]
      },
      {
        "class_name": "BaseHUDComponent",
        "methods": [
          "GetInfoDisplays",
          "RegisterInfoDisplay",
          "UnregisterInfoDisplay"
        ]
      },
      {
        "class_name": "BaseInfoDisplay",
        "methods": [
          "FindComponentInParentContainer",
          "OnInit",
          "UpdateValues",
          "OnStartDraw",
          "OnStopDraw"
        ]
      },
      {
        "class_name": "GroupInfoDisplay",
        "methods": [
          "GetInfoDisplays"
        ]
      },
      {
        "class_name": "HUDManagerComponent",
        "methods": [
          "IsHUDEnabled",
          "EnableHUD",
          "StartDrawing",
          "StopDrawing",
          "GetInfoDisplaysDrawn",
          "OnInit",
          "OnUpdate",
          "OnControlledEntityChanged"
        ]
      },
      {
        "class_name": "AIMessageSelectionMenuEntry",
        "methods": [
          "AIMessageSelectionMenuEntry",
          "SetAIMessage",
          "GetAIMessage"
        ]
      },
      {
        "class_name": "BaseScriptedSelectionMenuEntry",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "OnPerform",
          "GetEntryNameScript",
          "GetEntryDescriptionScript",
          "GetEntryIconPathScript",
          "GetUIInfoScript"
        ]
      },
      {
        "class_name": "BaseSelectionMenu",
        "methods": [
          "Update",
          "Open",
          "Close",
          "IsOpen",
          "ClearEntries",
          "AddEntry",
          "RemoveEntry",
          "ContainsEntry",
          "GetEntriesCount",
          "GetEntryList"
        ]
      },
      {
        "class_name": "BaseSelectionMenuEntry",
        "methods": [
          "CanBeShown",
          "CanBePerformed",
          "Perform",
          "GetEntryName",
          "GetEntryDescription",
          "GetEntryIconPath",
          "GetUIInfo"
        ]
      },
      {
        "class_name": "ScriptedSelectionMenu",
        "methods": [
          "OnOpen",
          "OnClose",
          "OnUpdate"
        ]
      },
      {
        "class_name": "ItemPreviewWidget",
        "methods": [
          "TryGetItemNodePositionInWidgetSpace"
        ]
      },
      {
        "class_name": "UIInfo",
        "methods": [
          "GetName",
          "SetName",
          "GetDescription",
          "SetDescription",
          "GetIconPath"
        ]
      },
      {
        "class_name": "BaseActionsManagerComponent",
        "methods": [
          "GetContext",
          "GetActionsList",
          "GetActionsCount",
          "GetContextList",
          "GetContextCount",
          "GetFirstAction",
          "FindAction",
          "IsEnabled",
          "AddUserActionEventListener",
          "RemoveUserActionEventListener",
          "NicifyGeneratedContextName"
        ]
      },
      {
        "class_name": "BaseInteractionHandlerComponent",
        "methods": [
          "IsInteractionAvailable",
          "GetSelectedAction",
          "GetVisibilityRange",
          "OnInit",
          "OnFrame",
          "OnAfterPostSimulate"
        ]
      },
      {
        "class_name": "BaseLightUserAction",
        "methods": [
          "GetLightManager"
        ]
      },
      {
        "class_name": "BaseUserAction",
        "methods": [
          "SetCannotPerformReason",
          "GetCannotPerformReason",
          "GetContextIndex",
          "SetActiveContext",
          "GetActiveContext",
          "CanBePerformed",
          "CanBeShown",
          "HasLocalEffectOnly",
          "CanBroadcast",
          "ShouldPerformPerFrame",
          "GetActionName",
          "GetActionDescription",
          "GetVisibilityRange",
          "SetActionDuration",
          "GetActionDuration",
          "GetActionProgress",
          "IsInProgress",
          "GetUIInfo",
          "GetOwner",
          "CanAggregate",
          "GetActionID",
          "SetSendActionDataFlag",
          "GetActionsManager",
          "OnRplSave",
          "OnRplLoad",
          "OnSaveActionData",
          "OnLoadActionData",
          "OnActionSelected",
          "OnActionDeselected"
        ]
      },
      {
        "class_name": "CompartmentUserAction",
        "methods": [
          "GetCompartmentSlot"
        ]
      },
      {
        "class_name": "DoorUserAction",
        "methods": [
          "GetDoorComponent"
        ]
      },
      {
        "class_name": "ExtBaseInteractionHandlerComponent",
        "methods": [
          "SetSelectedAction",
          "GetCurrentContext",
          "GetControlledEntity",
          "GetFilteredActions",
          "IsContextAvailable",
          "SetManualCollectionOverride",
          "GetManualCollectionOverride",
          "SetNearbyCollectionEnabled",
          "GetNearbyCollectionEnabled",
          "GetNearbyCollectionRadius",
          "GetNearbyAvailableContextList",
          "GetNearbyShowableContextList",
          "GetNearbyUnavailableContextList",
          "OnContextChanged",
          "OnPostFrame",
          "CanContextChange",
          "DoIntersectCheck",
          "GetIsInteractionAvailableScript",
          "GetCanInteractScript",
          "GetSelectedActionScript"
        ]
      },
      {
        "class_name": "ScriptedSignalUserAction",
        "methods": [
          "GetMinimumValue",
          "GetMaximumValue",
          "GetCurrentValue",
          "SetSignalValue",
          "GetActionProgressScript"
        ]
      },
      {
        "class_name": "ScriptedUserAction",
        "methods": [
          "Init",
          "PerformAction",
          "PerformContinuousAction",
          "OnConfirmed",
          "OnRejected",
          "OnActionCanceled",
          "OnActionStart",
          "GetActionNameScript",
          "GetActionDescriptionScript",
          "CanBePerformedScript",
          "CanBeShownScript",
          "HasLocalEffectOnlyScript",
          "CanBroadcastScript",
          "GetActionProgressScript"
        ]
      },
      {
        "class_name": "TurnOnUserAction",
        "methods": [
          "GetRadioBCComponent"
        ]
      },
      {
        "class_name": "UserActionContext",
        "methods": [
          "GetContextName",
          "GetName",
          "GetActionsList",
          "GetActionsCount",
          "GetTransformationModel",
          "GetTransformationWorld",
          "IsOmnidirectional",
          "GetRadius",
          "GetHeight",
          "IsCapsule",
          "GetOrigin",
          "ShouldCheckLineOfSight",
          "IsInVisibilityAngle",
          "GetUIInfo"
        ]
      },
      {
        "class_name": "VehicleDoorUserAction",
        "methods": [
          "GetDoorInfo",
          "GetDoorIndex"
        ]
      },
      {
        "class_name": "MeshObjectVolumeCalculator",
        "methods": [
          "GetVolumeFromColliders",
          "GetVolumeFromVisualMesh"
        ]
      },
      {
        "class_name": "BaseTree",
        "methods": [
          "OnDamage"
        ]
      },
      {
        "class_name": "BaseCompartmentManagerComponent",
        "methods": [
          "AreDoorOpen",
          "AreDoorFake",
          "GetDoorUser",
          "IsGetInAndOutBlockedByDoorUser",
          "GetOwner",
          "FindCompartment",
          "GetCompartments",
          "GetDoor",
          "GetDoorReference",
          "GetDoorInfo"
        ]
      },
      {
        "class_name": "BaseVehicle",
        "methods": [
          "GetDamageManager",
          "SetWreckModel",
          "IsAccessible"
        ]
      },
      {
        "class_name": "CarControllerComponent",
        "methods": [
          "GetWheeledSimulation",
          "IsThrottleTurbo",
          "GetHandBrake",
          "GetPersistentHandBrake",
          "SetPersistentHandBrake",
          "HasAutomaticGearbox",
          "GetFutureGear",
          "GetCurrentGear",
          "GetSimulation"
        ]
      },
      {
        "class_name": "CarControllerComponent_B",
        "methods": [
          "GetWheeledSimulation",
          "IsThrottleTurbo",
          "GetHandBrake",
          "GetPersistentHandBrake",
          "SetPersistentHandBrake",
          "HasAutomaticGearbox",
          "GetFutureGear",
          "GetCurrentGear",
          "GetSimulation"
        ]
      },
      {
        "class_name": "ExtBaseCompartmentSlot",
        "methods": [
          "GetAddUserActions",
          "IsPiloting",
          "GetOwner",
          "GetController",
          "GetType",
          "GetManager",
          "GetAvailableDoorIndices",
          "IsAvailableFromDoor",
          "PickDoorIndexForPoint",
          "AttachedOccupant",
          "GetOccupant",
          "GetUIInfo",
          "IsReserved",
          "IsReservedBy",
          "SetReserved",
          "GetPassengerPointInfo",
          "GetForceFreeLook",
          "GetMouseSteering",
          "ShouldEjectUnconsciousDeadCharacters",
          "SetCharacterIsStrappedIn",
          "ShouldCharactersFallOutWhenFlipped",
          "GetCompartmentMgrID",
          "GetCompartmentSlotID",
          "IsGetInLockedFor",
          "IsGetInLocked",
          "GetGetInAction",
          "GetGetOutAction",
          "GetJumpOutAction",
          "GetSwitchSeatAction",
          "GetPosition",
          "GetOverridenEntryPointInfo",
          "GetOverridenExitPointInfo",
          "ShouldSkipCharacterDoorAnimationsFromSeat",
          "GetCompartmentUniqueName",
          "DebugDrawPosition"
        ]
      },
      {
        "class_name": "HelicopterControllerComponent",
        "methods": [
          "GetAutohoverEnabled",
          "SetAutohoverEnabled",
          "GetWheelBrake",
          "GetPersistentWheelBrake"
        ]
      },
      {
        "class_name": "MotorExhaustEffectComponent",
        "methods": [
          "GetOwner",
          "TurnOff",
          "TurnOn",
          "GetEffectPosition",
          "GetSignalRpm",
          "GetSignalThrust",
          "GetRpmScaled",
          "OnInit",
          "OnDelete"
        ]
      },
      {
        "class_name": "TurretCompartmentSlot",
        "methods": [
          "IsDirectAimMode",
          "GetCharacterWeaponHandling"
        ]
      },
      {
        "class_name": "VehicleHelicopterSimulation",
        "methods": [
          "SetThrottle",
          "EngineStart",
          "EngineStop",
          "EngineIsOn",
          "RotorCount",
          "RotorSetForceScaleState",
          "RotorSetTorqueScaleState",
          "RotorGetTransform",
          "RotorGetAxis",
          "RotorGetRadius",
          "RotorGetSpinDirection",
          "RotorGetRPMTarget",
          "RotorGetRPM",
          "RotorGetState",
          "LandingGearGetType",
          "GetAltitudeAGL"
        ]
      },
      {
        "class_name": "VehicleWheeledSimulation",
        "methods": [
          "GetSpeedKmh",
          "ForceEnableSimulation",
          "GetSteering",
          "SetSteering",
          "GetClutch",
          "SetClutch",
          "GetBrake",
          "SetBreak",
          "GetThrottle",
          "SetThrottle",
          "GetGear",
          "SetGear",
          "IsHandbrakeOn",
          "EngineStart",
          "EngineStop",
          "EngineIsOn",
          "EngineGetRPMIdle",
          "EngineGetRPMPeakTorque",
          "EngineGetRPMPeakPower",
          "EngineGetRPMMax",
          "EngineGetRPM",
          "EngineGetRPMFeedback",
          "EngineGetLoad",
          "EngineGetPeakTorque",
          "EngineGetPeakTorqueState",
          "EngineSetPeakTorqueState",
          "EngineGetPeakPower",
          "EngineGetPeakPowerState",
          "EngineSetPeakPowerState",
          "GearboxGetEfficiency",
          "GearboxGetEfficiencyState",
          "GearboxSetEfficiencyState",
          "GearboxGearsCount",
          "GearboxForwardGearsCount",
          "WheelCount",
          "WheelGetIndex",
          "WheelGetName",
          "WheelGetPosition",
          "WheelHasContact",
          "WheelGetContactMaterial",
          "WheelGetContactPosition",
          "WheelGetContactNormal",
          "WheelGetContactEntity",
          "WheelGetContactLiquidState",
          "WheelGetContactLiquidMaterial",
          "WheelGetContactLiquidPosition",
          "WheelGetRPM",
          "WheelGetRadius",
          "WheelGetRadiusState",
          "WheelSetRadiusState",
          "WheelGetMass",
          "WheelGetMassState",
          "WheelSetMassState",
          "WheelGetLongitudinalSlip",
          "WheelGetLateralSlip",
          "WheelGetRollingDrag",
          "WheelSetRollingDrag",
          "WheelTyreGetRoughness",
          "WheelTyreGetRoughnessState",
          "WheelTyreSetRoughnessState",
          "WheelTyreGetLongitudinalFriction",
          "WheelTyreGetLongitudinalFrictionState",
          "WheelTyreSetLongitudinalFrictionState",
          "WheelTyreGetLateralFriction",
          "WheelTyreGetLateralFrictionState",
          "WheelTyreSetLateralFrictionState",
          "GetNoiseSteerSensitivity",
          "SetNoiseSteerSensitivity",
          "GetRoughnessSensitivity",
          "SetRoughnessSensitivity"
        ]
      },
      {
        "class_name": "VehicleWheeledSimulation_SA_B",
        "methods": [
          "GetSpeedKmh",
          "GetSteering",
          "SetSteering",
          "GetClutch",
          "SetClutch",
          "GetBrake",
          "SetBreak",
          "GetThrottle",
          "SetThrottle",
          "GetGear",
          "SetGear",
          "IsHandbrakeOn",
          "EngineStart",
          "EngineStop",
          "EngineIsOn",
          "EngineGetRPMIdle",
          "EngineGetRPMPeakTorque",
          "EngineGetRPMPeakPower",
          "EngineGetRPMMax",
          "EngineGetRPM",
          "EngineGetRPMFeedback",
          "EngineGetLoad",
          "EngineGetPeakTorque",
          "EngineGetPeakTorqueState",
          "EngineSetPeakTorqueState",
          "EngineGetPeakPower",
          "EngineGetPeakPowerState",
          "EngineSetPeakPowerState",
          "GearboxGetEfficiency",
          "GearboxGetEfficiencyState",
          "GearboxSetEfficiencyState",
          "GearboxGearsCount",
          "GearboxForwardGearsCount",
          "WheelCount",
          "WheelGetIndex",
          "WheelGetPosition",
          "WheelGetName",
          "WheelHasContact",
          "WheelGetContactMaterial",
          "WheelGetContactPosition",
          "WheelGetContactNormal",
          "WheelGetContactEntity",
          "WheelGetContactLiquidState",
          "WheelGetContactLiquidMaterial",
          "WheelGetContactLiquidPosition",
          "WheelGetRPM",
          "WheelGetRadius",
          "WheelGetRadiusState",
          "WheelSetRadiusState",
          "WheelGetMass",
          "WheelGetMassState",
          "WheelSetMassState",
          "WheelGetLongitudinalSlip",
          "WheelGetLateralSlip",
          "WheelGetRollingDrag",
          "WheelSetRollingDrag",
          "WheelTyreGetRoughness",
          "WheelTyreGetRoughnessState",
          "WheelTyreSetRoughnessState",
          "WheelTyreGetLongitudinalFriction",
          "WheelTyreGetLongitudinalFrictionState",
          "WheelTyreSetLongitudinalFrictionState",
          "WheelTyreGetLateralFriction",
          "WheelTyreGetLateralFrictionState",
          "WheelTyreSetLateralFrictionState",
          "GetNoiseSteerSensitivity",
          "SetNoiseSteerSensitivity",
          "GetRoughnessSensitivity",
          "SetRoughnessSensitivity"
        ]
      },
      {
        "class_name": "AttachmentSlotComponent",
        "methods": [
          "SetAttachment",
          "GetAttachedEntity",
          "GetAttachmentSlotType",
          "CanSetAttachment",
          "IsObstructing",
          "ShouldShowInInspection",
          "ShouldSetAttachment",
          "ShouldSetResource"
        ]
      },
      {
        "class_name": "BallisticTable",
        "methods": [
          "GetAimHeightOfNextProjectile",
          "GetHeightFromProjectile",
          "GetHeightFromProjectileSource",
          "GetDistanceOfProjectile",
          "GetDistanceOfProjectileSource"
        ]
      },
      {
        "class_name": "BaseCollimatorReticleColor",
        "methods": [
          "GetReticleColor",
          "GetGlowColor"
        ]
      },
      {
        "class_name": "BaseCollimatorReticleInfo",
        "methods": [
          "GetReticleIndex",
          "GetDoOverride",
          "GetAngularSize",
          "GetReticlePortion"
        ]
      },
      {
        "class_name": "BaseCollimatorSightsComponent",
        "methods": [
          "SetReticleSize",
          "GetReticleAngularSize",
          "GetReticlePortion",
          "GetNumReticles",
          "IsReticleValid",
          "GetReticleByIndex",
          "GetCurrentReticleShape",
          "ReticleNextShape",
          "ReticlePreviousShape",
          "SetReticleShapeByIndex",
          "GetNumColors",
          "IsColorValid",
          "GetColorByIndex",
          "GetCurrentColor",
          "ReticleNextColor",
          "ReticlePreviousColor",
          "GetNormalizedLightIntensity",
          "SetReticleColorByIndex",
          "UpdateReticlePosition",
          "OnPostInit",
          "UpdateReticleShapeIndex",
          "UpdateReticleColor",
          "UpdateReticleBrightnessScale",
          "UpdateReticleBrightness",
          "GetReticleBrightnessDay",
          "GetReticleBrightnessNight",
          "OnSightADSActivate",
          "OnSightADSDeactivated"
        ]
      },
      {
        "class_name": "BaseFireMode",
        "methods": [
          "GetBurstSize",
          "GetBurstType",
          "GetSalvoSize",
          "GetShotSpan",
          "GetUIName",
          "GetFiremodeType"
        ]
      },
      {
        "class_name": "BaseMagazineComponent",
        "methods": [
          "GetOwner",
          "IsUsed",
          "SetAmmoCount",
          "GetAmmoCount",
          "GetMaxAmmoCount",
          "GetMagazineWell",
          "GetUIInfo"
        ]
      },
      {
        "class_name": "BaseMuzzleComponent",
        "methods": [
          "GetMuzzleType",
          "GetNextFireModeIndex",
          "GetFireModesCount",
          "GetFireModeIndex",
          "GetFireModesList",
          "GetCurrentFireMode",
          "GetBarrelsCount",
          "GetCurrentBarrelIndex",
          "IsBarrelChambered",
          "IsCurrentBarrelChambered",
          "IsChamberingPossible",
          "ClearChamber",
          "IsDisposable",
          "GetAmmoCount",
          "GetMaxAmmoCount",
          "GetMagazine",
          "GetMagazineWell",
          "GetDefaultMagazineOrProjectileName",
          "GetUIInfo",
          "GetOpenBoltState",
          "GetOwner"
        ]
      },
      {
        "class_name": "BaseSightsComponent",
        "methods": [
          "GetOwner",
          "ForceSightsZeroValue",
          "ForceSightsZeroValueEnablel",
          "IsSightADSActive",
          "GetADSActivationPercentage",
          "GetADSDeactivationPercentage",
          "AreSightsValid",
          "GetSightsRearPosition",
          "GetSightsFrontPosition",
          "GetSightsDirection",
          "GetSightsDirectionUntransformed",
          "GetSightsOffset",
          "GetSightsTransform",
          "GetFOV",
          "GetCurrentSightsRange",
          "GetFOVInfo",
          "GetCameraRecoilAmount",
          "GetSightsPriority",
          "GetSightsSkipSwitch",
          "SetSightsVisibility",
          "GetPositionPointInfo",
          "GetRearPositionPointInfo",
          "GetFrontPositionPointInfo",
          "WB_GetZeroingData"
        ]
      },
      {
        "class_name": "BaseWeaponComponent",
        "methods": [
          "GetUIInfo",
          "GetWeaponSlotType",
          "GetWeaponType",
          "GetMuzzlesList",
          "CanBeEquipped",
          "GetCurrentMuzzle",
          "IsReloadPossible",
          "IsChamberingNecessary",
          "IsChamberingPossible",
          "GetCurrentMagazine",
          "GetCurrentFireModeName",
          "GetCurrentFireModeType",
          "GetCurrentSightsZeroing",
          "GetCurrentSightsZeroingTransform",
          "SightADSActivated",
          "SightADSDeactivated",
          "IsSightADSActive",
          "GetSights",
          "GetAttachedSights",
          "GetAttachments",
          "GetSightsAt",
          "HasSightsAt",
          "CanSetSights",
          "CanSwitchToSights",
          "FindAvailableSights",
          "SetSights",
          "SwitchNextSights",
          "SwitchPrevSights",
          "CanSwitchSights",
          "GetOwner",
          "GetInitialProjectileSpeed",
          "HasBipod",
          "GetBipod",
          "SetBipod"
        ]
      },
      {
        "class_name": "BaseWeaponManagerComponent",
        "methods": [
          "GetOwner",
          "Throw",
          "GetDefaultWeaponIndex",
          "GetCurrent",
          "GetCurrentWeapon",
          "GetCurrentGrenade",
          "GetCurrentSlot",
          "GetCurrentGrenadeSlot",
          "GetCurrentSights",
          "GetCurrentSightsIndex",
          "SelectWeapon",
          "SetSlotWeapon",
          "SetVisibleAllWeapons",
          "SetVisibleCurrentWeapon",
          "GetWeaponsSlots",
          "GetWeaponsList",
          "GetCurrentMuzzleTransform",
          "GetCurrentSightsTransform",
          "GetCurrentSightsCameraTransform",
          "OnWeaponChangeComplete",
          "OnWeaponChangeStarted"
        ]
      },
      {
        "class_name": "MagazineConfig",
        "methods": [
          "ReadMagazineConfig"
        ]
      },
      {
        "class_name": "MortarMuzzleComponent",
        "methods": [
          "LoadMortar"
        ]
      },
      {
        "class_name": "MuzzleComponent",
        "methods": [
          "GetDefaultMagazinePrefab"
        ]
      },
      {
        "class_name": "ScriptedSightsComponent",
        "methods": [
          "OnInit",
          "OnSightADSActivated",
          "OnSightADSPostFrame",
          "OnSightADSDeactivated",
          "GetADSActivationPercentageScript",
          "GetADSDeactivationPercentageScript"
        ]
      },
      {
        "class_name": "ScriptedWeaponAimModifier",
        "methods": [
          "OnInit",
          "OnActivated",
          "OnDeactivated",
          "OnCalculate",
          "OnWeaponFired"
        ]
      },
      {
        "class_name": "SwayWeaponAimModifier",
        "methods": [
          "GetCharacterWeaponSway"
        ]
      },
      {
        "class_name": "WeaponAnimationComponent",
        "methods": [
          "GetBipod",
          "HasBipod",
          "SetBipod",
          "FoldWeapon",
          "UnfoldWeapon",
          "IsFolded"
        ]
      },
      {
        "class_name": "WeaponComponent",
        "methods": [
          "ActivateAttachments"
        ]
      },
      {
        "class_name": "WeaponSlotComponent",
        "methods": [
          "GetSlotInfo",
          "SetWeapon",
          "GetWeaponEntity",
          "GetWeaponSlotIndex"
        ]
      },
      {
        "class_name": "WeatherStateTransitionManager",
        "methods": [
          "WeatherStateTransitionManager"
        ]
      },
      {
        "class_name": "BaseTimeAndWeatherManagerEntity",
        "methods": [
          "IsNightHour",
          "IsDayHour",
          "SetTimeEvent",
          "TryGetCompleteLocalWeather"
        ]
      },
      {
        "class_name": "LocalWeatherSituation",
        "methods": [
          "GetGlobalWindDir",
          "GetGlobalWindSpeed",
          "GetLocalWindSway",
          "GetRainIntensity",
          "GetWetness",
          "GetWaterAccumulation",
          "GetOvercast",
          "GetFog"
        ]
      },
      {
        "class_name": "SCR_AABB",
        "methods": [
          "DetectCollision2D",
          "SCR_AABB"
        ]
      },
      {
        "class_name": "SCR_DebugShapeManager",
        "methods": [
          "AddBBox",
          "AddLine",
          "AddPolyLine",
          "AddArrow",
          "AddCircleXZ",
          "AddCircleArcXZ",
          "AddCircleSliceXZ",
          "AddRectangle",
          "AddAABBRectangleXZ",
          "AddRectangleXZ",
          "AddSphere",
          "Remove",
          "Clear"
        ]
      },
      {
        "class_name": "SCR_ObstacleDetector",
        "methods": [
          "SetAvoidObjects",
          "SetAvoidObjectsDetectionRadius",
          "SetAvoidObjectsDetectionHeight",
          "SetAvoidRoads",
          "SetAvoidRivers",
          "SetAvoidPowerLines",
          "SetAvoidTracks",
          "SetAvoidForests",
          "SetAvoidLakes",
          "SetAvoidLand",
          "SetAvoidOcean",
          "SetAvoidLandOceanOffset",
          "RefreshObstaclesByAABB",
          "SetupObstacleArrays",
          "RefreshObstaclesByWorld",
          "RefreshObstaclesByAABB",
          "RefreshRoadObstaclesBySphere",
          "SetupObstacleArrays",
          "RefreshAreaObstaclesBySphere",
          "SetupObstacleArrays",
          "RefreshAreaObstaclesByWorld",
          "SetupObstacleArrays",
          "HasObstacle",
          "HasObstaclesList",
          "SetupObstacleArrays",
          "ClearObstacles",
          "BaseSplineQueryFilter",
          "AllSplineQueryFilter",
          "BaseSplineQueryFilter",
          "RoadSplineQueryFilter",
          "BaseSplineQueryFilter",
          "AreaSplineQueryFilter",
          "BaseSplineQueryFilter"
        ]
      },
      {
        "class_name": "SCR_ObstacleDetectorSplineInfo",
        "methods": [
          "IsNearRoadSplineXZ",
          "GetAndSetMinMaxWithClearance",
          "GetPoints2D3D",
          "SCR_ObstacleDetectorSplineInfo",
          "GetAndSetMinMaxWithClearance",
          "GetAndSetMinMaxWithClearance",
          "GetAndSetMinMaxWithClearance",
          "GetPoints2D3D",
          "GetPoints2D3D"
        ]
      },
      {
        "class_name": "SCR_Ray",
        "methods": [
          "Lerp"
        ]
      },
      {
        "class_name": "SCR_ShapeAnalyser",
        "methods": [
          "IsClosed",
          "IsSpline",
          "SCR_ShapeAnalyser"
        ]
      },
      {
        "class_name": "SCR_TimeMeasurementHelper",
        "methods": [
          "BeginMeasure",
          "EndMeasure",
          "GetMeasure",
          "PrintAllMeasures",
          "Reset",
          "SCR_TimeMeasurementHelper"
        ]
      },
      {
        "class_name": "ForestGeneratorCluster",
        "methods": [
          "ForestGeneratorCluster"
        ]
      },
      {
        "class_name": "ForestGeneratorCircleCluster",
        "methods": [
          "ForestGeneratorCircleCluster"
        ]
      },
      {
        "class_name": "ForestGeneratorStripCluster",
        "methods": [
          "ForestGeneratorStripCluster"
        ]
      },
      {
        "class_name": "WideForestGeneratorClusterObject",
        "methods": [
          "Rotate",
          "Rotate2D",
          "Vector",
          "GetMinDistanceFromLine"
        ]
      },
      {
        "class_name": "SmallForestGeneratorClusterObject",
        "methods": [
          "AdjustScale"
        ]
      },
      {
        "class_name": "MiddleForestGeneratorClusterObject",
        "methods": [
          "AdjustScale"
        ]
      },
      {
        "class_name": "BigForestGeneratorClusterObject",
        "methods": [
          "AdjustScale"
        ]
      },
      {
        "class_name": "ForestGeneratorOutline",
        "methods": [
          "ForestGeneratorOutline"
        ]
      },
      {
        "class_name": "ForestGeneratorTopLevel",
        "methods": [
          "ForestGeneratorTopLevel"
        ]
      },
      {
        "class_name": "ForestGeneratorBottomLevel",
        "methods": [
          "ForestGeneratorBottomLevel"
        ]
      },
      {
        "class_name": "ForestGeneratorDistaceAttribute",
        "methods": [
          "ForestGeneratorDistaceAttribute"
        ]
      },
      {
        "class_name": "SCR_ForestGeneratorTreeBase",
        "methods": [
          "AdjustScale"
        ]
      },
      {
        "class_name": "ForestGeneratorShapeImportData",
        "methods": [
          "GenerateAAB"
        ]
      },
      {
        "class_name": "ForestGeneratorTreeShort",
        "methods": [
          "AdjustScale"
        ]
      },
      {
        "class_name": "ForestGeneratorTreeMiddle",
        "methods": [
          "AdjustScale"
        ]
      },
      {
        "class_name": "ForestGeneratorTreeTall",
        "methods": [
          "AdjustScale"
        ]
      },
      {
        "class_name": "FallenTree",
        "methods": [
          "Rotate",
          "Rotate2D",
          "Vector",
          "GetMinDistanceFromLine"
        ]
      },
      {
        "class_name": "SCR_ForestGeneratorOutlinePositionChecker",
        "methods": [
          "IsPosDistanceEqualOrCloserThan",
          "IsPosWithinSetDistance",
          "GetOutlineDiffLines_PointAdded",
          "GetOutlineDiffLines_PointsRemoved",
          "GetOutlineDiffLines_PointsMoved",
          "SCR_ForestGeneratorOutlinePositionChecker"
        ]
      },
      {
        "class_name": "SCR_ForestGeneratorRectangle",
        "methods": [
          "GetBounds"
        ]
      },
      {
        "class_name": "ForestGeneratorEntity",
        "methods": [
          "OnLine",
          "Direction",
          "IsIntersect",
          "IsIntersect",
          "IsIntersect",
          "PreprocessTreeArray",
          "PreprocessAllTrees",
          "PreprocessTreeArray",
          "FillOutlineLinesAndPoints",
          "CalculateOutlineAnglesForPoints",
          "_WB_OnKeyChanged",
          "RegenerateForest",
          "OnShapeChangedInternal",
          "RegenerateForest",
          "OnShapeInitInternal",
          "RegenerateForest",
          "BeforeShapeTransformInternal",
          "OnShapeTransformInternal",
          "OnPointChangedInternal",
          "GetColorForTree",
          "MemoryCleanup",
          "RegenerateForest",
          "PreprocessAllTrees",
          "FillOutlineLinesAndPoints",
          "CalculateOutlineAnglesForPoints",
          "PopulateGrid",
          "MemoryCleanup",
          "DeletePreviousEntities",
          "DeleteAllChildren",
          "GenerateEntities",
          "RefreshObstacles",
          "ClearObstacles",
          "PopulateGrid",
          "Rectangulate",
          "GetWorldTransform",
          "GenerateForestGeneratorTrees",
          "Rectangulate",
          "NeedsCheck",
          "GenerateForestGeneratorTrees",
          "FindRectanglesInCircle",
          "GetPointOutsideOutlines",
          "GenerateCircleCluster",
          "GetWorldTransform",
          "SetObjectScale",
          "GenerateStripCluster",
          "GetWorldTransform",
          "SetObjectScale",
          "SafeRandomFloatInclusive",
          "SafeRandomInt",
          "GeneratePointInCircle",
          "GeneratePointInCircle",
          "GenerateRandomPointInRectangle",
          "GetIsAnyTreeValid",
          "GenerateOutlineTrees",
          "GetWorldTransform",
          "IsPointInProperDistanceFromLine",
          "IsEntryValid",
          "GenerateBottomTrees",
          "GetWorldTransform",
          "GenerateTreeInsideRectangle",
          "GenerateTopTrees",
          "GetWorldTransform",
          "GenerateTreeInsideRectangle",
          "GenerateTreeInsideRectangle",
          "SelectTreeToSpawn",
          "SetObjectScale",
          "SetObjectScale",
          "IsInOutline",
          "CalculateAreaForOutline",
          "CalculateAreaForOutline",
          "OnRegenerate",
          "RegenerateForest",
          "ForestGeneratorEntity"
        ]
      },
      {
        "class_name": "NotificationTestGeneratorEntity",
        "methods": [
          "NotificationTestGeneratorEntity",
          "SetEventMask",
          "EOnInit",
          "OnIntersectingShapeChangedXZInternal"
        ]
      },
      {
        "class_name": "PrefabGeneratorEntityClass",
        "methods": [
          "_WB_OnKeyChanged",
          "GetPos",
          "OnShapeInitInternal",
          "OnShapeChanged",
          "OffsetPointsMeta",
          "GetWorldTransform",
          "SamplePerlin",
          "GenerateAssetPoints",
          "GenerateMetaListLine",
          "GenerateMetaListSpline",
          "OnShapeChangedInternal",
          "GenerateMetaListLine",
          "OffsetPointsMeta",
          "GenerateAssetPoints",
          "DrawCurveDebug",
          "GenerateMetaListSpline",
          "OffsetPointsMeta",
          "GenerateAssetPoints",
          "DrawCurveDebug",
          "DrawCurveDebug",
          "Generate",
          "Generate",
          "GetWorldTransform",
          "DrawCurveDebug",
          "GetWorldTransform",
          "PerlinDebug",
          "PrefabGeneratorEntity"
        ]
      },
      {
        "class_name": "SCR_AreaGeneratorBaseEntity",
        "methods": [
          "RefreshObstacles",
          "SetAvoidOptions",
          "SetAvoidOptions",
          "HasObstacle",
          "HasObstaclesList",
          "ClearObstacles",
          "OnIntersectingShapeChangedXZInternal",
          "OnRegenerate",
          "OnRegenerate",
          "SCR_AreaGeneratorBaseEntity"
        ]
      },
      {
        "class_name": "SCR_GeneratorBaseEntity",
        "methods": [
          "_WB_OnParentChange",
          "DeleteAllChildren",
          "_WB_OnKeyChanged",
          "_WB_CanSelect",
          "OnShapeChangedInternal",
          "ResetGeneratorPosition",
          "OnShapeInitInternal",
          "ResetGeneratorPosition",
          "ResetGeneratorPosition",
          "DeleteAllChildren",
          "GetColor",
          "_WB_OnCreate",
          "ColorShape",
          "OnShapeInit",
          "ColorShape",
          "SCR_GeneratorBaseEntity"
        ]
      },
      {
        "class_name": "SCR_LineTerrainShaperGeneratorBaseEntity",
        "methods": [
          "OnShapeInitInternal",
          "UpdateTerrainSimple",
          "OnShapeTransformInternal",
          "UpdateTerrain",
          "OnShapeChangedInternal",
          "UpdateTerrain",
          "_WB_OnInit",
          "UpdateTerrainSimple",
          "_WB_OnKeyChanged",
          "UpdateTerrainSimple",
          "_WB_OnCreate",
          "UpdateTerrainSimple",
          "_WB_OnParentChange",
          "UpdateTerrainSimple",
          "_WB_OnDelete",
          "UpdateTerrainSimple",
          "UpdateTerrain",
          "UpdateTerrain",
          "SCR_LineTerrainShaperGeneratorBaseEntity"
        ]
      },
      {
        "class_name": "SCR_PowerlineGeneratorEntity",
        "methods": [
          "GenerateGeneratorJunctions",
          "GenerateGeneratorJunctions",
          "QueryGenerators",
          "IsJunctionPoint",
          "HasCommonPoint",
          "FindCommonJunctionsPoints",
          "GenerateJunctions",
          "GenerateJunctionOnPoint",
          "_WB_OnKeyChanged",
          "OnShapeInit",
          "GenerateJunctionOnPoint",
          "DeleteAllChildren",
          "GeneratePoles",
          "AttachJunctionOnPoint",
          "AttachJunctionOnPoint",
          "GenerateStartPole",
          "GeneratePole",
          "GeneratePole",
          "GeneratePole",
          "GeneratePole",
          "GenerateEndPole",
          "FindJunctionOnPoint",
          "AttachJunctionOnPoint",
          "AttachJunction",
          "AttachJunction",
          "AttachJunction",
          "GenerateEndPole",
          "ApplyRandomPitchAndRoll",
          "GenerateStartPole",
          "ApplyRandomPitchAndRoll",
          "GeneratePoleAt",
          "ApplyRandomPitchAndRoll",
          "GeneratePole",
          "ApplyRandomPitchAndRoll",
          "OnShapeChangedInternal",
          "OnShapeInit",
          "GetPowerPoleFromEntitySource",
          "QueryGenerators",
          "QueryGenerators",
          "QueryFilter",
          "AddPointData",
          "OnShapeInitInternal",
          "AddPointData",
          "GenerateGeneratorJunctions",
          "SCR_PowerlineGeneratorEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_TrackGeneratorEntity",
        "methods": [
          "SCR_TrackGeneratorEntity"
        ]
      },
      {
        "class_name": "SCR_WallGroup",
        "methods": [
          "GetRandomWall"
        ]
      },
      {
        "class_name": "SCR_WallGroupContainer",
        "methods": [
          "IsEmpty",
          "GetRandomWall",
          "PrepareWallGroups",
          "SCR_WallGroupContainer",
          "PrepareWallGroups"
        ]
      },
      {
        "class_name": "WallGeneratorEntity",
        "methods": [
          "MeasureEntity",
          "_WB_OnKeyChanged",
          "OffsetPoints",
          "GetWorldTransform",
          "OnShapeInitInternal",
          "Preprocess",
          "Generate",
          "Preprocess",
          "OffsetPoints",
          "OnShapeChangedInternal",
          "Preprocess",
          "Generate",
          "PlacePrefab",
          "GetWorldTransform",
          "Generate",
          "PlacePrefab",
          "PlacePrefab",
          "PlacePrefab",
          "WallGeneratorEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_BaseContainerStaticTitleField",
        "methods": [
          "SCR_BaseContainerStaticTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseContainerCustomTitleField",
        "methods": [
          "SCR_BaseContainerCustomTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseContainerCustomTitleFields",
        "methods": [
          "SCR_BaseContainerCustomTitleFields",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseContainerLocalizedTitleField",
        "methods": [
          "SCR_BaseContainerLocalizedTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseContainerLocalizedTitleFields",
        "methods": [
          "SCR_BaseContainerMultipleParametersTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseContainerResourceTitleField",
        "methods": [
          "SCR_BaseContainerResourceTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseContainerCustomTitleEnum",
        "methods": [
          "SCR_BaseContainerCustomTitleEnum",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "BaseContainerCustomEnumWithValue",
        "methods": [
          "BaseContainerCustomEnumWithValue",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseContainerCustomTitleFlags",
        "methods": [
          "SCR_BaseContainerCustomTitleFlags",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseContainerCustomTitleResourceName",
        "methods": [
          "SCR_BaseContainerCustomTitleResourceName",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseContainerCustomTitleObject",
        "methods": [
          "SCR_BaseContainerCustomTitleObject",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "BaseContainerCustomStringTitleField",
        "methods": [
          "BaseContainerCustomStringTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "BaseContainerCustomDoubleTitleField",
        "methods": [
          "BaseContainerCustomDoubleTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "BaseContainerCustomDoubleCheckTitleField",
        "methods": [
          "BaseContainerCustomDoubleCheckTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "BaseContainerCustomDoubleCheckIntResourceNameTitleField",
        "methods": [
          "BaseContainerCustomDoubleCheckIntResourceNameTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "BaseContainerCustomCheckIntTitleField",
        "methods": [
          "BaseContainerCustomCheckIntTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "BaseContainerCustomCheckIntWithFlagTitleField",
        "methods": [
          "BaseContainerCustomCheckIntWithFlagTitleField",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_BaseContainerCustomTitleUIInfo",
        "methods": [
          "SCR_BaseContainerCustomTitleUIInfo",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "UIColors",
        "methods": [
          "GetColorAttribute",
          "FormatColor",
          "CopyColor"
        ]
      },
      {
        "class_name": "UIConstants",
        "methods": [
          "GetActionDisplayStateAttribute",
          "FormatUnitPercentage",
          "FormatVersion",
          "GetFavoriteLabel"
        ]
      },
      {
        "class_name": "SCR_Global",
        "methods": [
          "IsScope2DEnabled",
          "GetPlatformName",
          "GetProfileName",
          "FixVector180",
          "GetVectorClampedToWorldBounds",
          "GetIntersectPointPlane",
          "GetDistForHUD",
          "FilterCallback_IgnoreNotInList",
          "FilterCallback_IgnoreCharactersWithChildren",
          "FilterCallback_IgnoreCharacters",
          "FilterCallback_IgnoreEntityWithChildren",
          "FilterCallback_IgnoreAllButEntityWithChildren",
          "FilterCallback_IgnoreAllButEntity",
          "FilterCallback_IgnoreAllButMeleeAttackable",
          "FilterCallback_IgnoreAllButBuildingRegions",
          "GetScaledStructuralDamage",
          "GetChildIndex",
          "SetEntityAsChildToParent",
          "ScaleVectorByVector",
          "GetGlobalYawForMat",
          "LerpMatrix",
          "GetLocalMatrix",
          "GetWorldBoundsForEntity",
          "GetWorldBoundsWithChildren",
          "GetWorldBoundsWithChildren",
          "GetObjectAtOffsetFromObject",
          "IntersectBoxPoint",
          "IntersectBoxSphere",
          "FractionOf",
          "ClampToGrid",
          "GetDirectionAngles",
          "fmod",
          "WorldClampMatrixWithinBounds",
          "VectorToRGBA255",
          "WorldClampObjectAndMatrixWithinBounds",
          "LocalClampObjectAndMatrixWithinBounds",
          "WorldSnapMatrix",
          "LocalSnapMatrix",
          "GetMatAndBoundsSurfaceAreaInDir",
          "GetSurfaceAreaInDir",
          "GetMatAndBoundsSurfaceAreaInDir",
          "GetEntityCenterLocal",
          "GetStringContainsInvalidCharacters",
          "DisplayEntityNameText",
          "SetHierarchyChildVelocity",
          "SetHierarchyChildVelocity",
          "SetHierarchyVelocity",
          "SetHierarchyChildVelocity",
          "SetHierarchyChildAngularVelocity",
          "SetHierarchyChildAngularVelocity",
          "SetHierarchyAngularVelocity",
          "SetHierarchyChildAngularVelocity",
          "SetHierarchyChildBodyActive",
          "SetHierarchyChildBodyActive",
          "SetHierarchyBodyActive",
          "SetHierarchyChildBodyActive",
          "IsAnyInherited",
          "ApplyDamage",
          "FindActionsManagerComponent",
          "FindEditorActionsManagerComponent",
          "GetModelAndRemapFromResource",
          "GetResourceContainsComponent",
          "IsEditMode",
          "IsEditMode",
          "ProjWorldEditorMouseScreenToWorld",
          "TeleportLocalPlayer",
          "TeleportPlayer",
          "DrawMatrix",
          "DrawTrace",
          "SetMaterial",
          "SetMaterial",
          "IsChangedMouseAndKeyboard",
          "GetRootWorld",
          "GetRootWorld",
          "GetResourceName",
          "GetFrequencies",
          "IsAdminRole",
          "IsAdmin",
          "IsAdmin",
          "GetPrefabAttributeResource"
        ]
      },
      {
        "class_name": "SCR_AddonTool",
        "methods": [
          "FromEnum",
          "GetResourceLastAddon",
          "GetAddonIndex",
          "StripFileSystem",
          "ToFileSystem",
          "GetAddonAbsolutePath",
          "GetAddonAbsolutePath"
        ]
      },
      {
        "class_name": "SCR_BaseContainerTools",
        "methods": [
          "CreateInstanceFromPrefab",
          "GetContainerClassName",
          "GetContainerClassName",
          "FindEntitySource",
          "FindComponentSource",
          "FindComponentSource",
          "FindComponentSource",
          "FindComponentSource",
          "FindComponentSource",
          "FindComponentSource",
          "FindComponentSources",
          "FindComponentSources",
          "FindComponentSources",
          "FindComponentSourcesOfClass",
          "GetComponentSourceChildren",
          "GetPrefabContainer",
          "GetPrefabResourceName",
          "GetTopMostAncestor",
          "IsKindOf",
          "IsKindOf",
          "IsKindOf",
          "GetWorldCoords",
          "GetLocalCoords",
          "GetArrayValue"
        ]
      },
      {
        "class_name": "SCR_DbgUI",
        "methods": [
          "Matrix",
          "Quat"
        ]
      },
      {
        "class_name": "SCR_Enum",
        "methods": [
          "HasFlag",
          "HasPartialFlag",
          "SetFlag",
          "RemoveFlag",
          "BitToIntArray",
          "IntToBitArray",
          "GetEnumName",
          "GetEnumNames",
          "GetEnumValues",
          "GetEnumValues",
          "GetPreviousEnumValue",
          "GetNextEnumValue",
          "GetEnumValues",
          "GetFlagValues",
          "GetRange",
          "GetList",
          "GetList",
          "GetFlags",
          "FlagsToString",
          "GetDefault",
          "GetDefault"
        ]
      },
      {
        "class_name": "SCR_HintSettings",
        "methods": [
          "AreHintsEnabled",
          "SetHintsEnabled",
          "GetCount",
          "AddCount",
          "LoadShownHints",
          "SaveShownHints",
          "SaveShownHints",
          "SaveShownHints"
        ]
      },
      {
        "class_name": "SCR_LocalizationTools",
        "methods": [
          "AppendParam",
          "EncodeFormat",
          "DecodeFormat",
          "SetTextFormat"
        ]
      },
      {
        "class_name": "SCR_Math",
        "methods": [
          "fmod",
          "LerpAngle",
          "DeltaAngle",
          "IntegerMask",
          "GetDistanceToStop",
          "GetSpeedToReachDistance",
          "GetSpeedToReachDistanceInTime",
          "GetMathRandomGenerator"
        ]
      },
      {
        "class_name": "SCR_Math2D",
        "methods": [
          "Get2DPolygon",
          "Get3DPolygon",
          "GetMinMaxPolygon",
          "GetPolygonArea",
          "GetRandomPointInPolygon",
          "GetRandomPointInRectangle",
          "GetRandomPointInRectangle",
          "GetRandomPointInRectangle",
          "GetRandomPointInSector",
          "IsPolygonValid",
          "GetPointLineSegmentDistanceSqr",
          "GetPointLineSegmentDistance",
          "CartesianToPolar",
          "PolarToCartesian",
          "TrigoRadianToDegree",
          "DegreeToTrigoRadian",
          "GetDegreeAngleDifference",
          "GetRadianAngleDifference",
          "GetRadianAngle",
          "GetLinesIntersection",
          "GenerateRandomPoint",
          "GenerateRandomPointInRadius"
        ]
      },
      {
        "class_name": "SCR_Math3D",
        "methods": [
          "GetFixedAxisVector",
          "RotateTowards",
          "MoveTowards",
          "FixEulerVector180",
          "Extrapolate",
          "IntersectPlane",
          "MatrixEqual",
          "IsMatrixEmpty",
          "IsMatrixIdentity",
          "Min",
          "Max",
          "GetDistanceFromSpline",
          "GetDistanceFromSplineXZ",
          "IsPointWithinSplineDistance",
          "IsPointWithinSplineDistanceXZ",
          "QuatAngleAxis",
          "QuatMultiply",
          "RotateAround",
          "QuatAngleAxis",
          "LookAt",
          "ClampMagnitude"
        ]
      },
      {
        "class_name": "SCR_ModHandlerLib",
        "methods": [
          "GetModListSize",
          "GetModListSize",
          "AllItemsCached",
          "AllModsUpdated",
          "SetupDebug",
          "ItemVersionMatch"
        ]
      },
      {
        "class_name": "SCR_PhysicsHelper",
        "methods": [
          "InitPhysicsHelper",
          "RemapInteractionLayer",
          "TraceSegment",
          "TraceSegmented",
          "GetOnTraceFinished",
          "ChangeSimulationState",
          "ChangeSimulationState"
        ]
      },
      {
        "class_name": "SCR_Rect2D",
        "methods": [
          "FromPoints",
          "FromPosAndSize",
          "FromRect",
          "HasInside",
          "HasInside",
          "Overlaps",
          "CheckIntervalIntersection",
          "GetCenter",
          "GetWidth",
          "GetHeight",
          "CheckIntervalIntersection",
          "ExpandAllDirections"
        ]
      },
      {
        "class_name": "SCR_RichTextTags",
        "methods": [
          "TagColor"
        ]
      },
      {
        "class_name": "SCR_Shape",
        "methods": [
          "GetBoundsPoints",
          "CreateBounds",
          "GetBoundsPoints",
          "CreateAreaMesh",
          "DrawCircle"
        ]
      },
      {
        "class_name": "SCR_WidgetTools",
        "methods": [
          "FindWidgetInChildren",
          "FindWidgetInChildren",
          "FindWidgetInParents",
          "FindHandlerInChildren",
          "FindHandlerInParents",
          "InHierarchy",
          "RemoveChildrenFromHierarchy",
          "FindMenu",
          "GetHierarchyLog",
          "FindHandlerOnWidget"
        ]
      },
      {
        "class_name": "SCR_WorldTools",
        "methods": [
          "TraceCylinder",
          "FindEmptyTerrainPosition",
          "FindAllEmptyTerrainPositions",
          "IsObjectUnderwater",
          "GetWaterSurfaceY"
        ]
      },
      {
        "class_name": "SCR_WeaponLib",
        "methods": [
          "GetCurrentWeaponComponent",
          "GetCurrentWeaponComponent",
          "CurrentWeaponHasComponent",
          "GetNextMuzzleID"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityComponentClass",
        "methods": [
          "SCR_GroupIdentityComponent_OnChange"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityComponent",
        "methods": [
          "GetMilitarySymbol",
          "GetGroupName",
          "UpdateIdentity",
          "UpdateIdentityBroadcast",
          "Rpc",
          "UpdateIdentityBroadcast",
          "OnGroupInit",
          "UpdateIdentity",
          "OnAgentAdded",
          "UpdateIdentity",
          "OnAgentRemoved",
          "UpdateIdentity",
          "RplSave",
          "RplLoad",
          "UpdateIdentityBroadcast",
          "OnPostInit",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityCore",
        "methods": [
          "GetNames",
          "GetSymbols",
          "GetSymbolRuleSet"
        ]
      },
      {
        "class_name": "SCR_GroupNameConfig",
        "methods": [
          "GetGroupName",
          "GetGroupName",
          "GetGroupNameID"
        ]
      },
      {
        "class_name": "SCR_GroupNameConfigEntry",
        "methods": [
          "GetName",
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_BaseContainerGroupNameConfigEntry",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbol",
        "methods": [
          "GetIdentity",
          "SetIdentity",
          "GetDimension",
          "SetDimension",
          "GetIcons",
          "SetIcons",
          "HasIcon",
          "GetAmplifier",
          "SetAmplifier",
          "Set",
          "CopyFrom",
          "IsEqual",
          "Log",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject",
          "OnRplSave",
          "OnRplLoad"
        ]
      },
      {
        "class_name": "SCR_BaseContainerMilitarySymbol",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbolConfig",
        "methods": [
          "CreateWidgets"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbolLayout",
        "methods": [
          "CreateLayout"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbolArea",
        "methods": [
          "CreateArea"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbolAreaTextures",
        "methods": [
          "CreateArea"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbolAreaImageSet",
        "methods": [
          "CreateArea"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbolAreaConflict",
        "methods": [
          "CreateArea"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbol_QuadBase",
        "methods": [
          "GetImageSetName",
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbol_QuadIcon",
        "methods": [
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbol_QuadAmplifier",
        "methods": [
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbol_TextureBase",
        "methods": [
          "GetTexture",
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbol_TextureIcon",
        "methods": [
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbol_TextureAmplifier",
        "methods": [
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_BaseContainerMilitaryLayout",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbolRuleSet",
        "methods": [
          "UpdateSymbol",
          "ProcessRules",
          "ProcessRules",
          "ProcessRules",
          "ProcessRules",
          "UpdateSymbol",
          "ProcessRules",
          "ProcessRules",
          "ProcessRules",
          "ProcessRules",
          "ProcessRules",
          "SCR_MilitarySymbolRuleSet"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRuleData",
        "methods": [
          "CreateData",
          "CreateData"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRule",
        "methods": [
          "GetPriority",
          "SetSymbol",
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRuleIdentity",
        "methods": [
          "SetSymbol"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRuleIdentityFaction",
        "methods": [
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRuleDimension",
        "methods": [
          "SetSymbol"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRuleIcon",
        "methods": [
          "SetSymbol"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRuleIconWeapon",
        "methods": [
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRuleIconLabel",
        "methods": [
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRuleIconVehicle",
        "methods": [
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRuleAmplifier",
        "methods": [
          "SetSymbol"
        ]
      },
      {
        "class_name": "SCR_GroupIdentityRuleAmplifierCount",
        "methods": [
          "IsCompatible"
        ]
      },
      {
        "class_name": "SCR_MilitarySymbolUIComponent",
        "methods": [
          "Update",
          "HandlerAttached",
          "Update",
          "Update",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_GroupFlagImageComponent",
        "methods": [
          "HandlerAttached",
          "Resize",
          "SetFlagButtonFromImageSet",
          "Resize",
          "SetFlagButtonFromTexture",
          "Resize",
          "Resize",
          "SetIsFromImageset",
          "GetIsFromImageset",
          "GetImageID",
          "SetImageID",
          "SetImageSet",
          "GetImageSet"
        ]
      },
      {
        "class_name": "SCR_GroupFlagSelectionMenu",
        "methods": [
          "OnMenuOpen",
          "InitGroupFlagSelectionMenu",
          "OnMenuUpdate",
          "OnConfirm",
          "CloseDialog",
          "CloseAnimated",
          "InitGroupFlagSelectionMenu",
          "SetGroupFlag",
          "CloseAnimated"
        ]
      },
      {
        "class_name": "SCR_GroupPreset",
        "methods": [
          "SetupGroup",
          "GetGroupName",
          "GetGroupFlag",
          "GetGroupSize",
          "GetRadioFrequency",
          "GetGroupDescription",
          "IsPrivate",
          "SetGroupName",
          "SetGroupSize",
          "SetRadioFrequency",
          "SetIsPrivate"
        ]
      },
      {
        "class_name": "SCR_GroupsManagerComponent",
        "methods": [
          "GetInstance",
          "GetGroupFlags",
          "GetOnPlayableGroupCreated",
          "IsProxy",
          "MovePlayerToGroup",
          "ClearRequests",
          "AddPlayerToGroup",
          "CreatePredefinedGroups",
          "SetGroupLeader",
          "SetNewGroupsAllowed",
          "RPC_DoSetNewGroupsAllowed",
          "Rpc",
          "RPC_DoSetNewGroupsAllowed",
          "SetCanPlayersChangeAttributes",
          "RPC_SetCanPlayersChangeAttributes",
          "Rpc",
          "RPC_SetCanPlayersChangeAttributes",
          "SetPrivateGroup",
          "FindGroup",
          "GetAllPlayableGroups",
          "GetOnPlayableGroupRemoved",
          "GetOnNewGroupsAllowedChanged",
          "GetOnCanPlayersChangeAttributeChanged",
          "GetPlayerGroup",
          "IsPlayerInAnyGroup",
          "GetAllPlayableGroups",
          "UpdateDebugUI",
          "GetAllPlayableGroups",
          "AssignGroupFrequency",
          "ClaimFrequency",
          "DeleteGroupDelayed",
          "OnGroupPlayerRemoved",
          "DeleteGroupDelayed",
          "OnGroupPlayerAdded",
          "CreateNewPlayableGroup",
          "CreateNewPlayableGroup",
          "GetCommunicationDevice",
          "TuneAgentsRadio",
          "OnGroupAgentAdded",
          "OnGroupAgentRemoved",
          "DeleteAndUnregisterGroup",
          "DeleteAndUnregisterGroup",
          "UnregisterGroup",
          "UnregisterGroup",
          "ReleaseFrequency",
          "RegisterGroup",
          "RPC_DoSetGroupFaction",
          "AssignGroupID",
          "OnPlayerFactionChanged",
          "OnGroupCreated",
          "TryFindEmptyGroup",
          "CreateNewPlayableGroup",
          "RegisterGroup",
          "AssignGroupFrequency",
          "AssignGroupID",
          "GetFirstNotFullForFaction",
          "CanCreateNewGroup",
          "CanPlayersChangeAttributes",
          "GetFreeFrequency",
          "ClaimFrequency",
          "IsFrequencyClaimed",
          "ReleaseFrequency",
          "RequestSetGroupSlave",
          "RPC_DoSetGroupSlave",
          "RpcWrapper",
          "Rpc",
          "RPC_DoSetGroupSlave",
          "RPC_DoRemoveAIMemberFromGroup",
          "GetAIMembers",
          "GetAIMembers",
          "AskRemoveAiMemberFromGroup",
          "RPC_DoRemoveAIMemberFromGroup",
          "Rpc",
          "AskAddAiMemberToGroup",
          "RPC_DoAddAIMemberToGroup",
          "Rpc",
          "RPC_DoAddAIMemberToGroup",
          "GetAIMembers",
          "OnAIMemberRemoved",
          "AskRemoveAiMemberFromGroup",
          "GetConfirmedByPlayer",
          "GetNewGroupsAllowed",
          "SetConfirmedByPlayer",
          "EOnFrame",
          "DeleteGroups",
          "DeleteGroups",
          "DeleteAndUnregisterGroup",
          "TunePlayersFrequency",
          "OnPlayerRegistered",
          "OnPlayerDisconnected",
          "OnPlayerReconnected",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "CreatePredefinedGroups",
          "SCR_GroupsManagerComponent"
        ]
      },
      {
        "class_name": "SCR_GroupSubMenu",
        "methods": [
          "OnTabCreate",
          "CreateAddGroupButton",
          "CreateJoinGroupButton",
          "CreateAcceptInviteButton",
          "CreateGroupSettingsButton",
          "SetupNameChangeButton",
          "SetupPrivateChecker",
          "OnTabShow",
          "UpdateGroupsMenu",
          "OnChatOpen",
          "SetAcceptButtonStatus",
          "Init",
          "GetOnJoingGroupRequestSent",
          "UpdateGroupsMenu",
          "SetAcceptButtonStatus",
          "InitGroups",
          "OnTabHide",
          "SetNavigationButtonVisibile",
          "CreateAddGroupButton",
          "CreateJoinGroupButton",
          "CreateAcceptInviteButton",
          "CreateGroupSettingsButton",
          "ChangeGroupPublicState",
          "OpenGroupSettingsDialog",
          "CreateNewGroup",
          "JoinSelectedGroup",
          "RequestJoinPrivateGroup",
          "SetSelectedGroup",
          "AcceptInvite",
          "SetAcceptButtonStatus",
          "SetAcceptButtonStatus",
          "OnConfirm",
          "OnChatOpen",
          "OnChatClosed",
          "OnAnimatorStateChanged",
          "SetupNameChangeButton",
          "SetupPrivateChecker",
          "OnPrivateCheckerClicked",
          "UpdatePlayerGroupController"
        ]
      },
      {
        "class_name": "SCR_GroupSubMenuBase",
        "methods": [
          "InitGroups",
          "UpdateGroups"
        ]
      },
      {
        "class_name": "SCR_GroupSubMenuPlayerlist",
        "methods": [
          "OnMenuUpdate",
          "OnTabCreate",
          "CreateAddGroupButton",
          "CreateJoinGroupButton",
          "CreateAcceptInviteButton",
          "CreateGroupSettingsButton",
          "CreateViewProfileButton",
          "SetupNameChangeButton",
          "SetupPrivateChecker",
          "OnTabShow",
          "UpdateViewProfileButton",
          "UpdateGroupsMenu",
          "SetAcceptButtonStatus",
          "UpdateGroupsMenu",
          "SetAcceptButtonStatus",
          "InitGroups",
          "OnTabHide",
          "OnTabRemove",
          "CreateNewGroup",
          "JoinSelectedGroup",
          "AcceptInvite",
          "SetAcceptButtonStatus",
          "SetAcceptButtonStatus",
          "CreateAddGroupButton",
          "CreateJoinGroupButton",
          "CreateAcceptInviteButton",
          "SetAcceptButtonStatus",
          "CreateGroupSettingsButton",
          "CreateViewProfileButton",
          "UpdateViewProfileButton",
          "UpdateViewProfileButton",
          "OnPlayerTileFocus",
          "UpdateViewProfileButton",
          "OnPlayerTileFocusLost",
          "UpdateViewProfileButton",
          "OnViewProfile",
          "ChangeGroupPublicState",
          "OpenGroupSettingsDialog",
          "SetupNameChangeButton",
          "SetupPrivateChecker",
          "OnPrivateCheckerClicked"
        ]
      },
      {
        "class_name": "SCR_PlayerTileButtonComponent",
        "methods": [
          "OnClick",
          "OnFocus",
          "OnFocusLost",
          "GetOnTileFocus",
          "GetOnTileFocusLost",
          "GetTilePlayerID",
          "SetTilePlayerID",
          "GetCharacter",
          "SetCharacter",
          "GetOptionsComboComponent",
          "SetOptionsComboBoxComponent",
          "SetOpacity"
        ]
      },
      {
        "class_name": "SCR_GroupTileButton",
        "methods": [
          "OnClick",
          "InitiateGroupTile",
          "SetGroupInfoColor",
          "FindParentMenu",
          "SetupSelectGroupFlagButton",
          "OnSelectGroupFlagButtonClicked",
          "RefreshPlayers",
          "SetupSelectGroupFlagButton",
          "FindParentMenu",
          "CheckLeaderOptions",
          "SetupPlayerTile",
          "SetupPlayerTile",
          "SetupJoinGroupButton",
          "SetupJoinGroupButton",
          "SetupPlayerTile",
          "SetupOptionsCombo",
          "SetBadgeColor",
          "SetIsPriority",
          "IsPriority",
          "OnPlayerTileFocus",
          "DisableConfirmButton",
          "OnPlayerTileFocusLost",
          "EnableConfirmButton",
          "SetGroupInfoColor",
          "GetGroupID",
          "OnFocus",
          "RefreshPlayers",
          "SetGroupID",
          "GetGroupFaction",
          "SetGroupFaction",
          "SetJoinGroupButton",
          "SetupOptionsCombo",
          "OnComboBoxConfirm",
          "GetGroupNameFormated",
          "CheckLeaderOptions",
          "GetOnGroupTileClicked",
          "GetOnPlayerTileFocus",
          "GetOnPlayerTileFocusLost",
          "EnableConfirmButton",
          "SetConfirmButtonStatus",
          "DisableConfirmButton",
          "SetConfirmButtonStatus",
          "SetConfirmButtonStatus",
          "SetBadgeColor",
          "ShowAIsInGroup",
          "SetupOptionsCombo"
        ]
      },
      {
        "class_name": "SCR_JoinRequestEntry",
        "methods": [
          "SetPlayerID",
          "GetPlayerID"
        ]
      },
      {
        "class_name": "SCR_PlayerControllerGroupComponent",
        "methods": [
          "GetPlayerControllerComponent",
          "GetLocalPlayerControllerGroupComponent",
          "GetGroupID",
          "RequestCreateGroup",
          "Rpc",
          "RequestKickPlayer",
          "Rpc",
          "RequestPromoteLeader",
          "Rpc",
          "RequestPrivateGroupChange",
          "Rpc",
          "PlayerRequestToJoinPrivateGroup",
          "Rpc",
          "ClearAllRequesters",
          "Rpc",
          "RPC_ClearAllRequesters",
          "GetPlayerID",
          "CanPlayerJoinGroup",
          "IsPlayerLeader",
          "IsPlayerLeaderOwnGroup",
          "IsPlayerLeader",
          "CanInvitePlayer",
          "WasAlreadyInvited",
          "AcceptJoinPrivateGroup",
          "InvitePlayer",
          "Rpc",
          "InviteThisPlayer",
          "AcceptInvite",
          "RequestJoinGroup",
          "GetOnInviteReceived",
          "OnGroupDeleted",
          "SetSelectedGroupID",
          "RPC_PlayerRequestToJoinPrivateGroup",
          "RPC_ConfirmJoinPrivateGroup",
          "RPC_CancelJoinPrivateGroup",
          "RPC_DoInvitePlayer",
          "RPC_AskInvitePlayer",
          "RPC_AskCreateGroup",
          "RPC_AskKickPlayer",
          "RPC_AskPromoteLeader",
          "RPC_ChangePrivateGroup",
          "RequestJoinGroup",
          "Rpc",
          "RPC_DoChangeGroupID",
          "OnGroupChangedDelayed",
          "RPC_AskJoinGroup",
          "Rpc",
          "InitiateComponents",
          "GetSelectedGroupID",
          "GetOnInviteAccepted",
          "GetOnGroupChanged",
          "GetOnInviteCancelled",
          "GetGroupInviteID",
          "SetGroupInviteID",
          "GetGroupInviteFromPlayerID",
          "GetGroupInviteFromPlayerName",
          "SetSelectedGroupID",
          "RequestSetCustomGroupDescription",
          "RPC_AskSetCustomDescription",
          "RequestSetGroupMaxMembers",
          "Rpc",
          "RPC_AskSetGroupMaxMembers",
          "RequestSetCustomFrequency",
          "Rpc",
          "RequestSetNewGroupsAllowed",
          "Rpc",
          "RequestSetCanPlayersChangeAttributes",
          "Rpc",
          "RequestSetCustomGroupName",
          "RPC_AskSetCustomName",
          "RPC_AskSetNewGroupsAllowed",
          "RPC_AskSetCanPlayersChangeAttributes",
          "RPC_AskSetFrequency",
          "RequestSetGroupFlag",
          "Rpc",
          "RPC_AskSetGroupFlag",
          "RPC_ClearAllRequesters",
          "RequestCreateSlaveGroup",
          "Rpc",
          "RPC_AskCreateSlaveGroup",
          "IsAICharacterInAnyGroup",
          "RequestAddAIAgent",
          "RPC_AskAddAIAgent",
          "AddAIToSlaveGroup",
          "AddAIToSlaveGroup",
          "RPC_AskRemoveAIAgent",
          "RemoveAiFromSlaveGroup",
          "RemoveAiFromSlaveGroup",
          "RequestRemoveAgent",
          "OnPostInit",
          "ConnectToDiagSystem",
          "OnDelete",
          "DisconnectFromDiagSystem",
          "GetPlayersGroup",
          "GetActualGroupFrequency",
          "EOnDiag",
          "ListGroupsFromFaction",
          "CreateAndJoinGroup",
          "ListGroupsFromFaction",
          "CreateAndJoinGroup",
          "RequestCreateGroup"
        ]
      },
      {
        "class_name": "SCR_RequestToJoinSubmenu",
        "methods": [
          "OnTabShow",
          "UpdateRequesters",
          "OnTabRemove",
          "GetOnJoinRequestRespond",
          "UpdateRequesters",
          "AcceptToJoinPrivateGroup",
          "RefuseJoinPrivateGroup",
          "InvokeOnJoinRequestRespond"
        ]
      },
      {
        "class_name": "SCR_ArrayHelper",
        "methods": [
          "GetWeightedIndex",
          "CopyReferencesFromTo",
          "Intersect",
          "Intersect",
          "RemoveDuplicates",
          "RemoveDuplicates",
          "Reverse",
          "Reverse",
          "Shuffle",
          "Shuffle"
        ]
      },
      {
        "class_name": "SCR_ComponentHelper",
        "methods": [
          "GetWeaponComponentSource",
          "GetWeaponComponentInfo",
          "GetInventoryItemComponentSource",
          "GetInventoryItemInfo"
        ]
      },
      {
        "class_name": "SCR_ConfigHelper",
        "methods": [
          "GetBaseContainerByPath",
          "GetChildBaseContainerByPath",
          "SplitConfigPath",
          "GetChildBaseContainerByPath",
          "GetChildBaseContainerByPath",
          "GetChildFromList",
          "SplitConfigPath",
          "GetGUID",
          "GetConfigObject"
        ]
      },
      {
        "class_name": "SCR_DateTimeHelper",
        "methods": [
          "GetDateTimeLocal",
          "GetDateTimeUTC",
          "GetDateString",
          "GetMonthString",
          "GetAbbreviatedMonthString",
          "GetTimeDifference",
          "GetHourMinuteSecondFromSeconds",
          "GetTimeDifferenceFormatted",
          "GetTimeDifference",
          "GetTimeLocal",
          "GetTimeUTC",
          "GetDayHourMinuteSecondFromSeconds",
          "GetHourMinuteSecondFromSeconds",
          "GetSecondsFromHourMinuteSecond",
          "ConvertDateIntoMinutes",
          "ConvertMinutesIntoDate"
        ]
      },
      {
        "class_name": "SCR_EntityHelper",
        "methods": [
          "FindComponent",
          "GetChildrenCount",
          "DeleteEntityAndChildren",
          "GetEntitySize",
          "GetEntityCenterWorld",
          "GetEntityRadius",
          "GetHierarchyEntityList",
          "GetHierarchyEntityList",
          "SnapToGround",
          "OrientUpToVector",
          "OnlyStaticCallback",
          "GetMainParent",
          "GetPlayer",
          "IsPlayer",
          "IsAPlayer",
          "SetHierarchyTransform",
          "SetHierarchyChildTransform",
          "SetHierarchyChildTransform",
          "SetHierarchyChildTransform",
          "GetRelativeLocalTransform",
          "GetEntityInHierarchy"
        ]
      },
      {
        "class_name": "SCR_FileIOHelper",
        "methods": [
          "CreateDirectory",
          "Copy",
          "WriteFileContent",
          "IsValidFileName",
          "SanitiseFileName",
          "IsWindowsBased"
        ]
      },
      {
        "class_name": "SCR_FormatHelper",
        "methods": [
          "FloatToStringNoZeroDecimalEndings",
          "FormatDateTime",
          "FormatDate",
          "FormatTime",
          "FormatTime",
          "FormatTime",
          "GetTimeFormatting",
          "ReturnTimeTypeString",
          "GetTimeFormatting",
          "GetTimeFormatting",
          "GetTimeFormattingHideSeconds",
          "GetTimeFormatting",
          "GetTimeFormattingHoursMinutes",
          "GetTimeFormattingMinutesSeconds",
          "GetTimeSinceEventString",
          "GetTimeSinceEventImprecise",
          "GetTimeSinceEventString",
          "GetTimeSinceEventString",
          "GetTimeSinceEventString",
          "FormatFrequencies"
        ]
      },
      {
        "class_name": "SCR_ParticleHelper",
        "methods": [
          "StopParticleEmissionAndLights"
        ]
      },
      {
        "class_name": "SCR_ExampleClass",
        "methods": [
          "ScriptInvokerVoidMethod",
          "ScriptInvokerIntMethod",
          "ScriptInvokerInt2Method",
          "ScriptInvokerInt3Method",
          "ScriptInvokerInt4Method",
          "ScriptInvokerInt5Method",
          "ScriptInvokerBoolMethod",
          "ScriptInvokerBool2Method",
          "ScriptInvokerBool3Method",
          "ScriptInvokerBool4Method",
          "ScriptInvokerBool5Method",
          "ScriptInvokerFloatMethod",
          "ScriptInvokerFloat2Method",
          "ScriptInvokerFloat3Method",
          "ScriptInvokerFloat4Method",
          "ScriptInvokerFloat5Method",
          "ScriptInvokerStringMethod",
          "ScriptInvokerString2Method",
          "ScriptInvokerString3Method",
          "ScriptInvokerString4Method",
          "ScriptInvokerString5Method",
          "ScriptInvokerEntityMethod",
          "ScriptInvokerEntity2Method",
          "ScriptInvokerVectorMethod",
          "ScriptInvokerWidgetMethod",
          "ScriptInvokerSCRScriptedWidgetComponentMethod",
          "ScriptInvokerBaseWorldMethod",
          "ScriptInvokerRplIdMethod",
          "ScriptInvokerEntityAndStorageMethod",
          "GetOnExampleEvent",
          "ExampleInvoke",
          "MyExampleFunction",
          "ExampleInsert",
          "ExampleRemove"
        ]
      },
      {
        "class_name": "SCR_ServicesStatusHelper",
        "methods": [
          "ScriptInvokerCommStatusMethod",
          "IsBackendEnabled",
          "IsBackendReady",
          "IsAuthenticated",
          "IsPinging",
          "RefreshPing",
          "ClearRefreshQueue",
          "ClearRefreshQueue",
          "RefreshPing_Internal",
          "RefreshPing_Internal",
          "StartStatusCheck",
          "StartStatusCheck",
          "CheckStatus",
          "CheckCommStatus",
          "CheckBackendStatus",
          "CheckCommStatus",
          "StartStatusCheck",
          "RefreshStatuses",
          "CheckBackendStatus",
          "CheckCommStatus",
          "RefreshPing_Internal",
          "StartStatusCheck",
          "ClearRefreshQueue",
          "GetLastReceivedCommStatus",
          "GetPingValue",
          "GetPingAge",
          "CanRefresh",
          "IsInRefreshCooldown",
          "IsPingingStuck",
          "RefreshStatuses",
          "DEBUG",
          "GetMainStatus",
          "GetStatusByName",
          "GetStatuses",
          "AreServicesReady",
          "GetStatusesAge",
          "SkipConsoleService",
          "IsServiceActive",
          "AreMultiplayerServicesAvailable",
          "IsServiceActive",
          "IsBackendConnectionAvailable",
          "GetOnCommStatusCheckFinished",
          "GetOnCommStatusCheckStart",
          "DEBUG"
        ]
      },
      {
        "class_name": "SCR_StringHelper",
        "methods": [
          "ContainsDigit",
          "ContainsUppercase",
          "ContainsLowercase",
          "CountOccurrences",
          "Filter",
          "IsFormat",
          "CheckCharacters",
          "Format",
          "IndexOf",
          "IndexOfFrom",
          "InsertAt",
          "IsEmptyOrWhiteSpace",
          "IsTranslationKey",
          "Join",
          "Join",
          "Join",
          "Join",
          "PadLeft",
          "PadRight",
          "ReplaceRecursive",
          "ReplaceTimes",
          "Reverse",
          "ContainsAny",
          "ContainsEvery",
          "StartsWithAny",
          "EndsWithAny",
          "Translate",
          "Translate",
          "TrimLeft",
          "TrimRight"
        ]
      },
      {
        "class_name": "SCR_TerrainHelper",
        "methods": [
          "GetTerrainY",
          "GetHeightAboveTerrain",
          "GetTerrainNormal",
          "GetTerrainBasis",
          "SnapToGeometry",
          "SnapToTerrain",
          "OrientToTerrain",
          "SnapAndOrientToTerrain"
        ]
      },
      {
        "class_name": "SCR_WidgetHelper",
        "methods": [
          "GetAllChildren",
          "GetAllChildren",
          "RemoveAllChildren",
          "ResizeToImage",
          "GetRootWidget",
          "GetWidgetOrChild",
          "GetScriptedComponent"
        ]
      },
      {
        "class_name": "SCR_BatteryHitZone",
        "methods": [
          "OnInit",
          "GetAllColliderNames",
          "OnDamageStateChanged"
        ]
      },
      {
        "class_name": "SCR_BleedingHitZoneParameters",
        "methods": [
          "SCR_BleedingHitZoneParameters"
        ]
      },
      {
        "class_name": "SCR_RegeneratingHitZone",
        "methods": [
          "CalculatePassiveRegenDPS",
          "GetHitZoneDamageOverTime",
          "CalculatePassiveRegenDPS",
          "OnHealthSet",
          "ToggleHitZoneAutoRegenOnHealthSet"
        ]
      },
      {
        "class_name": "SCR_CharacterHitZone",
        "methods": [
          "OnDamage",
          "ComputeEffectiveDamage",
          "GetArmorProtectionValue",
          "IsCovered",
          "OnDamageStateChanged",
          "UpdateSubmeshes",
          "SetWoundedSubmesh",
          "UpdateSubmeshes",
          "SetWoundedSubmesh",
          "GetMaxBleedingRate",
          "GetHitZoneGroup",
          "GetBodyPartToHeal"
        ]
      },
      {
        "class_name": "SCR_CharacterResilienceHitZone",
        "methods": [
          "OnDamage",
          "OnDamageStateChanged",
          "UpdateConsciousness",
          "UpdateConsciousness",
          "OnInit"
        ]
      },
      {
        "class_name": "SCR_CharacterBloodHitZone",
        "methods": [
          "OnDamageStateChanged",
          "UpdateConsciousness",
          "UpdateConsciousness",
          "OnInit",
          "GetTotalBleedingAmount",
          "AddBleedingHZToMap",
          "RemoveBleedingHZFromMap"
        ]
      },
      {
        "class_name": "SCR_CharacterHeadHitZone",
        "methods": [
          "OnInit",
          "OnDamageStateChanged",
          "SoundKnockout",
          "SoundKnockout"
        ]
      },
      {
        "class_name": "SCR_DamagePassRuleContainerTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_DestructibleHitzone",
        "methods": [
          "GetDestructionHandler",
          "OnInit",
          "GetSecondaryExplosionScale",
          "GetMaxHealth",
          "GetSecondaryExplosionPoint",
          "OnDamageStateChanged",
          "StopDestruction",
          "StartDestruction",
          "PlayDestructionSound",
          "PlayDestructionParticle",
          "StartDestruction",
          "StopDestruction",
          "FindParentVehicleDamageManager",
          "PlayDestructionSound",
          "PlayDestructionParticle",
          "spawnParams"
        ]
      },
      {
        "class_name": "SCR_EngineHitZone",
        "methods": [
          "GetEfficiency",
          "OnInit",
          "OnDamage",
          "OnDamageStateChanged",
          "UpdateEngineState",
          "UpdateEngineState"
        ]
      },
      {
        "class_name": "SCR_FlammableHitZone",
        "methods": [
          "OnInit",
          "InitFireRates",
          "GetHitZoneGroup",
          "OnMaxHealthChanged",
          "InitFireRates",
          "UpdateFireRate",
          "InitFireRates",
          "ComputeEffectiveDamage",
          "HandleIncendiaryDamage",
          "SetFireRate",
          "SetFireInstigator",
          "SetFireInstigator",
          "SetFireInstigator",
          "GetFireInstigator",
          "OnDamageStateChanged",
          "StartDestructionFire",
          "StopDestructionFire",
          "GetFireRate",
          "SetFireRate",
          "UpdateFireRate",
          "GetFireRateForState",
          "GetFireState",
          "SetFireState",
          "UpdateFireEffects",
          "SetFireInstigator",
          "GetFireStateForRate",
          "CalculateNewFireRate",
          "ApplyFireDamage",
          "SetDamageOverTime",
          "SetDamageOverTime",
          "UpdateFireRate",
          "StopFireRateUpdate",
          "ApplyFireDamage",
          "StopFireRateUpdate",
          "SetFireState",
          "StopFireRateUpdate",
          "LockFireRate",
          "StartDestructionFire",
          "StopDestructionFire",
          "SetFireState",
          "StartDestructionGroundFire",
          "StopDestructionFire",
          "spawnParams",
          "StopDestructionFire",
          "SetFireState",
          "UpdateFireEffects",
          "spawnParams",
          "FireLightOn",
          "FireLightOff",
          "FireLightOn",
          "FireLightOff",
          "GetSecondaryExplosionScale",
          "GetDamageOverTime"
        ]
      },
      {
        "class_name": "SCR_FuelHitZone",
        "methods": [
          "GetHitZoneGroup",
          "OnInit",
          "SetFuelNodeID",
          "UpdateFuelTankState",
          "GetFuelTank",
          "GetFuelTankID",
          "SetFuelNodeID",
          "UpdateFuelTankState",
          "OnDamageStateChanged",
          "UpdateFuelTankState",
          "GetSecondaryExplosionScale"
        ]
      },
      {
        "class_name": "SCR_GearboxHitZone",
        "methods": [
          "GetEfficiency",
          "OnInit",
          "OnDamageStateChanged",
          "UpdateGearboxState",
          "UpdateGearboxState"
        ]
      },
      {
        "class_name": "SCR_HitZone",
        "methods": [
          "GetHitZoneGroup",
          "GetOnHealthChanged",
          "GetOnDamageStateChanged",
          "GetOwner",
          "OnHealthSet",
          "OnDamageStateChanged",
          "ComputeEffectiveDamage",
          "DrawDebug",
          "ApplyDamagePassRules",
          "HandlePassedDamage"
        ]
      },
      {
        "class_name": "SCR_HitZoneStateSignal",
        "methods": [
          "RegisterSignal",
          "UnregisterSignal",
          "OnStateChanged",
          "DamageStateToSignalValue"
        ]
      },
      {
        "class_name": "SCR_LightHitZone",
        "methods": [
          "OnInit",
          "UpdateLightState",
          "OnDamageStateChanged",
          "UpdateLightState",
          "UpdateLightState"
        ]
      },
      {
        "class_name": "SCR_RotorHitZone",
        "methods": [
          "OnInit",
          "SetRotorIndex",
          "RotorHitChance",
          "OnDamageStateChanged",
          "UpdateRotorState",
          "GetRotorRadius",
          "GetBladeCount",
          "GetPointInfo",
          "GetRotorIndex",
          "SetRotorIndex",
          "UpdateRotorState",
          "GetEfficiency",
          "IsSpinning",
          "HasCollision",
          "DrawDebug"
        ]
      },
      {
        "class_name": "SCR_VehicleHitZone",
        "methods": [
          "GetHitZoneGroup"
        ]
      },
      {
        "class_name": "SCR_WheelHitZone",
        "methods": [
          "OnInit",
          "UpdateWheelState",
          "UpdateDamageSignal",
          "GetHitZoneGroup",
          "OnDamageStateChanged",
          "UpdateWheelState",
          "GetWheelIndex",
          "SetWheelIndex",
          "UpdateWheelState",
          "UpdateDamageSignal",
          "UpdateWheelState",
          "WakeUpPhysics",
          "UpdateDamageSignal",
          "PlayDestructionSound",
          "GetAllColliderNames",
          "WakeUpPhysics",
          "GetEfficiency"
        ]
      },
      {
        "class_name": "SCR_CharacterIdentityComponent",
        "methods": [
          "GetFormattedFullName",
          "GetFormattedFullName",
          "GetFormattedFullName"
        ]
      },
      {
        "class_name": "ActionsTuple",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_BaseInteractionDisplay",
        "methods": [
          "OnActionStart",
          "OnActionProgress",
          "OnActionFinish",
          "ShowDisplay",
          "HideDisplay",
          "SetDisplayData"
        ]
      },
      {
        "class_name": "ActionMenuElement",
        "methods": [
          "SetEnabled",
          "Set",
          "Show",
          "Hide",
          "SetProgress",
          "ActionMenuElement"
        ]
      },
      {
        "class_name": "SCR_ActionMenuInteractionDisplay",
        "methods": [
          "Create",
          "Collapse",
          "Destroy",
          "Update",
          "Collapse",
          "RunExpandTimer",
          "RunExpandedTimer",
          "Collapse",
          "Expand",
          "UpdateArrow",
          "UpdateArrow",
          "UpdateArrow",
          "UpdateArrow",
          "UpdateArrow",
          "UpdateArrow",
          "UpdateArrow",
          "UpdateArrow",
          "SetScroll",
          "GetSafeZone",
          "SetPosition",
          "SetScreenPosition",
          "SetScroll",
          "UpdateArrow",
          "RunExpandTimer",
          "Expand",
          "RunExpandedTimer",
          "Expand",
          "Collapse",
          "SetScroll",
          "OnActionStart",
          "OnActionProgress",
          "OnActionFinish",
          "DisplayUpdate",
          "Show",
          "Show",
          "Show",
          "SetPosition",
          "DisplayStartDraw",
          "Create",
          "Show",
          "DisplayStopDraw",
          "Destroy",
          "ShowDisplay",
          "Show",
          "HideDisplay",
          "Show",
          "SetDisplayData",
          "Destroy"
        ]
      },
      {
        "class_name": "SCR_InteractionHandlerComponent",
        "methods": [
          "RegisterActionListeners",
          "RemoveActionListeners",
          "ActionPerform",
          "ActionScroll",
          "OnControlledEntityChanged",
          "RemoveActionListeners",
          "RegisterActionListeners",
          "OnInit",
          "FindDisplay",
          "DoProcessInteraction",
          "GetCanInteractScript",
          "GetIsInteractionAvailableScript",
          "IsContextAvailable",
          "GetSelectedActionScript",
          "DoIntersectCheck",
          "OnContextChanged",
          "CanContextChange",
          "IsFreelookEnabled",
          "ShouldBeEnabled",
          "IsFreelookEnabled",
          "HandleOverride",
          "SetManualCollectionOverride",
          "SetManualCollectionOverride",
          "HandleVehicle",
          "HandleInspection",
          "OnPostFrame",
          "SetNearbyCollectionEnabled",
          "HandleOverride",
          "AggregateActions",
          "DoProcessInteraction",
          "SetSelectedAction",
          "SetSelectedAction",
          "AggregateActions",
          "GetRaycastThreshold",
          "CanBeShownInVehicle"
        ]
      },
      {
        "class_name": "SCR_PlacementCallback",
        "methods": [
          "OnComplete"
        ]
      },
      {
        "class_name": "SCR_ItemOfInterestAttribute",
        "methods": [
          "GetInterestType"
        ]
      },
      {
        "class_name": "SCR_ExplosiveChargeInventoryItemComponent",
        "methods": [
          "ShouldHideInVicinity",
          "IsLocked"
        ]
      },
      {
        "class_name": "SCR_MineInventoryItemComponent",
        "methods": [
          "PlacementDone",
          "ShouldHideInVicinity",
          "GetOnMinePlaced"
        ]
      },
      {
        "class_name": "SCR_PlaceableInventoryItemComponent",
        "methods": [
          "GetParentRplId",
          "GetParentNodeId",
          "PlacementDone",
          "RPC_DoPlaceItem",
          "PlayPlacedSound",
          "PlaceItem",
          "Rpc",
          "RPC_DoPlaceItem",
          "ValidateEntity",
          "FilterCallback",
          "ValidateEntity",
          "SetPlacementPosition",
          "OverridePlacementTransform",
          "ActivateOwner",
          "EnablePhysics",
          "PlayPlacedSound",
          "PlaceItemWithParentChange",
          "Rpc",
          "RPC_DoPlaceItemWithParentChange",
          "RPC_DoPlaceItemWithParentChange",
          "AttachToNewParent",
          "PlayPlacedSound",
          "AttachToNewParent",
          "AttachToNewParentWhenUnlocked",
          "AttachToNewParent",
          "AttachToNewParent",
          "OnParentDamageStateChanged",
          "DetachFromParent",
          "DetachFromParent",
          "StartWatchingParentSlots",
          "StopWatchingParentSlots",
          "OnDelete",
          "StopWatchingParentSlots"
        ]
      },
      {
        "class_name": "SCR_BaseLinkedStorageLogic",
        "methods": [
          "Init",
          "DelayedInit"
        ]
      },
      {
        "class_name": "SCR_GetLinkedStorageChildren",
        "methods": [
          "DelayedInit"
        ]
      },
      {
        "class_name": "SCR_MirrorLinkStorageToParent",
        "methods": [
          "DelayedInit"
        ]
      },
      {
        "class_name": "SCR_SetLinkedStorageToParent",
        "methods": [
          "DelayedInit"
        ]
      },
      {
        "class_name": "ScriptedBaseInventoryStorageComponent",
        "methods": [
          "UpdateUI"
        ]
      },
      {
        "class_name": "ScriptedInventoryStorageManagerComponent",
        "methods": [
          "OnItemAdded",
          "OnItemRemoved"
        ]
      },
      {
        "class_name": "SCR_AlternativeModel",
        "methods": [
          "GetAlternativeModel"
        ]
      },
      {
        "class_name": "SCR_InvEquipCB",
        "methods": [
          "OnComplete",
          "OnFailed"
        ]
      },
      {
        "class_name": "SCR_EquipNextGrenadeCB",
        "methods": [
          "OnComplete",
          "OnFailed"
        ]
      },
      {
        "class_name": "SCR_EquipGearCB",
        "methods": [
          "OnComplete"
        ]
      },
      {
        "class_name": "SCR_CharacterInventoryStorageComponent",
        "methods": [
          "GetMaxLoad",
          "GetWeaponStorage",
          "GetItemFromLoadoutSlot",
          "GetStorageFromLoadoutSlot",
          "HasStorageComponent",
          "GetStorages",
          "GetBlockedSlots",
          "GetStorageComponentFromEntity",
          "SetLootStorage",
          "GetLootStorage",
          "GetIsStorageShown",
          "SetStorageAsShown",
          "SetStorageAsHidden",
          "GetItemType",
          "ItemBelongsToSlot",
          "GetLastQuickSlotId",
          "GetDefaultQuickSlot",
          "IsInDefaultQuickSlot",
          "StoreItemToQuickSlot",
          "GetTurretWeaponsList",
          "InsertContainerIntoQuickslot",
          "InsertContainerIntoQuickslot",
          "RemoveItemFromQuickSlot",
          "RemoveItemFromQuickSlotAtIndex",
          "RemoveItemFromQuickSlotAtIndex",
          "GetItemFromQuickSlot",
          "GetContainerFromQuickslot",
          "GetCurrentItem",
          "GetSelectedItem",
          "GetCurrentItem",
          "UnequipCurrentItem",
          "DropCurrentItem",
          "OnAddedToSlot",
          "UpdateBlockedSlots",
          "EditArmoredAttributes",
          "OnRemovedFromSlot",
          "UpdateBlockedSlots",
          "EditArmoredAttributes",
          "UpdateBlockedSlots",
          "IsAreaBlocked",
          "EditArmoredAttributes",
          "HandleOnItemAddedToInventory",
          "HandleOnItemRemovedFromInventory",
          "RemoveItemFromQuickSlot",
          "CanEquipItem_Inventory",
          "CanUseItem",
          "CanUseItem_Inventory",
          "CanReloadCurrentWeapon",
          "CanUseItem",
          "CanReloadCurrentWeapon",
          "UseItem",
          "RemoveItemFromQuickSlot",
          "StoreItemToQuickSlot",
          "ReloadCurrentWeapon",
          "GetTurretWeaponSlots",
          "CanReloadCurrentWeapon",
          "ReloadCurrentWeapon",
          "GetPlayersWeapons",
          "GetCurrentCompartment",
          "GetCurrentTurretWeapon",
          "GetCurrentCharacterWeapon",
          "GetCurrentWeapon",
          "GetCurrentTurretWeapon",
          "GetCurrentCharacterWeapon",
          "SelectNextWeapon",
          "UseItem",
          "GetNextWeapon",
          "InitAsPlayer",
          "GetPlayersWeapons",
          "StoreItemToQuickSlot",
          "StoreItemToQuickSlot",
          "OnItemUsed",
          "RemoveItemFromQuickSlotAtIndex",
          "StoreItemToQuickSlot",
          "OnCompartmentEntered",
          "RemoveItemsFromWeaponQuickSlots",
          "StoreItemToQuickSlot",
          "RemoveItemsFromWeaponQuickSlots",
          "StoreItemToQuickSlot",
          "OnCompartmentLeft",
          "RemoveItemsFromWeaponQuickSlots",
          "StoreItemToQuickSlot",
          "RemoveItemsFromWeaponQuickSlots",
          "RemoveItemFromQuickSlotAtIndex",
          "GetTurretWeaponsList",
          "GetTurretWeaponSlots",
          "GetEntityIndexInQuickslots",
          "GetMaxLoad",
          "GetWeaponStorage",
          "GetItemFromLoadoutSlot",
          "GetStorageFromLoadoutSlot",
          "HasStorageComponent",
          "GetStorages",
          "GetStorageComponentFromEntity",
          "SetLootStorage",
          "GetLootStorage"
        ]
      },
      {
        "class_name": "SCR_FuelInventoryItemComponent",
        "methods": [
          "SCR_FuelInventoryItemComponent",
          "DelayedInit",
          "OnFuelAmountChanged",
          "SetAdditionalWeight"
        ]
      },
      {
        "class_name": "SCR_HoldableItemPredicate",
        "methods": [
          "SCR_HoldableItemPredicate",
          "IsMatch"
        ]
      },
      {
        "class_name": "SCR_BandagePredicate",
        "methods": [
          "SCR_BandagePredicate",
          "IsMatch"
        ]
      },
      {
        "class_name": "SCR_ApplicableMedicalItemPredicate",
        "methods": [
          "SCR_ApplicableMedicalItemPredicate",
          "IsMatch"
        ]
      },
      {
        "class_name": "SCR_ItemTypeSearchPredicate",
        "methods": [
          "SCR_ItemTypeSearchPredicate",
          "IsMatch"
        ]
      },
      {
        "class_name": "SCR_CommonItemTypeSearchPredicate",
        "methods": [
          "SCR_CommonItemTypeSearchPredicate",
          "IsMatch"
        ]
      },
      {
        "class_name": "SCR_CompatibleAttachmentPredicate",
        "methods": [
          "SCR_CompatibleAttachmentPredicate",
          "IsMatch"
        ]
      },
      {
        "class_name": "SCR_SalinePredicate",
        "methods": [
          "SCR_SalinePredicate",
          "IsMatch"
        ]
      },
      {
        "class_name": "SCR_MagazinePredicate",
        "methods": [
          "SCR_MagazinePredicate",
          "IsMatch"
        ]
      },
      {
        "class_name": "SCR_PrefabNamePredicate",
        "methods": [
          "IsMatch"
        ]
      },
      {
        "class_name": "SCR_PrefabDataPredicate",
        "methods": [
          "IsMatch"
        ]
      },
      {
        "class_name": "DropAndMoveOperationCallback",
        "methods": [
          "OnComplete",
          "OnDropComplete",
          "OnInsertComplete",
          "OnMoveComplete",
          "OnDeleteComplete",
          "OnFinalState",
          "OnDropComplete",
          "OnInsertComplete",
          "OnFinalState",
          "OnMoveComplete",
          "OnMoveComplete",
          "OnDeleteComplete",
          "OnFinalState",
          "OnDeleteComplete",
          "OnFinalState",
          "OnFinalState"
        ]
      },
      {
        "class_name": "SCR_ResupplyMagazinesCallback",
        "methods": [
          "Insert",
          "Start",
          "OnComplete",
          "OnComplete",
          "OnFailed",
          "OnFailed",
          "SCR_ResupplyMagazinesCallback"
        ]
      },
      {
        "class_name": "SCR_InventoryStorageManagerComponent",
        "methods": [
          "GetAllRootItems",
          "GetStorages",
          "GetStorages",
          "OnItemAdded",
          "OnItemRemoved",
          "ShouldForbidRemoveByInstigator",
          "PlayItemSound",
          "RpcAsk_PlaySound",
          "Rpc",
          "RpcDo_PlaySound",
          "RpcDo_PlaySound",
          "GetCharacterStorage",
          "CanInsertItemInActualStorage",
          "FindActualStorageForItemResource",
          "SetReturnCode",
          "SetReturnCodeDefault",
          "GetReturnCode",
          "GetTotalWeightOfAllStorages",
          "SetLootStorage",
          "InsertItem",
          "SetInventoryLocked",
          "PlayItemSound",
          "SetInventoryLocked",
          "SetInventoryLocked",
          "TryRemoveItemFromInventory",
          "SetInventoryLocked",
          "SetInventoryLocked",
          "CanMoveItem",
          "TrySwapItems",
          "TryInsertItem",
          "EquipWeapon",
          "PlayItemSound",
          "EquipWeaponAttachment",
          "EquipAny",
          "PlayItemSound",
          "EquipGadget",
          "EquipAny",
          "PlayItemSound",
          "EquipCloth",
          "EquipAny",
          "PlayItemSound",
          "EquipAny",
          "TryReplaceItem",
          "TryInsertItemInStorage",
          "TryMoveItemToStorage",
          "TryReplaceAndDropItemAtSlot",
          "TryReplaceItem",
          "TryInsertItemInStorage",
          "TryMoveItemToStorage",
          "TryReplaceItem",
          "EquipItem",
          "TryInsertItemInStorage",
          "TryReplaceItem",
          "IsResupplyMagazinesAvailable",
          "GetValidResupplyItemsAndCount",
          "ResupplyMagazines",
          "ResupplyMagazines",
          "GetValidResupplyItemsAndCount",
          "ResupplyMagazines",
          "EndResupplyMagazines",
          "CanResupplyMuzzle",
          "CanResupplyItem",
          "MoveItemToVicinity",
          "OpenInventory",
          "CloseInventory",
          "GetStorageToOpen",
          "SetStorageToOpen",
          "Action_OpenInventory",
          "SetStorageToOpen",
          "OpenInventory",
          "OnInventoryMenuClosed",
          "OnStorageAdded",
          "DebugListAllItemsInInventory",
          "GetItems",
          "RpcAsk_ServerToDeleteEntity",
          "AskServerToDeleteEntity",
          "Rpc",
          "EnablePostFrame",
          "GetHealthComponentCount",
          "GetBandageItem",
          "FindItem",
          "IsAnimationReady",
          "IsInventoryLocked",
          "SetInventoryLocked",
          "GetAllItems",
          "GetWeaponPrefabsOfType",
          "FindNextWeaponOfType",
          "FindItemsWithComponents",
          "GetWeaponPrefabsOfType",
          "SetReturnCode",
          "SetReturnCodeDefault",
          "GetReturnCode",
          "GetTotalWeightOfAllStorages",
          "SetLootStorage",
          "InsertItem",
          "EquipWeapon",
          "EquipGadget",
          "EquipCloth",
          "EquipAny",
          "EquipItem",
          "OpenInventory",
          "Action_OpenInventory",
          "OnStorageAdded",
          "EnablePostFrame",
          "GetHealthComponentCount",
          "GetBandageItem",
          "SCR_InventoryStorageManagerComponent"
        ]
      },
      {
        "class_name": "SCR_InventoryVehicleVisibilityAttribute",
        "methods": [
          "GetVisibleInVehicleOnly",
          "GetVisibleForVehicleFactionOnly"
        ]
      },
      {
        "class_name": "SCR_ItemAttributeCollection",
        "methods": [
          "GetVolume",
          "GetWeight",
          "IsDraggable",
          "IsVisible",
          "IsStackable",
          "SetSlotSize",
          "SetDraggable",
          "SetSlotType",
          "GetSlotType",
          "GetSlotSum",
          "GetItemSize",
          "GetQuickSlotItemSize",
          "GetItemSize",
          "OnInitCollection"
        ]
      },
      {
        "class_name": "SCR_Matrix",
        "methods": [
          "GetRow",
          "GetRow",
          "Debug",
          "GetRow",
          "GetElement",
          "SetElement",
          "InsertRow",
          "Reset",
          "SetElement",
          "SCR_Matrix"
        ]
      },
      {
        "class_name": "SCR_MatrixRow",
        "methods": [
          "CheckFreePlaceInRow",
          "ReservePlaceInRow",
          "ClearPlaceInRow",
          "Debug",
          "GetElement",
          "InsertElement",
          "SetElement",
          "SCR_Array",
          "SCR_MatrixRow"
        ]
      },
      {
        "class_name": "SCR_QuickslotBaseContainer",
        "methods": [
          "ActivateContainer",
          "HandleVisualization"
        ]
      },
      {
        "class_name": "SCR_QuickslotEntityContainer",
        "methods": [
          "SetEntity",
          "GetEntity",
          "SCR_QuickslotEntityContainer",
          "ActivateContainer",
          "HandleVisualization"
        ]
      },
      {
        "class_name": "SCR_QuickslotCommandContainer",
        "methods": [
          "SetCommandName",
          "GetCommandName",
          "ActivateContainer",
          "HandleVisualization",
          "SCR_QuickslotCommandContainer"
        ]
      },
      {
        "class_name": "SCR_SalineMovedCallback",
        "methods": [
          "OnComplete",
          "DestroySalineBag"
        ]
      },
      {
        "class_name": "SCR_SalineStorageComponent",
        "methods": [
          "AddSalineBagToSlot",
          "OnAddedToSlot",
          "OnRemovedFromSlot",
          "ShouldPreviewAttachedItems"
        ]
      },
      {
        "class_name": "SCR_TourniquetMovedCallback",
        "methods": [
          "OnComplete"
        ]
      },
      {
        "class_name": "SCR_TourniquetStorageComponent",
        "methods": [
          "AddTourniquetToSlot",
          "RemoveTourniquetFromSlot",
          "OnAddedToSlot",
          "OnRemovedFromSlot",
          "GetOnTourniquetMoved"
        ]
      },
      {
        "class_name": "SCR_UniversalInventoryStorageComponent",
        "methods": [
          "GetMaxLoad",
          "GetAttributeCollection",
          "GetItemComponent",
          "IsAdditionalWeightOk",
          "CanStoreItem",
          "CanStoreResource",
          "CanReplaceItem",
          "OnRemovedFromSlot",
          "OnAddedToSlot",
          "GetLinkedStorages",
          "AddLinkedStorage",
          "IsStorageALinkedChild",
          "OnManagerChanged",
          "SCR_UniversalInventoryStorageComponent",
          "GetAttributeCollection",
          "GetItemComponent",
          "IsVolumeOk",
          "IsWeightOk",
          "CanStoreItem",
          "CanStoreResource",
          "CanRemoveItem",
          "OnRemovedFromSlot",
          "OnAddedToSlot",
          "OnManagerChanged"
        ]
      },
      {
        "class_name": "SCR_BaseGroup",
        "methods": [
          "CanBePerformedScript",
          "GetEntryNameScript",
          "GetUIInfoScript",
          "Count",
          "SelectNext",
          "Select",
          "SelectPrevious",
          "Select",
          "Select",
          "OnPerform",
          "GetOwner",
          "GetSelectedEntry",
          "SCR_BaseGroup"
        ]
      },
      {
        "class_name": "SCR_BaseGroupEntry",
        "methods": [
          "OnDonePerform"
        ]
      },
      {
        "class_name": "SCR_GroupWeaponEntry",
        "methods": [
          "OnPerform",
          "OnDonePerform",
          "CanBePerformedScript",
          "GetUIInfoScript",
          "SCR_GroupWeaponEntry"
        ]
      },
      {
        "class_name": "CustomStringTableItem",
        "methods": [
          "GetTargetPrefix"
        ]
      },
      {
        "class_name": "SCR_BaseInteractiveLightComponentClass",
        "methods": [
          "GetLightLV",
          "GetDistanceAttenuation",
          "IsGradualLightningOn"
        ]
      },
      {
        "class_name": "SCR_BaseInteractiveLightComponent",
        "methods": [
          "GetInitialState",
          "IsOn",
          "ToggleLight",
          "TurnOn",
          "TurnOff",
          "TurnOn",
          "TurnOff",
          "RemoveLights",
          "EOnVisible",
          "UpdateMaterialEmissivity",
          "UpdateLightEmissivity",
          "UpdateMaterialEmissivity",
          "RplSave",
          "RplLoad",
          "ToggleLight",
          "OnPostInit",
          "RemoveLights",
          "OnDelete",
          "RemoveLights"
        ]
      },
      {
        "class_name": "SCR_BaseLightComponent",
        "methods": [
          "CreateLight"
        ]
      },
      {
        "class_name": "SCR_BaseLightData",
        "methods": [
          "GetLightOffset",
          "GetLightColor",
          "GetLightConeDirection",
          "GetLightConeAngle",
          "GetEffectRadius",
          "GetIntensityClipEV",
          "GetLensFlareOffset",
          "GetLensFlareScale",
          "GetFlareType",
          "GetLightType",
          "GetLightFlag"
        ]
      },
      {
        "class_name": "SCR_MapConfigComponent",
        "methods": [
          "GetGadgetMapConfig",
          "GetSpawnMapConfig",
          "GetEditorMapConfig"
        ]
      },
      {
        "class_name": "SCR_ToolMenuButtonComponent",
        "methods": [
          "SetText",
          "SetTextVisible",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_MapCompassUI",
        "methods": [
          "SetWidgetNames",
          "InitPositionVectors",
          "UpdateCompassEntity",
          "OnInputQuickBind",
          "SetVisible",
          "GetPrefabResource",
          "SetVisible",
          "UpdateCompassEntity",
          "Init",
          "Update",
          "SCR_MapCompassUI"
        ]
      },
      {
        "class_name": "SCR_MapCompassUIDeploy",
        "methods": [
          "GetGadgetForFaction",
          "GetPrefabResource",
          "GetGadgetForFaction",
          "FindRelatedGadget"
        ]
      },
      {
        "class_name": "SCR_MapDebugUI",
        "methods": [
          "ShowUnits",
          "SetPropsVisible",
          "GetUnitName",
          "SetPropsVisible",
          "SetPropsVisible",
          "GetUnitName",
          "PanToPlayer",
          "ZoomToPPU1",
          "ZoomLayerUp",
          "ZoomLayerDown",
          "ToggleLight",
          "UpdateUnits",
          "OnRadialMenuOpen",
          "Update",
          "UpdateUnits",
          "OnMapOpen",
          "ShowUnits",
          "Init"
        ]
      },
      {
        "class_name": "MapLine",
        "methods": [
          "CreateLine",
          "OnButtonClick",
          "DestroyLine",
          "OnButtonFocus",
          "OnButtonFocusLost",
          "OnMouseEnter",
          "OnButtonFocus",
          "OnMouseLeave",
          "OnButtonFocusLost",
          "SetButtonVisible",
          "DestroyLine",
          "UpdateLine",
          "MapLine"
        ]
      },
      {
        "class_name": "SCR_MapDrawingUI",
        "methods": [
          "IsUsingGamepad",
          "ToggleDrawMode",
          "SetDrawMode",
          "SetDrawMode",
          "SetDrawMode",
          "UpdateLineCount",
          "UpdateLineCount",
          "OnMapClick",
          "SetDrawMode",
          "OnMapModifierClick",
          "OnMapPan",
          "OnMapPanEnd",
          "OnEntryToggled",
          "SetDrawMode",
          "OnInputQuickBind",
          "ToggleDrawMode",
          "OnMapOpen",
          "OnMapClose",
          "SetDrawMode",
          "Update",
          "Init"
        ]
      },
      {
        "class_name": "SCR_MapJournalUI",
        "methods": [
          "Init",
          "OnMapOpen",
          "GetJournalForPlayer",
          "ToggleVisible",
          "ShowEntryByID",
          "OnPlayerFactionResponse",
          "GetJournalForPlayer",
          "ToggleVisible",
          "Disable",
          "GetJournalForPlayer",
          "ShowEntryByID",
          "ShowEntry",
          "ShowEntry",
          "FocusOnFirstEntry",
          "IsVisible"
        ]
      },
      {
        "class_name": "SCR_MapJournalUIButton",
        "methods": [
          "SetEntry",
          "ShowEntry",
          "GetId"
        ]
      },
      {
        "class_name": "SCR_MapLightUI",
        "methods": [
          "ToggleActive",
          "ActivateLight",
          "DeactivateLight",
          "ActivateLight",
          "UpdateTime",
          "UpdateLightMode",
          "DeactivateLight",
          "UpdateLightMode",
          "UpdateLightMode",
          "UpdateTime",
          "UpdatePosition",
          "Init",
          "OnMapOpen",
          "ActivateLight",
          "UpdateLightMode",
          "OnMapClose",
          "DeactivateLight",
          "Update",
          "UpdateTime",
          "UpdatePosition"
        ]
      },
      {
        "class_name": "SCR_MapRadialUI",
        "methods": [
          "ScriptInvokerEntrySelectedMethod",
          "ScriptInvokerEntryPerformedMethod",
          "GetOnMenuInitInvoker",
          "GetOnEntrySelectedInvoker",
          "GetOnEntryPerformedInvoker",
          "GetRadialController",
          "GetRadialDisplay",
          "GetInstance",
          "GetMenuWorldPosition",
          "OnInputMenuOpen",
          "InputOpenMenu",
          "OnControllerTakeControl",
          "OnControllerChanged",
          "OpenMenu",
          "CloseMenu",
          "OnEntrySelected",
          "OnEntryPerformed",
          "InsertCustomRadialEntry",
          "InsertCustomRadialCategory",
          "AddRadialEntry",
          "AddRadialCategory",
          "RemoveRadialEntry",
          "Update",
          "OnMapOpen",
          "OnMapClose",
          "CloseMenu",
          "OnControllerChanged",
          "SCR_MapRadialUI"
        ]
      },
      {
        "class_name": "SCR_MapRTWBaseUI",
        "methods": [
          "SetWidgetNames",
          "InitPositionVectors",
          "GetPrefabResource",
          "FindRelatedGadget",
          "ToggleVisible",
          "SetVisible",
          "SetVisible",
          "SetVisible",
          "SetFrameVisible",
          "SetupRTWorld",
          "SpawnPrefab",
          "InitPositionVectors",
          "SetSize",
          "SetSize",
          "OnDragWidget",
          "OnActivateTool",
          "SetSize",
          "OnMapOpen",
          "SetWidgetNames",
          "SetVisible",
          "OnMapClose",
          "SetVisible",
          "SCR_MapRTWBaseUI"
        ]
      },
      {
        "class_name": "SCR_MapRulerUI",
        "methods": [
          "ToggleVisible",
          "SetVisible",
          "SetVisible",
          "SetVisible",
          "SetSize",
          "SetSize",
          "OnMapZoom",
          "SetSize",
          "OnMapPan",
          "OnDragWidget",
          "OnActivateTool",
          "SetSize",
          "SetSize",
          "OnInputQuickBind",
          "ToggleVisible",
          "OnMapOpen",
          "SetVisible",
          "OnMapClose",
          "SetVisible",
          "Init",
          "Update",
          "SCR_MapRulerUI"
        ]
      },
      {
        "class_name": "SCR_MapTaskListUI",
        "methods": [
          "OnMapOpen",
          "OnMapClose",
          "Init",
          "SetActive",
          "SetMapContextAllowed",
          "ToggleTaskList",
          "RefreshTaskList",
          "OnMapTaskListClicked",
          "HandleTaskList",
          "HandleTaskList",
          "ToggleTaskList",
          "ToggleTaskList",
          "ToggleTaskList",
          "OnInputDeviceIsGamepad",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_MapElementMoveComponent",
        "methods": [
          "ScriptInvokerWidgetBool"
        ]
      },
      {
        "class_name": "SCR_MapToolInteractionUI",
        "methods": [
          "GetOnDragWidgetInvoker",
          "GetOnActivateToolInvoker",
          "ActivateAction",
          "StartDrag",
          "StartRotate",
          "CanBeManipulated",
          "EndDrag",
          "EndRotate",
          "DragWidget",
          "RotateWidget",
          "OnMapOpen",
          "OnMapClose",
          "Update",
          "DragWidget",
          "RotateWidget"
        ]
      },
      {
        "class_name": "SCR_MapToolEntry",
        "methods": [
          "GetOnEntryToggledInvoker",
          "SetActive",
          "UpdateVisual",
          "IsEntryActive",
          "SetEnabled",
          "UpdateVisual",
          "IsEntryEnabled",
          "SetVisible",
          "UpdateVisual",
          "SetButtonSoundsDisabled",
          "UpdateVisual",
          "SetColor",
          "SetBorderColor",
          "GetImageSet",
          "OnClick",
          "SCR_MapToolEntry"
        ]
      },
      {
        "class_name": "SCR_MapToolMenuUI",
        "methods": [
          "GetDefaultButtonName",
          "RegisterToolMenuEntry",
          "RegisterEntryCustom",
          "PopulateToolMenu",
          "SetUIVisible",
          "OnFocusToolMenu",
          "OnFreeCursor",
          "SetToolMenuFocused",
          "OnMapPan",
          "SetToolMenuFocused",
          "SetUIVisible",
          "SetToolMenuFocused",
          "OnMouseEnter",
          "SetToolMenuFocused",
          "OnMouseLeave",
          "SetToolMenuFocused",
          "OnMapOpen",
          "PopulateToolMenu",
          "OnMapClose",
          "IsFocused",
          "SCR_MapToolMenuUI"
        ]
      },
      {
        "class_name": "SCR_MapUIBaseComponent",
        "methods": [
          "OnMapOpen",
          "OnMapClose",
          "IsConfigDisabled",
          "SetActive",
          "Init",
          "Update",
          "IsToolMenuFocused",
          "SCR_MapUIBaseComponent"
        ]
      },
      {
        "class_name": "SCR_MapUIElementContainer",
        "methods": [
          "Init",
          "AddSpawnPoint",
          "ShowSpawnPoint",
          "UpdateIcons",
          "RemoveSpawnPoint",
          "HideSpawnPoint",
          "UpdateIcons",
          "OnSpawnPointFactionChange",
          "AddSpawnPoint",
          "RemoveSpawnPoint",
          "UpdateSpawnPointName",
          "HideSpawnPoint",
          "OnPlayerFactionResponse",
          "RemoveAllIcons",
          "InitSpawnPoints",
          "InitTaskMarkers",
          "OnMapOpen",
          "InitSpawnPoints",
          "InitTaskMarkers",
          "OnMapClose",
          "OnMapPan",
          "UpdateIcons",
          "UpdateIcons",
          "InitSpawnPoints",
          "ShowSpawnPoint",
          "UpdateIcons",
          "ShowSpawnPoint",
          "InitTaskMarkers",
          "InitTaskIcon",
          "UpdateIcons",
          "InitTaskIcon",
          "OnTaskAdded",
          "InitTaskIcon",
          "UpdateIcons",
          "OnTaskRemoved",
          "RemoveAllIcons",
          "RemoveIcon",
          "FindSpawnPointIconById",
          "OnElementSelected",
          "OnPlayerGroupChanged",
          "RemoveSpawnPoint",
          "AddSpawnPoint",
          "FindSpawnPoint",
          "GetOnSpawnPointSelected",
          "GetOnElementSelected"
        ]
      },
      {
        "class_name": "SCR_MapWatchUI",
        "methods": [
          "SetWidgetNames",
          "InitPositionVectors",
          "UpdatePreviewEntity",
          "OnInputQuickBind",
          "SetVisible",
          "GetPrefabResource",
          "SetVisible",
          "Init",
          "Update",
          "SCR_MapWatchUI"
        ]
      },
      {
        "class_name": "SCR_MapWatchUIDeploy",
        "methods": [
          "GetGadgetForFaction",
          "GetPrefabResource",
          "GetGadgetForFaction",
          "FindRelatedGadget"
        ]
      },
      {
        "class_name": "SCR_MapMarkerConfig",
        "methods": [
          "GetMarkerEntryConfigByType"
        ]
      },
      {
        "class_name": "SCR_MapMarkerEntryConfig",
        "methods": [
          "GetMarkerType",
          "GetMarkerLayout",
          "InitClientSettings",
          "InitClientSettingsDynamic",
          "InitServerLogic",
          "InitClientLogic",
          "OnMapLayerChanged",
          "OnMapLayerChangedDynamic",
          "OnMapInit",
          "OnMapOpen",
          "OnMapClose"
        ]
      },
      {
        "class_name": "SCR_MapMarkerEntryDynamic",
        "methods": [
          "GetMarkerPrefab",
          "InitServerLogic",
          "InitClientSettingsDynamic"
        ]
      },
      {
        "class_name": "SCR_MapMarkerEntryDynamicExample",
        "methods": [
          "OnPlayerSpawned",
          "OnPlayerKilled",
          "OnPlayerDeleted",
          "GetMarkerType",
          "InitClientSettingsDynamic",
          "InitServerLogic"
        ]
      },
      {
        "class_name": "SCR_MapMarkerEntryImageText",
        "methods": [
          "GetMarkerType",
          "InitClientSettings"
        ]
      },
      {
        "class_name": "SCR_MarkerSimpleConfig",
        "methods": [
          "GetEntryID",
          "GetIconResource",
          "GetColor",
          "GetText"
        ]
      },
      {
        "class_name": "SCR_MapMarkerSimpleTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MapMarkerEntryMilitary",
        "methods": [
          "GetMenuDescription",
          "GetMenuImageset",
          "GetMenuIcon",
          "GetFactionEntry",
          "GetFactionEntryID",
          "GetDimensionEntry",
          "GetDimensionEntryID",
          "GetTypeEntry",
          "GetMarkerType",
          "InitClientSettings",
          "OnMapLayerChanged"
        ]
      },
      {
        "class_name": "SCR_MarkerMilitaryDimension",
        "methods": [
          "GetDimension",
          "GetTranslation"
        ]
      },
      {
        "class_name": "SCR_MapMarkerMilitaryDimensionTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MarkerMilitaryType",
        "methods": [
          "GetType",
          "GetTranslation"
        ]
      },
      {
        "class_name": "SCR_MapMarkerMilitaryTypeTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MarkerMilitaryFactionEntry",
        "methods": [
          "GetFactionIdentity",
          "GetColor",
          "GetIconResource",
          "GetTranslation"
        ]
      },
      {
        "class_name": "SCR_MapMarkerFactionTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MapMarkerEntryPlaced",
        "methods": [
          "GetMenuDescription",
          "GetMenuImageset",
          "GetMenuIcon",
          "GetColorEntry",
          "GetIconEntry",
          "GetIconCategoryID",
          "GetMarkerType",
          "InitClientSettings",
          "OnMapLayerChanged"
        ]
      },
      {
        "class_name": "SCR_MarkerColorEntry",
        "methods": [
          "GetColor"
        ]
      },
      {
        "class_name": "SCR_MarkerIconEntry",
        "methods": [
          "GetIconResource"
        ]
      },
      {
        "class_name": "SCR_MapMarkerTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MapMarkerIconEntryTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MapMarkerEntrySquadLeader",
        "methods": [
          "RegisterMarker",
          "UnregisterMarker",
          "FocusCurrentSquad",
          "UpdateToolEntryState",
          "OnPlayableGroupCreated",
          "RegisterMarker",
          "OnPlayableGroupRemoved",
          "UnregisterMarker",
          "OnPlayerLeaderChanged",
          "OnPlayerAdded",
          "UpdateToolEntryState",
          "OnPlayerRemoved",
          "UpdateToolEntryState",
          "OnPlayerSpawned",
          "UpdateMarkerTarget",
          "OnPlayerKilled",
          "UpdateMarkerTarget",
          "OnPlayerDeleted",
          "UpdateMarkerTarget",
          "OnGroupCustomNameChanged",
          "UpdateMarkerTarget",
          "GetMarkerType",
          "InitServerLogic",
          "InitClientLogic",
          "OnMapLayerChangedDynamic",
          "OnMapOpen",
          "UpdateToolEntryState",
          "OnMapInit"
        ]
      },
      {
        "class_name": "SCR_MapMarkerBase",
        "methods": [
          "GetRootWidget",
          "GetType",
          "SetType",
          "GetMarkerID",
          "SetMarkerID",
          "GetMarkerConfigID",
          "SetMarkerConfigID",
          "GetMarkerOwnerID",
          "SetMarkerOwnerID",
          "GetFlags",
          "SetFlags",
          "GetMarkerFactionFlags",
          "AddMarkerFactionFlags",
          "SetMarkerFactionFlags",
          "IsFaction",
          "GetWorldPos",
          "SetWorldPos",
          "GetRotation",
          "SetRotation",
          "GetColorEntry",
          "GetIconEntry",
          "SetColorEntry",
          "SetIconEntry",
          "GetCustomText",
          "SetCustomText",
          "SetServerDisabled",
          "SetUpdateDisabled",
          "SetVisible",
          "SetDragged",
          "TestVisibleFrame",
          "SetUpdateDisabled",
          "OnCreateMarker",
          "OnDelete",
          "OnMapClosed",
          "OnMapLayerChanged",
          "LayerChangeLogic",
          "LayerChangeLogic",
          "OnUpdate",
          "SetUpdateDisabled",
          "Extract",
          "Inject",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare"
        ]
      },
      {
        "class_name": "SCR_MapMarkerEntity",
        "methods": [
          "OnUpdateType",
          "OnUpdateVisibility",
          "OnUpdatePosition",
          "OnUpdateVisibility",
          "OnDelete",
          "OnCreateMarker",
          "SetLocalVisible",
          "OnUpdateVisibility",
          "GetType",
          "GetMarkerConfigID",
          "SetText",
          "GetText",
          "SetImage",
          "GetImageResource",
          "GetWorldPos",
          "SetType",
          "OnUpdateType",
          "SetGlobalVisible",
          "OnUpdateVisibility",
          "GetTarget",
          "SetTarget",
          "SetEventMask",
          "ClearEventMask",
          "GetFaction",
          "SetFaction",
          "IsVisible",
          "OnCreateMarker",
          "OnDelete",
          "OnMapClosed",
          "OnMapLayerChanged",
          "LayerChangeLogic",
          "LayerChangeLogic",
          "OnUpdate",
          "EOnInit",
          "SetFlags",
          "SetEventMask",
          "EOnFrame",
          "SCR_MapMarkerEntity",
          "SetEventMask",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_MapMarkerSquadLeader",
        "methods": [
          "OnPlayerIdUpdate",
          "SetLocalVisible",
          "SetLocalVisible",
          "SetPlayerID",
          "OnPlayerIdUpdate",
          "UpdateTarget",
          "SetTextUpdate",
          "GetGroup",
          "AssignGroup",
          "UpdateTarget",
          "SetTarget",
          "SetGlobalVisible",
          "SetTarget",
          "SetGlobalVisible",
          "UpdateGroupMilitarySymbol",
          "AssignGroup",
          "UpdatePlayerAffiliation",
          "UpdateGroupText",
          "AssignGroup",
          "SetText",
          "UpdatePlayerAffiliation",
          "OnUserSettingsChanged",
          "OnFlagSelected",
          "OnMapLayerChanged",
          "OnCreateMarker",
          "SetTarget",
          "OnDelete",
          "OnUpdate",
          "UpdateGroupMilitarySymbol",
          "UpdateGroupText",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_MapMarkerDynamicWComponent",
        "methods": [
          "SetMarkerEntity",
          "SetLayerID",
          "SetImage",
          "SetText",
          "SetTextVisible",
          "SetColor",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_MapMarkerManagerComponent",
        "methods": [
          "GetInstance",
          "GetMarkerConfig",
          "GetMarkerByWidget",
          "GetStaticMarkerByID",
          "GetDynamicMarkerByTarget",
          "InsertStaticMarkerByType",
          "InsertStaticMarker",
          "InsertStaticMarker",
          "AssignMarkerUID",
          "OnAddSynchedMarker",
          "OnAskAddStaticMarker",
          "PrepareMilitaryMarker",
          "InsertDynamicMarker",
          "RemoveStaticMarker",
          "RemoveDynamicMarker",
          "AssignMarkerUID",
          "HandleStreamOut",
          "SetMarkerStreamRules",
          "SetStreamRulesForPlayer",
          "EnableUpdate",
          "ConnectToMarkerManagerSystem",
          "DisconnectFromMarkerManagerSystem",
          "FindMarkerSyncComponent",
          "SetStaticMarkerDisabled",
          "RegisterDynamicMarker",
          "UnregisterDynamicMarker",
          "ConnectToMarkerManagerSystem",
          "DisconnectFromMarkerManagerSystem",
          "Update",
          "SetStaticMarkerDisabled",
          "UpdateDebug",
          "UpdateDebug",
          "OnAddSynchedMarker",
          "OnRemoveSynchedMarker",
          "OnAskAddStaticMarker",
          "Rpc",
          "OnAskRemoveStaticMarker",
          "Rpc",
          "RPC_DoAddStaticMarker",
          "OnAddSynchedMarker",
          "RPC_DoRemoveStaticMarker",
          "OnRemoveSynchedMarker",
          "OnPlayerFactionChanged_S",
          "SetStreamRulesForPlayer",
          "OnMapPanEnd",
          "SetStaticMarkerDisabled",
          "OnPlayerDisconnected",
          "RplSave",
          "RplLoad",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_MapMarkerMenuCategory",
        "methods": [
          "GetMarkerType",
          "SetMarkerType",
          "SetColor",
          "SetSymbolProps",
          "SetLayout",
          "SetCustomLayout",
          "SetCustomLayout",
          "SetEntryComponent",
          "SCR_MapMarkerMenuCategory",
          "SetLayout"
        ]
      },
      {
        "class_name": "SCR_MapMarkerMenuEntry",
        "methods": [
          "GetMarkerType",
          "SetMarkerType",
          "GetMarkerConfigID",
          "SetMarkerConfigID",
          "SetSymbolProps",
          "SetLayout",
          "SetCustomLayout",
          "SetCustomLayout",
          "SetEntryComponent",
          "SCR_MapMarkerMenuEntry",
          "SetLayout"
        ]
      },
      {
        "class_name": "SCR_MapMarkerSquadLeaderComponent",
        "methods": [
          "SetGroupActive",
          "UpdateGroupInfoPosition",
          "OnMouseButtonDown",
          "OnMouseEnter",
          "OnMouseLeave",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_MapMarkersUI",
        "methods": [
          "MarkerPlacedInvoker",
          "IsOwnedMarker",
          "CreateMarkerEditDialog",
          "CleanupMarkerEditWidget",
          "InitColorIcons",
          "CreateMilitaryMarkerEditDialog",
          "InitFactionIcons",
          "OnComboBoxChangedA",
          "OnComboBoxChangedB",
          "FocusWidget",
          "InitFactionIcons",
          "OnFactionEntryClicked",
          "OnFactionEntryClicked",
          "OnFactionEntryClicked",
          "InitDimensionIcons",
          "OnDimensionEntryClicked",
          "OnDimensionEntryClicked",
          "OnDimensionEntryClicked",
          "InitColorIcons",
          "OnColorEntryClicked",
          "OnColorEntryClicked",
          "OnColorEntryClicked",
          "InitCategoryIcons",
          "OnIconEntryClicked",
          "OnIconEntryClicked",
          "OnIconEntryClicked",
          "CreateStaticMarkers",
          "CreateDynamicMarkers",
          "RemoveMarkerMenu",
          "RemoveOwnedMarker",
          "RemoveOwnedMarker",
          "CleanupMarkerEditWidget",
          "OnTabChanged",
          "InitCategoryIcons",
          "OnFactionEntryClicked",
          "InitDimensionIcons",
          "OnFactionEntryFocused",
          "OnFactionEntryClicked",
          "OnDimensionEntryClicked",
          "OnDimensionEntryFocused",
          "OnDimensionEntryClicked",
          "OnColorEntryClicked",
          "OnColorEntryFocused",
          "OnColorEntryClicked",
          "OnIconEntryClicked",
          "OnIconEntryFocused",
          "OnIconEntryClicked",
          "OnEditBoxTextChanged",
          "OnSliderChanged",
          "OnComboBoxChangedA",
          "OnComboBoxChangedB",
          "OnPlaceMarkerConfirmed",
          "RemoveOwnedMarker",
          "OnInsertMarker",
          "OnPlaceMarkerConfirmedPrivate",
          "OnInsertMarker",
          "OnEditCancelled",
          "CleanupMarkerEditWidget",
          "OnInsertMarker",
          "CleanupMarkerEditWidget",
          "OnRadialMenuInit",
          "OnRadialMenuOpen",
          "OnEntryPerformed",
          "CreateMarkerEditDialog",
          "CreateMilitaryMarkerEditDialog",
          "OnInputQuickMarkerMenu",
          "OnInputMarkerDelete",
          "RemoveOwnedMarker",
          "OnInputMapSelect",
          "OnComboBoxChangedB",
          "OnComboBoxChangedA",
          "OnInputMenuConfirm",
          "OnPlaceMarkerConfirmed",
          "OnInputMenuConfirmAlter",
          "OnPlaceMarkerConfirmedPrivate",
          "OnInputMenuBack",
          "OnEditCancelled",
          "OnInputMenuDown",
          "OnInputMenuUp",
          "OnInputMenuLeft",
          "FocusWidget",
          "OnInputMenuRight",
          "FocusWidget",
          "OnDragWidget",
          "OnDragEnd",
          "RemoveOwnedMarker",
          "OnMapOpen",
          "CreateStaticMarkers",
          "CreateDynamicMarkers",
          "OnMapClose",
          "CleanupMarkerEditWidget",
          "Init",
          "Update"
        ]
      },
      {
        "class_name": "SCR_MapMarkerSyncComponent",
        "methods": [
          "AskAddStaticMarker",
          "Rpc",
          "AskRemoveStaticMarker",
          "Rpc",
          "ClearOwnedMarkers",
          "AskRemoveStaticMarker",
          "RemovePlayerMarker",
          "RPC_AskAddStaticMarker",
          "Rpc",
          "RPC_AskRemoveStaticMarker",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_MapMarkerWidgetComponent",
        "methods": [
          "SetMarkerObject",
          "SetLayerID",
          "SetRotation",
          "SetImage",
          "SetGlowImage",
          "SetMilitarySymbolMode",
          "SetEventListening",
          "UpdateMilitarySymbol",
          "SetText",
          "SetTextVisible",
          "SetTypeIcon",
          "SetTypeIconsVisible",
          "SetAuthor",
          "SetAuthorVisible",
          "SetModeIcon",
          "SetModeIconVisible",
          "SetColor",
          "OnMouseEnter",
          "SetAuthorVisible",
          "SetTypeIconsVisible",
          "OnMouseLeave",
          "SetAuthorVisible",
          "SetTypeIconsVisible",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_MapCursorInfo",
        "methods": [
          "Scale"
        ]
      },
      {
        "class_name": "SCR_MapCursorModule",
        "methods": [
          "GetCursorInfo",
          "GetCursorState",
          "TraceMapWidgets",
          "SetCursorState",
          "SetCursorType",
          "UnsetCursorState",
          "SetCursorType",
          "SetCursorType",
          "SetCrosshairGridVisible",
          "SetCrosshairGridVisible",
          "OnInputDeviceIsGamepad",
          "ForceCenterCursor",
          "SetWheelZoomMultiplier",
          "ForceCenterCursor",
          "HandleMove",
          "SetCursorState",
          "UnsetCursorState",
          "HandlePan",
          "UnsetCursorState",
          "SetCursorState",
          "HandleZoom",
          "UnsetCursorState",
          "SetCursorState",
          "HandleHover",
          "SetCursorState",
          "UnsetCursorState",
          "HandleSelect",
          "SetCursorState",
          "UnsetCursorState",
          "HandleMultiSelect",
          "GetCursorSelection",
          "UnsetCursorState",
          "SetCursorState",
          "GetCursorSelection",
          "HandleDrag",
          "SetCursorState",
          "UnsetCursorState",
          "HandleRotateTool",
          "HandleDrag",
          "SetCursorState",
          "UnsetCursorState",
          "HandleDraw",
          "SetCursorState",
          "UnsetCursorState",
          "HandleSubMenu",
          "SetCursorState",
          "UnsetCursorState",
          "HandleDialog",
          "ForceCenterCursor",
          "SetCursorState",
          "UnsetCursorState",
          "ForceCenterCursor",
          "ToggleFastTravelDestinationSelection",
          "SetCursorState",
          "UnsetCursorState",
          "HandleContextualMenu",
          "UnsetCursorState",
          "SetCursorState",
          "GetCursorSelection",
          "GetCursorPosition",
          "ForceCenterCursor",
          "TestEdgePan",
          "TestEdgePan",
          "OnInputPanDrag",
          "OnInputPanH",
          "CalculatePan",
          "OnInputPanV",
          "CalculatePan",
          "OnInputPanHGamepad",
          "CalculatePan",
          "OnInputPanVGamepad",
          "CalculatePan",
          "CalculatePan",
          "OnInputGamepadCursorH",
          "OnInputGamepadCursorV",
          "OnInputZoom",
          "OnInputZoomWheelUp",
          "OnInputZoomWheelDown",
          "OnInputDrag",
          "HandleDrag",
          "HandleDrag",
          "OnInputDragToggle",
          "HandleDrag",
          "HandleDrag",
          "OnInputModifier",
          "SetCursorState",
          "HandleRotateTool",
          "UnsetCursorState",
          "HandleRotateTool",
          "OnInputModifClick",
          "OnInputMultiSel",
          "HandleMultiSelect",
          "HandleMultiSelect",
          "OnInputMultiSelGamepad",
          "HandleMultiSelect",
          "HandleMultiSelect",
          "OnPauseMenuOpened",
          "SetCursorType",
          "OnPauseMenuClosed",
          "SetCursorType",
          "GetCursorStateCfg",
          "UpdateCrosshairUI",
          "TraceMapWidgets",
          "InitWidgets",
          "SetCrosshairGridVisible",
          "SetCrosshairGridVisible",
          "InitInputs",
          "CleanupInputs",
          "OnMapOpen",
          "InitWidgets",
          "InitInputs",
          "SetCursorType",
          "ForceCenterCursor",
          "OnMapClose",
          "SetCursorType",
          "CleanupInputs",
          "Update",
          "GetCursorPosition",
          "HandleMove",
          "HandleHover",
          "HandlePan",
          "HandleZoom",
          "UpdateCrosshairUI",
          "SCR_MapCursorModule"
        ]
      },
      {
        "class_name": "SCR_CursorStateTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MapModuleBase",
        "methods": [
          "OnMapOpen",
          "OnMapClose",
          "IsConfigDisabled",
          "SetActive",
          "Init",
          "Update",
          "SCR_MapModuleBase"
        ]
      },
      {
        "class_name": "SCR_MapSelectionModule",
        "methods": [
          "GetSelCircleSize",
          "RenderSelectionCircle",
          "AdjustCircleSize",
          "AdjustCircleSize",
          "RenderSelectionRectangle",
          "OnMapOpen",
          "Update",
          "RenderSelectionCircle",
          "RenderSelectionRectangle"
        ]
      },
      {
        "class_name": "SCR_DescriptorViewTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_LayerConfiguration",
        "methods": [
          "SetLayerProps"
        ]
      },
      {
        "class_name": "SCR_MapDescriptorDefaults",
        "methods": [
          "SCR_MapDescriptorDefaults"
        ]
      },
      {
        "class_name": "SCR_FactionColorDefaults",
        "methods": [
          "SetColors"
        ]
      },
      {
        "class_name": "SCR_DescriptorDefaultsBase",
        "methods": [
          "SetGlobals",
          "SetDefaults",
          "SetColors"
        ]
      },
      {
        "class_name": "SCR_DescriptorDefInvisible",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_DescriptorDefIcon",
        "methods": [
          "SetDefaults",
          "SetColors"
        ]
      },
      {
        "class_name": "SCR_DescriptorDefIconText",
        "methods": [
          "SetDefaults",
          "SetColors"
        ]
      },
      {
        "class_name": "SCR_DescriptorDefText",
        "methods": [
          "SetDefaults",
          "SetColors"
        ]
      },
      {
        "class_name": "SCR_FactionViewTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_MapEntityClass",
        "methods": [
          "MapConfigurationInvoker",
          "MapItemInvoker",
          "ScriptInvokerFloat2Bool"
        ]
      },
      {
        "class_name": "SCR_MapEntity",
        "methods": [
          "GetOnMapPanEnd",
          "GetOnMapZoom",
          "GetOnMapZoomEnd",
          "GetOnSelection",
          "GetOnLayerChanged",
          "GetMapInstance",
          "GetMapConfig",
          "IsOpen",
          "GetMapSizeX",
          "GetMapSizeY",
          "GetMaxZoom",
          "GetMinZoom",
          "GetTargetZoomPPU",
          "IsZooming",
          "GetCurrentPan",
          "GetMapWidget",
          "GetMapMenuRoot",
          "SetMapWidget",
          "GetHoveredItem",
          "GetMapVisibleFrame",
          "GetCurrentZoom",
          "GetMapCursorWorldPosition",
          "GetMapCenterWorldPosition",
          "ScreenToWorld",
          "GetMapModule",
          "GetMapUIComponent",
          "OpenMap",
          "CloseMap",
          "InitLayers",
          "CloseMap",
          "OnMapClose",
          "OnMapOpen",
          "UpdateZoomBounds",
          "AssignViewLayer",
          "ZoomSmooth",
          "ActivateModules",
          "ActivateComponents",
          "ActivateOtherComponents",
          "EnableVisualisation",
          "OnMapClose",
          "EnableLegend",
          "EnableVisualisation",
          "Cleanup",
          "OnLifeStateChanged",
          "OnPlayerDeleted",
          "OnUserSettingsChanged",
          "UpdateTexts",
          "UpdateZoomBounds",
          "ZoomSmooth",
          "OnWindowResized",
          "OnUserSettingsChanged",
          "SetupMapConfig",
          "SetupLayersAndProps",
          "SetupDescriptorTypes",
          "SetupLayersAndProps",
          "SetupDescriptorTypes",
          "SetImagesetMapping",
          "CenterMap",
          "WorldToScreen",
          "SetPan",
          "ZoomOut",
          "SetZoom",
          "CenterMap",
          "ShowScriptDebug",
          "SetZoom",
          "AssignViewLayer",
          "ZoomSmooth",
          "GetMapCenterWorldPosition",
          "WorldToScreenCustom",
          "PanSmooth",
          "GetMapCursorWorldPosition",
          "WorldToScreenCustom",
          "PanSmooth",
          "ZoomPanSmooth",
          "WorldToScreenCustom",
          "PanSmooth",
          "SetPan",
          "Pan",
          "SetPan",
          "PanSmooth",
          "InvokeOnSelect",
          "SelectItem",
          "HoverItem",
          "ClearSelection",
          "ResetSelected",
          "ResetHighlighted",
          "ClearHover",
          "ResetHovering",
          "WorldToScreen",
          "WorldToScreenCustom",
          "ScreenToWorld",
          "ScreenToWorldNoFlip",
          "GetGridLabel",
          "GetGridPos",
          "GetGridPos",
          "FitPanBounds",
          "UpdateZoomBounds",
          "AssignViewLayer",
          "SetLayer",
          "InitLayers",
          "InitializeLayers",
          "InitDescriptors",
          "InitDescriptors",
          "ActivateModules",
          "ActivateComponents",
          "ActivateOtherComponents",
          "EnableLegend",
          "EnableLegend",
          "EnableGrid",
          "EnableGrid",
          "DeactivateModule",
          "DeactivateComponent",
          "Cleanup",
          "UpdateViewPort",
          "ScreenToWorld",
          "ScreenToWorld",
          "SetFrame",
          "PanUpdate",
          "SetPan",
          "SetPan",
          "ZoomUpdate",
          "SetZoom",
          "SetZoom",
          "UpdateDebug",
          "ScreenToWorld",
          "GetSelected",
          "UpdateMap",
          "ZoomUpdate",
          "PanUpdate",
          "EOnFrame",
          "OnMapOpen",
          "UpdateMap",
          "UpdateDebug",
          "UpdateViewPort",
          "EOnInit",
          "SCR_MapEntity",
          "SetEventMask",
          "CloseMap"
        ]
      },
      {
        "class_name": "SCR_MapMenuUI",
        "methods": [
          "OnMenuOpen",
          "OnMenuClose",
          "OnMenuInit",
          "OnMenuUpdate",
          "Callback_OnChatToggleAction"
        ]
      },
      {
        "class_name": "SCR_MapPropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_BuildingPropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_BuildingViewTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_GridPropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_LegendPropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_ContourPropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_RoadPropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_RoadViewTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_PowerlinePropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_PowerlineViewTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_WaterBodyPropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_HillPropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_AreaPropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_AreaViewTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_DrawingPropsConfig",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_MissionHeader",
        "methods": [
          "IsMultiplayer",
          "GetSaveFileName",
          "GetMissionHeader"
        ]
      },
      {
        "class_name": "SCR_BaseCaptureMusic",
        "methods": [
          "OnBaseCapture",
          "Init",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_DeathMusic",
        "methods": [
          "OnPlayerDied",
          "Init",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_EnterEnemyMilitaryBaseMusic",
        "methods": [
          "OnBaseEntered",
          "Init",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_GameEndMusic",
        "methods": [
          "OnGameEnd",
          "SetName",
          "Init",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_LocationMusic",
        "methods": [
          "Init",
          "OnDelete",
          "PlayerEnteredHQ",
          "PlayerLeftHQ",
          "ShouldPlay"
        ]
      },
      {
        "class_name": "SCR_RespawnMusic",
        "methods": [
          "OnRespawnMenuOpen",
          "OnRespawnMenuClosed",
          "Init",
          "OnDelete",
          "OnPlay",
          "OnStop"
        ]
      },
      {
        "class_name": "SCR_SpawnMusic",
        "methods": [
          "OnPlayerSpawned",
          "Init",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_NetworkedStatsComponentClass",
        "methods": [
          "SCR_OnStatChangedMethod",
          "GetOnStatsChanged"
        ]
      },
      {
        "class_name": "SCR_NetworkedStatsComponent",
        "methods": [
          "GetNetworkedStat",
          "GetNetworkedStatPrefabData",
          "GetRplComponent",
          "SetAuthorityStatValue",
          "Rpc",
          "SetStatValueOfAuthority",
          "UpdateStats",
          "EOnInit",
          "OnPostInit",
          "SetEventMask",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_NetworkedStatsTestComponent",
        "methods": [
          "EOnInit",
          "OnStatUpdate",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_BaseNetworkedStat",
        "methods": [
          "GetStatType",
          "UpdateStat",
          "OnAuthorityStatValueSet",
          "SetOwner",
          "InvokeStatValueChange"
        ]
      },
      {
        "class_name": "SCR_MemoryNetworkedStat",
        "methods": [
          "GetLastCheckedLocalMemory",
          "GetLastCheckedAuthorityMemory",
          "UpdateStat",
          "InvokeStatValueChange",
          "OnAuthorityStatValueSet",
          "InvokeStatValueChange"
        ]
      },
      {
        "class_name": "SCR_FPSNetworkedStat",
        "methods": [
          "GetLastCheckedLocalFPS",
          "GetLastCheckedAuthorityFPS",
          "UpdateStat",
          "UpdateStatValueIfAuthority",
          "InvokeStatValueChange",
          "UpdateStatValueIfAuthority",
          "OnAuthorityStatValueSet",
          "InvokeStatValueChange"
        ]
      },
      {
        "class_name": "SCR_NotificationAproxNumber",
        "methods": [
          "GetText",
          "GetAproxText"
        ]
      },
      {
        "class_name": "SCR_NotificationArsenalGameModeType",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationCharacterName",
        "methods": [
          "GetText",
          "SetPosition",
          "SetPositionDataEditableEntity",
          "SetFactionRelatedColor"
        ]
      },
      {
        "class_name": "SCR_NotificationConfig",
        "methods": [
          "GetNotificationData"
        ]
      },
      {
        "class_name": "SCR_NotificationDisplayData",
        "methods": [
          "SetInitialDisplayData",
          "SetPosition",
          "SetFactionRelatedColor",
          "GetDisplayVisualizationData",
          "GetTextColor",
          "GetSplitNotificationTextColors",
          "GetText",
          "MergeParam1With2",
          "GetPriority",
          "GetNotificationUIInfo",
          "GetPlayerName",
          "GetEditableEntityName",
          "IsPlayerFriendlyToLocalPlayer",
          "IsEntityFriendlyToLocalPlayer",
          "GetFactionName",
          "GetCharacterName",
          "GetEntityCallsign",
          "GetGroupNameFromGroupID",
          "GetInventoryItemName",
          "GetPosition",
          "SetPosition",
          "SetPosition",
          "CanSetPosition",
          "SetPositionDataEditablePlayer",
          "SetPositionDataEditableEntity",
          "SetFactionRelatedColor",
          "GetFactionRelatedColorPlayer",
          "GetFactionRelatedColorEntity",
          "AreEntitiesFriendly"
        ]
      },
      {
        "class_name": "SCR_NotificationEditableEntity",
        "methods": [
          "GetText",
          "SetPosition",
          "SetPositionDataEditableEntity",
          "SetFactionRelatedColor"
        ]
      },
      {
        "class_name": "SCR_NotificationEditableEntityAndNumber",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationEditableEntityEditableEntityTarget",
        "methods": [
          "GetText",
          "SetFactionRelatedColor"
        ]
      },
      {
        "class_name": "SCR_NotificationEditableEntityTargetPlayer",
        "methods": [
          "GetText",
          "SetFactionRelatedColor"
        ]
      },
      {
        "class_name": "SCR_NotificationEntityCallsign",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationFaction",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationGroupName",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationInventoryItemName",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationNumber",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationOnKillfeedChanged",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayer",
        "methods": [
          "GetText",
          "SetPosition",
          "SetPositionDataEditablePlayer",
          "SetFactionRelatedColor"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerAndAproxNumber",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerAndEntityCallsign",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerAndFaction",
        "methods": [
          "GetText",
          "SetFactionRelatedColor"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerAndGroupName",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerAndLocation",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerAndNumber",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerBanned",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerBuildService",
        "methods": [
          "GetText",
          "GetProviderCallsign"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerKicked",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerTargetEditableEntity",
        "methods": [
          "GetText",
          "SetPosition",
          "SetPositionDataEditableEntity",
          "SetFactionRelatedColor"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerTargetFaction",
        "methods": [
          "GetText",
          "SetPosition",
          "SetPositionDataEditablePlayer"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerTargetPlayer",
        "methods": [
          "GetText",
          "SetPosition",
          "SetPositionDataEditablePlayer",
          "SetFactionRelatedColor"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerTargetTwoEditableEntity",
        "methods": [
          "GetText",
          "SetPosition",
          "SetPositionDataEditableEntity"
        ]
      },
      {
        "class_name": "SCR_NotificationPlayerTargetTwoFactions",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationRank",
        "methods": [
          "GetText",
          "SetPosition",
          "SetPositionDataEditablePlayer",
          "GetPlayerRankName",
          "GetRankName"
        ]
      },
      {
        "class_name": "SCR_NotificationSupportStationHitZoneGroup",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationTaskStateChanged",
        "methods": [
          "GetText",
          "SetPosition",
          "SetPositionDataEditableEntity",
          "MergeParam1With2"
        ]
      },
      {
        "class_name": "SCR_NotificationVoting",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationWeatherChanged",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationWindChanged",
        "methods": [
          "GetText"
        ]
      },
      {
        "class_name": "SCR_NotificationData",
        "methods": [
          "SetMeta",
          "GetID",
          "GetNotificationReceiverType",
          "GetNotificationTimeLeft",
          "UpdateNotificationData",
          "GetText",
          "SetNotificationTextEntries",
          "GetNotificationTextEntries",
          "SetFactionRelatedColor",
          "SetFactionRelatedTextColor",
          "SetSplitFactionRelatedColor",
          "GetFactionRelatedColor",
          "GetFactionRelatedTextColor",
          "GetSplitFactionRelatedColor",
          "GetDisplayData",
          "GetPosition",
          "GetParams",
          "Log",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject",
          "SetPosition",
          "SetParameters"
        ]
      },
      {
        "class_name": "SCR_NotificationsComponentClass",
        "methods": [
          "GetNotificationDisplayData",
          "SCR_NotificationsComponentClass"
        ]
      },
      {
        "class_name": "SCR_NotificationsComponent",
        "methods": [
          "GetOnNotification",
          "GetHistoryNewToOld",
          "GetHistoryOldToNew",
          "GetHistoryEntry",
          "GetLastNotificationLocation",
          "GetInstance",
          "SendToEveryone",
          "SendToEveryone",
          "SendToEveryone",
          "CreateParamArray",
          "SendToEveryoneData",
          "Rpc_SendToEveryone",
          "GetParamsFromArray",
          "SendToEveryone",
          "SendToEveryoneData",
          "SendToPlayerData",
          "SendToPlayer",
          "SendToPlayer",
          "SendToPlayer",
          "CreateParamArray",
          "SendToPlayerData",
          "Rpc_SendToPlayer",
          "GetParamsFromArray",
          "SendToPlayer",
          "SendToPlayerData",
          "SendToFaction",
          "SendToFaction",
          "SendToFaction",
          "CreateParamArray",
          "SendToFactionData",
          "Rpc_SendToFaction",
          "GetParamsFromArray",
          "SendToFaction",
          "SendToFactionData",
          "SendToPlayerData",
          "SendToPlayerData",
          "SendToUnlimitedEditorPlayers",
          "SendToUnlimitedEditorPlayers",
          "SendToUnlimitedEditorPlayers",
          "CreateParamArray",
          "SendToUnlimitedEditorPlayersData",
          "Rpc_SendToUnlimitedEditorPlayers",
          "GetParamsFromArray",
          "SendToUnlimitedEditorPlayers",
          "SendToUnlimitedEditorPlayersData",
          "SendToPlayerData",
          "SendToPlayerData",
          "SendToUnlimitedEditorPlayersAndPlayer",
          "SendToUnlimitedEditorPlayersAndPlayer",
          "SendToUnlimitedEditorPlayersAndPlayer",
          "CreateParamArray",
          "SendToUnlimitedEditorPlayersData",
          "Rpc_SendToUnlimitedEditorPlayersAndPlayer",
          "GetParamsFromArray",
          "SendToUnlimitedEditorPlayersAndPlayer",
          "SendToGroup",
          "SendToGroup",
          "SendToGroup",
          "CreateParamArray",
          "SendToGroupData",
          "Rpc_SendToGroup",
          "GetParamsFromArray",
          "SendToGroup",
          "SendToGroupData",
          "SendToPlayerData",
          "SendLocal",
          "SendLocal",
          "SendLocal",
          "SendLocalData",
          "SendLocalUnlimitedEditor",
          "SendLocalUnlimitedEditor",
          "SendLocalUnlimitedEditor",
          "SendLocalData",
          "SendLocalLimitedEditor",
          "SendLocalLimitedEditor",
          "SendLocalLimitedEditor",
          "SendLocalData",
          "SendLocalData",
          "CreateParamArray",
          "GetParamsFromArray",
          "SendToOwner",
          "Rpc",
          "Rpc",
          "ReceiveNotification",
          "ReceiveSCR_NotificationData",
          "ReceiveSCR_NotificationData",
          "UpdateNotificationData",
          "GetNotificationDisplayData",
          "GetPlayerNameFromHistory",
          "AddPlayerNameToHistory",
          "UpdateNotificationData",
          "ConnectToNotificationsSystem",
          "DisconnectFromNotificationsSystem",
          "ConnectToNotificationsSystem",
          "DisconnectFromNotificationsSystem",
          "Update",
          "UpdateNotificationData",
          "OnPostInit",
          "UpdateNotificationData",
          "AddPlayerNameToHistory",
          "OnDelete",
          "DisconnectFromNotificationsSystem"
        ]
      },
      {
        "class_name": "DownloadConfigCallback",
        "methods": [
          "OnSuccess",
          "OnError"
        ]
      },
      {
        "class_name": "SCR_RCONCommander",
        "methods": [
          "ProcessCommand"
        ]
      },
      {
        "class_name": "RplSessionErrorHandler",
        "methods": [
          "RplSessionErrorHandler",
          "EOnFailed"
        ]
      },
      {
        "class_name": "SCR_RplTestComponent",
        "methods": [
          "Do_TestRpc",
          "RpcAsk_TestRpc",
          "Do_TestRpc",
          "Rpc",
          "RpcDo_TestRpc",
          "RpcAsk_ChangePropValue",
          "OnTestChanged",
          "Do_TestFire",
          "RpcAsk_TestFire",
          "Do_TestFire",
          "Rpc",
          "RpcDo_TestFire",
          "Do_TestFire",
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "EOnFrame",
          "Rpc",
          "Rpc",
          "Do_TestFire",
          "Rpc",
          "SCR_RplTestComponent"
        ]
      },
      {
        "class_name": "SCR_RplTestComponentWrong",
        "methods": [
          "NetTestRpc",
          "EOnFrame",
          "Rpc",
          "SCR_RplTestComponentWrong",
          "SetEventMask"
        ]
      },
      {
        "class_name": "RplTestPropType",
        "methods": [
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject"
        ]
      },
      {
        "class_name": "SCR_RplTestEntity",
        "methods": [
          "OnRpl_CustomProp",
          "NetTestRpc",
          "EOnFrame",
          "Rpc",
          "SCR_RplTestEntity",
          "SetEventMask",
          "SetFlags"
        ]
      },
      {
        "class_name": "SCR_ChatComponent",
        "methods": [
          "GetChannelState",
          "OnNewMessage",
          "OnNewPrivateMessage",
          "ShowMessage",
          "RadioProtocolMessage"
        ]
      },
      {
        "class_name": "SCR_ScriptPlatformRequestCallback",
        "methods": [
          "OnPrivilegeResult"
        ]
      },
      {
        "class_name": "SCR_OnlineServiceBackendCallbacks",
        "methods": [
          "OnSuccess",
          "OnError",
          "OnTimeout"
        ]
      },
      {
        "class_name": "SCR_WorkshopCallbackBase",
        "methods": [
          "SCR_WorkshopCallbackBase",
          "OnSuccess",
          "OnError",
          "OnTimeout"
        ]
      },
      {
        "class_name": "SCR_WorkshopApiCallback_RequestPage",
        "methods": [
          "SCR_WorkshopApiCallback_RequestPage",
          "OnSuccess"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemCallback_AskDetails",
        "methods": [
          "SCR_WorkshopItemCallback_AskDetails",
          "OnSuccess"
        ]
      },
      {
        "class_name": "SCR_SBGetServersParams",
        "methods": [
          "SetDefaultSBGetServersParams",
          "SCR_SBGetServersParams",
          "SetDefaultSBGetServersParams"
        ]
      },
      {
        "class_name": "BanCommand",
        "methods": [
          "CreateBan",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "PrintFormat",
          "ScrServerCmdResult",
          "PrintFormat",
          "ScrServerCmdResult",
          "PrintFormat",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "RemoveBan",
          "ScrServerCmdResult",
          "PrintFormat",
          "PrintFormat",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ListBans",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ListBansResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ListBansResultFiltered",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "HandleCommand",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "CreateBan",
          "RemoveBan",
          "ListBans",
          "ScrServerCmdResult",
          "GetPlayerIdType",
          "GetPlayerIdFromName",
          "GetKeyword",
          "IsServerSide",
          "RequiredRCONPermission",
          "RequiredChatPermission",
          "OnChatServerExecution",
          "HandleCommand",
          "OnChatClientExecution",
          "ScrServerCmdResult",
          "OnRCONExecution",
          "HandleCommand",
          "HandleSuccessfulResult",
          "ScrServerCmdResult",
          "ListBansResult",
          "ListBansResultFiltered",
          "ScrServerCmdResult",
          "HandleFailure",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "PrintFormat",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "OnUpdate",
          "ScrServerCmdResult"
        ]
      },
      {
        "class_name": "KickCommand",
        "methods": [
          "GetKeyword",
          "IsServerSide",
          "RequiredRCONPermission",
          "RequiredChatPermission",
          "KickPlayer",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "ScrServerCmdResult",
          "PrintFormat",
          "OnChatServerExecution",
          "KickPlayer",
          "OnChatClientExecution",
          "ScrServerCmdResult",
          "OnRCONExecution",
          "KickPlayer",
          "OnUpdate",
          "ScrServerCmdResult"
        ]
      },
      {
        "class_name": "StateBackendCallback",
        "methods": [
          "OnError",
          "OnSuccess",
          "OnTimeout"
        ]
      },
      {
        "class_name": "UploadSaveCommand",
        "methods": [
          "GetKeyword",
          "OnChatClientExecution",
          "OnChatServerExecution",
          "OnUpdate",
          "RequiredChatPermission",
          "IsServerSide"
        ]
      },
      {
        "class_name": "SCR_PlayerControllerClass",
        "methods": [
          "OnControlledEntityChangedPlayerController",
          "OwnershipChangedDelegate",
          "OnDestroyedPlayerController",
          "OnPossessed",
          "OnBeforePossessed"
        ]
      },
      {
        "class_name": "SCR_PlayerController",
        "methods": [
          "GetOnOwnershipChangedInvoker",
          "OnOwnershipChanged",
          "OnControlledEntityChanged",
          "SetGameUserSettings",
          "SetPossessedEntity",
          "OnRplMainEntityFromID",
          "SetAIActivation",
          "SetControlledEntity",
          "OnRplMainEntityFromID",
          "SetAIActivation",
          "SetControlledEntity",
          "SetPossessedEntity",
          "SetPossessedEntity",
          "SetInitialMainEntity",
          "OnRplMainEntityFromID",
          "SetAIActivation",
          "SetControlledEntity",
          "IsPossessing",
          "GetMainEntity",
          "GetControlledEntity",
          "OnRplMainEntityFromID",
          "SetAIActivation",
          "GetLocalPlayerId",
          "GetLocalControlledEntity",
          "GetLocalMainEntity",
          "GetLocalControlledEntityFaction",
          "GetLocalMainEntityFaction",
          "OnDestroyed",
          "OnUpdate",
          "UpdateLocalPlayerController",
          "UpdateControls",
          "UpdateLocalPlayerController",
          "UpdateControls",
          "SetDisableControls",
          "UpdateUI",
          "ChangeMagnification",
          "ChangeWeaponOptics",
          "GetCharacterController",
          "SetDisableControls",
          "GetFocusValue",
          "SetGadgetFocus",
          "GetGadgetFocus",
          "ActionFocusToggle",
          "ActionFocusToggleVehicle",
          "ActionFocusToggleUnarmed",
          "OnWalk",
          "OnEndWalk",
          "ActionOpenInventory",
          "ActionGesturePing",
          "ActionGesturePingHold",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_PlayerFactionAffiliationComponentClass",
        "methods": [
          "PlayerFactionRequestDelegate",
          "PlayerFactionResponseDelegate"
        ]
      },
      {
        "class_name": "SCR_PlayerFactionAffiliationComponent",
        "methods": [
          "GetPlayerController",
          "GetPlayerId",
          "GetLock",
          "GetOnCanPlayerFactionRequestInvoker_O",
          "GetOnCanPlayerFactionRequestInvoker_S",
          "GetOnCanPlayerFactionResponseInvoker_O",
          "GetOnCanPlayerFactionResponseInvoker_S",
          "GetOnPlayerFactionRequestInvoker_O",
          "GetOnPlayerFactionRequestInvoker_S",
          "GetOnPlayerFactionResponseInvoker_O",
          "GetOnPlayerFactionResponseInvoker_S",
          "IsOwner",
          "IsProxy",
          "OnPostInit",
          "RequestFaction",
          "Rpc",
          "Rpc_RequestFaction_S",
          "SendRequestFactionResponse_S",
          "SendRequestFactionResponse_S",
          "SetFaction_S",
          "SetAffiliatedFaction",
          "SendRequestFactionResponse_S",
          "Rpc",
          "RequestFactionResponse_O",
          "CanRequestFaction",
          "Rpc",
          "Rpc_CanRequestFaction_S",
          "SendCanRequestFactionResponse_S",
          "SendCanRequestFactionResponse_S",
          "CanRequestFaction_S",
          "SendCanRequestFactionResponse_S",
          "Rpc",
          "CanRequestFactionResponse_O",
          "OnDiag",
          "CanRequestFaction",
          "RequestFaction"
        ]
      },
      {
        "class_name": "SCR_PlayerLoadoutComponentClass",
        "methods": [
          "PlayerLoadoutRequestDelegate",
          "PlayerLoadoutResponseDelegate"
        ]
      },
      {
        "class_name": "SCR_PlayerLoadoutComponent",
        "methods": [
          "GetPlayerController",
          "GetPlayerId",
          "GetLock",
          "GetPlayerFactionAffiliationComponent",
          "GetLoadout",
          "GetOnCanPlayerLoadoutRequestInvoker_O",
          "GetOnCanPlayerLoadoutRequestInvoker_S",
          "GetOnCanPlayerLoadoutResponseInvoker_O",
          "GetOnCanPlayerLoadoutResponseInvoker_S",
          "GetOnPlayerLoadoutRequestInvoker_O",
          "GetOnPlayerLoadoutRequestInvoker_S",
          "GetOnPlayerLoadoutResponseInvoker_O",
          "GetOnPlayerLoadoutResponseInvoker_S",
          "IsOwner",
          "IsProxy",
          "OnPostInit",
          "OnDelete",
          "OnFactionChanged",
          "AssignLoadout_S",
          "SendRequestLoadoutResponse_S",
          "GetAssignedLoadout",
          "RequestLoadout",
          "Rpc",
          "Rpc_RequestLoadout_S",
          "SendRequestLoadoutResponse_S",
          "SendRequestLoadoutResponse_S",
          "AssignLoadout_S",
          "SendRequestLoadoutResponse_S",
          "Rpc",
          "RequestLoadoutResponse_O",
          "CanRequestLoadout",
          "Rpc",
          "Rpc_CanRequestLoadout_S",
          "SendCanRequestLoadoutResponse_S",
          "SendCanRequestLoadoutResponse_S",
          "CanAssignLoadout_S",
          "IsLoadoutUseableByFaction",
          "SendCanRequestLoadoutResponse_S",
          "Rpc",
          "CanRequestLoadoutResponse_O",
          "OnDiag",
          "CanRequestLoadout",
          "RequestLoadout"
        ]
      },
      {
        "class_name": "SCR_AutoSpawnLogic",
        "methods": [
          "GetForcedFaction",
          "GetForcedLoadout",
          "OnInit",
          "OnPlayerRegistered_S",
          "OnPlayerDisconnected_S",
          "DoInitialSpawn",
          "Spawn",
          "OnPlayerEntityLost_S",
          "Spawn",
          "OnPlayerSpawnFailed_S",
          "Spawn",
          "OnPlayerSpawnFailed_S",
          "OnPlayerSpawnFailed_S",
          "OnPlayerSpawnFailed_S",
          "DoSpawn",
          "OnPlayerSpawnFailed_S",
          "DoSpawn"
        ]
      },
      {
        "class_name": "SCR_MenuSpawnLogic",
        "methods": [
          "OnInit",
          "CreateLoadingPlaceholder",
          "OnPlayerRegistered_S",
          "OnPlayerEntityLost_S",
          "GetForcedFaction",
          "CreateLoadingPlaceholder",
          "UpdateLoadingPlaceholder",
          "DestroyLoadingPlaceholder"
        ]
      },
      {
        "class_name": "SCR_SpawnLogic",
        "methods": [
          "OnInit",
          "OnPlayerRegistered_S",
          "OnPlayerDisconnected_S",
          "OnPlayerSpawnRequest_S",
          "OnPlayerSpawnResponse_S",
          "OnPlayerSpawnFailed_S",
          "OnPlayerSpawned_S",
          "OnPlayerEntityChanged_S",
          "OnPlayerEntityLost_S",
          "OnPlayerKilled_S",
          "OnPlayerEntityLost_S",
          "OnPlayerDeleted_S",
          "OnPlayerEntityLost_S",
          "OnPlayerEntityLost_S",
          "NotifyPlayerReadyForSpawn",
          "IsEligibleForReconnection",
          "ResolveReconnection",
          "GetPlayerRespawnComponent_S",
          "GetLocalPlayerRespawnComponent",
          "GetPlayerFactionComponent_S",
          "GetPlayerLoadoutComponent_S"
        ]
      },
      {
        "class_name": "SCR_PlayerDeployMenuHandlerComponentClass",
        "methods": [
          "OnDeployMenuOpenDelegate",
          "OnDeployMenuCloseDelegate"
        ]
      },
      {
        "class_name": "SCR_PlayerDeployMenuHandlerComponent",
        "methods": [
          "OnPostInit",
          "SetWelcomeClosed",
          "Update",
          "CloseWelcomeScreen",
          "CloseMenu",
          "IsMenuOpen",
          "IsWelcomeScreenOpen",
          "CloseWelcomeScreen",
          "CloseMenu",
          "HasPlayableFaction",
          "CanOpenMenu",
          "CanOpenWelcomeScreen",
          "OnRespawnReady",
          "SetReady",
          "SetReadyDelayed",
          "SetReady",
          "SetReady",
          "SetWelcomeClosed",
          "OnPlayerReconnect",
          "SetWelcomeClosed",
          "SetNotReady",
          "CloseWelcomeScreen",
          "SetWelcomeClosed",
          "UpdateLoadingPlaceholder",
          "SGetOnMenuClosed",
          "OnDelete",
          "GetPlayerController"
        ]
      },
      {
        "class_name": "SCR_SpawnData",
        "methods": [
          "GetPrefab",
          "GetPosition",
          "GetAngles",
          "IsValid",
          "GetSkipPreload",
          "SetSkipPreload"
        ]
      },
      {
        "class_name": "SCR_SpawnHandlerComponent",
        "methods": [
          "GetRespawnSystemComponent",
          "OnPostInit",
          "CanHandleRequest_S",
          "HandleRequest_S",
          "OnFinalizeBegin_S",
          "CanFinalize_S",
          "FinalizeRequest_S",
          "OnFinalizeDone_S",
          "OnFinalizeDone_S",
          "ValidateData_S",
          "CanRequestSpawn_S",
          "SpawnEntity_S",
          "HandleSpawnEntityFailure_S",
          "ValidatePrefab_S",
          "PrepareEntity_S",
          "AssignEntity_S",
          "HandleEntityChange_S",
          "HandleSpawnEntityFailure_S",
          "ShouldDeleteEntityOnSpawnFailure_S",
          "HandleEntityChange_S"
        ]
      },
      {
        "class_name": "SCR_SpawnRequestComponentClass",
        "methods": [
          "DependsOn"
        ]
      },
      {
        "class_name": "SCR_SpawnRequestComponent",
        "methods": [
          "GetPlayerController",
          "GetPlayerId",
          "GetRespawnComponent",
          "GetHandlerComponent",
          "GetLock",
          "GetHandlerType",
          "GetDataType",
          "IsOwner",
          "IsProxy",
          "OnPostInit",
          "CanRequestRespawn",
          "Rpc_SendCanResponse_O",
          "DoCanRequestRespawn",
          "ProcessCanRequest_S",
          "SendCanResponse_S",
          "SendCanResponse_S",
          "SendCanResponse_S",
          "Rpc",
          "Rpc_SendCanResponse_O",
          "RequestRespawn",
          "Rpc_SendResponse_O",
          "DoRequestRespawn",
          "ProcessRequest_S",
          "SendResponse_S",
          "SendResponse_S",
          "SendFinalizationBegin_S",
          "OnFinalizeBegin_S",
          "OnFinalizeBegin_S",
          "AwaitFinalization_S",
          "FinalizeRequest_S",
          "CanFinalize_S",
          "FinalizeRequest_S",
          "SendResponse_S",
          "SendResponse_S",
          "Rpc",
          "SendFinalizationBegin_S",
          "Rpc",
          "Rpc_OnFinalizationBegin_O",
          "IsPreloading",
          "StartSpawnPreload",
          "NotifyPreloadStarted_S",
          "Rpc",
          "NotifyPreloadStarted_S",
          "Rpc",
          "Rpc_NotifyPreloadStarted_S",
          "NotifyPreloadFinished_S",
          "Rpc",
          "Rpc_NotifyPreloadFinished_S",
          "Rpc_StartPreload_O",
          "Rpc_SendResponse_O",
          "FindAIAgent",
          "DrawDiag",
          "CreateDiag"
        ]
      },
      {
        "class_name": "SCR_BaseRespawnDiag",
        "methods": [
          "DrawDbgUI",
          "DrawDbgUI",
          "DrawContent",
          "DrawContent",
          "OnAskPressed",
          "OnRequestPressed",
          "OnAskPressed",
          "OnRequestPressed",
          "CreateData"
        ]
      },
      {
        "class_name": "SCR_FreeSpawnData",
        "methods": [
          "GetPrefab",
          "GetPosition",
          "GetAngles",
          "SCR_FreeSpawnData"
        ]
      },
      {
        "class_name": "SCR_FreeSpawnRequestComponent",
        "methods": [
          "GetHandlerType",
          "GetDataType",
          "DoCanRequestRespawn",
          "Rpc_CanRequestRespawn_S",
          "ProcessCanRequest_S",
          "DoRequestRespawn",
          "Rpc_RequestRespawn_S",
          "ProcessRequest_S",
          "CreateDiag",
          "SCR_FreeRespawnDiag",
          "DrawContent",
          "CreateData",
          "SCR_FreeSpawnData"
        ]
      },
      {
        "class_name": "SCR_PossessSpawnData",
        "methods": [
          "GetRplId",
          "FromRplId",
          "FromEntity",
          "FromRplId",
          "SCR_PossessSpawnData",
          "IsValid",
          "SetSkipPreload",
          "GetSkipPreload"
        ]
      },
      {
        "class_name": "SCR_PossessSpawnHandlerComponent",
        "methods": [
          "SpawnEntity_S",
          "CanHandleRequest_S",
          "GetEntity",
          "ShouldDeleteEntityOnSpawnFailure_S",
          "ValidateData_S",
          "CanRequestSpawn_S",
          "OnFinalizeDone_S",
          "GetFactionFromPrefab"
        ]
      },
      {
        "class_name": "SCR_PossessSpawnRequestComponent",
        "methods": [
          "GetHandlerType",
          "GetDataType",
          "DoCanRequestRespawn",
          "Rpc_CanRequestRespawn_S",
          "ProcessCanRequest_S",
          "DoRequestRespawn",
          "Rpc_RequestRespawn_S",
          "ProcessRequest_S",
          "CreateDiag",
          "SCR_PossessRespawnDiag",
          "DrawContent",
          "CreateData"
        ]
      },
      {
        "class_name": "SCR_SpawnPointSpawnData",
        "methods": [
          "GetPrefab",
          "GetPosition",
          "GetAngles",
          "GetRplId",
          "GetSpawnPoint",
          "SCR_SpawnPointSpawnData"
        ]
      },
      {
        "class_name": "SCR_SpawnPointSpawnHandlerComponent",
        "methods": [
          "OnPostInit",
          "ValidateData_S",
          "HandleRequest_S",
          "CanRequestSpawn_S",
          "PrepareEntity_S",
          "SpawnEntity_S",
          "CanFinalize_S",
          "OnFinalizeDone_S"
        ]
      },
      {
        "class_name": "SCR_SpawnPointRespawnRequestComponent",
        "methods": [
          "GetHandlerType",
          "GetDataType",
          "DoCanRequestRespawn",
          "Rpc_CanRequestRespawn_S",
          "ProcessCanRequest_S",
          "DoRequestRespawn",
          "Rpc_RequestRespawn_S",
          "ProcessRequest_S",
          "CreateDiag",
          "SCR_SpawnPointRespawnDiag",
          "DrawContent",
          "CreateData",
          "SCR_SpawnPointSpawnData"
        ]
      },
      {
        "class_name": "SCR_SpawnLockComponent",
        "methods": [
          "OnPostInit",
          "Lock",
          "Unlock",
          "IsLocked",
          "TryLock",
          "Lock",
          "PrintLocks"
        ]
      },
      {
        "class_name": "SCR_EditorRestrictionZoneEntity",
        "methods": [
          "GetRestrictionZoneRadius",
          "GetRestrictionZoneRadiusSq",
          "GetWarningZoneRadius",
          "GetWarningZoneRadiusSq",
          "GetTeleportedZoneRadiusSq",
          "GetWarningType",
          "EOnInit",
          "SCR_EditorRestrictionZoneEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_PlayersRestrictionZoneManagerComponent",
        "methods": [
          "AddRestrictionZone",
          "RemoveRestrictionZone",
          "ZoneMovedOrDeleted",
          "ZoneCheckUpdate",
          "SetPlayerZoneData",
          "SetPlayerZoneData",
          "SetPlayerZoneData",
          "SetPlayerZoneData",
          "KillPlayerOutOfZone",
          "SetPlayerZoneData",
          "SetPlayerZoneData",
          "SetPlayerZoneData",
          "ShowWarningUI",
          "ShowWarningUI",
          "ShowWarningUI",
          "KillPlayerOutOfZone",
          "SetPlayerZoneData",
          "ZoneMovedOrDeleted",
          "SetPlayerZoneData",
          "ZoneCheckUpdate",
          "OnEntityTransformChanged",
          "ZoneMovedOrDeleted",
          "OnPlayerDisconnect",
          "OnPlayerKilled",
          "SetPlayerZoneData",
          "EOnInit",
          "DelayedInit",
          "OnPostInit",
          "SetEventMask",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_PlayerRestrictionZoneData",
        "methods": [
          "SCR_PlayerRestrictionZoneData"
        ]
      },
      {
        "class_name": "SCR_ResourceActor",
        "methods": [
          "GetDebugColor",
          "GetGridUpdateId",
          "GetOwnerOrigin",
          "GetDebugName",
          "GetDebugNameHash",
          "GetComponent",
          "GetOwner",
          "GetResourceRight",
          "ShouldUpdate",
          "IsIsolated",
          "IsGridUpdateIdGreaterThan",
          "SetResourceRights",
          "SetGridUpdateId",
          "Update",
          "UpdateInner",
          "Clear",
          "Clear"
        ]
      },
      {
        "class_name": "SCR_ResourceInteractor",
        "methods": [
          "GetGridUpdateId",
          "GetResourceGridRange",
          "GetAggregatedResourceValue",
          "GetAggregatedMaxResourceValue",
          "GetContainerCount",
          "GetLastPosition",
          "GetResourceType",
          "GetContainerQueue",
          "GetOnResourcesChanged",
          "GetOnMaxResourcesChanged",
          "GetIdentifier",
          "IsGridUpdateIdGreaterThan",
          "IsAllowed",
          "IsAllowed",
          "CanInteractWith",
          "FindContainer",
          "SetGridUpdateId",
          "UpdateLastPosition",
          "RegisterContainer",
          "RegisterContainerForced",
          "UnregisterContainer",
          "UnregisterContainer",
          "Replicate",
          "ReplicateEx",
          "UpdateContainerResourceValue",
          "UpdateContainerMaxResourceValue",
          "OnResourcesChanged",
          "OnMaxResourcesChanged",
          "OnContainerRegistered",
          "OnContainerUnregistered",
          "Initialize",
          "Clear"
        ]
      },
      {
        "class_name": "SCR_ResourceConsumer",
        "methods": [
          "GetResourceGridRange",
          "GetResourceRange",
          "GetBuyMultiplier",
          "GetSellMultiplier",
          "GetAggregatedResourceValue",
          "GetAggregatedMaxResourceValue",
          "GetContainerCount",
          "GetContainerQueue",
          "GetOnResourceRangeChanged",
          "GetOnBuyMultiplierChanged",
          "GetOnSellMultiplierChanged",
          "GetOnConsumtionStateChanged",
          "GetOnExchangeStateChanged",
          "GetGeneratorIdentifier",
          "GetIdentifier",
          "IsIgnoringItself",
          "IsConsuming",
          "IsExchanging",
          "ShouldUpdate",
          "CanInteractWith",
          "FindContainer",
          "SetResourceRange",
          "OnResourceRangeChanged",
          "SetBuyMultiplier",
          "OnBuyMultiplierChanged",
          "SetSellMultiplier",
          "OnSellMultiplierChanged",
          "EnableConsumtion",
          "OnConsumtionStateChanged",
          "EnableExchange",
          "OnExchangeStateChanged",
          "RegisterContainer",
          "OnContainerRegistered",
          "RegisterContainerForced",
          "OnContainerRegistered",
          "UnregisterContainer",
          "UnregisterContainer",
          "RequestAvailability",
          "RequestConsumtion",
          "DebugDraw",
          "UpdateContainerResourceValue",
          "UpdateContainerMaxResourceValue",
          "OnResourceRangeChanged",
          "OnBuyMultiplierChanged",
          "OnSellMultiplierChanged",
          "OnConsumtionStateChanged",
          "OnExchangeStateChanged",
          "Initialize",
          "RegisterContainer",
          "Clear",
          "PropCompareNetworkedVariables",
          "ExtractNetworkedVariables",
          "InjectNetworkedVariables",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject"
        ]
      },
      {
        "class_name": "SCR_ResourceConsumtionResponse",
        "methods": [
          "SCR_ResourceConsumtionResponse",
          "GetAvailableSupply",
          "GetResourceMultiplier",
          "GetRange",
          "GetReason",
          "SetAvailableResource",
          "SetResourceMultiplier",
          "SetRange",
          "SetReason"
        ]
      },
      {
        "class_name": "SCR_ResourceContainer",
        "methods": [
          "GetResourceValue",
          "GetMaxResourceValue",
          "GetWeightMultiplier",
          "GetResourceGain",
          "GetResourceDecay",
          "GetResourceGainTickrate",
          "GetResourceDecayTickrate",
          "GetBoundingVolume",
          "GetAxisAlignedBoundingVolume",
          "GetStorageType",
          "GetResourceType",
          "GetOnEmptyBehavior",
          "GetResourceEncapsulator",
          "GetLinkedInteractorsCount",
          "GetLinkedInteractorAt",
          "GetLinkedInteractorIndex",
          "IsInteractorLinked",
          "IsAllowed",
          "IsIsolated",
          "IsInRange",
          "IsResourceDecayEnabled",
          "IsResourceGainEnabled",
          "IsEncapsulated",
          "ShouldUpdate",
          "IsAllowedToStoreResource",
          "CanStoreResource",
          "GetOnResourcesChanged",
          "GetOnMaxResourcesChanged",
          "GetOnResourcesDepleted",
          "GetOnResourcesMaxedOut",
          "GetOnGainChanged",
          "GetOnDecayChanged",
          "GetOnGainEnabledChanged",
          "GetOnDecayEnabledChanged",
          "SetResourceValue",
          "SetResourceValueUnsafe",
          "SetResourceValueUnsafe",
          "OnResourcesChanged",
          "SetMaxResourceValue",
          "OnMaxResourcesChanged",
          "SetResourceGain",
          "OnGainChanged",
          "SetResourceDecay",
          "OnDecayChanged",
          "SetResourceGainTickrate",
          "SetResourceDecayTickrate",
          "SetResourceGainTimeout",
          "SetResourceDecayTimeout",
          "SetResourceEncapsulator",
          "IncreaseResourceValue",
          "SetResourceValue",
          "DecreaseResourceValue",
          "SetResourceValue",
          "MaxOutResourceValue",
          "SetResourceValue",
          "DepleteResourceValue",
          "SetResourceValue",
          "SetOnEmptyBehavior",
          "LinkInteractor",
          "UnlinkInteractor",
          "UnlinkEveryInteractor",
          "EnableGain",
          "OnGainEnabledChanged",
          "EnableDecay",
          "OnDecayEnabledChanged",
          "SetIsEncapsulated",
          "UpdateWeightMultiplier",
          "DebugDraw",
          "Update",
          "ComputeResourceGain",
          "ComputeResourceDecay",
          "ComputeResourceDifference",
          "ComputeResourceGain",
          "ComputeResourceDecay",
          "OnResourcesChanged",
          "UpdateWeightMultiplier",
          "OnResourcesIncreased",
          "OnResourcesDecreased",
          "OnResourcesIncreased",
          "OnResourcesMaxedOut",
          "OnResourcesDecreased",
          "OnResourcesDepleted",
          "OnResourcesDepleted",
          "OnResourcesMaxedOut",
          "OnMaxResourcesChanged",
          "UpdateWeightMultiplier",
          "OnGainChanged",
          "OnDecayChanged",
          "OnGainEnabledChanged",
          "OnDecayEnabledChanged",
          "CopyFromContainer",
          "Initialize",
          "CopyFromContainer",
          "Clear"
        ]
      },
      {
        "class_name": "SCR_ResourceContainerVirtual",
        "methods": [
          "GetBoundingVolume",
          "GetAxisAlignedBoundingVolume",
          "CopyFromContainer",
          "IsInRange",
          "DebugDraw"
        ]
      },
      {
        "class_name": "SCR_ResourceStoredContainerStoragePartialHelper",
        "methods": [
          "GetMaxStoredResourceValue",
          "IsSourceValid",
          "ProcessStorage",
          "SCR_ResourceStoredContainerStoragePartialHelper"
        ]
      },
      {
        "class_name": "SCR_ResourceEncapsulatorActionBase",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceEncapsulatorActionChangeResourceValue",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceEncapsulatorActionDisableUserActions",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceEncapsulatorActionDisableInventoryStorage",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceEncapsulatorActionChangeRights",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceEncapsulatorActionChangeDecay",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceEncapsulatorActionChangeOnEmptyBehavior",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceEncapsulatorActionChangeGain",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceContainerQueueBase",
        "methods": [
          "GetAggregatedResourceValue",
          "GetAggregatedMaxResourceValue",
          "GetFirstContainer",
          "GetContainerAt",
          "GetContainerCount",
          "RegisterContainer",
          "FindContainer",
          "PopFirstContainer",
          "PopContainerAt",
          "SetAggregatedResourceValue",
          "SetAggregatedMaxResourceValue",
          "IncreaseAggregatedResourceValue",
          "SetAggregatedResourceValue",
          "DecreaseAggregatedResourceValue",
          "SetAggregatedResourceValue",
          "IncreaseAggregatedMaxResourceValue",
          "SetAggregatedMaxResourceValue",
          "DecreaseAggregatedMaxResourceValue",
          "SetAggregatedMaxResourceValue",
          "SetAggregatedResourceValue",
          "SetAggregatedMaxResourceValue",
          "PerformSorting",
          "Initialize",
          "DebugDraw",
          "UpdateContainerResourceValue",
          "UpdateContainerMaxResourceValue",
          "SCR_ResourceContainerQueueBase",
          "Clear",
          "GetStoragePolicyCount",
          "RegisterContainer",
          "PopFirstContainer",
          "PopContainerAt",
          "PerformSorting",
          "Initialize",
          "UpdateContainerResourceValue",
          "UpdateContainerMaxResourceValue"
        ]
      },
      {
        "class_name": "SCR_ResourceStorageTypeTitle",
        "methods": [
          "_WB_GetCustomTitle",
          "IsStorageTypeValid",
          "SetStorageQueue",
          "ResetStorageQueue"
        ]
      },
      {
        "class_name": "SCR_ResourceConsumerContainerStorageQueueExtended",
        "methods": [
          "ShouldContainerChangeCauseUpdate",
          "ComputePosition"
        ]
      },
      {
        "class_name": "SCR_ResourceEncapsulatorContainerStorageQueueExtended",
        "methods": [
          "ShouldContainerChangeCauseUpdate",
          "ComputePosition"
        ]
      },
      {
        "class_name": "SCR_ResourceGeneratorContainerStorageQueueExtended",
        "methods": [
          "ShouldContainerChangeCauseUpdate",
          "ComputePosition"
        ]
      },
      {
        "class_name": "SCR_ResourceEncapsulator",
        "methods": [
          "GetAggregatedResourceValue",
          "GetAggregatedMaxResourceValue",
          "GetContainerCount",
          "GetContainerQueue",
          "GetContainerRepresentative",
          "IsAllowed",
          "IsContainerRepresentative",
          "ShouldUpdate",
          "FindContainer",
          "SetContainerRepresentative",
          "RegisterContainer",
          "OnContainerRegistered",
          "RegisterContainerForced",
          "OnContainerRegistered",
          "UnregisterContainer",
          "UnregisterContainer",
          "RequestConsumtion",
          "RequestGeneration",
          "DebugDraw",
          "UpdateContainerResourceValue",
          "UpdateContainerMaxResourceValue",
          "Initialize",
          "Clear",
          "OnResourcesChanged",
          "OnMaxResourcesChanged",
          "OnContainerRegistered",
          "OnContainerUnregistered"
        ]
      },
      {
        "class_name": "SCR_ResourceGeneratorActionBase",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceGeneratorActionDropContainers",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceGeneratorActionStore",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ResourceGenerationResponse",
        "methods": [
          "SCR_ResourceGenerationResponse",
          "GetAvailableResourceSpace",
          "GetResourceMultiplier",
          "GetRange",
          "GetReason",
          "SetAvailableResourceSpace",
          "SetResourceMultiplier",
          "SetRange",
          "SetReason"
        ]
      },
      {
        "class_name": "SCR_ResourceGenerator",
        "methods": [
          "GetResourceGridRange",
          "GetStorageRange",
          "GetResourceMultiplier",
          "GetIdentifier",
          "GetAggregatedResourceValue",
          "GetAggregatedMaxResourceValue",
          "GetContainerCount",
          "GetContainerQueue",
          "IsIgnoringItself",
          "CanInteractWith",
          "FindContainer",
          "RegisterContainer",
          "OnContainerRegistered",
          "RegisterContainerForced",
          "OnContainerRegistered",
          "UnregisterContainer",
          "UnregisterContainer",
          "RequestAvailability",
          "RequestGeneration",
          "DebugDraw",
          "UpdateContainerResourceValue",
          "UpdateContainerMaxResourceValue",
          "Initialize",
          "RegisterContainer",
          "Clear",
          "PropCompareNetworkedVariables",
          "ExtractNetworkedVariables",
          "InjectNetworkedVariables",
          "Encode",
          "Decode",
          "SnapCompare",
          "PropCompare",
          "Extract",
          "Inject"
        ]
      },
      {
        "class_name": "SCR_ResourceSystemHelper",
        "methods": [
          "IsGlobalResourceTypeEnabled",
          "GetStoredResources",
          "ConsumeResources",
          "GetAvailableResources",
          "SuppliesToString",
          "GetStoredAndMaxResources",
          "GetAvailableResources",
          "GetStorageConsumer",
          "GetAvailableResourceConsumer",
          "GetFirstValidConsumer",
          "GetFirstValidGenerator",
          "RoundRefundSupplyAmount"
        ]
      },
      {
        "class_name": "SCR_ResourceActorLinkComponent",
        "methods": [
          "SetActor",
          "GetActor"
        ]
      },
      {
        "class_name": "SCR_ResourceComponentClass",
        "methods": [
          "SCR_Resources_OnResourceEnabledChanged"
        ]
      },
      {
        "class_name": "SCR_ResourceComponent",
        "methods": [
          "TEMP_GetOnInteractorReplicated",
          "TEMP_OnInteractorReplicated",
          "IsResourceTypeEnabled",
          "GetDisabledResourceTypes",
          "CanResourceTypeEnabledBeChanged",
          "SetResourceTypeEnabled",
          "OnResourceTypeEnabledChanged",
          "OnResourceTypeEnabledChanged",
          "FindResourceComponent",
          "GetGridContainersBoundsMins",
          "GetGridContainersBoundsMaxs",
          "GetGridContainersBounds",
          "GetGridContainersBoundingBox",
          "GetGridContainersWorldBoundingBox",
          "IsDynamic",
          "GetReplicationComponent",
          "GetFactionAffiliationComponent",
          "GetEncapsulator",
          "GetEncapsulator",
          "GetNextEncapsulatorCandidate",
          "GetContainer",
          "GetContainer",
          "GetNextContainerCandidate",
          "GetConsumer",
          "GetConsumer",
          "GetNextConsumerCandidate",
          "GetGenerator",
          "GetGenerator",
          "GetNextGeneratorCandidate",
          "GetGridUpdateId",
          "GetLastPosition",
          "HasParent",
          "GetDebugColor",
          "IsGridUpdateIdGreaterThan",
          "IsDebugVisualizationEnabled",
          "IsVisible",
          "IsOwnerActive",
          "ShouldConsumersBeReplicated",
          "ShouldGeneratorsBeReplicated",
          "SetGridUpdateId",
          "SetIsVisible",
          "ReplicateEx",
          "OnVisibilityChanged",
          "SetGridContainersBoundsMins",
          "SetGridContainersBoundsMaxs",
          "SetGridContainersBounds",
          "UpdateLastPosition",
          "FlagForProcessing",
          "UnflagForProcessing",
          "DeleteConsumers",
          "DeleteGenerators",
          "DeleteQueryInteractors",
          "OnPostInit",
          "Initialize",
          "SetEventMask",
          "Initialize",
          "Replicate",
          "OnChildAdded",
          "EOnInit",
          "UpdateLastPosition",
          "UpdateLastPosition",
          "DebugDraw",
          "Replicate",
          "ReplicateEx",
          "TEMP_OnInteractorReplicated",
          "_WB_AfterWorldUpdate",
          "DebugDraw",
          "_WB_OnKeyChanged",
          "OnVisibilityChanged",
          "OnAddedToParent",
          "OnAddedToParentEx",
          "OnAddedToParentEx",
          "OnRemovedFromParent",
          "OnVehiclePhysicsActive",
          "OnDelete",
          "UnflagForProcessing"
        ]
      },
      {
        "class_name": "SCR_ResourceGridCell",
        "methods": [
          "GetGridUpdateId",
          "GetIndex",
          "GetX",
          "GetZ",
          "Get",
          "SetGridUpdateId",
          "RegisterDynamicItem",
          "UnregisterDynamicItem",
          "RegisterStaticItem",
          "UnregisterStaticItem",
          "MoveStaticItem",
          "MoveDynamicItem",
          "Subscribe",
          "Unsubscribe",
          "PromoteResourceItemToDynamic",
          "PromoteResourceItemToStatic",
          "SCR_ResourceGridCell"
        ]
      },
      {
        "class_name": "SCR_ResourceGrid",
        "methods": [
          "GetGridUpdateId",
          "GetFrameBudget",
          "ResetFrameBudget",
          "ComputeIndex",
          "ComputeIndex",
          "ComputeIndex",
          "IncreaseGridUpdateId",
          "FlagResourceItem",
          "UnflagResourceItem",
          "ProcessFlaggedItems",
          "IncreaseGridUpdateId",
          "ProcessResourceItem",
          "UpdateResourceStaticItem",
          "UpdateResourceDynamicItem",
          "PromoteResourceItemToDynamic",
          "QueryGridCells",
          "PromoteResourceItemToStatic",
          "QueryGridCells",
          "QueryGridCells",
          "QueryContainers",
          "QueryContainers",
          "QueryContainers",
          "QueryContainers",
          "UpdateInteractor",
          "QueryContainers",
          "QueryContainers",
          "ProcessResourceItem",
          "UnregisterResourceItem",
          "SCR_ResourceGrid"
        ]
      },
      {
        "class_name": "SCR_ResourceSystemSubscriptionHandleBase",
        "methods": [
          "CreateHandle",
          "GetLastPokedAt",
          "GetOwnerRplId",
          "GetResourceComponentRplId",
          "GetInteractorType",
          "GetResourceIdentifier",
          "GetResourceType",
          "Poke",
          "OnDelete",
          "OnInit",
          "SCR_ResourceSystemSubscriptionHandleBase",
          "OnInit",
          "OnDelete"
        ]
      },
      {
        "class_name": "SCR_ResourceSystemSubscriptionListing",
        "methods": [
          "GetInteractor",
          "IsEmpty",
          "SubscribeListener",
          "UnsubscribeListener",
          "Replicate",
          "SCR_ResourceSystemSubscriptionListing"
        ]
      },
      {
        "class_name": "SCR_ResourceSystemSubscriptionManager",
        "methods": [
          "GetListing",
          "GetNextListingCandidate",
          "GetHandle",
          "GetNextHandleCandidate",
          "SubscribeListener",
          "UnsubscribeListener",
          "UnsubscribeListenerCompletely",
          "ProcessGracefulHandles",
          "ReplicateListeners",
          "RequestSubscriptionListenerHandle",
          "RequestSubscriptionListenerHandleGraceful",
          "OnSubscriptionListenerHandleDeleted",
          "OnResourceInteractorDeleted",
          "SCR_ResourceSystemSubscriptionManager"
        ]
      },
      {
        "class_name": "SCR_ResourceContainerStoreAction",
        "methods": [
          "PerformAction",
          "GetActionNameScript",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ResourceContainerVehicleLoadAction",
        "methods": [
          "PerformContinuousAction",
          "PerformAction",
          "PerformAction",
          "GetResourceValues",
          "GetResourceValues",
          "GetActionNameScript",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "GetResourceValues",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ResourceContainerVehicleUnloadAction",
        "methods": [
          "PerformContinuousAction",
          "PerformAction",
          "PerformAction",
          "GetResourceValues",
          "GetResourceValues",
          "GetActionNameScript",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "GetResourceValues",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ResourceStorageOpenAction",
        "methods": [
          "CanBePerformedScript",
          "PerformActionInternal",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGet",
        "methods": [
          "SetValue",
          "Get",
          "FindEntityByName"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetArea",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetAreaTrigger",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetArrayOfLayerBases",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetArrayOfPlayers",
        "methods": [
          "Get",
          "GetPlayerEntities",
          "GetPlayerEntities"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetClosestPlayerEntity",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetCountEntitiesInTrigger",
        "methods": [
          "Get",
          "GetEntitiesInTrigger"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetEntityByName",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetLastFinishedTaskEnity",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetLastFinishedTaskLayer",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetLayerBase",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetLayerTask",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetListEntitiesInTrigger",
        "methods": [
          "Get",
          "GetEntitiesInTrigger",
          "GetEntitiesInTrigger"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetPlayerEntity",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetRandomLayerBase",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetSpawnedEntity",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetTask",
        "methods": [
          "Get"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionInputBase",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionInputCheckEntitiesInAreaTrigger",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionInputCheckEntitiesInTrigger",
        "methods": [
          "Init",
          "RegisterOnChange",
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionInputOnTaskEventIncreaseCounter",
        "methods": [
          "Init",
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ContainerAIActionTitle",
        "methods": [
          "_WB_GetCustomTitle",
          "SplitStringByUpperCase",
          "SplitStringByUpperCase"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionAI",
        "methods": [
          "OnActivate",
          "ProcessEntity",
          "ProcessEntity",
          "ProcessEntity",
          "ProcessEntity"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIAction",
        "methods": [
          "Init",
          "OnActivate",
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionDisableLOD",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionOnThreatStateChanged",
        "methods": [
          "Init",
          "OnActivate",
          "OnThreatStateChanged"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionOnWaypointCompleted",
        "methods": [
          "Init",
          "OnActivate",
          "OnWaypointSpawned",
          "OnWaypointCompleted"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionSetCharacterStance",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionSetCombatType",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionSetFormation",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionSetHoldFire",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionSetMaxAutonomousDistance",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionSetMovementType",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionSetPerceptionFactor",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIActionSetSkill",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAIAddWaypoint",
        "methods": [
          "OnActivate",
          "ClearCurrentWaypoints",
          "ClearCurrentWaypoints",
          "OnWaypointSpawned",
          "ClearCurrentWaypoints"
        ]
      },
      {
        "class_name": "SCR_ContainerMedicalActionTitle",
        "methods": [
          "_WB_GetCustomTitle",
          "SplitStringByUpperCase",
          "SplitStringByUpperCase"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionMedical",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalAction",
        "methods": [
          "Init",
          "OnActivate",
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionAddParticularBleeding",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionAddRandomBleeding",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionRemoveAllBleedings",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionRemoveGroupBleeding",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionSetBleedingRate",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionSetBlood",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionSetPermitUnconsciousness",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionSetRegenerationRate",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionSetResilience",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionSetSalineBaggedGroup",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkMedicalActionSetTourniquettedGroup",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ContainerActionTitle",
        "methods": [
          "_WB_GetCustomTitle",
          "SplitStringByUpperCase",
          "SplitStringByUpperCase"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionAddItemToInventory",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionAppendBriefingEntryText",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionAppendBriefingEntryTextBasedOnTask",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionBase",
        "methods": [
          "Init",
          "OnActivate",
          "CanActivate",
          "ValidateInputEntity",
          "OnActivate",
          "SpawnObjects"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionBasedOnConditions",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionChangeLayerActivationType",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionChangeLayerTerminationStatus",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionChangeTaskState",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionChangeTriggerActivationPresence",
        "methods": [
          "CanActivateTriggerVariant",
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionCompareCounterAndExecute",
        "methods": [
          "OnActivate",
          "PrintFormat",
          "PrintFormat",
          "PrintFormat"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionCountInventoryItemsAndExecuteAction",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionDamageWheel",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionDecreaseLogicCounter",
        "methods": [
          "OnActivate",
          "PrintFormat",
          "PrintFormat",
          "PrintFormat"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionDeleteEntity",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionDeleteMarker",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionEndMission",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionExecuteFunction",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionFailTaskIfVehiclesInTriggerDestroyed",
        "methods": [
          "CanActivateTriggerVariant",
          "AddListener",
          "OnObjectDamage",
          "OnActivate",
          "AddListener",
          "AddListener"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionFeedParamToTaskDescription",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionIncrementCounter",
        "methods": [
          "OnActivate",
          "PrintFormat",
          "PrintFormat",
          "PrintFormat"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionIntroVoicelineBasedOnTasks",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionItemSafeguard",
        "methods": [
          "OnItemPossessed",
          "OnItemDropped",
          "OnItemCarrierChanged",
          "HandleOldSlotGC",
          "HandleOldSlotGC",
          "HandleNewSlotGC",
          "HandleNewSlotGC",
          "HandleNewSlotGC",
          "HandleOldSlotGC",
          "OnDestroyed",
          "OnDisconnected",
          "OnDestroyed",
          "RegisterPlayer",
          "OnActivate",
          "RegisterPlayer"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionKillEntity",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionLockOrUnlockAllTargetVehiclesInTrigger",
        "methods": [
          "CanActivateTriggerVariant",
          "LockOrUnlockAllVehicles",
          "OnActivate",
          "LockOrUnlockAllVehicles",
          "LockOrUnlockAllVehicles"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionLockOrUnlockVehicle",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionLoopOverNotRandomlySelectedLayers",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionOnCompartmentEnteredOrLeft",
        "methods": [
          "OnCompartmentEnteredOrLeft",
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionOnEngineStartedOrStop",
        "methods": [
          "OnEngineStartedOrStop",
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionOnUserActionEvent",
        "methods": [
          "OnInvoked",
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionPlaySound",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionPlaySoundOnEntity",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionPrepareAreaFromDynamicDespawn",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionProcessVoicelineEnumAndString",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionRemoveAreaFromDynamicDespawn",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionRemoveItemFromInventory",
        "methods": [
          "OnActivate",
          "OnActivateCalledLater"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionResetCounter",
        "methods": [
          "OnActivate",
          "PrintFormat",
          "PrintFormat",
          "PrintFormat"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionRestoreLayerToDefault",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionSetBriefingEntryText",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionSetBriefingEntryTextBasedOnGeneratedTasks",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionSetEntityPosition",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionSetExecutionEntryTextBasedOnGeneratedTasks",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionSetFuelPercentage",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionSetMissionEndScreen",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionSetSupplyPercentage",
        "methods": [
          "OnActivate",
          "GetContainer"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionShowHint",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionShowPopupNotification",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionSpawnClosestObjectFromList",
        "methods": [
          "OnActivate",
          "SpawnObjects"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionSpawnObjectBasedOnDistance",
        "methods": [
          "SpawnRandomObject",
          "SpawnRandomMultipleObjects",
          "OnActivate",
          "SpawnObjects",
          "SpawnRandomMultipleObjects"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionSpawnObjects",
        "methods": [
          "OnActivate",
          "SpawnObjects"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionToggleEngine",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionToggleLights",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionVoiceOverPlayLine",
        "methods": [
          "OnActivate",
          "OnFinished"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionVoiceOverPlaySequence",
        "methods": [
          "OnActivate",
          "OnFinished"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionWaitAndExecute",
        "methods": [
          "ExecuteActions",
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkCreateVariable",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkGetVariableValue",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSetVariable",
        "methods": [
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActionQRFDispacher",
        "methods": [
          "WatchAIGroup",
          "WatchAIGroup",
          "WatchAIGroup",
          "GetAIGroup",
          "OnDelayedGroupMembersSpawned",
          "OnGroupCompositionChanged",
          "ThresholdValidation",
          "StartQRFProcedure",
          "ThresholdHandling",
          "StartQRFProcedure",
          "ThresholdHandling",
          "DoPlaySoundOnEntityPosition",
          "ThresholdHandling",
          "DoPlaySoundOnEntityPosition",
          "SelectRandomGroup",
          "SelectRandomSpawnpoint",
          "CheckSpawnPointSafeZones",
          "GetMaxDistanceForUnitType",
          "OnFinishedSpawningVehicleOccupants",
          "DoPlaySoundOnEntityPosition",
          "Init",
          "OnActivate",
          "CheckForAIToWatch",
          "CheckForAIToWatch"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTaskType",
        "methods": [
          "GetTaskType"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkArea",
        "methods": [
          "GetDynamicDespawnEnabled",
          "SetDynamicDespawnEnabled",
          "GetDynamicDespawnRange",
          "SetDynamicDespawnRange",
          "GetTask",
          "GetSlotTask",
          "SetSlotTask",
          "GetLayerTask",
          "SetLayerTask",
          "GetLayerTaskName",
          "GetLayerTaskType",
          "GetDeliveryPointName",
          "StoreDeliveryPoint",
          "StoreTaskToArea",
          "Create",
          "GetAllSlots",
          "Create",
          "GetSuitableLayersForTaskType",
          "Create",
          "GetTrigger",
          "SpawnTrigger",
          "MoveTaskIconToArea",
          "GetIsTaskSuitableForArea",
          "GetAvailableTaskTypes",
          "GetAvailableTaskTypes",
          "GetAllSlots",
          "GetSuitableLayersForTaskType",
          "GetAllSlots",
          "GetAllSlots",
          "SetAreaSelected",
          "GetIsAreaSelected",
          "OnAreaTriggerActivated",
          "GetOnAreaTriggerActivated",
          "GetOnAreaInit",
          "RestoreToDefault",
          "DynamicReinit",
          "Init",
          "DynamicDespawn",
          "InitParentLayer",
          "Init",
          "SpawnTrigger",
          "EOnInit",
          "OnPostInit",
          "SetEventMask",
          "DrawDebugShape",
          "_WB_AfterWorldUpdate",
          "DrawDebugShape",
          "_WB_OnKeyChanged",
          "DrawDebugShape",
          "SCR_ScenarioFrameworkArea"
        ]
      },
      {
        "class_name": "SCR_InvCallBackCheck",
        "methods": [
          "OnFailed",
          "PrintFormat",
          "OnComplete"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkInventoryLoader",
        "methods": [
          "Init",
          "InvokeAllChildrenSpawned"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLayerBaseClass",
        "methods": [
          "ScriptInvokerScenarioFrameworkLayerMethod"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLayerBase",
        "methods": [
          "GetName",
          "SetEntity",
          "GetIsTerminated",
          "SetIsTerminated",
          "SetRandomlySpawnedChildren",
          "GetPlayersCount",
          "GetMaxPlayersForGameMode",
          "GetParentArea",
          "GetAllLayerTasks",
          "GetLayerTask",
          "GetSlotTask",
          "SetFactionKey",
          "GetFactionKey",
          "SetParentLayer",
          "GetParentLayer",
          "GetSpawnChildrenType",
          "GetEnableRepeatedSpawn",
          "SetEnableRepeatedSpawn",
          "GetActivationType",
          "SetActivationType",
          "GetIsInitiated",
          "GetDynamicDespawnExcluded",
          "SetDynamicDespawnExcluded",
          "GetRandomChildren",
          "GetChildren",
          "GetLogics",
          "GetRepeatedSpawnNumber",
          "SetRepeatedSpawnNumber",
          "RepeatedSpawn",
          "RepeatedSpawnCalled",
          "SpawnChildren",
          "RepeatedSpawn",
          "GetOnAllChildrenSpawned",
          "InvokeAllChildrenSpawned",
          "CheckAllChildrenSpawned",
          "InvokeAllChildrenSpawned",
          "InvokeAllChildrenSpawned",
          "InvokeAllChildrenSpawned",
          "SpawnChildren",
          "InvokeAllChildrenSpawned",
          "InitChild",
          "SpawnPreviouslyRandomizedChildren",
          "SpawnRandomOneChild",
          "SpawnPreviouslyRandomizedChildren",
          "InitChild",
          "SpawnRandomMultipleChildren",
          "SpawnPreviouslyRandomizedChildren",
          "InitChild",
          "InitChild",
          "GetSpawnedEntity",
          "ActivateLogic",
          "GetLogics",
          "RestoreToDefault",
          "Init",
          "DynamicDespawn",
          "DynamicReinit",
          "InitAlreadyHappened",
          "InitParentLayer",
          "InitNotTerminated",
          "InitDynDespawnAndActivation",
          "InitActivationConditions",
          "InitArea",
          "InitFactionSettings",
          "SetFactionKey",
          "InitOtherThings",
          "FinishInitChildrenInsert",
          "FinishInit",
          "FinishInitChildrenInsert",
          "InitFactionSettings",
          "GetChildren",
          "SpawnChildren",
          "Init",
          "FinishInit",
          "AfterAllChildrenSpawned",
          "ActivateLogic",
          "RepeatedSpawn",
          "EOnFrame",
          "DrawDebugShape",
          "OnPostInit",
          "SetEventMask",
          "SetDebugShapeSize",
          "DrawDebugShape",
          "_WB_OnCreate",
          "RenameOwnerEntity",
          "RenameOwnerEntity",
          "RenameOwnerEntity",
          "SCR_ScenarioFrameworkLayerBase",
          "DynamicDespawn"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLayerTask",
        "methods": [
          "GetLayerTaskState",
          "GetLayerTaskResolvedBeforeLoad",
          "SetLayerTaskState",
          "GetTask",
          "GetTaskPrefab",
          "GetOverridenObjectDisplayName",
          "SetOverridenObjectDisplayName",
          "GetTaskTitle",
          "GetOriginalTaskDescription",
          "GetTaskDescription",
          "GetTaskType",
          "RestoreToDefault",
          "DynamicReinit",
          "Init",
          "DynamicDespawn",
          "FinishInit",
          "OnTaskStateChanged",
          "SetTaskPrefab",
          "SetSlotTask",
          "GetSlotTask",
          "SetSupportEntity",
          "InitTask",
          "SetupTask",
          "CreateTask",
          "SetupTask",
          "_WB_AfterWorldUpdate",
          "DrawDebugShape",
          "_WB_OnKeyChanged",
          "DrawDebugShape",
          "DynamicDespawn"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLayerTaskClearArea",
        "methods": [
          "SetSupportEntity",
          "SCR_ScenarioFrameworkLayerTaskClearArea"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLayerTaskDefend",
        "methods": [
          "GetDefendTime",
          "SetDefendTime",
          "GetCharacterTriggerEntity",
          "FindCharacterTriggerEntity",
          "SetSupportEntity",
          "SCR_ScenarioFrameworkLayerTaskDefend",
          "CountAttackerDefenderNumbers",
          "EvaluateStatus",
          "RemovePeriodicUpdates",
          "FindCharacterTriggerEntity",
          "CountAttackerDefenderNumbers",
          "RemovePeriodicUpdates",
          "RemovePeriodicUpdates",
          "RemovePeriodicUpdates",
          "SetupAttackerLayer",
          "SetupEvaluation",
          "SetupAttackerLayer",
          "RestoreToDefault",
          "DynamicDespawn",
          "AfterAllChildrenSpawned",
          "FindCharacterTriggerEntity",
          "InitHUD",
          "SetupEvaluation",
          "OnPostInit",
          "SetEventMask",
          "InitHUD",
          "UpdateHUD",
          "Rpc",
          "RpcDo_UpdateHUD",
          "InitHUD",
          "CheckAttackerLayers",
          "EvaluateStatus",
          "RemovePeriodicUpdates",
          "UpdateHUD",
          "EOnFrame",
          "UpdateHUD",
          "CheckAttackerLayers",
          "CheckAttackerLayers",
          "CheckAttackerLayers",
          "EvaluateStatus"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTaskDefendFactionSettings",
        "methods": [
          "GetFaction",
          "SetFactionKey",
          "GetCountOnlyPlayers"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTaskDefendDefendingFactionTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTaskDefendAttackingFactionTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLayerTaskDeliver",
        "methods": [
          "SetEntity",
          "SetDeliveryPointEntity",
          "GetDeliveryPointEntity",
          "GetIntelMapMarkerUpdateDelay",
          "RestoreToDefault",
          "SetupTask",
          "UpdateTaskTitleAndDescription",
          "SetSupportEntity",
          "SCR_ScenarioFrameworkLayerTaskDeliver"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLayerTaskDestroy",
        "methods": [
          "SetSupportEntity",
          "SCR_ScenarioFrameworkLayerTaskDestroy"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLayerTaskKill",
        "methods": [
          "SetSupportEntity",
          "SCR_ScenarioFrameworkLayerTaskKill"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLogicInput",
        "methods": [
          "Init",
          "OnActivate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLogic",
        "methods": [
          "Init",
          "SetIsTerminated",
          "GetIsTerminated",
          "OnInput",
          "OnActivate",
          "_WB_OnCreate"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLogicCounter",
        "methods": [
          "OnInput",
          "Increase",
          "Increase",
          "GetCounterValue",
          "SetCounterValue",
          "Increase",
          "OnActivate",
          "Decrease",
          "OnActivate",
          "Reset"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLogicOR",
        "methods": [
          "OnInput"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkQRFSlotAI",
        "methods": [
          "GetGroupType",
          "SetObjectToSpawn",
          "GetNumberOfExistingWaypoints",
          "ClearWaypoints",
          "CreateWaypoint",
          "SpawnWaypoint",
          "ProcessQueuedWaypoints",
          "Init",
          "SetWaypointToAI"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotAI",
        "methods": [
          "SetAIPrefabsForRemoval",
          "RestoreToDefault",
          "DynamicDespawn",
          "Init",
          "InitWaypoints",
          "AfterAllChildrenSpawned",
          "ActivateAI",
          "AfterAllAgentsSpawned",
          "AfterAllAgentsSpawned",
          "SetWaypointToAI",
          "ActivateAI",
          "AfterAllAgentsSpawned",
          "OnAgentAdded",
          "OnAgentAdded",
          "InitGroupComponents",
          "SetWaypointToAI",
          "AfterAllAgentsSpawned",
          "InitGroupComponents",
          "InitWaypoints",
          "CheckWaypointsAfterInit",
          "ProcessWaypoints",
          "ProcessWaypoints",
          "SetWaypointToAI",
          "SetWaypointToAI",
          "CreateDefaultWaypoint",
          "CreateDefaultWaypoint",
          "DecreaseAIGroupMemberCount",
          "SetIsTerminated",
          "SetIsTerminated",
          "CreateAIGroup",
          "SCR_ScenarioFrameworkSlotAI"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotBase",
        "methods": [
          "QueryObjectsInRange",
          "OnObjectDamage",
          "SetIsTerminated",
          "SetIsTerminated",
          "OnInventoryParentChanged",
          "SetDynamicDespawnExcluded",
          "OnCompartmentEntered",
          "GetOverridenObjectDisplayName",
          "SetOverridenObjectDisplayName",
          "GetSpawnedEntityDisplayName",
          "GetEntity",
          "GetAreaWB",
          "GetSpawnedObjectName",
          "GetObjectToSpawn",
          "GetRandomlySpawnedObject",
          "SetRandomlySpawnedObject",
          "RestoreToDefault",
          "DynamicDespawn",
          "InitAlreadyHappened",
          "InitRepeatableSpawn",
          "InitEntitySpawnCheck",
          "InvokeAllChildrenSpawned",
          "InitEntitySpawn",
          "QueryObjectsInRange",
          "InitOtherThings",
          "FinishInit",
          "InvokeAllChildrenSpawned",
          "Init",
          "AfterAllChildrenSpawned",
          "GetOnAllAreasInitiatedInvoker",
          "SpawnChildren",
          "GetRandomAsset",
          "SpawnAsset",
          "GetRandomAsset",
          "_WB_AfterWorldUpdate",
          "DrawDebugShape",
          "_WB_SetTransform",
          "SpawnEntityPreview",
          "_WB_OnInit",
          "SpawnEntityPreview",
          "_WB_OnKeyChanged",
          "DrawDebugShape",
          "SpawnEntityPreview",
          "SCR_ScenarioFrameworkSlotBase",
          "DynamicDespawn"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotClearArea",
        "methods": [
          "FinishInit",
          "AfterAllChildrenSpawned",
          "AfterParentAreaChildrenSpawned"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotDefend",
        "methods": [
          "DynamicDespawn",
          "SCR_ScenarioFrameworkSlotDefend"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotDelivery",
        "methods": [
          "StoreTaskSubjectToParentTaskLayer",
          "FinishInitChildrenInsert"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotExtraction",
        "methods": [
          "FinishInit"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotMarker",
        "methods": [
          "GetMapMarkerType",
          "SetMapMarkerType",
          "GetMapMarker",
          "RestoreToDefault",
          "RemoveMapMarker",
          "AfterAllChildrenSpawned",
          "CreateMapMarker",
          "RemoveMapMarker",
          "CreateMapMarker",
          "DynamicDespawn",
          "RemoveMapMarker"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotPick",
        "methods": [
          "GetTaskTitle",
          "DynamicDespawn",
          "GetTaskDescription",
          "AfterAllChildrenSpawned"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotTask",
        "methods": [
          "OnTaskStateChanged",
          "SetTaskResolvedBeforeLoad",
          "StoreTaskSubjectToParentTaskLayer",
          "GetTaskTitle",
          "GetTaskExecutionBriefing",
          "GetTaskDescription",
          "GetParentTaskLayer",
          "RestoreToDefault",
          "DynamicReinit",
          "Init",
          "DynamicDespawn",
          "InitEntitySpawnCheck",
          "StoreTaskSubjectToParentTaskLayer",
          "FinishInit",
          "StoreTaskSubjectToParentTaskLayer",
          "Init",
          "DynamicDespawn"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotTaskAI",
        "methods": [
          "SetAIPrefabsForRemoval",
          "RestoreToDefault",
          "DynamicDespawn",
          "Init",
          "InitWaypoints",
          "AfterAllChildrenSpawned",
          "ActivateAI",
          "AfterAllAgentsSpawned",
          "AfterAllAgentsSpawned",
          "SetWaypointToAI",
          "ActivateAI",
          "AfterAllAgentsSpawned",
          "OnAgentAdded",
          "OnAgentAdded",
          "InitGroupComponents",
          "SetWaypointToAI",
          "AfterAllAgentsSpawned",
          "InitGroupComponents",
          "InitWaypoints",
          "CheckWaypointsAfterInit",
          "ProcessWaypoints",
          "ProcessWaypoints",
          "SetWaypointToAI",
          "SetWaypointToAI",
          "CreateDefaultWaypoint",
          "CreateDefaultWaypoint",
          "DecreaseAIGroupMemberCount",
          "SetIsTerminated",
          "CreateAIGroup"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotTrigger",
        "methods": [
          "RestoreToDefault",
          "FinishInit",
          "AfterAllChildrenSpawned",
          "AfterParentAreaChildrenSpawned",
          "RepeatedSpawn"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkSlotWaypoint",
        "methods": [
          "SpawnAsset",
          "GetRandomAsset",
          "DrawDebugShape",
          "_WB_OnKeyChanged",
          "DrawDebugShape",
          "SpawnEntityPreview",
          "SCR_ScenarioFrameworkSlotWaypoint"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTriggerNetworkComponent",
        "methods": [
          "ReplicateTriggerState",
          "Rpc",
          "Rpc_InvokeTriggerUpdated",
          "Rpc_InvokePlayerLeftTrigger"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointSet",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkActivationConditionBase",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkDayTimeCondition",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkDayTimeHourCondition",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkVariableValueCondition",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWeatherCondition",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_QRFGroupConfig",
        "methods": [
          "GetGroupPrefabName",
          "GetGroupType",
          "GetSpawnCost",
          "GetNumberOfAvailableGroups",
          "SetNumberOfAvailableGroups"
        ]
      },
      {
        "class_name": "SCR_QRFSpawnSafeZone",
        "methods": [
          "GetGroupType",
          "GetMinDistanceToClosestObserver"
        ]
      },
      {
        "class_name": "SCR_QRFTypeMaxDistance",
        "methods": [
          "GetGroupType",
          "GetMaxSpawnDistance"
        ]
      },
      {
        "class_name": "SCR_QRFVehicleSpawnConfig",
        "methods": [
          "SCR_QRFVehicleSpawnConfig"
        ]
      },
      {
        "class_name": "SCR_QRFWaypointConfig",
        "methods": [
          "GetWaypointPrefabName",
          "GetOrderType",
          "GetDistanceOffsetToTargetLocation",
          "GetPosition",
          "SCR_QRFWaypointConfig"
        ]
      },
      {
        "class_name": "SCR_PlayersPresentTriggerEntity",
        "methods": [
          "SetOwnerFaction",
          "GetPlayersCountByFaction",
          "GetPlayersByFaction",
          "ScriptedEntityFilterForQuery",
          "OnActivate",
          "OnDeactivate",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTriggerEntityClass",
        "methods": [
          "ScriptInvokerTriggerUpdated"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTriggerEntity",
        "methods": [
          "SetActivationPresence",
          "SetSpecificClassName",
          "SetPrefabFilters",
          "AddPrefabFilter",
          "SetSearchVehicleInventory",
          "SetOnce",
          "SetNotificationEnabled",
          "SetTriggerConditionsStatus",
          "SetEnableAudio",
          "SetMinimumPlayersNeeded",
          "SetPlayerActivationNotificationTitle",
          "SetActivationCountdownTimer",
          "SetCountdownAudio",
          "SetCustomTriggerConditions",
          "SetOwnerFaction",
          "IsMaster",
          "GetOwnerFaction",
          "GetCountdownHUD",
          "GetActivationCountdownTimer",
          "GetActivationCountdownTimerTemp",
          "GetMinimumPlayersNeededPercentage",
          "GetPlayerActivationNotificationTitle",
          "GetNotificationEnabled",
          "GetTriggerConditionsStatus",
          "GetCountInsideTrigger",
          "GetCountEntitiesInside",
          "GetEntitiesInside",
          "GetPlayersCountByFaction",
          "GetSpecificClassCountInsideTrigger",
          "GetEntitiesInside",
          "GetSpecificPrefabCountInsideTrigger",
          "GetEntitiesInside",
          "GetCharacterCountByFactionInsideTrigger",
          "GetEntitiesInside",
          "GetPlayersCountByFactionInsideTrigger",
          "GetEntitiesInside",
          "GetPlayersByFactionInsideTrigger",
          "GetEntitiesInside",
          "GetPlayersByFaction",
          "ScriptedEntityFilterForQuery",
          "FinishTrigger",
          "StopMusic",
          "Deactivate",
          "OnChange",
          "ActivationPresenceConditions",
          "CustomTriggerConditions",
          "HandleNetworkComponentForPlayersInside",
          "ProcessPlayerNetworkComponent",
          "ProcessPlayerNetworkComponent",
          "ProcessPlayerNetworkComponent",
          "HandleTimer",
          "UpdateTimer",
          "HandleNetworkComponentForPlayersInside",
          "OnActivate",
          "OnQueryFinished",
          "ActivationPresenceConditions",
          "CustomTriggerConditions",
          "HandleTimer",
          "HandleAudio",
          "FinishTrigger",
          "OnDeactivate",
          "OnDeactivateCalledLater",
          "ActivationPresenceConditions",
          "CustomTriggerConditions",
          "HandleTimer",
          "HandleNetworkComponentForPlayersInside",
          "HandleAudio",
          "OnChange",
          "HandleAudio",
          "PlayMusic",
          "StopMusic",
          "PlayMusic",
          "Rpc",
          "RpcDo_PlayMusic",
          "StopMusic",
          "Rpc",
          "RpcDo_StopMusic",
          "OnChange",
          "GetOnChange",
          "SetInitSequenceDone",
          "EOnInit",
          "AddPrefabFilter",
          "SetOwnerFaction"
        ]
      },
      {
        "class_name": "SCR_CustomTriggerConditions",
        "methods": [
          "Init",
          "CustomTriggerConditions"
        ]
      },
      {
        "class_name": "SCR_CustomTriggerConditionsSpecificClassNameCount",
        "methods": [
          "Init",
          "CustomTriggerConditions"
        ]
      },
      {
        "class_name": "SCR_CustomTriggerConditionsSpecificPrefabCount",
        "methods": [
          "Init",
          "CustomTriggerConditions"
        ]
      },
      {
        "class_name": "SCR_GameModeSFManager",
        "methods": [
          "RpcDo_PlaySoundOnEntity",
          "PlaySoundOnEntity",
          "PlayIntroVoiceline",
          "Rpc",
          "RpcDo_PlayIntroVoiceline",
          "RpcDo_PlayIntroVoiceline",
          "RpcDo_PlaySoundOnEntityPosition",
          "PlaySoundOnEntityPosition",
          "Rpc",
          "RpcDo_PlaySoundOnEntityPosition",
          "GetLastFinishedTask",
          "GetLastFinishedTaskLayer",
          "OnTaskCreated",
          "OnTaskUpdate",
          "SetMissionEndScreen",
          "Finish",
          "GetIsMatchOver",
          "GetOnAllAreasInitiated",
          "GetOnTaskStateChanged",
          "SelectNearestAreaByTaskType",
          "RegisterArea",
          "LoadHeaderSettings",
          "Init",
          "LoadHeaderSettings",
          "PostInit",
          "PostInit",
          "GenerateTasks",
          "SpawnRandomTask",
          "SpawnRandomTask",
          "GenerateTasks",
          "GenerateSingleTask",
          "PrepareLayerTasksAfterInit",
          "PrepareLayerTasksAfterInit",
          "CreateVariableValue",
          "SetVariableValue",
          "GetVariable",
          "PrepareLayerTasksAfterInit",
          "CheckLayerTasksAfterInit",
          "ProcessVoicelineEnumAndString",
          "AfterLayerTasksInit",
          "GenerateSingleTask",
          "SelectRandomAreaByTaskType",
          "GetParentArea",
          "PrepareAreaSpecificDynamicDespawn",
          "RemoveAreaSpecificDynamicDespawn",
          "PrepareDynamicDespawn",
          "CheckDistance",
          "DynamicSpawn",
          "DynamicDespawn",
          "DynamicSpawn",
          "DynamicDespawn",
          "OnPostInit",
          "RplLoad",
          "ManageLayerDebugShape",
          "RplSave",
          "ShowHint",
          "Rpc",
          "RpcDo_ShowHint",
          "RpcDo_ShowHint",
          "PopUpMessage",
          "Rpc",
          "RpcDo_PopUpMessage",
          "RpcDo_PopUpMessage",
          "ManageLayerDebugShape",
          "Rpc",
          "RpcDo_ManageLayerDebugShape"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkPlugin",
        "methods": [
          "GetObject",
          "Init",
          "OnWBKeyChanged"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkPluginOnDestroyEvent",
        "methods": [
          "Init",
          "PrintFormat",
          "OnObjectDamage",
          "CheckEngineDrowned"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkPluginOnInventoryChange",
        "methods": [
          "Init",
          "OnItemAdded",
          "OnItemRemoved"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkPluginSpawnPoint",
        "methods": [
          "Init",
          "OnFinalizeSpawnDone_S"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkPluginTrigger",
        "methods": [
          "Init",
          "OnWBKeyChanged"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkDebugArea",
        "methods": [
          "GetForcedArea",
          "GetForcedLayerTask"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkStruct",
        "methods": [
          "Serialize",
          "StoreAreaStates",
          "ClearEmptyAreaStructs",
          "Deserialize",
          "LoadAreaStates",
          "StoreAreaStates",
          "LoadAreaStates",
          "LoadAreaStructs",
          "LoadNestedAreaStructs",
          "LoadAreaStructs",
          "LoadRepeatedSpawnAreaStructs",
          "LoadRepeatedSpawnAreaStructs",
          "LoadNestedAreaStructs",
          "LoadLayer",
          "LoadLayerStructs",
          "LoadNestedLayerStructs",
          "LoadLayerStructs",
          "LoadRepeatedSpawnLayerStructs",
          "LoadLayerStructSlots",
          "LoadNestedLayerStructs",
          "LoadRepeatedSpawnLayerStructs",
          "LoadLayerStructSlots",
          "LoadNestedLayerStructs",
          "LoadLogic",
          "ClearEmptyAreaStructs",
          "SCR_ScenarioFrameworkStruct"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkAreaStruct",
        "methods": [
          "StoreState",
          "StoreSelectedArea",
          "StoreDeliveryPoint",
          "StoreActivationTypeStatus",
          "StoreTerminationStatus",
          "StoreRepeatedSpawn",
          "StoreLayerTask",
          "StoreChildren",
          "StoreLogic",
          "CleanEmptyStoredLayers",
          "CleanEmptyStoredLogic",
          "CleanAreaStructs",
          "StoreSelectedArea",
          "StoreDeliveryPoint",
          "StoreActivationTypeStatus",
          "StoreTerminationStatus",
          "StoreRepeatedSpawn",
          "StoreLayerTask",
          "StoreChildren",
          "StoreLogic",
          "CleanEmptyStoredLayers",
          "CleanEmptyStoredLogic",
          "CleanAreaStructs",
          "GetAreaSelected",
          "GetDeliveryPointNameForItem",
          "GetLayerTaskname",
          "SetAreaSelected",
          "SetDeliveryPointNameForItem",
          "SetLayerTaskName",
          "SCR_ScenarioFrameworkAreaStruct"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLayerStruct",
        "methods": [
          "StoreLayerState",
          "StoreActivationTypeStatus",
          "StoreTerminationStatus",
          "StoreRepeatedSpawn",
          "StoreLayerTask",
          "StoreChildren",
          "StoreLogic",
          "StoreSlotAndRandomObject",
          "CleanEmptyStoredLayers",
          "CleanEmptyStoredLogic",
          "CleanEmptyStructs",
          "StoreActivationTypeStatus",
          "StoreTerminationStatus",
          "StoreRepeatedSpawn",
          "StoreLayerTask",
          "StoreChildren",
          "StoreLogic",
          "StoreSlotAndRandomObject",
          "CleanEmptyStoredLayers",
          "CleanEmptyStoredLogic",
          "CleanEmptyStructs",
          "ClearEmptyLayerStructs",
          "ClearEmptyLogicStructs",
          "StoreLogicState",
          "StoreLogicCounterValue",
          "StoreLogicCounterTermination",
          "StoreLogicCounterValue",
          "StoreLogicCounterTermination",
          "ClearEmptyLayerStructs",
          "ClearEmptyLogicStructs",
          "IncreaseStructVarCount",
          "DecreaseStructVarCount",
          "GetStructVarCount",
          "GetActivationType",
          "GetIsTerminated",
          "GetName",
          "GetLayerTaskState",
          "GetRandomlySpawnedObject",
          "GetRepeatedSpawnNumber",
          "GetEnableRepeatedSpawn",
          "InsertRandomlySpawnedChildren",
          "SetActivationType",
          "SetIsTerminated",
          "SetName",
          "SetLayerTaskState",
          "SetAIPrefabsForRemoval",
          "SetRandomlySpawnedObject",
          "SetRepeatedSpawnNumber",
          "SetEnableRepeatedSpawn",
          "SCR_ScenarioFrameworkLayerStruct"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkLogicStruct",
        "methods": [
          "IncreaseStructVarCount",
          "GetStructVarCount",
          "GetIsTerminated",
          "GetName",
          "GetCounterValue",
          "SetIsTerminated",
          "SetName",
          "SetCounterValue",
          "SCR_ScenarioFrameworkLogicStruct"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTask",
        "methods": [
          "SetTaskState",
          "SetState",
          "SetLayerTask",
          "GetLayerTask",
          "OnStateChanged",
          "Finish",
          "SetTaskAsset",
          "RehookTaskAsset",
          "GetAsset",
          "SetSlotTask",
          "GetSlotTask",
          "GetSupportEntity",
          "SetTaskExecutionBriefing",
          "GetTaskExecutionBriefing",
          "SetSpawnedEntityName",
          "GetSpawnedEntityName",
          "GetTaskListTaskText",
          "SetSupportEntity",
          "Serialize",
          "Deserialize",
          "SetTaskExecutionBriefing",
          "SetSpawnedEntityName",
          "Init",
          "SetSupportEntity",
          "EOnInit",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTaskArea",
        "methods": [
          "Init",
          "RegisterTrigger",
          "RehookTaskAsset",
          "RegisterTrigger",
          "RegisterTrigger",
          "OnTriggerActivated"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTaskClearArea",
        "methods": [
          "OnTriggerActivated",
          "SetSupportEntity"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTaskClearAreaSupportEntity",
        "methods": [
          "CreateTask"
        ]
      },
      {
        "class_name": "SCR_TaskDefend",
        "methods": [
          "OnObjectDamage",
          "CheckEngineDrowned",
          "RehookTaskAsset",
          "SetSupportEntity",
          "Init"
        ]
      },
      {
        "class_name": "SCR_TaskDeliver",
        "methods": [
          "GetTaskDeliverState",
          "SetDeliveryTrigger",
          "SetDeliveryTrigger",
          "SetTriggerNameToDeliver",
          "GetTriggerNameToDeliver",
          "OnDeliveryTriggerActivated",
          "OnObjectPossessed",
          "UpdateTaskTitleAndDescription",
          "SetState",
          "OnObjectDropped",
          "SetState",
          "UpdateTaskTitleAndDescription",
          "UpdateTaskTitleAndDescription",
          "UpdateDroppedTaskMarker",
          "UpdateDroppedTaskMarker",
          "UpdateDroppedTaskMarker",
          "MoveTaskMarkerPosition",
          "UpdateMapTaskIcon",
          "OnItemCarrierChanged",
          "HandleOldSlotGC",
          "HandleOldSlotGC",
          "HandleNewSlotGC",
          "HandleNewSlotGC",
          "HandleNewSlotGC",
          "HandleOldSlotGC",
          "OnDestroyed",
          "OnDisconnected",
          "OnDestroyed",
          "RegisterPlayer",
          "SetSupportEntity",
          "Init",
          "RegisterPlayer",
          "InvokedSetDeliveryTrigger",
          "SetDeliveryTrigger"
        ]
      },
      {
        "class_name": "SCR_TaskDestroyObject",
        "methods": [
          "OnObjectDamage",
          "CheckEngineDrowned",
          "RehookTaskAsset",
          "SetSupportEntity",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTaskExtract",
        "methods": [
          "OnTriggerActivated"
        ]
      },
      {
        "class_name": "SCR_TaskKill",
        "methods": [
          "OnObjectDamage",
          "RehookTaskAsset",
          "SetSupportEntity",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTaskSupportEntity",
        "methods": [
          "FinishTask",
          "GetTaskEntity",
          "SetTaskEntity",
          "CreateTask",
          "SetTaskPrefab",
          "GetCharacterFaction",
          "SetSpawnedEntityName",
          "RPC_SpawnedEntityName",
          "Rpc",
          "RPC_SpawnedEntityName",
          "SetTaskExecutionBriefing",
          "RPC_TaskExecutionBriefing",
          "Rpc",
          "RPC_TaskExecutionBriefing"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypoint",
        "methods": [
          "SetupWaypoint",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointScripted",
        "methods": [
          "SetupWaypoint",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointSmartAction",
        "methods": [
          "SetupWaypoint",
          "SetWaypointSmartActionTag",
          "GetWaypointSmartActionTag"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointEntity",
        "methods": [
          "SetupWaypoint"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointTimed",
        "methods": [
          "SetupWaypoint",
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointTimedDefend",
        "methods": [
          "SetupWaypoint",
          "SetFastInit",
          "GetFastInit"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointBoarding",
        "methods": [
          "SetupWaypoint",
          "SetDriverAllowed",
          "GetDriverAllowed",
          "SetGunnerAllowed",
          "GetGunnerAllowed",
          "SetCargoAllowed",
          "GetCargoAllowed"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointBoardingEntity",
        "methods": [
          "SetupWaypoint"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointBoardingTimed",
        "methods": [
          "SetupWaypoint",
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointAttack",
        "methods": [
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "GetWaypointCompletionType",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointCaptureRelay",
        "methods": [
          "SetWaypointSmartActionTag",
          "GetWaypointSmartActionTag",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "GetWaypointCompletionType",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointCycle",
        "methods": [
          "SetupWaypoint",
          "ProcessWaypoints",
          "CheckWaypointsAfterInit",
          "ProcessWaypoints",
          "ProcessWaypoints",
          "InvokeAllWaypointsSpawned",
          "GetOnAllWaypointsSpawned",
          "InvokeAllWaypointsSpawned",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointDefend",
        "methods": [
          "SetFastInit",
          "GetFastInit",
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointDefendCP",
        "methods": [
          "SetFastInit",
          "GetFastInit",
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointDefendHierarchy",
        "methods": [
          "SetFastInit",
          "GetFastInit",
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointDefendLarge",
        "methods": [
          "SetFastInit",
          "GetFastInit",
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointDefendLargeCO",
        "methods": [
          "SetFastInit",
          "GetFastInit",
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointFollow",
        "methods": [
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointForcedMove",
        "methods": [
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointGetIn",
        "methods": [
          "SetDriverAllowed",
          "GetDriverAllowed",
          "SetGunnerAllowed",
          "GetGunnerAllowed",
          "SetCargoAllowed",
          "GetCargoAllowed",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointGetInNearest",
        "methods": [
          "SetDriverAllowed",
          "GetDriverAllowed",
          "SetGunnerAllowed",
          "GetGunnerAllowed",
          "SetCargoAllowed",
          "GetCargoAllowed",
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointGetOut",
        "methods": [
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointHeal",
        "methods": [
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointLoiterCO",
        "methods": [
          "SetFastInit",
          "GetFastInit",
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointMove",
        "methods": [
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointObservationPost",
        "methods": [
          "SetWaypointSmartActionTag",
          "GetWaypointSmartActionTag",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointOpenGate",
        "methods": [
          "SetWaypointSmartActionTag",
          "GetWaypointSmartActionTag",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointPatrol",
        "methods": [
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointPatrolHierarchy",
        "methods": [
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointScout",
        "methods": [
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointSearchAndDestroy",
        "methods": [
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointUserAction",
        "methods": [
          "SetWaypointSmartActionTag",
          "GetWaypointSmartActionTag",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkWaypointWait",
        "methods": [
          "SetWaypointHoldingTime",
          "GetWaypointHoldingTime",
          "SetWaypointCompletionRadius",
          "GetWaypointCompletionRadius",
          "SetWaypointCompletionType",
          "GetWaypointCompletionType",
          "SetWaypointPriorityLevel",
          "GetWaypointPriorityLevel",
          "SetWaypointPrefab",
          "GetWaypointPrefab"
        ]
      },
      {
        "class_name": "SCR_ConsumableType",
        "methods": [
          "GetType",
          "GetValue"
        ]
      },
      {
        "class_name": "AnimateWidgetSystem",
        "methods": [
          "OnInit",
          "OnUpdate",
          "ShouldBeEnabledInEditMode",
          "OnAnimatingCompleted",
          "Enable",
          "OnAnimatingStarted",
          "Enable"
        ]
      },
      {
        "class_name": "CampaignBasesSystem",
        "methods": [
          "OnUpdate",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "DeployMenuSystem",
        "methods": [
          "OnInit",
          "Register",
          "Unregister",
          "SetReady",
          "OnUpdate"
        ]
      },
      {
        "class_name": "EffectManagerSystem",
        "methods": [
          "OnUpdate",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "FireDamageSystem",
        "methods": [
          "ShouldBePaused",
          "OnUpdate",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "FuelConsumptionSystem",
        "methods": [
          "ShouldBePaused",
          "OnUpdate",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "GadgetManagersSystem",
        "methods": [
          "OnUpdate",
          "Unregister",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "GadgetsSystem",
        "methods": [
          "OnUpdate",
          "Unregister",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "HandleUpdateVONControllersSystem",
        "methods": [
          "OnUpdate",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "MotorExhaustSystem",
        "methods": [
          "OnUpdate",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "NotificationsSystem",
        "methods": [
          "OnUpdate",
          "Unregister",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "RadialMenuSystem",
        "methods": [
          "OnUpdate",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "SCR_AISmartActionSystem",
        "methods": [
          "OnEntityTransformChanged",
          "UpdateSmartAction",
          "OnInit",
          "OnCleanup"
        ]
      },
      {
        "class_name": "SCR_AmbientPatrolSystem",
        "methods": [
          "OnInit",
          "Enable",
          "RefreshPlayerList",
          "OnCleanup",
          "OnUpdate",
          "Enable",
          "ProcessSpawnpoint",
          "ShouldBePaused",
          "GetInstance",
          "UpdateCheckInterval",
          "RefreshPlayerList",
          "OnPlayerSpawnedOrDeleted",
          "RefreshPlayerList",
          "GetRemainingPatrolsInfo",
          "ProcessSpawnpoint",
          "RegisterPatrol",
          "Enable",
          "UpdateCheckInterval",
          "UnregisterPatrol",
          "UpdateCheckInterval",
          "Enable",
          "GetPatrols",
          "OnPlayerDisconnected",
          "RefreshPlayerList",
          "OnPlayerKilled",
          "RefreshPlayerList"
        ]
      },
      {
        "class_name": "SCR_AmbientVehicleSystem",
        "methods": [
          "OnAmbientVehicleSpawnedDelegate",
          "OnInit",
          "Enable",
          "RefreshPlayerList",
          "OnCleanup",
          "OnUpdate",
          "Enable",
          "ProcessSpawnpoint",
          "ShouldBePaused",
          "GetInstance",
          "GetOnVehicleSpawned",
          "UpdateCheckInterval",
          "RefreshPlayerList",
          "OnPlayerSpawnedOrDeleted",
          "RefreshPlayerList",
          "ProcessSpawnpoint",
          "RegisterSpawnpoint",
          "Enable",
          "UpdateCheckInterval",
          "UnregisterSpawnpoint",
          "UpdateCheckInterval",
          "Enable",
          "GetSpawnpoints",
          "OnPlayerDisconnected",
          "RefreshPlayerList",
          "OnPlayerKilled",
          "RefreshPlayerList"
        ]
      },
      {
        "class_name": "SCR_AnimatedBeltSystem",
        "methods": [
          "OnInit",
          "Enable",
          "OnUpdate",
          "Register",
          "Enable",
          "Unregister",
          "Enable"
        ]
      },
      {
        "class_name": "SCR_BloodOnClothesSystem",
        "methods": [
          "OnInit",
          "Enable",
          "OnUpdate",
          "Register",
          "Enable",
          "Unregister",
          "Enable"
        ]
      },
      {
        "class_name": "SCR_DeployableSpawnPointSystem",
        "methods": [
          "OnUpdate",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "SCR_GarbageSystem",
        "methods": [
          "OnInsertRequested",
          "HandleVehicleResourcesChanged",
          "FindVehicleResourceContainer",
          "GetByEntityWorld"
        ]
      },
      {
        "class_name": "SCR_MapMarkerManagerSystem",
        "methods": [
          "OnUpdate",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "SCR_MilitaryBaseSystem",
        "methods": [
          "OnBaseFactionChangedDelegate",
          "OnLogicPresenceChangedDelegate",
          "GetInstance",
          "OnCleanup",
          "OnBaseFactionChanged",
          "OnLogicRegisteredInBase",
          "OnLogicUnregisteredInBase",
          "GetOnBaseFactionChanged",
          "GetOnLogicRegisteredInBase",
          "GetOnLogicUnregisteredInBase",
          "OnInit",
          "OnEntityTransformChanged",
          "OnBaseTransformChanged",
          "OnLogicTransformChanged",
          "OnBaseTransformChanged",
          "OnLogicTransformChanged",
          "LoadAvailableCallsigns",
          "RegisterBase",
          "LoadAvailableCallsigns",
          "UnregisterBase",
          "GetBases",
          "GetBasesCount",
          "RegisterLogicComponent",
          "UnregisterLogicComponent"
        ]
      },
      {
        "class_name": "SCR_RadioCoverageSystem",
        "methods": [
          "OnCoverageChangedDelegate",
          "GetInstance",
          "UpdateAll",
          "ShouldBePaused",
          "OnStarted",
          "UpdateRadios",
          "OnStopped",
          "UpdateRadios",
          "UpdateRadioComponent",
          "UpdateRadioComponent",
          "HandleRanges",
          "FindNewSource",
          "HandleRanges",
          "FindNewSource",
          "OnCoverageChanged",
          "GetOnCoverageChanged",
          "TogglePeriodicUpdates",
          "OnStarted",
          "OnStopped",
          "RegisterRadioComponent",
          "HandleRanges",
          "UnregisterRadioComponent",
          "FindNewSource",
          "UpdateRadios",
          "FindNewSource",
          "HandleRanges",
          "UpdateCoverage"
        ]
      },
      {
        "class_name": "SCR_ResourceSystem",
        "methods": [
          "IsRegistered",
          "IsRegistered",
          "OnUpdate",
          "OnDiag",
          "RegisterDynamicComponent",
          "RegisterContainer",
          "RegisterSubscribedInteractor",
          "UnregisterDynamicComponent",
          "UnregisterContainer",
          "UnregisterSubscribedInteractor",
          "OnStarted"
        ]
      },
      {
        "class_name": "SCR_VoiceoverSystem",
        "methods": [
          "OnUpdate",
          "Enable",
          "OnFinished",
          "Enable",
          "OnFinished",
          "PlayFromQueue",
          "ShouldBePaused",
          "GetInstance",
          "GetOnFinished",
          "SetData",
          "IsPlaying",
          "IsEnabled",
          "PlaySequence",
          "PlayFromQueue",
          "PlayLine",
          "PlayFromQueue",
          "PlayCustomLine",
          "PlayLine",
          "Stop",
          "PlayFromQueue",
          "PlayLine",
          "ShowSubtitle",
          "Enable",
          "ShowSubtitle",
          "GetDefaultActor",
          "OnFinished"
        ]
      },
      {
        "class_name": "SCR_SectorSpawn",
        "methods": [
          "SCR_SectorSpawn",
          "SetFlags",
          "SetEventMask",
          "EOnInit",
          "_WB_AfterWorldUpdate",
          "GetWorldTransform",
          "_WB_OnKeyChanged",
          "SpawnPreview",
          "DespawnChildren",
          "EOnTouch",
          "PrintFormat",
          "EOnContact",
          "PrintFormat",
          "SpawnPreview",
          "DespawnChildren"
        ]
      },
      {
        "class_name": "VehiclesDustSystem",
        "methods": [
          "OnUpdate",
          "OnDiag",
          "Register",
          "Unregister"
        ]
      },
      {
        "class_name": "SCR_CampaignDefendTask",
        "methods": [
          "GetMinAllyDistance",
          "GetMaxAllyDistance",
          "GetMinEnemyDistance",
          "GetMaxEnemyDistance",
          "FindDefendTask",
          "FindClosestFriendlyBase",
          "CheckDefendRequestConditions",
          "FindEnemyPresence",
          "IsCharacterInAnyDefendTaskRange",
          "UpdateMapInfo",
          "ShowAvailableTask",
          "ShowTaskProgress",
          "SetDescriptionWidgetText",
          "Finish",
          "Fail",
          "IsCharacterInDefendTaskRange",
          "PeriodicalCheck",
          "OnCharacterDeath",
          "PeriodicalCheck",
          "OnBaseCaptured",
          "GetMapDescriptorText",
          "GetTaskListTaskText",
          "SCR_CampaignDefendTask"
        ]
      },
      {
        "class_name": "SCR_CampaignTask",
        "methods": [
          "DoneByAssignee",
          "ShowAvailableTask",
          "ShowTaskProgress",
          "GetIconSuffix",
          "DoNotifyAssignment",
          "GetTitle",
          "SetIsPriority",
          "RegisterTaskUpdate",
          "GetDescription",
          "Finish",
          "GetAssignees",
          "GetFinishTextData",
          "Fail",
          "GetFinishText",
          "GetFinishTextData",
          "GetMapDescriptorText",
          "GetTaskListTaskText",
          "SetTitleWidgetText",
          "GetTitleText",
          "SetDescriptionWidgetText",
          "GetType",
          "SetType",
          "Deserialize",
          "SetType",
          "Serialize",
          "SetTargetBase",
          "OnTargetBaseCaptured",
          "OnCampaignBaseSignalChanged",
          "SCR_CampaignTask"
        ]
      },
      {
        "class_name": "SCR_EditorTask",
        "methods": [
          "SetLocationName",
          "GetLocationName",
          "GetTextType",
          "GetTextIndex",
          "SetTextIndex",
          "GetTaskCompletionType",
          "SetTaskCompletionType",
          "GetInfo",
          "GetTitle",
          "SetTitleWidgetText",
          "SetDescriptionWidgetText",
          "PopUpNotification",
          "ShowPopUpNotification",
          "ShowTaskNotification",
          "OnStateChanged",
          "DelayedPlacedNotification",
          "Create",
          "PopUpNotification",
          "ShowTaskNotification",
          "Finish",
          "PopUpNotification",
          "ShowTaskNotification",
          "Fail",
          "PopUpNotification",
          "ShowTaskNotification",
          "Cancel",
          "PopUpNotification",
          "ShowTaskNotification",
          "RplLoad",
          "Deserialize",
          "RplSave",
          "Serialize"
        ]
      },
      {
        "class_name": "SCR_TriggerTask",
        "methods": [
          "OnTriggerActivate",
          "OnTriggerDeactivate",
          "SetTargetFaction",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_AttachableTask",
        "methods": [
          "SetTarget",
          "GetTarget"
        ]
      },
      {
        "class_name": "SCR_BaseTask",
        "methods": [
          "OnDelete",
          "NotifyAssignment",
          "NotifyUnassign",
          "DoNotifyAssignment",
          "DoNotifyUnassign",
          "GetAssignMessage",
          "GetUnassignMessage",
          "GetMapUIElementResourceName",
          "GetMapDescriptorText",
          "GetTaskListTaskText",
          "OnMapOpen",
          "OnHoverItem",
          "GetTaskMapIconName",
          "GetTaskListIconName",
          "GetTaskListTaskTitle",
          "GetTitle",
          "GetMajorModifier",
          "GetTaskListTaskText",
          "GetDescription",
          "GetParentWidget",
          "GetIconImageset",
          "SetHUDIcon",
          "SetWidgetIcon",
          "SetWidgetIcon",
          "UpdateMapTaskIcon",
          "UpdatePriorityMapTaskIcon",
          "ClearWidgetIcon",
          "UpdateMapTaskIcon",
          "UpdatePriorityMapTaskIcon",
          "GetTaskIconkWidget",
          "AssignTaskToAI",
          "GetIconName",
          "GetImageSetName",
          "GetMapUIElementResourceName",
          "GetIconSuffix",
          "GetTitleIconString",
          "SetTitleWidgetText",
          "GetTitleText",
          "SetDescriptionWidgetText",
          "GenerateTaskDescriptionUI",
          "SetTitleWidgetText",
          "UpdateTaskListAssignee",
          "UpdateTaskListAssignee",
          "OnAssigneeKilled",
          "CreateMapUIIcon",
          "GetTargetFaction",
          "SetTargetFaction",
          "RegisterTaskUpdate",
          "SetHUDIcon",
          "GetFinishText",
          "IsAssigned",
          "GetAllAssigneeNamesString",
          "CheckAssigneeTimeout",
          "SetLastAssigneeAddedTimestamp",
          "SetIndividual",
          "IsIndividual",
          "SetIsPriority",
          "IsPriority",
          "IsAssignable",
          "CanBeAssigned",
          "GetLastAssigneeAddedTimestamp",
          "GetAssigneeTimeLeft",
          "SetTaskID",
          "GetTaskID",
          "GetTaskState",
          "SetTitle",
          "RegisterTaskUpdate",
          "GetTitle",
          "SetDescription",
          "RegisterTaskUpdate",
          "GetDescription",
          "GetAssignee",
          "GetAssignees",
          "GetAssigneeCount",
          "Cancel",
          "SetState",
          "RegisterTaskUpdate",
          "Remove",
          "SetState",
          "RegisterTaskUpdate",
          "Create",
          "Finish",
          "SetState",
          "RegisterTaskUpdate",
          "Fail",
          "SetState",
          "RegisterTaskUpdate",
          "RemoveAllAssignees",
          "ShowAvailableTask",
          "RegisterTaskUpdate",
          "RemoveAssignee",
          "ShowPopUpNotification",
          "OnAssigneeRemoved",
          "ShowAvailableTask",
          "RegisterTaskUpdate",
          "AddAssignee",
          "SetLastAssigneeAddedTimestamp",
          "ShowPopUpNotification",
          "OnAssigneeAdded",
          "RegisterTaskUpdate",
          "InitOnSpawn",
          "ToggleHUDIcon",
          "UpdateHUDIcon",
          "GetTaskIconkWidget",
          "SetTaskIconWidget",
          "ShowPopUpNotification",
          "UpdateMapInfo",
          "DoneByAssignee",
          "ShowTaskProgress",
          "ShowAvailableTask",
          "IsAssignedToLocalPlayer",
          "SetState",
          "OnStateChanged",
          "OnAssigneeRemoved",
          "SetState",
          "UpdateMapTaskIcon",
          "UpdatePriorityMapTaskIcon",
          "UpdateTaskListAssignee",
          "OnAssigneeAdded",
          "UpdateMapTaskIcon",
          "UpdatePriorityMapTaskIcon",
          "UpdateTaskListAssignee",
          "OnStateChanged",
          "RegisterTaskUpdate",
          "Serialize",
          "Deserialize",
          "SetState",
          "SetTitle",
          "SetDescription",
          "SetOrigin",
          "EOnInit",
          "RegisterTaskUpdate",
          "SCR_BaseTask",
          "SetEventMask",
          "CreateMapUIIcon",
          "SetHUDIcon"
        ]
      },
      {
        "class_name": "SCR_BaseTaskExecutor",
        "methods": [
          "GetTaskExecutorID",
          "GetLocalExecutorID",
          "GetLocalExecutor",
          "FindTaskExecutorByID",
          "GetTaskExecutorByID",
          "GetControlledEntity",
          "GetAssignedTask",
          "GetPlayerName",
          "SetPlayerID",
          "AssignNewTask",
          "OnNewTaskAssigned",
          "OnAssignedTaskRemoved",
          "OnAssignedTaskFailed",
          "OnAssignedTaskFinished",
          "OnNewTaskAssigned",
          "SCR_BaseTaskExecutor"
        ]
      },
      {
        "class_name": "SCR_BaseTaskManagerClass",
        "methods": [
          "GetTaskManager"
        ]
      },
      {
        "class_name": "SCR_BaseTaskManager",
        "methods": [
          "OnPlayerDisconnected",
          "OnTaskDeleted",
          "OnTaskCreated",
          "RefreshTaskListCommentComponent",
          "RefreshTaskList",
          "RefreshTaskListVoid",
          "RefreshTaskList",
          "RefreshTaskList",
          "OnTaskFinished",
          "OnTaskDeleted",
          "OnTaskUpdate",
          "PeriodicalCheck2Second",
          "PeriodicalCheck5Second",
          "PeriodicalCheck60Second",
          "CreateNewEvacuationTask",
          "CheckAssigneeTimeout",
          "GetReassignText",
          "AddAssigneeAbandoned",
          "IsProxy",
          "UnregisterSupportEntity",
          "RegisterSupportEntity",
          "GetTask",
          "RegisterTask",
          "GetFinishedTask",
          "CheckMasterOnlyMethod",
          "HasRequestedTask",
          "Initialized",
          "DeleteTask",
          "FindSupportEntity",
          "LocalCreateTaskExecutor",
          "FindRequestedTask",
          "GetFilteredTasks",
          "GetTasks",
          "GetFilteredFinishedTasks",
          "GetTasks",
          "GetAssigneeAbandoned",
          "AbandonTask",
          "RequestAssignment",
          "OnPlayerRegistered",
          "CreateTaskExecutors",
          "LocalCreateTaskExecutor",
          "CreateTaskExecutors",
          "LocalCreateTaskExecutor",
          "GetTimestamp",
          "GetTasks",
          "GetFinishedTasks",
          "LocalSpawnTask",
          "SpawnTask",
          "RPC_SpawnTask",
          "EOnInit",
          "UpdateTasks",
          "EOnFrame",
          "UpdateTasks",
          "CheckAssigneeTimeout",
          "SaveTasksForRpl",
          "RplSave",
          "SaveTasksForRpl",
          "SaveTasksForRpl",
          "LoadTasksForRpl",
          "RplLoad",
          "LoadTasksForRpl",
          "LoadTasksForRpl",
          "SCR_BaseTaskManager",
          "SetEventMask",
          "SetFlags"
        ]
      },
      {
        "class_name": "SCR_CampaignBaseTask",
        "methods": [
          "GetTargetBaseId",
          "SetTargetBase",
          "CreateMapUIIcon",
          "UpdateMapInfo",
          "SetHUDIcon",
          "OnMapOpenCallback",
          "SetOffset",
          "OnMapZoom",
          "SetOffset",
          "SetOffset",
          "SetOrigin",
          "CalculateOffset",
          "GetBaseNameWithCallsign",
          "GetTargetBase",
          "Deserialize",
          "SetTargetBase",
          "Serialize",
          "UpdateMapInfo"
        ]
      },
      {
        "class_name": "SCR_CampaignTaskNetworkComponent",
        "methods": [
          "RequestReinforcements",
          "Rpc",
          "RequestTransport",
          "Rpc",
          "RequestRefuel",
          "Rpc",
          "RequestEvacuation",
          "Rpc",
          "RPC_RequestReinforcements",
          "msg",
          "RPC_RequestTransport",
          "msg",
          "RPC_RequestRefuel",
          "msg",
          "RPC_RequestEvacuation",
          "msg",
          "GetRadioComponent",
          "GetPlayerId",
          "SCR_CampaignTaskNetworkComponent"
        ]
      },
      {
        "class_name": "SCR_EvacuateTask",
        "methods": [
          "GetMinDistanceFromStart",
          "GetMaxDistanceFromRequester",
          "GetMapDescriptorText",
          "GetTaskListTaskText",
          "PeriodicalCheck",
          "SetStartOrigin",
          "ShowAvailableTask",
          "GetStartOrigin",
          "Serialize",
          "Deserialize",
          "SetStartOrigin",
          "SCR_EvacuateTask",
          "SetEventMask",
          "SetIndividual"
        ]
      },
      {
        "class_name": "SCR_MoveTask",
        "methods": [
          "PeriodicalCheck",
          "GetAssignees",
          "SetTaskCompletionType",
          "SCR_MoveTask"
        ]
      },
      {
        "class_name": "SCR_RequestedTask",
        "methods": [
          "ShowAvailableTask",
          "IsLocallyRequestedTask",
          "SetTitleWidgetText",
          "GetTitleText",
          "GenerateTaskDescriptionUI",
          "DoNotifyAssignment",
          "DoNotifyUnassign",
          "SetDescriptionWidgetText",
          "GetTaskListTaskText",
          "Cancel",
          "Fail",
          "Finish",
          "RequesterDied",
          "GetRequester",
          "GetRequesterName",
          "OnEntityDeath",
          "Fail",
          "SetRequesterID",
          "SetEventMask",
          "AutoSetRequester",
          "SetRequester",
          "CanBeAssigned",
          "SetRequester",
          "EOnFrame",
          "AutoSetRequester",
          "Deserialize",
          "SetRequesterID",
          "Serialize",
          "EOnInit",
          "SCR_RequestedTask",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_TextsTaskManagerComponentClass",
        "methods": [
          "GetTexts",
          "GetText"
        ]
      },
      {
        "class_name": "SCR_TextsTaskManagerComponent",
        "methods": [
          "GetInstance",
          "GetTexts",
          "GetText"
        ]
      },
      {
        "class_name": "SCR_TransportTask",
        "methods": [
          "GetVolunteerMet",
          "SetVolunteerMet",
          "SetTargetPosition",
          "GetTargetPosition",
          "OnAssigneeKilled",
          "PeriodicalCheck",
          "Deserialize",
          "SetVolunteerMet",
          "Serialize",
          "EOnInit",
          "SCR_TransportTask",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_UIRequestEvacTaskComponent",
        "methods": [
          "IsInRange",
          "HasSignal",
          "RequestReinforcements",
          "SetRequestType",
          "OnClick",
          "RequestReinforcements"
        ]
      },
      {
        "class_name": "SCR_UITaskManagerComponent",
        "methods": [
          "GetInstance",
          "IsTaskListOpen",
          "SetSelectedWidget",
          "PanMapToTask",
          "StopHUDIconUpdates",
          "KeepHUDIconUpdated",
          "OnTaskDeleted",
          "SelectTask",
          "GetSelectedTask",
          "GetRootWidget",
          "GetParentWidget",
          "UnregisterTimer",
          "RegisterTimer",
          "SetupAssigneeTexts",
          "RegisterTimer",
          "GenerateUI",
          "GenerateRequestButtons",
          "ClearUI",
          "EOnFrame",
          "ToggleCurrentTask",
          "GetFormattedTimerText",
          "InitCurrentTaskWidget",
          "HasLocallyAssignedTask",
          "ToggleCurrentTask",
          "HidePickAssignee",
          "HideDetail",
          "Action_PickAssignee",
          "HidePickAssignee",
          "Action_TasksOpen",
          "Action_TasksClose",
          "Action_ShowHint",
          "ToggleCurrentTask",
          "Action_TasksClose",
          "Action_HideTasks",
          "Action_ShowOnMap",
          "HideDetail",
          "PanMapToTask",
          "Action_AssignTask",
          "Action_ShowDetail",
          "Action_Expand",
          "OnMapOpen",
          "PanMapToTask",
          "OnMapClose",
          "Action_HideTasks",
          "HideAllHUDIcons",
          "Action_ShowTasks",
          "ClearUI",
          "GenerateUI",
          "Action_HideTasks",
          "ClearUI",
          "Action_SelectTask",
          "Action_RequestTasksClose",
          "Action_TasksClose",
          "RemoveTaskFromList",
          "UpdateTimers",
          "EnableTaskContext",
          "OnInputDeviceIsGamepad",
          "OnPostInit",
          "SetEventMask",
          "OnDestroyed",
          "AddActionListeners",
          "RemoveActionListeners",
          "OnControlledEntityChanged",
          "Action_TasksClose",
          "LifeStateChanged",
          "Action_TasksClose",
          "EOnInit",
          "CreateTaskList",
          "AddActionListeners",
          "OnPlayerConnected",
          "CreateTaskList",
          "ClearWidget",
          "SCR_UITaskManagerComponent"
        ]
      },
      {
        "class_name": "SCR_BaseTaskSupportEntity",
        "methods": [
          "SetTargetFaction",
          "Rpc",
          "RPC_SetTargetFaction",
          "RPC_SetTargetFaction",
          "CreateTask",
          "Initialize",
          "OnTaskListOpen",
          "GetTaskDescriptionWidgetResource",
          "GetResourceName",
          "GetTaskPrefab",
          "MoveTask",
          "Rpc",
          "RPC_MoveTask",
          "MoveTask",
          "AssignTask",
          "RPC_AssignTask",
          "CancelTask",
          "Rpc",
          "RPC_CancelTask",
          "RPC_CancelTask",
          "FinishTask",
          "Rpc",
          "RPC_FinishTask",
          "RPC_FinishTask",
          "FailTask",
          "Rpc",
          "RPC_FailTask",
          "RPC_FailTask",
          "UnassignTask",
          "Rpc",
          "RPC_UnassignTask",
          "RPC_UnassignTask",
          "SetTaskDescription",
          "RPC_SetTaskDescription",
          "Rpc",
          "RPC_SetTaskDescription",
          "SetTaskTitle",
          "RPC_SetTaskTitle",
          "Rpc",
          "RPC_SetTaskTitle",
          "RegisterContextualMenuCallbacks",
          "OnMapOpen",
          "RegisterContextualMenuCallbacks",
          "EOnInit",
          "SCR_BaseTaskSupportEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_CampaignBaseTaskSupportEntity",
        "methods": [
          "RPC_SetTargetBase",
          "OnTaskUpdate",
          "SetTargetBase",
          "Rpc",
          "RPC_SetTargetBase",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_CampaignDefendTaskSupportEntityClass",
        "methods": [
          "OnCharacterDeath"
        ]
      },
      {
        "class_name": "SCR_CampaignDefendTaskSupportEntity",
        "methods": [
          "GetOnCharacterDeath",
          "CanRequest",
          "Request",
          "SetRequestButtonText",
          "RPC_SetTargetBase",
          "SetTargetBase",
          "Rpc",
          "RPC_SetTargetBase",
          "CreateCampaignDefendTask",
          "SetTargetBase",
          "SetTargetFaction",
          "OnControllableCreated",
          "OnCharacterDeath",
          "OnControllableDeleted",
          "GetMinAllyDistance",
          "GetMaxAllyDistance",
          "GetMinEnemyDistance",
          "GetMaxEnemyDistance",
          "OnTaskListOpen",
          "SetRequestButtonText",
          "Initialize"
        ]
      },
      {
        "class_name": "SCR_CampaignTaskSupportEntity",
        "methods": [
          "GetTask",
          "GenerateCaptureTasks",
          "CreateNewCampaignTask",
          "CreateNewCampaignTask",
          "SetTargetFaction",
          "SetTargetBase",
          "SetTaskType",
          "SetTaskType",
          "Rpc",
          "RPC_SetTaskType",
          "RPC_SetTaskType"
        ]
      },
      {
        "class_name": "SCR_EvacuateTaskSupportEntity",
        "methods": [
          "CanRequest",
          "Request",
          "RequestEvacuation",
          "SetRequester",
          "GetMinDistanceFromStart",
          "GetMaxDistanceFromRequester",
          "HasValidBase"
        ]
      },
      {
        "class_name": "SCR_MoveTaskSupportEntity",
        "methods": [
          "CreateMoveTask"
        ]
      },
      {
        "class_name": "SCR_RefuelTaskSupportEntity",
        "methods": [
          "CreateNewRefuelTask",
          "SetRequester",
          "RequestRefuel",
          "CanRequest",
          "Request",
          "GetFuelLimit"
        ]
      },
      {
        "class_name": "SCR_RequestedTaskSupportEntity",
        "methods": [
          "SetLocallyRequestedTask",
          "GetLocallyRequestedTask",
          "SetRequester",
          "Rpc",
          "RPC_SetRequester",
          "RPC_SetRequester",
          "GetRequestPosition",
          "CanRequest",
          "SetRequestButtonText",
          "SetRequestButtonText",
          "Request",
          "RegisterContextualMenuCallbacks",
          "CreateButtonAndSetPadding",
          "SetRequestButtonText"
        ]
      },
      {
        "class_name": "SCR_TransportTaskSupportEntity",
        "methods": [
          "GetMaxDistanceAssigneeSq",
          "GetMaxDistanceDestinationSq",
          "CreateNewTransportTask",
          "SetRequester",
          "SetTargetPosition",
          "SetTargetPosition",
          "RPC_SetTargetPosition",
          "Rpc",
          "TransportTaskNextPhase",
          "FinishTask",
          "RPC_TransportTaskNextPhase",
          "RPC_SetTargetPosition",
          "RequestTransport",
          "CreateNewTransportTask",
          "RegisterContextualMenuCallbacks",
          "SetToPosition",
          "SetFromPosition",
          "CanRequest",
          "SetRequestButtonText",
          "Request",
          "SetFromPosition",
          "SetToPosition"
        ]
      },
      {
        "class_name": "SCR_MapUITask",
        "methods": [
          "InitTask",
          "SetTask",
          "SetEvents",
          "SetTask",
          "SetMapMarkerAssigneeCount",
          "GetTask",
          "GetMapWidget",
          "OnMouseEnter",
          "PlayHoverSound",
          "OnMouseLeave",
          "HandlerAttached",
          "HandlerDeattached",
          "AssignTask",
          "GetAssignedPlayers",
          "SetMapMarkerAssigneeCount",
          "SetMapMarkerAssigneeCount",
          "UpdateFocusedTask",
          "SetEvents",
          "GetPos"
        ]
      },
      {
        "class_name": "SCR_PickAssigneeDialog",
        "methods": [
          "GetSelectedExecutor",
          "SelectTaskExecutor",
          "CloseDialog",
          "PickAssignee",
          "OnMenuOpen",
          "SCR_PickAssigneeDialog"
        ]
      },
      {
        "class_name": "SCR_TaskAssignButton",
        "methods": [
          "GetOnMapIconClick",
          "OnClick",
          "OnMouseEnter",
          "ButtonPressed",
          "OnMouseLeave",
          "SetRootWidgetHandler"
        ]
      },
      {
        "class_name": "SCR_TaskListEntryHandler",
        "methods": [
          "GetTask",
          "SetTask",
          "SetAssigneeCount",
          "SetTaskTextColor",
          "SetTaskIconColor",
          "UpdateTask",
          "UpdateAssignButtonText",
          "SetTaskTextColor",
          "SetTaskIconColor",
          "SetTaskIconColor",
          "UpdateAssignButtonText",
          "Expand",
          "OnClick",
          "ExpandTaskLayout",
          "ExpandTaskLayout",
          "OnFocusLost",
          "OnFocus",
          "SetCollapsed",
          "IsAnyButtonHovered",
          "IsCollapsed",
          "AcceptTask",
          "PickAssignee",
          "ShowOnMap",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_TaskListFocusComponent",
        "methods": [
          "HandlerAttached",
          "SetMapContextAllowed",
          "OnMouseEnter",
          "SetMapContextAllowed",
          "OnMouseLeave",
          "SetMapContextAllowed",
          "SetMapContextAllowed"
        ]
      },
      {
        "class_name": "SCR_TaskOverlayButton",
        "methods": [
          "OnMouseEnter",
          "OnMouseLeave",
          "SetRootWidgetHandler"
        ]
      },
      {
        "class_name": "SCR_TaskPlayerListEntryHandler",
        "methods": [
          "GetExecutor",
          "SetExecutor",
          "OnMouseLeave",
          "OnMouseEnter",
          "OnFocusLost",
          "OnFocus",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_TaskSelectButton",
        "methods": [
          "GetOnMapIconClick",
          "OnClick",
          "OnMouseEnter",
          "OnMouseLeave",
          "ButtonPressed",
          "HasAssigneeBool",
          "HasAssigneeInt",
          "SetRootWidgetHandler"
        ]
      },
      {
        "class_name": "SCR_TimeAndWeatherState",
        "methods": [
          "GetStartingHour",
          "GetStartingMinutes",
          "GetWeatherPresetName"
        ]
      },
      {
        "class_name": "SCR_BackendCallback",
        "methods": [
          "InvokeEventOnSuccess",
          "GetEventOnSuccess",
          "InvokeEventOnFail",
          "GetEventOnFail",
          "InvokeEventOnTimeOut",
          "GetEventOnTimeOut",
          "InvokeEventOnResponse",
          "GetEventOnResponse",
          "OnSuccess",
          "CacheLastResponse",
          "InvokeEventOnSuccess",
          "InvokeEventOnResponse",
          "OnError",
          "CacheLastResponse",
          "InvokeEventOnFail",
          "InvokeEventOnResponse",
          "OnTimeout",
          "CacheLastResponse",
          "InvokeEventOnTimeOut",
          "InvokeEventOnResponse",
          "CacheLastResponse",
          "GetCode",
          "GetRestCode",
          "GetApiCode",
          "GetResponseType"
        ]
      },
      {
        "class_name": "GameplayTrait",
        "methods": [
          "GameplayTrait",
          "GetTraitID",
          "GetTraitXP",
          "AddXP",
          "toString"
        ]
      },
      {
        "class_name": "CareerBackendData",
        "methods": [
          "AddKill",
          "AddDeath",
          "AddSkillXP",
          "GetTravelledDistance",
          "GetFriendlyKills",
          "GetKills",
          "GetDeaths",
          "GetSkillXP",
          "SetFaction",
          "SetLoginTime",
          "SetLogoutTime",
          "GetSessionInfo",
          "OnSuccess",
          "OnError",
          "CareerBackendData"
        ]
      },
      {
        "class_name": "CampaignCallback",
        "methods": [
          "OnError",
          "OnSuccess",
          "OnTimeout"
        ]
      },
      {
        "class_name": "SCR_ChatHud",
        "methods": [
          "DisplayUpdate",
          "DisplayStartDraw",
          "OnSettingsChanged",
          "OnSlotUIResize",
          "CloseAllChatPanels",
          "OnChatOpen",
          "OnChatClose",
          "DisplayStopDraw",
          "Callback_OnToggleAction"
        ]
      },
      {
        "class_name": "SCR_ChatMessage",
        "methods": [
          "SCR_ChatMessage"
        ]
      },
      {
        "class_name": "SCR_ChatMessageGeneral",
        "methods": [
          "SCR_ChatMessageGeneral"
        ]
      },
      {
        "class_name": "SCR_ChatMessagePrivate",
        "methods": [
          "SCR_ChatMessagePrivate"
        ]
      },
      {
        "class_name": "SCR_ChatMessageRadioProtocol",
        "methods": [
          "SCR_ChatMessageRadioProtocol"
        ]
      },
      {
        "class_name": "SCR_ChatMessageLineComponent",
        "methods": [
          "HandlerAttached",
          "SetEmptyMessage",
          "SetMessage",
          "SetEmptyMessage",
          "SetVisible",
          "GetRootWidget"
        ]
      },
      {
        "class_name": "SCR_ChatMessageLineWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ChatPanel",
        "methods": [
          "OnUpdateChat",
          "ShowChannelWarning",
          "OnHUDResize",
          "UpdateChatMessages",
          "IsOpen",
          "GetFadeOut",
          "GetFadeIn",
          "Internal_Open",
          "CycleChannels",
          "UpdateChatMessages",
          "Internal_Close",
          "UpdateChatMessages",
          "Internal_OnNewMessage",
          "GetWidget",
          "HandlerAttached",
          "VerifyChannelStyles",
          "UpdateChatMessages",
          "HandlerDeattached",
          "UpdateChatMessages",
          "SendMessage",
          "CycleChannels",
          "ShowChannelWarning",
          "GetCommand",
          "Internal_GetChannelListHelpMessage",
          "FindChannelByPrefix",
          "GetPlayerIdByName",
          "SetActiveChannel",
          "VerifyChannelStyles",
          "GetChannelStyle",
          "GetMessageStyle",
          "GetChannelStyle",
          "GetChatComponent",
          "GetChannelId",
          "GetOnChatOpen",
          "GetOnChatClosed",
          "GetFadeInOutAnimator",
          "Callback_OnPressSpaceAfterCommand",
          "ShowChannelWarning",
          "Callback_OnEditBoxChange",
          "ShowChannelWarning",
          "Callback_OnCloseAction",
          "Internal_Close",
          "Callback_OnSendMessageAction",
          "SendMessage",
          "Internal_Close",
          "Callback_OnGamepadConfirmAction",
          "Callback_OnHistoryAction",
          "UpdateChatMessages",
          "Callback_OnSwitchChannelAction",
          "CycleChannels",
          "Callback_OnEditBoxChange"
        ]
      },
      {
        "class_name": "SCR_ChatPanelManager",
        "methods": [
          "ChatCommandCallback",
          "OpenChatPanel",
          "CloseChatPanel",
          "CloseAllChatPanels",
          "ToggleChatPanel",
          "OnMenuClosed",
          "ShowAllChatPanels",
          "ShowAllChatPanels",
          "ShowChatPanel",
          "HideAllChatPanels",
          "CloseAllChatPanels",
          "GetInstance",
          "ShowHelpMessage",
          "GetCommandInvoker",
          "GetAnyPanelFadedIn",
          "Register",
          "CloseAllChatPanels",
          "Unregister",
          "OnNewMessagePrivate",
          "OnNewMessage",
          "OnNewMessageRadioProtocol",
          "OnNewMessageGeneral",
          "OnNewMessage",
          "OnGameStart",
          "InitDefaultChatCommands",
          "OnGameEnd",
          "InitDefaultChatCommands",
          "Internal_EnableAllChannels",
          "Internal_OnChatCommand",
          "OnNewMessage"
        ]
      },
      {
        "class_name": "SCR_ChatPanelWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_FadeUIComponent",
        "methods": [
          "FadeIn",
          "StartListenToFadeDone",
          "DelayedFadeIn",
          "FadeOut",
          "StartListenToFadeDone",
          "DelayedFadeOut",
          "CancelFade",
          "SetFadeInSpeed",
          "GetFadeWidget",
          "IsFading",
          "IsFadingIn",
          "IsFadingOut",
          "GetTargetFadeInOpacity",
          "GetOnFadeDone",
          "StartListenToFadeDone",
          "FadeDoneCheck",
          "HandlerAttached",
          "FadeIn",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PulsateUIComponent",
        "methods": [
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_AssetCardFrontUIComponent",
        "methods": [
          "GetOnCardInit",
          "UpdateBudgetCost",
          "UpdateBlockingBudget",
          "InitCard",
          "UpdateBudgetCost",
          "UpdateBlockingBudget",
          "FindTraitIcon",
          "OnHoverScrollAnimation",
          "GetInfo",
          "GetButtonWidget",
          "OnMouseEnter",
          "OnMouseLeave",
          "GetOnHover",
          "OnFocus",
          "OnFocusLost",
          "GetOnFocus",
          "GetPrefabIndex",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "ButtonActionComponent",
        "methods": [
          "GetOnAction",
          "GetMouseButton",
          "GetOnAction",
          "ScriptInvoker",
          "GetOnAction",
          "GetOnAction",
          "ScriptInvoker",
          "Execute",
          "OnAction",
          "Execute",
          "OnClick",
          "Execute",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectColor",
        "methods": [
          "OnStateDefault",
          "Apply",
          "OnStateHovered",
          "Apply",
          "OnStateActivated",
          "Apply",
          "OnStateDisabled",
          "Apply",
          "OnStateDisabledActivated",
          "Apply",
          "OnStateActivatedHovered",
          "Apply",
          "OnClicked",
          "Apply",
          "OnFocusGained",
          "Apply",
          "OnFocusLost",
          "Apply",
          "OnToggledOn",
          "Apply",
          "OnToggledOff",
          "Apply",
          "OnDisabled",
          "Apply"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectImage",
        "methods": [
          "OnStateDefault",
          "Apply",
          "OnStateHovered",
          "Apply",
          "OnStateActivated",
          "Apply",
          "OnStateActivatedHovered",
          "Apply",
          "OnStateDisabled",
          "Apply",
          "OnStateDisabledActivated",
          "Apply",
          "OnFocusGained",
          "Apply",
          "OnFocusLost",
          "Apply",
          "OnToggledOn",
          "Apply",
          "OnToggledOff",
          "Apply",
          "Apply"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectImage_ImageOrImageSet",
        "methods": [
          "SCR_ButtonEffectImage_ImageOrImageSet"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectOpacity",
        "methods": [
          "OnStateDefault",
          "Apply",
          "OnStateHovered",
          "Apply",
          "OnStateActivated",
          "Apply",
          "OnStateActivatedHovered",
          "Apply",
          "OnClicked",
          "Apply",
          "OnStateDisabled",
          "Apply",
          "OnStateDisabledActivated",
          "Apply",
          "OnFocusGained",
          "Apply",
          "OnFocusLost",
          "Apply",
          "OnToggledOn",
          "Apply",
          "OnToggledOff",
          "Apply",
          "OnMouseEnter",
          "Apply",
          "OnMouseLeave",
          "Apply",
          "OnDisabled",
          "Apply"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectPadding",
        "methods": [
          "OnStateDefault",
          "Apply",
          "OnStateHovered",
          "Apply",
          "OnStateActivated",
          "Apply",
          "OnStateActivatedHovered",
          "Apply",
          "OnStateDisabled",
          "Apply",
          "OnStateDisabledActivated",
          "Apply",
          "OnFocusGained",
          "Apply",
          "OnFocusLost",
          "Apply",
          "OnToggledOn",
          "Apply",
          "OnToggledOff",
          "Apply",
          "OnDisabled",
          "Apply"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectSize",
        "methods": [
          "OnStateDefault",
          "Apply",
          "OnStateHovered",
          "Apply",
          "OnStateActivated",
          "Apply",
          "OnStateActivatedHovered",
          "Apply",
          "OnStateDisabled",
          "Apply",
          "OnStateDisabledActivated",
          "Apply",
          "OnClicked",
          "Apply",
          "OnFocusGained",
          "Apply",
          "OnFocusLost",
          "Apply",
          "OnToggledOn",
          "Apply",
          "OnToggledOff",
          "Apply",
          "OnDisabled",
          "Apply"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectSlaveButton",
        "methods": [
          "SetTargetWidget",
          "OnHandlerAttached",
          "OnStateDefault",
          "OnStateHovered",
          "OnStateActivated",
          "OnStateActivatedHovered",
          "OnStateDisabled",
          "OnStateDisabledActivated",
          "OnClicked",
          "OnFocusGained",
          "OnFocusLost",
          "OnToggledOn",
          "OnToggledOff"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectSound",
        "methods": [
          "OnStateDefault",
          "Apply",
          "OnStateHovered",
          "Apply",
          "OnStateActivated",
          "Apply",
          "OnStateActivatedHovered",
          "Apply",
          "OnStateDisabled",
          "Apply",
          "OnStateDisabledActivated",
          "Apply",
          "OnClicked",
          "Apply",
          "OnFocusGained",
          "Apply",
          "OnFocusLost",
          "Apply",
          "OnToggledOn",
          "Apply",
          "OnToggledOff",
          "Apply",
          "OnMouseEnter",
          "Apply",
          "OnMouseLeave",
          "Apply",
          "Apply"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectText",
        "methods": [
          "OnStateDefault",
          "Apply",
          "OnStateHovered",
          "Apply",
          "OnStateActivated",
          "Apply",
          "OnStateActivatedHovered",
          "Apply",
          "OnStateDisabled",
          "Apply",
          "OnStateDisabledActivated",
          "Apply",
          "OnFocusGained",
          "Apply",
          "OnFocusLost",
          "Apply",
          "OnToggledOn",
          "Apply",
          "OnToggledOff",
          "Apply",
          "Apply"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectVisibility",
        "methods": [
          "OnStateDefault",
          "Apply",
          "OnStateHovered",
          "Apply",
          "OnStateActivated",
          "Apply",
          "OnStateActivatedHovered",
          "Apply",
          "OnClicked",
          "Apply",
          "OnStateDisabled",
          "Apply",
          "OnStateDisabledActivated",
          "Apply",
          "OnFocusGained",
          "Apply",
          "OnFocusLost",
          "Apply",
          "OnToggledOn",
          "Apply",
          "OnToggledOff",
          "Apply",
          "OnDisabled",
          "Apply"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectPosition",
        "methods": [
          "OnStateDefault",
          "Apply",
          "OnStateHovered",
          "Apply",
          "OnStateActivated",
          "Apply",
          "OnStateActivatedHovered",
          "Apply",
          "OnStateDisabled",
          "Apply",
          "OnStateDisabledActivated",
          "Apply",
          "OnClicked",
          "Apply",
          "OnFocusGained",
          "Apply",
          "OnFocusLost",
          "Apply",
          "OnToggledOn",
          "Apply",
          "OnToggledOff",
          "Apply",
          "OnDisabled",
          "Apply"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectBase",
        "methods": [
          "GetEnabled",
          "SetEnabled",
          "OnDisabled",
          "PropertiesChanged",
          "HasTag",
          "OnStateDefault",
          "OnStateHovered",
          "OnStateActivated",
          "OnStateActivatedHovered",
          "OnStateDisabled",
          "OnStateDisabledActivated",
          "OnClicked",
          "OnFocusGained",
          "OnFocusLost",
          "OnToggledOn",
          "OnToggledOff",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnHandlerAttached",
          "OnDisabled",
          "Internal_OnEvent",
          "_print",
          "_print",
          "Init",
          "_print"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectWidgetBase",
        "methods": [
          "OnHandlerAttached",
          "GetTargetWidget"
        ]
      },
      {
        "class_name": "SCR_ButtonEffectTitleAttribute",
        "methods": [
          "SCR_ButtonEffectTitleAttribute",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_ModularButtonEffect_Example",
        "methods": [
          "OnHandlerAttached",
          "OnStateDefault",
          "OnStateHovered",
          "OnStateActivated",
          "OnStateActivatedHovered",
          "OnStateDisabled",
          "OnStateDisabledActivated",
          "OnClicked",
          "OnFocusGained",
          "OnFocusLost",
          "OnToggledOn",
          "OnToggledOff",
          "OnDisabled"
        ]
      },
      {
        "class_name": "SCR_ModularButtonComponent",
        "methods": [
          "FindComponent",
          "SetEnabled",
          "UpdateCurrentState",
          "GetEnabled",
          "SetToggled",
          "Internal_SetToggled",
          "GetToggled",
          "GetFocused",
          "GetMouseOver",
          "SetToggleable",
          "SetTogglableOnlyThroughApi",
          "SetData",
          "GetData",
          "GetRootWidget",
          "SetVisible",
          "FindEffect",
          "SetEffectsEnabled",
          "SetEffectsWithAnyTagEnabled",
          "SetAllEffectsEnabled",
          "InvokeAllEnabledEffects",
          "InvokeEffectsEvent",
          "InvokeEffectsEvent",
          "InvokeEffectsEvent",
          "InvokeEffectsEvent",
          "InvokeEffectsEvent",
          "UpdateCurrentState",
          "InvokeEffectsEvent",
          "GetCurrentState",
          "InvokeEffectsEvent",
          "Internal_OnMasterButtonEvent",
          "InvokeEffectsEvent",
          "Internal_SetToggled",
          "InvokeEffectsEvent",
          "InvokeEffectsEvent",
          "UpdateCurrentState",
          "Internal_OnEffectEnabled",
          "HandlerAttached",
          "InvokeAllEnabledEffects",
          "OnClick",
          "_print",
          "Internal_SetToggled",
          "InvokeEffectsEvent",
          "InvokeEffectsEvent",
          "OnDoubleClick",
          "OnMouseEnter",
          "_print",
          "UpdateCurrentState",
          "InvokeEffectsEvent",
          "OnMouseLeave",
          "_print",
          "UpdateCurrentState",
          "InvokeEffectsEvent",
          "OnFocus",
          "_print",
          "InvokeEffectsEvent",
          "OnFocusLost",
          "_print",
          "InvokeEffectsEvent",
          "_print",
          "GetIsFocusOnMouseEnter",
          "SetIsFocusOnMouseEnter",
          "GetCurrentStateName"
        ]
      },
      {
        "class_name": "SCR_ViewProfileButtonComponent",
        "methods": [
          "HandlerAttached",
          "Init",
          "Init"
        ]
      },
      {
        "class_name": "EditBoxFilterComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "OnChange",
          "GetNumLimitOfCharacters",
          "FilterSymbol",
          "SearchWhitelist",
          "FilterSymbolsFromText",
          "SetCharacterLimit",
          "SetPunctuation",
          "SetNumbers",
          "SetASCIIchars",
          "SetUTFMultibyte",
          "SetCharBlacklist",
          "SetCharacterLimit",
          "IsLastInputValid"
        ]
      },
      {
        "class_name": "SCR_FilterPanelComponent",
        "methods": [
          "ScriptInvokerFilterMethod",
          "GetFilter",
          "GetEditBoxSearch",
          "AnyFilterSelected",
          "AnyFilterButtonsVisible",
          "SetEditBoxSearchMessage",
          "SetItemsFoundMessage",
          "EnableItemsFoundMessage",
          "SetItemsFoundMessageVisible",
          "UpdateItemsFoundTooltip",
          "ShowFilterListBox",
          "ShowFilterListBox_Internal",
          "GetFilterListBoxShown",
          "SelectFilter",
          "Filter_ListBox_EnableFilter",
          "Filter_TopBar_AddButton",
          "Filter_TopBar_DeleteButton",
          "Save",
          "ResetToDefaultValues",
          "SyncInternalToUi",
          "EnableFilterButton",
          "GetFilterButtonEnabled",
          "TryLoad",
          "SyncInternalToUi",
          "GetStorageTag",
          "GetFocused",
          "SetFocusOnFirstItem",
          "GetWidgets",
          "GetOnFilterChanged",
          "GetOnFilterPanelToggled",
          "SetItemsFoundMessageVisible",
          "EnableItemsFoundMessage",
          "SetItemsFoundMessageVisible",
          "Filter_ListBox_EnableFilter",
          "Filter_ListBox_ResetFiltersInCategory",
          "Filter_TopBar_DeleteButton",
          "Filter_TopBar_UpdateButtonsVisibility",
          "Filter_TopBar_DeleteButtonsInCategory",
          "Filter_TopBar_UpdateButtonsVisibility",
          "Filter_TopBar_AddButton",
          "Filter_TopBar_UpdateButtonsVisibility",
          "Filter_TopBar_UpdateButtonsVisibility",
          "OnTooltipShow",
          "Filter_InitFilterPanel",
          "SyncUiToInternal",
          "EnableItemsFoundMessage",
          "SyncInternalToUi",
          "EnableItemsFoundMessage",
          "ShowFilterListBox_Internal",
          "OnTopBarHighlightCycleCompleted",
          "OnTopBarFilterButtonClicked",
          "Filter_ListBox_EnableFilter",
          "Filter_ListBox_EnableFilter",
          "Filter_TopBar_DeleteButton",
          "SyncUiToInternal",
          "OnTopBarFilterButtonFocused",
          "OnTopBarFilterButtonFocusLost",
          "OnFilterListBoxChanged",
          "Filter_TopBar_AddButton",
          "Filter_TopBar_DeleteButton",
          "SyncUiToInternal",
          "OnToggleFilterPanelButton",
          "ShowFilterListBox_Internal",
          "OnSearchConfirm",
          "HandlerAttached",
          "Filter_InitFilterPanel",
          "ShowFilterListBox_Internal",
          "Filter_TopBar_UpdateButtonsVisibility",
          "SetItemsFoundMessageVisible",
          "HandlerDeattached",
          "OnTooltipShow",
          "UpdateItemsFoundTooltip",
          "FillTooltip",
          "UpdateItemsFoundTooltip",
          "IsTooltipHoverWidgetInHierarchy",
          "ResetTooltipInitializationFlags"
        ]
      },
      {
        "class_name": "SCR_FilterPanelWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ListBoxComponent",
        "methods": [
          "AddItem",
          "AddItemAndIcon",
          "RemoveItem",
          "GetItemData",
          "GetItemCount",
          "FindItemWithData",
          "GetSelectedItem",
          "GetElementComponent",
          "IsItemSelected",
          "AddSeparator",
          "SetFocusOnFirstItem",
          "GetFocused",
          "Clear",
          "SetItemSelected",
          "VisualizeSelection",
          "_SetItemSelected",
          "SetAllItemsSelected",
          "_SetItemSelected",
          "SetItemText",
          "VisualizeSelection",
          "HandlerAttached",
          "_AddItem",
          "_SetItemSelected",
          "VisualizeSelection",
          "GetUniqueWidgetName",
          "OnItemClick",
          "_SetItemSelected",
          "VisualizeSelection",
          "_SetItemSelected"
        ]
      },
      {
        "class_name": "SCR_ListBoxElementComponent",
        "methods": [
          "HandlerAttached",
          "SetImage",
          "SetText"
        ]
      },
      {
        "class_name": "SCR_AccountWidgetComponent",
        "methods": [
          "HandlerAttached",
          "UpdateAuthentication",
          "HandlerDeattached",
          "OnMenuEnabled",
          "OnMenuDisabled",
          "OnTooltipShow",
          "UpdateAuthentication",
          "UpdateAuthentication",
          "OnNews",
          "OnCareer",
          "OnProfile"
        ]
      },
      {
        "class_name": "SCR_CommunitySubMenu",
        "methods": [
          "OnTabCreate",
          "SetupNotifications",
          "SetupCategories",
          "OnMenuUpdate",
          "OnTabHide",
          "OnTabRemove",
          "SetupCategories",
          "SetupNotifications",
          "OnSendFeedback",
          "OnTos"
        ]
      },
      {
        "class_name": "SCR_ConnectionStateButtonComponent",
        "methods": [
          "HandlerAttached",
          "SetVisible",
          "HandlerDeattached",
          "ClearInvokers",
          "SetVisible",
          "OnMenuEnabled",
          "OnMenuDisabled",
          "ClearInvokers",
          "ClearInvokers",
          "OnCommStatusUpdated",
          "UpdateStatus",
          "OnCommStatusCheckStart",
          "OnAutomaticRefresh",
          "UpdateStatus",
          "UpdateWidgets",
          "UpdateWidgets",
          "UpdateWidgets",
          "AnimateSpinner",
          "UpdateTooltip",
          "AreServicesUnavailable",
          "CheckLowBandwidth",
          "UpdateWidgets",
          "SetVisible",
          "SetIcon",
          "SetIconColor",
          "SetLabelText",
          "SetLabelText",
          "AnimateSpinner",
          "ShowSpinner",
          "GetStatusPreset",
          "SetIconColor",
          "OnButtonClicked",
          "OnButtonFocused",
          "OnButtonFocusLost",
          "OnTooltipShow",
          "UpdateTooltip",
          "UpdateTooltip"
        ]
      },
      {
        "class_name": "SCR_CoreMenuHeaderButtonComponent",
        "methods": [
          "HandlerAttached",
          "SetCountVisible",
          "SetLabelText",
          "SetIcon",
          "SetIcon",
          "SetCountText",
          "SetCountVisible",
          "SetLabelText",
          "GetLabelText",
          "SetVisible",
          "GetButton"
        ]
      },
      {
        "class_name": "SCR_GMMenuTileComponent",
        "methods": [
          "HandlerAttached",
          "OnDoubleClick",
          "OnPlay",
          "OnFocus",
          "OnFocusLost",
          "ShowMission",
          "GetTexture",
          "OnPlay",
          "OnContinue",
          "OnRestart",
          "OnRestartConfirmed",
          "OnFindServers",
          "OnCommStatusCheckFinished"
        ]
      },
      {
        "class_name": "SCR_MenuTileComponent",
        "methods": [
          "HandlerAttached",
          "SetOrHideImage",
          "SetOrHideImage",
          "SetOrHideImage",
          "SetOrHideImage",
          "SetAnimationRate",
          "OnFocus",
          "OnFocusLost",
          "OnClick",
          "GetRootWidget"
        ]
      },
      {
        "class_name": "SCR_NewsEntry",
        "methods": [
          "SCR_NewsEntry",
          "SetTile"
        ]
      },
      {
        "class_name": "SCR_NewsSubMenu",
        "methods": [
          "OnTabCreate",
          "OnTabShow",
          "SetNewsEntries",
          "OnTabHide",
          "OnTabRemove",
          "SetNewsEntries",
          "ShowErrorDialog",
          "OnRead",
          "OnCommStatusCheckFinished",
          "SetNewsEntries",
          "ShowErrorDialog",
          "ShowErrorDialog",
          "OnErrorDialogClose",
          "RequestTabChange"
        ]
      },
      {
        "class_name": "SCR_NewsTileComponent",
        "methods": [
          "HandlerAttached",
          "UpdateConnectionButtons",
          "HandlerDeattached",
          "OnFocus",
          "SetRead",
          "OnFocusLost",
          "OnCommStatusCheckFinished",
          "UpdateConnectionButtons",
          "UpdateConnectionButtons",
          "SetRead",
          "ShowTile",
          "OnRead",
          "SetRead"
        ]
      },
      {
        "class_name": "SCR_PlayMenuTileComponent",
        "methods": [
          "HandlerAttached",
          "Enable",
          "HandlerDeattached",
          "OnFocus",
          "UpdateModularButtons",
          "OnFocusLost",
          "UpdateModularButtons",
          "Setup",
          "UpdateModularButtons",
          "UpdateWarning",
          "Enable",
          "Enable",
          "GetTexture",
          "OnInputDeviceUserChanged",
          "OnPlay",
          "OnContinue",
          "OnRestart",
          "OnHost",
          "OnFindServers",
          "OnCommStatusCheckFinished",
          "UpdateModularButtons",
          "OnTooltipShow",
          "UpdateModularButtons",
          "UpdateWarning",
          "GetOnMouseInteractionButtonClicked"
        ]
      },
      {
        "class_name": "SCR_ProfileSuperMenu",
        "methods": [
          "OnMenuOpen",
          "OnMenuShow",
          "ResetFocus",
          "OnLogoClicked",
          "OnTabContentShow",
          "ResetFocus",
          "ResetFocus"
        ]
      },
      {
        "class_name": "SCR_TileBaseComponent",
        "methods": [
          "HandlerAttached",
          "SetInitialAnimationRate",
          "SetInitialAnimationRate",
          "SetAnimationRate",
          "OnFocus",
          "OnFocusLost"
        ]
      },
      {
        "class_name": "MenuRootComponent",
        "methods": [
          "GetRootOf",
          "GetRootOf",
          "GetRootOf",
          "GetMenu",
          "GetWidget",
          "AddComponent",
          "RemoveComponent",
          "FindComponent",
          "FindComponents",
          "Init",
          "InitNotRoot",
          "Init",
          "ExecInit",
          "ExecInit",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "MenuRootSubComponent",
        "methods": [
          "GetWidget",
          "GetMenu",
          "GetRootComponent",
          "IsUnique",
          "HandlerAttachedScripted",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_GroupInviteStickyNotificationUIComponent",
        "methods": [
          "ShowGroupInviteNotification",
          "SetStickyActive",
          "OnInviteReceived",
          "ShowGroupInviteNotification",
          "OnInviteAcceptedOrCancelled",
          "SetStickyActive",
          "OnInit",
          "ShowGroupInviteNotification",
          "SetVisible",
          "OnButton",
          "OnDestroy"
        ]
      },
      {
        "class_name": "SCR_NoGameMasterStickyNotificationUIComponent",
        "methods": [
          "CheckShowNotification",
          "OnLimitedEditorChanged",
          "CheckShowNotification",
          "OnButton",
          "OnInit",
          "CheckShowNotification",
          "SetVisible",
          "OnDestroy"
        ]
      },
      {
        "class_name": "SCR_NotificationMessageUIComponent",
        "methods": [
          "Init",
          "EditorClosed",
          "EditorOpened",
          "SetWidgetColor",
          "ForceRemoveNotification",
          "FadeDelete",
          "GetOnDeleted",
          "OnNewNotificationHasPosition",
          "EditorOpened",
          "EditorClosed",
          "OnLimitedChanged",
          "EditorOpened",
          "OnInputDeviceChanged",
          "TeleportToLocation",
          "FadeDelete",
          "AnimationDoneListenerUpdate",
          "DeleteNotification",
          "DeleteNotification",
          "AutoFadeDelay",
          "FadeDelete",
          "HandlerAttached",
          "HandlerDeattached",
          "GetData"
        ]
      },
      {
        "class_name": "SCR_NotificationsLogComponent",
        "methods": [
          "OnNotification",
          "OnPriorityNotificationChange",
          "RemoveOldestNotification",
          "GetOnNewMessageHasPosition",
          "GetOnInputDeviceChanged",
          "OnNotificationDeleted",
          "OnPriorityNotificationChange",
          "RemoveOldestNotification",
          "OnInputDeviceIsGamepad",
          "GetIsUsingMouseAndKeyboard",
          "GetEditorManager",
          "GetNotificationManager",
          "GetNotificationWidgetColor",
          "GetNotificationTextColor",
          "HasNotificationInput",
          "GenerateNotificationColorMap",
          "OnStickyNotificationChanged",
          "RemoveOldestNotification",
          "OnPriorityNotificationChange",
          "RemoveOldestNotification",
          "OnSettingsChanged",
          "HandlerAttachedScripted",
          "GenerateNotificationColorMap",
          "OnStickyNotificationChanged",
          "OnNotification",
          "HandlerDeattached",
          "OnSlotResize",
          "RemoveOldestNotification",
          "ChangeInsertOrder"
        ]
      },
      {
        "class_name": "SCR_NotificationDisplayColor",
        "methods": [
          "GetWidgetColor",
          "GetTextColor"
        ]
      },
      {
        "class_name": "SCR_SplitNotificationMessageUIComponent",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_StickyNotificationUIComponent",
        "methods": [
          "SetStickyActive",
          "SetVisible",
          "Fade",
          "SetVisible",
          "isStickyActive",
          "InfluenceNotificationListSize",
          "GetOnStickyActiveChanged",
          "SetVisible",
          "Fade",
          "OnButton",
          "OnInit",
          "OnDestroy",
          "EditorOpened",
          "EditorClosed",
          "HandlerAttached",
          "HandlerDeattached",
          "OnDestroy"
        ]
      },
      {
        "class_name": "SCR_VotingStickyNotificationUIComponent",
        "methods": [
          "OnVotingChanged",
          "SetStickyActive",
          "EnableVotingTimerUI",
          "EnableContextAction",
          "EnableVotingTimerUI",
          "EnableContextAction",
          "EnableVotingTimerUI",
          "EnableContextAction",
          "SetStickyActive",
          "EnableContextAction",
          "InstantVotingContextUpdate",
          "EnableVotingTimerUI",
          "VotingTimeUpdate",
          "VotingTimeUpdate",
          "OnVoteStartOrChanged",
          "OnVoteCountChanged",
          "OnVotingEnd",
          "OnPlayerJoinOrLeaveServer",
          "OnPlayerFactionChanged",
          "OnInit",
          "OnVotingChanged",
          "OnButton",
          "OnDestroy"
        ]
      },
      {
        "class_name": "SCR_BackendImageComponent",
        "methods": [
          "HandlerAttached",
          "ShowDebugText",
          "CheckWidgetInitialized",
          "ShowLoadingImage",
          "TryDownloadImage",
          "TryDownloadImage",
          "TryLocalImage",
          "ShowLoadingImage",
          "ShowDebugText",
          "TryLocalImage",
          "ShowDebugText",
          "Callback_DownloadImage_OnTimeoutError",
          "TryLocalImage",
          "Callback_DownloadImage_OnSuccess",
          "ShowFallbackImage",
          "TryShowImage",
          "ShowDebugText",
          "TryLocalImage",
          "ShowFallbackImage",
          "TryShowImage",
          "ShowFallbackImage",
          "ShowFallbackImage",
          "ShowLoadingImage",
          "TryShowImage",
          "ShowFallbackImage",
          "TryLoadImageTexture",
          "SetImage",
          "ShowFallbackImage",
          "ShowDebugText",
          "CheckWidgetInitialized",
          "SetImageSaturation",
          "GetOnImageSelected",
          "ShowDebugText",
          "FormatAvailableScales"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemBackendImageComponent",
        "methods": [
          "SetWorkshopItemAndImage",
          "SetImage",
          "ShowLoadingImage"
        ]
      },
      {
        "class_name": "SCR_ScenarioBackendImageComponent",
        "methods": [
          "ShowLoadingImage"
        ]
      },
      {
        "class_name": "SCR_BasePaginationUIComponent",
        "methods": [
          "DisableArrowsSinglePage",
          "ShowEntries",
          "GetEntryCount",
          "GetRows",
          "GetColumns",
          "GetCurrentPage",
          "GetEntryIndex",
          "GetOnPageChanged",
          "SetPage",
          "ShowEntries",
          "IterateIndex",
          "IterateIndex",
          "EnablePageButton",
          "EnablePageButton",
          "EnablePageButton",
          "EnablePageButton",
          "RefreshPage",
          "SetPage",
          "IterateIndex",
          "EnablePageButton",
          "OnButtonPrev",
          "SetPage",
          "OnButtonNext",
          "SetPage",
          "SetUnderCursor",
          "OnInputDeviceIsGamepad",
          "SetUnderCursor",
          "IsUnique",
          "OnFocus",
          "OnButtonPrev",
          "OnButtonNext",
          "OnMouseEnter",
          "SetUnderCursor",
          "SetUnderCursor",
          "SetUnderCursor",
          "OnMouseLeave",
          "SetUnderCursor",
          "HandlerAttached",
          "SetPage",
          "DisableArrowsSinglePage",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_BreadCrumbsElementComponent",
        "methods": [
          "HandlerAttached",
          "SetBreadCrumb"
        ]
      },
      {
        "class_name": "SCR_BreadCrumbsComponent",
        "methods": [
          "HandlerAttached",
          "Refresh",
          "Clear",
          "Refresh",
          "Set",
          "Refresh",
          "Set",
          "Set",
          "SetFormat",
          "SetRichFormat",
          "AddBreadCrumbElement",
          "RemoveLastBreadCrumbElement",
          "Refresh"
        ]
      },
      {
        "class_name": "SCR_BrowserLinkComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "OnClick",
          "OpenBrowser",
          "OnCommStatusCheckFinished",
          "OpenBrowser"
        ]
      },
      {
        "class_name": "SCR_ColorizationComponent",
        "methods": [
          "HandlerAttached",
          "OnMouseButtonDown",
          "Colorize",
          "OnMouseButtonUp",
          "Colorize",
          "Colorize",
          "OnFocus",
          "Colorize",
          "OnFocusLost",
          "Colorize",
          "Colorize",
          "OnMouseEnter",
          "Colorize",
          "OnMouseLeave",
          "Colorize",
          "Colorize"
        ]
      },
      {
        "class_name": "SCR_CompassUIComponent",
        "methods": [
          "UpdateRotation",
          "HandlerAttachedScripted",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_DamageStateUIComponent",
        "methods": [
          "SetVisuals",
          "SetVisuals",
          "SetSize",
          "GetUiInfo",
          "HandlerAttached",
          "SetVisuals"
        ]
      },
      {
        "class_name": "SCR_DeviceSpecificComponent",
        "methods": [
          "OnInputDeviceIsGamepad",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ExternalPaginationUIComponent",
        "methods": [
          "SetPageIndex",
          "SetEntryCount",
          "GetOnShowEntries",
          "ShowEntries",
          "GetEntryCount",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_FieldManual_ImageGalleryComponent",
        "methods": [
          "SCR_FieldManual_ImageGalleryComponent",
          "AddMissingEnumLayoutPairs",
          "HandlerAttached",
          "Init",
          "ClearImages",
          "SetImages",
          "SetText",
          "SetType",
          "Rebuild",
          "SetImageData",
          "SetImageData",
          "AddMissingEnumLayoutPairs"
        ]
      },
      {
        "class_name": "SCR_ForceAspectRatioComponent",
        "methods": [
          "HandlerAttached",
          "OnUpdate",
          "UpdateSize"
        ]
      },
      {
        "class_name": "SCR_HintUIComponent",
        "methods": [
          "OnHintShow",
          "OnHintHide",
          "OnHintHide",
          "CreateHighlights",
          "OnClick",
          "OnInputDeviceIsGamepad",
          "OnSettingsChanged",
          "HandlerAttached",
          "OnHintShow",
          "HandlerDeattached",
          "GetOnHintShown",
          "IsHintShown"
        ]
      },
      {
        "class_name": "SCR_HorizontalScrollAnimationComponent",
        "methods": [
          "AnimationStop",
          "AnimationStart",
          "ResetPosition",
          "GetContentFit",
          "HandlerAttached",
          "HandlerDeattached",
          "OnEachFrame",
          "AnimatePosition",
          "ResetPosition",
          "AnimatePosition",
          "AnimatePosition",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_IngameClockUIComponent",
        "methods": [
          "UpdateIngameClock",
          "HandlerAttachedScripted",
          "UpdateIngameClock",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_IngameDateUIComponent",
        "methods": [
          "UpdateIngameDate",
          "HandlerAttached",
          "UpdateIngameDate",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_InventoryNavigationButtonBack",
        "methods": [
          "OnActivate",
          "OnClick",
          "OnClick",
          "OnInput",
          "SetAction",
          "OnMouseLeave",
          "SetParentStorage",
          "SetStorageIndex",
          "EnableCloseWithGamepad",
          "GetStorageIndex"
        ]
      },
      {
        "class_name": "SCR_LayoutTemplateComponent",
        "methods": [
          "GetName",
          "GetLayout",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_MenuActionsComponent",
        "methods": [
          "ScriptInvokerActionMethod",
          "HandlerAttached",
          "AddActionListenersDelayed",
          "HandlerDeattached",
          "RemoveActionListeners",
          "OnMenuDeactivated",
          "RemoveActionListeners",
          "OnAction",
          "AddActionListenersDelayed",
          "AddActionListeners",
          "RemoveActionListeners",
          "ActivateActions",
          "AddActionListenersDelayed",
          "DeactivateActions",
          "RemoveActionListeners",
          "GetOnAction",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_ModdedScenarioComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "OnInputDeviceIsGamepad",
          "OnMouseButtonDown",
          "OnFocus",
          "ColorizeWidgets"
        ]
      },
      {
        "class_name": "SCR_PlayerListButtonNotificationUIComponent",
        "methods": [
          "CheckIfShowIcon",
          "RefreshNotificationIcon",
          "CheckIfShowIcon",
          "HandlerAttached",
          "RefreshNotificationIcon",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PlayerTeleportFeedbackUIComponent",
        "methods": [
          "OnPlayerTeleported",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_ProgressBarColorsUIComponent",
        "methods": [
          "OnUpdate",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_RespawnMenuWidgetHandler",
        "methods": [
          "OnLoadoudSelectorBtnFocused",
          "GetOpenedSelector",
          "SetupSelectors",
          "ShowControlHints",
          "ShowDpadWidgets",
          "EnableWidget",
          "EnableWidget",
          "OnInputDeviceIsGamepad",
          "EnableWidget",
          "EnableWidget",
          "ShowControlHints",
          "ShowControlHints",
          "SetupMap",
          "SetupSelectors",
          "AddActionListeners",
          "HandlerAttached",
          "HandlerDeattached",
          "AddActionListeners",
          "RemoveActionListeners",
          "SetFocusRightMenu",
          "ShowDpadWidgets",
          "ShowControlHints",
          "RemoveActionListeners",
          "SetFocusToolMenu",
          "ShowDpadWidgets",
          "EnableWidget",
          "ShowControlHints",
          "RemoveActionListeners",
          "DisableFocusRightMenu",
          "AddActionListeners",
          "ShowDpadWidgets",
          "ShowControlHints",
          "DisableFocusToolMenu",
          "CloseAllMapTools",
          "AddActionListeners",
          "ShowDpadWidgets",
          "ShowControlHints",
          "IsAnyEntryActive",
          "CloseAllMapTools"
        ]
      },
      {
        "class_name": "SCR_SessionDurationUIComponent",
        "methods": [
          "SetSessionDurationTime",
          "HandlerAttachedScripted",
          "SetSessionDurationTime",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_SlotLabelsComponent",
        "methods": [
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_SlotLabelsComponent2",
        "methods": [
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_SlotUIComponent",
        "methods": [
          "HandlerAttached",
          "SetPosX",
          "SetPosY",
          "GetPosX",
          "GetPosY"
        ]
      },
      {
        "class_name": "SCR_SoundEventComponent",
        "methods": [
          "OnMouseEnter",
          "OnMouseLeave",
          "OnFocus",
          "OnFocusLost",
          "OnClick",
          "OnMouseButtonDown",
          "OnMouseButtonUp"
        ]
      },
      {
        "class_name": "SCR_SpinningWidgetComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "OnEachFrame"
        ]
      },
      {
        "class_name": "SCR_SpinningWidgetAnimationAbstract",
        "methods": [
          "Animate",
          "SCR_SpinningWidgetAnimation",
          "Animate"
        ]
      },
      {
        "class_name": "SCR_SystemClockUIComponent",
        "methods": [
          "OnSystemClockUpdate",
          "HandlerAttached",
          "OnSystemClockUpdate",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_WatermarkComponent",
        "methods": [
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_WeatherForecastUIComponent",
        "methods": [
          "CheckWeatherUpdate",
          "ShowWeatherUI",
          "HandlerAttached",
          "ShowWeatherUI",
          "ShowWeatherUI",
          "ShowWeatherUI",
          "CheckWeatherUpdate",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_WidgetExportRule",
        "methods": [
          "FindInWidgetSource",
          "ExtractVariablesFromBaseContainer",
          "GetExportThisWidget",
          "GetExportChildWidgets",
          "GetWidgetVariableName"
        ]
      },
      {
        "class_name": "SCR_WidgetExportRuleRoot",
        "methods": [
          "FindInWidgetSource",
          "GetDestinationPath",
          "GetScriptAddon",
          "GetGenerateFullWidgetPath",
          "GetClassPrefixAndSuffix"
        ]
      },
      {
        "class_name": "SCR_WidgetHighlightUIComponent",
        "methods": [
          "CreateHighlight",
          "CreateHighlight",
          "CreateHighlight",
          "Update",
          "HandlerDeattached",
          "HandlerAttached",
          "Update",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_PooledServerListComponent",
        "methods": [
          "CreateEntry",
          "FillEntry",
          "MoveToTop",
          "UpdateLoadedPage",
          "SetCurrentPage",
          "SetCurrentPageBase",
          "IsPageLoaded",
          "OnServerEntryFocusEnter",
          "ServerEntryByWidget",
          "SetRooms",
          "SetDataEntries",
          "UpdateEntries",
          "ShowEmptyRooms",
          "UpdateEntries",
          "UpdateLoadedPage",
          "IsRoomLoaded",
          "IsEntryVisible",
          "GetLoadedPage",
          "GetCurrentPage"
        ]
      },
      {
        "class_name": "SCR_ServerBrowserEntryComponent",
        "methods": [
          "HandlerAttached",
          "OnTooltipShow",
          "UpdateModularButtons",
          "OnFocusLost",
          "OnJoinInteractionButtonClicked",
          "SetCellText",
          "DisplayPing",
          "SetCellText",
          "CheckRoomProperties",
          "DisplayServerProperties",
          "UpdateModularButtons",
          "GetDownloadSizeMessage",
          "OnServerDetailModsLoaded",
          "UpdateTooltipJoinDownloadSizeMessage",
          "UpdateTooltipJoinDownloadSizeMessage",
          "SetRoomInfo",
          "CheckRoomProperties",
          "DisplayServerProperties",
          "SetCellText",
          "EmptyVisuals",
          "SetModsManager",
          "GetRoomInfo",
          "GetIsModded",
          "GetIsEnabled"
        ]
      },
      {
        "class_name": "SCR_ButtonBaseComponent",
        "methods": [
          "HandlerAttached",
          "ColorizeBackground",
          "OnDisabled",
          "OnClick",
          "SetToggled",
          "OnMouseEnter",
          "ShowBorder",
          "OnMouseLeave",
          "ShowBorder",
          "OnFocus",
          "ShowBorder",
          "OnFocusLost",
          "ShowBorder",
          "OnMenuSelect",
          "MenuSelectBase",
          "MenuSelectBase",
          "SetToggled",
          "SetToggled",
          "ColorizeBackground",
          "IsToggled",
          "SetToggleable",
          "GetToggleable",
          "ShowBorder",
          "IsBorderShown",
          "SetBackgroundColors",
          "ColorizeBackground",
          "GetButtonBase",
          "FindParentMenu",
          "IsParentMenuFocused"
        ]
      },
      {
        "class_name": "SCR_ButtonImageComponent",
        "methods": [
          "HandlerAttached",
          "SetImage",
          "OnMouseEnter",
          "OnMouseLeave",
          "GetImageWidget",
          "SetImage",
          "SetImage",
          "GetImage",
          "GetButtonImage"
        ]
      },
      {
        "class_name": "SCR_ButtonTextComponent",
        "methods": [
          "HandlerAttached",
          "SetToggled",
          "ColorizeText",
          "OnMouseEnter",
          "OnMouseLeave",
          "ColorizeText",
          "SetText",
          "SetTextWithParam",
          "GetText",
          "GetTextWidget",
          "GetOnMouseEnter",
          "GetOnMouseLeave",
          "GetButtonText",
          "FindButtonTextComponent"
        ]
      },
      {
        "class_name": "SCR_GalleryComponent",
        "methods": [
          "HandlerAttached",
          "CreateWidgets",
          "SetupHints",
          "SetFocusedItem",
          "UpdatePagingButtons",
          "OnInputDeviceIsGamepad",
          "ShowPagingButtons",
          "ShowPagingButtons",
          "UpdatePagingButtons",
          "ShowPagingButtons",
          "SetupHints",
          "CreateWidgets",
          "CreateWidget",
          "ShowTiles",
          "CreateWidget",
          "SetupWidget",
          "SetupWidget",
          "UpdatePagingButtons",
          "SetAnimationRate",
          "OnItemFocused",
          "UpdatePagingButtons",
          "OnCustomLeft",
          "SetFocusedItem",
          "OnCustomRight",
          "SetFocusedItem",
          "OnNavigationLeft",
          "SetFocusedItem",
          "OnNavigationRight",
          "SetFocusedItem",
          "OnNextItem",
          "SetFocusedItem",
          "OnPreviousItem",
          "SetFocusedItem",
          "SetFocusedItem",
          "ShowTiles",
          "ShowTiles",
          "ExpandWidget",
          "GetWidgets",
          "AddItem",
          "ShowTiles",
          "AddItem",
          "SetupWidget",
          "ShowTiles",
          "SetupHints",
          "ClearAll",
          "CreateWidgets",
          "SetupHints",
          "RemoveItem",
          "SetCurrentItem",
          "SetFocusedItem",
          "GetGalleryComponent"
        ]
      },
      {
        "class_name": "SCR_SelectionHintComponent",
        "methods": [
          "HandlerAttached",
          "CreateWidgets",
          "SetCurrentItem",
          "CreateWidgets",
          "CreateWidget",
          "CreateWidget",
          "SetAnimationRate",
          "SetItemCount",
          "CreateWidgets",
          "SetCurrentItem",
          "GetItemCount",
          "GetCurrentItem",
          "SetCurrentItem",
          "ColorizeItem",
          "ColorizeItem"
        ]
      },
      {
        "class_name": "SCR_ActionHintScriptedWidgetTooltip",
        "methods": [
          "Init",
          "ResetAction",
          "ResetActionColor",
          "SetAction",
          "SetActionColor",
          "ResetAction",
          "ResetActionColor",
          "GetDefaultAction",
          "GetDefaultActionColor"
        ]
      },
      {
        "class_name": "SCR_ButtonComponent",
        "methods": [
          "HandlerAttached",
          "SetContent",
          "OnClick",
          "OnMenuSelect",
          "OnMouseButtonDown",
          "ColorizeWidgets",
          "OnMouseButtonUp",
          "ColorizeWidgets",
          "ColorizeWidgets",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnFocus",
          "OnFocusLost",
          "ColorizeWidgets",
          "SetHorizontalAlign",
          "SetContent",
          "SetContentFromUIInfo",
          "GetContent",
          "GetButtonComponent"
        ]
      },
      {
        "class_name": "SCR_ButtonSplitComponent",
        "methods": [
          "SetColorizeFocusLost",
          "HandlerAttached",
          "OnMouseEnter",
          "OnMouseLeave",
          "ColorizeWidgets",
          "ColorizeCellPart",
          "ColorizeCellPart",
          "InsertWidgetCells",
          "SetupInnerButton",
          "OnInnerButtonFocus",
          "ColorizeCellPart",
          "ColorizeCellPart",
          "PreventContentColoringOn",
          "GetColorContent"
        ]
      },
      {
        "class_name": "SCR_ChangeableComponentBase",
        "methods": [
          "HandlerAttached",
          "SetupLabel",
          "ClearLabel",
          "OnFocus",
          "OnFocusLost",
          "OnMouseEnter",
          "OnMouseLeave",
          "SetupLabel",
          "ClearLabel",
          "GetLabel",
          "SetLabel",
          "UseLabel",
          "SetupLabel",
          "ClearLabel",
          "IsUsingLabel",
          "GetLabelWidget"
        ]
      },
      {
        "class_name": "SCR_ButtonCheckerComponent",
        "methods": [
          "HandlerAttached",
          "SetToggled",
          "OnClick"
        ]
      },
      {
        "class_name": "SCR_CheckboxComponent",
        "methods": [
          "IsChecked",
          "SetChecked",
          "SetCurrentItem",
          "OnElementChanged",
          "GetCheckboxComponent"
        ]
      },
      {
        "class_name": "SCR_CollapseWidgetComponent",
        "methods": [
          "HandlerAttached",
          "SetCollapseTime",
          "SetCollapsed",
          "ShowWidgetDelayed",
          "SetCollapsed",
          "GetRootWidget",
          "SetCollapsed",
          "SetupLayoutAnimation",
          "IsCollapsed",
          "SetCollapseTime",
          "GetCollapseTime",
          "SetCollpseDirection",
          "GetCollapseDirection",
          "SetupLayoutAnimation"
        ]
      },
      {
        "class_name": "SCR_UIStyle",
        "methods": [
          "GetColorFromEnum",
          "GetColorString",
          "GetColorString"
        ]
      },
      {
        "class_name": "SCR_ColorComponent",
        "methods": [
          "HandlerAttached",
          "ApplyColorization",
          "ApplyColorization",
          "IsUsingSyleValue",
          "SetUsingStyleValue",
          "GetUsedStyle",
          "SetUsedStyle",
          "ApplyColorization"
        ]
      },
      {
        "class_name": "SCR_ComboBoxComponent",
        "methods": [
          "HandlerAttached",
          "UpdateName",
          "HandlerDeattached",
          "CloseList",
          "OnHandlerClicked",
          "OpenList",
          "OnFocus",
          "OnFocusLost",
          "OnHandlerFocus",
          "OnHandlerFocusLost",
          "OnHandlerHovered",
          "OnHandlerUnhovered",
          "OnMenuFocusLost",
          "CloseList",
          "OnEnabled",
          "OnDisabled",
          "UpdateName",
          "SetCurrentItem",
          "UpdateName",
          "CreateEntries",
          "CreateEntries",
          "OnCreateElement",
          "CheckElementsInitialized",
          "OpenList",
          "CreateEntries",
          "OnCreateElement",
          "CloseList",
          "PlaySound",
          "OnMenuBack",
          "CloseList",
          "AddItem",
          "UpdateName",
          "CreateEntries",
          "ClearAll",
          "UpdateName",
          "CreateEntries",
          "RemoveItem",
          "UpdateName",
          "CreateEntries",
          "SetElementWidgetEnabled",
          "OnElementSelected",
          "SetCurrentItem",
          "CloseList",
          "GetElementWidgets",
          "IsOpened",
          "GetComboBoxComponent"
        ]
      },
      {
        "class_name": "SCR_ComboModalHandler",
        "methods": [
          "OnModalClickOut",
          "HandlerDeattached",
          "SetupOwners",
          "OnMenuUpdate"
        ]
      },
      {
        "class_name": "SCR_ComboBoxIconComponent",
        "methods": [
          "UpdateName",
          "AddItemAndIcon",
          "GetIconWidget",
          "AddItem",
          "ClearAll",
          "AllowFocus",
          "GetOnCreateElement",
          "OnCreateElement",
          "SetElementEnabled",
          "RemoveItem",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_EditBoxComponent",
        "methods": [
          "OnCancel",
          "HandlerAttached",
          "ShowWriteIcon",
          "HandlerDeattached",
          "ClearInteractionState",
          "OnFocus",
          "OnValueChanged",
          "OnHandlerFocus",
          "UpdateBackgroundColor",
          "OnHandlerFocusLost",
          "ClearInteractionState",
          "OnInvalidInput",
          "ClearInvalidInput",
          "ChangeOverlayColor",
          "ResetOverlayColor",
          "OnConfirm",
          "OnInternalButtonClicked",
          "ActivateWriteMode",
          "GetEditBoxText",
          "SetEditBoxText",
          "GetPlaceholderText",
          "SetPlaceholderText",
          "GetEditBoxComponent",
          "ActivateWriteMode",
          "ShowHint",
          "ShowWriteIcon",
          "UpdateInteractionState",
          "UpdateBackgroundColor",
          "ClearInteractionState",
          "UpdateInteractionState",
          "UpdateBackgroundColor",
          "SetValue",
          "GetValue",
          "GetPlaceHolderText",
          "GetEditBoxWidget",
          "IsValidInput",
          "GetHint",
          "IsInWriteMode",
          "GetEVHComponent",
          "ConfirmValue",
          "SetEditBoxText",
          "OnConfirm"
        ]
      },
      {
        "class_name": "SCR_EditBoxSearchComponent",
        "methods": [
          "HandlerAttached",
          "SetMessage",
          "UpdateWidgets",
          "OnMouseEnter",
          "OnHandlerFocus",
          "UpdateWidgets",
          "OnHandlerFocusLost",
          "OnConfirm",
          "UpdateWidgets",
          "OnConfirm",
          "UpdateInteractionState",
          "UpdateWidgets",
          "SetMessage",
          "GetEditBoxSearchComponent"
        ]
      },
      {
        "class_name": "SCR_WidgetHintComponent",
        "methods": [
          "HandlerAttached",
          "UseDefaultMessage",
          "SetVisible",
          "SetMessage",
          "GetMessage",
          "UseDefaultMessage"
        ]
      },
      {
        "class_name": "SCR_EventHandlerComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "OnClick",
          "OnChange",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnFocus",
          "OnFocusLost",
          "OnMouseButtonDown",
          "OnMouseButtonUp",
          "OnDoubleClick",
          "GetOnHandlerAttached",
          "m_OnHandlerDetached",
          "GetOnChange",
          "GetOnChangeFinal",
          "GetOnFocus",
          "GetOnFocusLost",
          "GetOnMouseEnter",
          "GetOnMouseLeave",
          "GetOnClick",
          "GetOnMouseButtonDown",
          "GetOnMouseButtonUp",
          "GetOnDoubleClick"
        ]
      },
      {
        "class_name": "SCR_ImageGalleryButtonComponent",
        "methods": [
          "HandlerAttached",
          "OnClick",
          "SetImage",
          "GetImage",
          "Select",
          "Deselect"
        ]
      },
      {
        "class_name": "SCR_ImageGalleryComponent",
        "methods": [
          "HandlerAttached",
          "Init",
          "Init",
          "OnImageSelected",
          "AddItem",
          "RemoveItem",
          "GetCurrentIndex",
          "GetCurrentItem",
          "OnImageSelected",
          "SetPagingLayout",
          "OnImageSelected",
          "Paging",
          "SetCanNavigate"
        ]
      },
      {
        "class_name": "SCR_InputButtonAlphaMaskAnimation",
        "methods": [
          "SetSpeed",
          "OnAnimationComplete",
          "OnUpdate",
          "Animate",
          "Stop",
          "Stop",
          "OnAnimationComplete",
          "ReverseDirection",
          "SCR_InputButtonAlphaMaskAnimation"
        ]
      },
      {
        "class_name": "SCR_InputButtonAnimations",
        "methods": [
          "ButtonAlphaMask",
          "ButtonColor"
        ]
      },
      {
        "class_name": "SCR_InputButtonColorAnimation",
        "methods": [
          "OnUpdate",
          "Stop",
          "Animate",
          "ReverseDirection",
          "SCR_InputButtonColorAnimation"
        ]
      },
      {
        "class_name": "SCR_InputButtonComponent",
        "methods": [
          "HandlerAttached",
          "OnInputDeviceUserChanged",
          "HandlerDeattached",
          "OnClick",
          "SetEnabled",
          "SetEnabled_Internal",
          "SetEnabled_Internal",
          "OnEnabled",
          "OnDisabled",
          "OnDisabled",
          "OnInputDeviceUserChanged",
          "ChangeInputDevice",
          "ChangeInputDevice",
          "ChangeInputDevice",
          "DeleteComboWidget",
          "ProcessKeybindStack",
          "GetInputFilterSettings",
          "ProcessFilterStack",
          "CreateComboWidget",
          "SetInputAction",
          "GetInputFilterSettings",
          "CreateComboWidget",
          "DeleteComboWidget",
          "SetInputAction",
          "OnButtonPressed",
          "PlaySoundClicked",
          "OnInput",
          "OnMouseButtonDown",
          "OnInput",
          "OnDoubleClick",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnDisabled",
          "OnEnabled",
          "OnButtonHold",
          "ActionReleased",
          "ActionPressed",
          "PlaySoundClicked",
          "PlaySound",
          "OnInput",
          "ActionPressed",
          "ActionPressed",
          "ActionReleased",
          "GetIsHoldingButton",
          "SetIsHoldingButton",
          "GetAnimationRate",
          "GetAnimationTime",
          "GetIsInputCombo",
          "GetOnAnimateHover",
          "GetOnUpdateEnableColor",
          "GetOnHoldAnimComplete",
          "ProcessKeybindStack",
          "ProcessKeybindStack",
          "ProcessKeybindStack",
          "ProcessKeybindStack",
          "ProcessKeybindStack",
          "ProcessFilterStack",
          "SetLabel",
          "SetLabelColor",
          "SetAction",
          "GetSize",
          "SetSize",
          "IsClickSoundDisabled",
          "SetClickSoundDisabled",
          "DeleteComboWidget",
          "ResetTexture",
          "SetColorActionDisabled",
          "FindComponent",
          "IsHovering",
          "SetForceDisabled",
          "SetEnabled_Internal",
          "SetEnabled_Internal",
          "SetForceDisabledWithDelay",
          "SetForceDisabled",
          "OnActiveWidgetInteraction",
          "SetForceDisabledWithDelay",
          "OnDialogOpen",
          "OnDialogClose",
          "OnMenuFocusGained",
          "SetForceDisabled",
          "OnMenuFocusLost",
          "SetForceDisabled",
          "IsInTopMenu",
          "IsInTopDialog",
          "GetForceDisabled",
          "GetInputButtonComponent"
        ]
      },
      {
        "class_name": "SCR_InputButtonDisplay",
        "methods": [
          "HandlerAttached",
          "Init",
          "SetAction",
          "GetFilter",
          "ApplyTextureToButton",
          "OverrideTexture",
          "DeleteAdditionalWidgets",
          "GetWidth",
          "Resize",
          "GetWidth",
          "GetFilter",
          "ApplyTextureToButton",
          "GetWidth",
          "DeleteAdditionalWidgets",
          "CreateAdditionalWidgets",
          "DeleteAdditionalWidgets",
          "GetWidth",
          "CreateAdditionalWidgets",
          "DeleteAdditionalWidgets",
          "ActionPressed",
          "AnimateHold",
          "SetToggled",
          "OnDoubleTap",
          "AnimateContinous",
          "AnimateClick",
          "ActionReleased",
          "ResetColor",
          "ResetColor",
          "SetToggled",
          "AnimateClick",
          "AnimateToggle",
          "ResetColor",
          "OnDoubleTap",
          "AnimateDoubleTab",
          "AnimateDoubleTab",
          "ResetColor",
          "GetOutlineWidget",
          "GetBackgroundWidget",
          "AnimateHover",
          "AnimateToggle",
          "ResetColor",
          "AnimateClick",
          "AnimateHold",
          "AnimateHoldComplete",
          "AnimateDoubleTab",
          "AnimateToggle",
          "AnimateContinous",
          "ResetColor",
          "UpdateEnableColor",
          "AnimateHover",
          "UpdateEnableColor",
          "GetTextSizeModifier",
          "GetIsOverwritten",
          "SetIsOverwritten"
        ]
      },
      {
        "class_name": "SCR_InputButtonLayoutConfig",
        "methods": [
          "GetButtonSize"
        ]
      },
      {
        "class_name": "SCR_LabelComponent",
        "methods": [
          "HandlerAttached",
          "ResetTopPadding",
          "SetText",
          "SetText",
          "SetTopPadding",
          "ResetTopPadding",
          "SetTopPadding",
          "SetVisible",
          "FindLabelComponent",
          "GetComponent"
        ]
      },
      {
        "class_name": "SCR_LimitTextLength",
        "methods": [
          "HandlerAttached",
          "LimitText",
          "OnUpdate",
          "LimitText"
        ]
      },
      {
        "class_name": "SCR_ButtonListViewComponent",
        "methods": [
          "HandlerAttached",
          "SetupEntryBehavior",
          "OnEntryFocus"
        ]
      },
      {
        "class_name": "SCR_ListViewComponent",
        "methods": [
          "HandlerAttached",
          "AccessingHandlers",
          "CreateEntriesWidgets",
          "OnUpdate",
          "PostCheck",
          "UpdateEntries",
          "FillEntry",
          "SetScrollbarVisible",
          "SetScrollbarVisible",
          "FocusFirstAvailableEntry",
          "AccessingHandlers",
          "CreateEntriesWidgets",
          "CreateEntry",
          "CreateEntry",
          "PostCheck",
          "CheckEntrySize",
          "CreateEntry",
          "CreateEntry",
          "SetupEntryBehavior",
          "CalculateLimit",
          "EntryFractionFromViewPos",
          "CheckEntrySize",
          "SetupEntryBehavior",
          "FillEntry",
          "ScrollOffsetMove",
          "CheckEntrySize",
          "UpdateEntries",
          "ScrollWheelMove",
          "ScrollList",
          "StayOnLastEntry",
          "StayOnLastEntry",
          "ChangeFocusWithoutAnimation",
          "ScrollList",
          "ScrollOffsetMove",
          "ScrollMove",
          "ChangeFocusWithoutAnimation",
          "AnimateEntryOpacity",
          "OpacityAnimation",
          "ClearServerList",
          "OnMenuDown",
          "ScrollList",
          "OnMenuUp",
          "ScrollList",
          "SetScrollbar",
          "UpdateScrollbar",
          "ActivateScrolling",
          "ScrollWheelMove",
          "UpdateScrollbar",
          "ScrollableEntriesCount",
          "FirstAvailableEntry"
        ]
      },
      {
        "class_name": "SCR_PooledListComponent",
        "methods": [
          "HandlerAttached",
          "AccessingHandlers",
          "CreateEntriesWidgets",
          "SetupOffsets",
          "OnActionUp",
          "SetCurrentPage",
          "OnActionDown",
          "OnScroll",
          "SetCurrentPage",
          "CurrentPageFromScrollPos",
          "EntriesOutOfView",
          "UpdateEntries",
          "FillEntry",
          "SetupOffsets",
          "UpdateScroll",
          "OnScroll",
          "CheckEntrySize",
          "MoveToTop",
          "SetCurrentPage",
          "SetCurrentPageBase",
          "UpdateEntries",
          "SetCurrentPageBase",
          "SwitchPages",
          "SwitchPages",
          "SetupOffsets",
          "SetupOffsets",
          "FocusFirstAvailableEntry",
          "MoveToTop",
          "SetCurrentPage",
          "OnScroll",
          "SwitchPages",
          "ShowScrollbar",
          "AccessingHandlers",
          "CreateEntriesWidgets",
          "CreateEntriesWidgetsInPage",
          "CreateEntriesWidgetsInPage",
          "CreateEntriesWidgetsInPage",
          "CreateEntry",
          "SetupEntryBehavior",
          "CheckEntrySize",
          "ShowScrollbar",
          "ShowScrollbar",
          "SetupOffsets",
          "SetupEntryBehavior",
          "FillEntry",
          "AnimateEntryOpacity",
          "OpacityAnimation",
          "ShowEntries",
          "FocusedWidgetFromEntryList",
          "GetPageEntriesCount",
          "SetDataEntries",
          "ShowEntries",
          "FirstAvailableEntry",
          "SetIsListFocused",
          "IsListFocused",
          "GetScrollWidget",
          "GetOnSetPage"
        ]
      },
      {
        "class_name": "SCR_LoadingCircleComponent",
        "methods": [
          "HandlerAttached",
          "Animate",
          "Animate",
          "SCR_LoadingCircleComponent",
          "SetSpeed",
          "GetSpeed",
          "GetIsPlayingAnimation",
          "GetIsPlayingAnimation"
        ]
      },
      {
        "class_name": "SCR_LoadingOverlayHelperComponent",
        "methods": [
          "Init",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_LoadingOverlay",
        "methods": [
          "ShowForWidget",
          "HideForWidget",
          "HideAndDelete",
          "SetShown",
          "SetText",
          "ShowBackground",
          "ShowBlur",
          "GetRootWidget",
          "SetFocus",
          "HandlerAttached",
          "ShowBackground",
          "Init",
          "SetSizeFromTarget",
          "OnUpdate",
          "OnClick",
          "OnModalResult",
          "OnDoubleClick",
          "OnSelect",
          "OnItemSelected",
          "OnFocus",
          "OnFocusLost",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnMouseWheel",
          "OnMouseButtonDown",
          "OnMouseButtonUp",
          "OnController",
          "OnKeyDown",
          "OnKeyUp",
          "OnKeyPress",
          "OnChange",
          "OnResize",
          "OnEvent",
          "OnModalClickOut"
        ]
      },
      {
        "class_name": "SCR_LoadingOverlayWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_MultipleStatesButtonComponent",
        "methods": [
          "HandlerAttached",
          "Init",
          "Init",
          "ChangeState",
          "ChangeState",
          "OnClick",
          "ChangeState",
          "StartProgress",
          "SetProgressText",
          "SetProgress",
          "SetProgressText",
          "FinishProgress",
          "SetProgressText",
          "GetSelectedItem",
          "SetProgressText",
          "SetHintVisible",
          "EnableButton",
          "IsButtonEnabled",
          "OnMenuSelect",
          "OnMouseButtonDown",
          "OnMouseButtonUp",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnFocus",
          "OnFocusLost",
          "GetCurrentContent",
          "GetMultipleStatesButtonComponent"
        ]
      },
      {
        "class_name": "SCR_PagingButtonComponent",
        "methods": [
          "HandlerAttached",
          "SetAction",
          "FlipImage",
          "OnClick",
          "FlipImage",
          "OnMenuSelect",
          "MenuSelectBase",
          "SetEnabled",
          "IsPositive",
          "SetPositive",
          "SetAction",
          "OnMouseEnter",
          "PlaySound",
          "OnMouseLeave",
          "GetAction",
          "GetPagingButtonComponent"
        ]
      },
      {
        "class_name": "SCR_ScriptedWidgetComponent",
        "methods": [
          "ScriptInvokerScriptedWidgetComponentMethod",
          "HandlerAttached",
          "OnClick",
          "GetComponent",
          "GetRootWidget",
          "IsVisible"
        ]
      },
      {
        "class_name": "SCR_ScriptedWidgetTooltip",
        "methods": [
          "ScriptInvokerTooltipMethod",
          "CreateTooltipWidget",
          "Show",
          "ForceHideCurrentTooltip",
          "ForceHidden",
          "InitContentPosition",
          "UpdatePosition",
          "Hide",
          "OnHide",
          "Update",
          "Clear",
          "OnHide",
          "OnHide",
          "Clear",
          "OnMenuChange",
          "ForceHidden",
          "OnTabChange",
          "ForceHidden",
          "Clear",
          "InitContentPosition",
          "UpdatePosition",
          "ForceHidden",
          "OnHide",
          "IsValid",
          "GetTag",
          "GetContent",
          "GetContentRoot",
          "IsVisible",
          "GetHoverWidget",
          "GetContentWrapper",
          "ForceHideCurrentTooltip",
          "GetCurrentTooltip",
          "GetOnTooltipShowInit",
          "GetOnTooltipShow",
          "GetOnTooltipHide"
        ]
      },
      {
        "class_name": "SCR_ScriptedWidgetTooltipPreset",
        "methods": [
          "GetContent",
          "GetContentRoot",
          "GetGoalPosition",
          "GetTooltipSize",
          "GetInputPositionSettings"
        ]
      },
      {
        "class_name": "SCR_ScriptedWidgetTooltipPresets",
        "methods": [
          "FindPreset"
        ]
      },
      {
        "class_name": "SCR_TooltipPositionPreset",
        "methods": [
          "GetGoalPosition",
          "CalculateGoalPosition",
          "CalculateGoalPosition",
          "CalculateGoalPosition",
          "CheckOverflow",
          "CheckOverflow",
          "GetContentAlignmentHorizontal",
          "GetContentAlignmentVertical"
        ]
      },
      {
        "class_name": "SCR_ScriptedWidgetTooltipContentBase",
        "methods": [
          "Init",
          "Clear",
          "ResetMessage",
          "ResetMessageColor",
          "Clear",
          "SetMessage",
          "ResetMessage",
          "SetMessageColor",
          "ResetMessageColor",
          "SetMessageColor",
          "GetContentRoot",
          "GetMessage",
          "GetDefaultMessage"
        ]
      },
      {
        "class_name": "SCR_ScrollBarComponent",
        "methods": [
          "HandlerAttached",
          "DragHandler",
          "SetupPosition",
          "SetupScrollbarProperties",
          "SetupHandlerFill",
          "SetupScrollbarProperties",
          "SetupPosition",
          "SetupPosition",
          "SetPosition",
          "MoveHandlerPos",
          "GetHandlerPosition"
        ]
      },
      {
        "class_name": "SCR_ScrollBarHandleComponent",
        "methods": [
          "HandlerAttached",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnMouseButtonDown",
          "DragHandler",
          "PlaySound",
          "OnMouseButtonUp",
          "PlaySound",
          "DragHandler",
          "SetSizeY",
          "GetSizeY",
          "SetPositionY",
          "GetPositionY",
          "GetMouseOffsetY"
        ]
      },
      {
        "class_name": "SCR_SelectableButtonComponent",
        "methods": [
          "HandlerAttached",
          "SetImage",
          "SetImage",
          "OnClick",
          "SetSelected",
          "OnMouseEnter",
          "PlaySound",
          "ColorizeWidgets",
          "OnMouseLeave",
          "ColorizeWidgets",
          "OnFocus",
          "PlaySound",
          "ColorizeWidgets",
          "ColorizeCheckWidget",
          "OnFocusLost",
          "ColorizeWidgets",
          "ColorizeWidgets",
          "ColorizeCheckWidget",
          "OnMenuSelect",
          "ColorizeCheckWidget",
          "ColorizeWidgets",
          "ColorizeCheckWidget",
          "IsSelected",
          "SetSelected",
          "ColorizeCheckWidget",
          "GetSelectableButtonComponent"
        ]
      },
      {
        "class_name": "SCR_SelectableTileButtonComponent",
        "methods": [
          "HandlerAttached",
          "ColorizeCheckWidget",
          "OnClick",
          "SetSelected",
          "OnMouseEnter",
          "PlaySound",
          "OnMouseLeave",
          "OnFocus",
          "PlaySound",
          "OnFocusLost",
          "OnMenuSelect",
          "ColorizeCheckWidget",
          "ColorizeWidgets",
          "ColorizeCheckWidget",
          "IsSelected",
          "SetSelected",
          "ColorizeCheckWidget",
          "ShowButton",
          "HideButton"
        ]
      },
      {
        "class_name": "SCR_SelectionWidgetComponent",
        "methods": [
          "AddItem",
          "ClearAll",
          "RemoveItem",
          "GetCurrentIndex",
          "GetCurrentItem",
          "GetItemName",
          "GetCurrentItemData",
          "GetItemName",
          "GetItemData",
          "GetNumItems",
          "SetCurrentItem",
          "PlaySound",
          "GetSelectionComponent"
        ]
      },
      {
        "class_name": "SCR_SimpleEntryComponent",
        "methods": [
          "HandlerAttached",
          "SetMessages",
          "GetLabel",
          "GetLeftText",
          "GetMessage",
          "GetRightText",
          "GetRoot"
        ]
      },
      {
        "class_name": "SCR_SliderComponent",
        "methods": [
          "HandlerAttached",
          "SetSliderSettings",
          "HandlerDeattached",
          "OnFocus",
          "OnValueChanged",
          "PlaySound",
          "RoundValue",
          "OnValueFinal",
          "OnSliderFocus",
          "OnSliderFocusLost",
          "SetValue",
          "OnValueChanged",
          "GetOnChangedFinal",
          "GetValue",
          "SetFormatText",
          "GetFormatText",
          "ShowCustomValue",
          "SetSliderSettings",
          "SetMin",
          "SetMax",
          "SetStep",
          "GetMin",
          "GetMax",
          "GetStep",
          "SetShownValueMultiplier",
          "GetShownValueMultiplier",
          "GetSliderComponent"
        ]
      },
      {
        "class_name": "SCR_SpinBoxComponent",
        "methods": [
          "HandlerAttached",
          "SetInitialState",
          "OnFocus",
          "AddActionListeners",
          "UpdateHintBar",
          "OnFocusLost",
          "RemoveActionListeners",
          "UpdateHintBar",
          "AddItem",
          "SetInitialState",
          "RemoveItem",
          "SetInitialState",
          "ClearAll",
          "SetInitialState",
          "SetCurrentItem",
          "SetCurrentItem_Internal",
          "SetCurrentItem_Internal",
          "UpdateHintBar",
          "EnableArrows",
          "CreateHintBar",
          "SetTexture",
          "UpdateHintBar",
          "UpdateHintBar",
          "SetInitialState",
          "SetCurrentItem_Internal",
          "CreateHintBar",
          "EnableArrows",
          "OnLeftArrowClick",
          "SetCurrentItem",
          "OnRightArrowClick",
          "SetCurrentItem",
          "SetCurrentItem",
          "OnMenuLeft",
          "OnMenuRight",
          "AddActionListeners",
          "RemoveActionListeners",
          "SetKeepActionListeners",
          "SetCycleMode",
          "EnableArrows",
          "GetOnLeftArrowClick",
          "GetOnRightArrowClick",
          "GetSpinBoxComponent"
        ]
      },
      {
        "class_name": "SCR_SpinBoxPagingComponent",
        "methods": [
          "HandlerAttached",
          "UpdateTextAndButtons",
          "OnButtonLeft",
          "SetCurrentItem",
          "OnButtonRight",
          "SetCurrentItem",
          "UpdateTextAndButtons",
          "SetCurrentItem",
          "UpdateTextAndButtons",
          "SetPageCount",
          "SetCurrentItem",
          "UpdateTextAndButtons",
          "GetPageCount",
          "GetCurrentIndex",
          "SetCanNavigate",
          "SetButtonsVisible",
          "SetButtonsActive",
          "GetSpinBoxPagingComponent"
        ]
      },
      {
        "class_name": "SCR_SortElementComponent",
        "methods": [
          "SetSortOrder",
          "SetToggled",
          "SetToggled",
          "SelectNewSortOrder",
          "UpdateSortEffects",
          "GetSortOrder",
          "GetDefaultSortOrder",
          "GetName",
          "HandlerAttached",
          "SelectNewSortOrder",
          "UpdateSortEffects",
          "Internal_SetToggled",
          "UpdateSortEffects",
          "OnClick",
          "Internal_SetToggled",
          "SelectNewSortOrder",
          "UpdateSortEffects",
          "SelectNewSortOrder",
          "UpdateSortEffects",
          "SetEffectsWithAnyTagEnabled"
        ]
      },
      {
        "class_name": "SCR_SortHeaderComponent",
        "methods": [
          "GetSortOrder",
          "GetSortOrderAscending",
          "GetSortElementId",
          "GetSortElementName",
          "FindElement",
          "SetCurrentSortElement",
          "InvokeOnChanged",
          "SetElementVisible",
          "GetRootWidget",
          "SetFocus",
          "HandlerAttached",
          "FindAllSortButtons",
          "SetCurrentSortElement",
          "FindAllSortButtons",
          "FindAllSortButtons",
          "OnButtonClicked",
          "InvokeOnChanged",
          "GetCurrentSortElement",
          "InvokeOnChanged"
        ]
      },
      {
        "class_name": "SCR_TabViewComponent",
        "methods": [
          "ScriptInvokerTabViewMethod",
          "ScriptInvokerTabViewIndexMethod",
          "ScriptInvokerTabViewContentIndexMethod",
          "HandlerAttached",
          "Init",
          "Init",
          "CreateTab",
          "CreateTabContent",
          "ShowTab",
          "AddActionListeners",
          "UpdatePagingButtons",
          "ShowAllTabsText",
          "HandlerDeattached",
          "RemoveActionListeners",
          "CreateTab",
          "CreateIcon",
          "CreateIcon",
          "CreateTabContent",
          "FocusFirstWidget",
          "FocusFirstWidget",
          "ShowIcon",
          "CreateIcon",
          "IsIconShown",
          "GetEntryIcon",
          "GetEntryContent",
          "GetContent",
          "GetContentWidget",
          "SelectIndex",
          "FocusFirstWidget",
          "CreateTabContent",
          "ShowTab",
          "ShowTabText",
          "ShowTabText",
          "SelectIndex",
          "SelectIndex",
          "UpdatePagingButtons",
          "ShowTabByIdentifier",
          "ShowTab",
          "GetShownTab",
          "GetTabCount",
          "AddTab",
          "CreateTab",
          "UpdatePagingButtons",
          "RemoveTab",
          "ShowTab",
          "ShowTab",
          "UpdatePagingButtons",
          "RemoveTabByIdentifier",
          "RemoveTab",
          "AddContentElement",
          "ShowTabText",
          "ShowAllTabsText",
          "ShowTabText",
          "ShowTabText",
          "SetTabText",
          "SetTabImage",
          "ShowImage",
          "OnSelection",
          "ShowTab",
          "OnTabButtonToggle",
          "OnTabLeft",
          "ShowTab",
          "OnTabRight",
          "ShowTab",
          "UpdatePagingButtons",
          "GetNextValidItem",
          "EnableTab",
          "UpdatePagingButtons",
          "EnableAllTabs",
          "EnableTab",
          "SetTabVisible",
          "UpdatePagingButtons",
          "ShowTab",
          "Enable",
          "IsTabEnabled",
          "SetCanNavigate",
          "GetCanNavigate",
          "SetListenToActions",
          "GetListenToActions",
          "AddActionListeners",
          "RemoveActionListeners",
          "GetShownTabComponent",
          "SetEntryIconSize",
          "SetPagingButtonsVisible",
          "GetOnChanged",
          "GetOnContentCreate",
          "GetOnContentShow",
          "GetOnContentHide",
          "GetOnContentRemove",
          "GetOnTabChange",
          "GetOnContentSelect"
        ]
      },
      {
        "class_name": "SCR_ToolboxComponent",
        "methods": [
          "HandlerAttached",
          "CreateWidgets",
          "SetInitialState",
          "CreateWidgets",
          "SetInitialState",
          "ClearWidgets",
          "OnFocus",
          "OnFocusLost",
          "SetInitialState",
          "SetCurrentItem",
          "OnMenuSelect",
          "GetFirstSelectedIndex",
          "OnElementClicked",
          "SetFocusedItem",
          "SetCurrentItem",
          "OnElementChanged",
          "SetCurrentItem",
          "SetFocusedItem",
          "OnMouseEnter",
          "OnMenuLeft",
          "SetFocusedItem",
          "SetCurrentItem",
          "OnMenuRight",
          "SetFocusedItem",
          "SetCurrentItem",
          "GetNextValidItem",
          "GetItems",
          "GetItem",
          "AddItem",
          "ClearWidgets",
          "CreateWidgets",
          "ClearAll",
          "ClearWidgets",
          "RemoveItem",
          "ClearWidgets",
          "CreateWidgets",
          "IsItemSelected",
          "SetItemSelected",
          "SetFocusedItem",
          "SetFocusedItem",
          "GetFocusedItem",
          "GetToolboxComponent"
        ]
      },
      {
        "class_name": "SCR_ToolboxMultilineComponent",
        "methods": [
          "HandlerAttached",
          "CreateWidgets",
          "SetInitialState",
          "RemoveWidgets",
          "SetMaxItemsInRow",
          "RemoveWidgets",
          "CreateWidgets",
          "GetMaxItemsInRow",
          "FindSizeWidget"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenFocusWidgetComponent",
        "methods": [
          "OnFocus",
          "ToggleInteractions",
          "OnFocusLost",
          "ToggleInteractions",
          "ToggleInteractions",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_WLibComponentBase",
        "methods": [
          "HandlerAttached",
          "SetEnabled",
          "OnClick",
          "PlaySound",
          "OnMouseEnter",
          "PlaySound",
          "OnFocus",
          "PlaySound",
          "OnEnabled",
          "OnDisabled",
          "IsChildWidget",
          "SetAnimationRate",
          "PlaySound",
          "SetTexture",
          "SetHoverSound",
          "SetClickedSound",
          "GetHoverSound",
          "GetClickedSound",
          "SetEnabled",
          "OnEnabled",
          "OnDisabled",
          "SetVisible",
          "IsEnabled",
          "SetMouseOverToFocus",
          "SetDisabledOpacity"
        ]
      },
      {
        "class_name": "SCR_WLibProgressBarComponent",
        "methods": [
          "HandlerAttached",
          "UpdateVisuals",
          "SetMin",
          "UpdateVisuals",
          "SetMax",
          "UpdateVisuals",
          "SetValue",
          "UpdateVisuals",
          "SetChange",
          "UpdateVisuals",
          "UpdateVisuals",
          "StopProgressAnimation",
          "SetValue",
          "SetSliderColor",
          "SetSliderChangeColor",
          "GetMin",
          "GetMax",
          "GetValue",
          "GetRootWidget",
          "GetAnimationSpeed",
          "IsUsingAnimationTime",
          "SetUsingAnimationTime",
          "SetAnimationTime",
          "GetProgressBar"
        ]
      },
      {
        "class_name": "SCR_CampaignMapUIBase",
        "methods": [
          "GetOnMapIconEnter",
          "GetOnMapIconClick",
          "OnClick",
          "CheckIfCanRespawn",
          "SelectIcon",
          "SelectIcon",
          "Select",
          "FlashBaseIcon",
          "SetBaseIconFactionColor",
          "SetBaseIconFactionColor",
          "OnMouseEnter",
          "AnimExpand",
          "OnMouseLeave",
          "AnimCollapse",
          "SelectBase",
          "Select",
          "OnLeave",
          "AnimExpand",
          "PlayHoverSound",
          "PlayHoverSound",
          "PlayHoverSound",
          "AnimCollapse",
          "ShowServiceHint",
          "HandlerAttached",
          "OnMapCloseInvoker",
          "RemoveHint",
          "RemoveHint",
          "HandlerDeattached",
          "RemoveHint",
          "FocusOnBase",
          "OnLeave",
          "SelectBase",
          "SelectBase",
          "OnSelected",
          "ShowServices",
          "ShowBase",
          "UpdateIconAndText",
          "SetIconInfoText",
          "SetBaseImage",
          "SetIconInfoText",
          "CheckIfCanRespawn",
          "UpdateResources",
          "InitServices",
          "InitBaseIcon",
          "SetIconFaction",
          "SetBaseImage",
          "ChangeBaseIconSize",
          "UpdateResources",
          "UpdateBaseIcon",
          "SetBaseImage",
          "UpdateAssemblyIcon",
          "SetIconName",
          "SetImage",
          "SetIconFaction",
          "SetBaseImage",
          "SetImage",
          "InitBase",
          "SetBaseServices",
          "InitBaseIcon",
          "SetIconInfoText",
          "InitServices",
          "InitMobile",
          "UpdateAssemblyIcon",
          "SetIconInfoText",
          "OnMapClose",
          "SetIconName",
          "CheckIfCanRespawn",
          "SetBaseType",
          "ChangeNameSizeOnLayerChange",
          "SetBaseServices",
          "SetLocalTaskIcon",
          "ShowName",
          "GetPos",
          "ChangeNameSize",
          "ChangeNameSizeOnLayerChange",
          "ChangeNameSize",
          "GetFactionKey",
          "GetFactionColor",
          "GetColorForFaction",
          "GetBase",
          "SetBaseIconFactionColor",
          "SetImage",
          "CheckIfCanRespawn",
          "GetSpawnPointId",
          "SetAntennaIconVisible"
        ]
      },
      {
        "class_name": "SCR_CampaignMapUIElement",
        "methods": [
          "HandlerAttached",
          "OnMouseEnter",
          "SetImage"
        ]
      },
      {
        "class_name": "SCR_CampaignMapUIPlayerHighlight",
        "methods": [
          "GetPos",
          "SetPos"
        ]
      },
      {
        "class_name": "SCR_CampaignMapUIService",
        "methods": [
          "OnMouseEnter",
          "PlayHoverSound",
          "ShowHint",
          "OnMouseLeave",
          "ShowHint",
          "OnClick",
          "AnimExpand",
          "AnimCollapse",
          "HandlerAttached",
          "ShowHint",
          "SetServiceImage",
          "SetImage",
          "SetImage",
          "SetImage",
          "SetImage",
          "SetImage",
          "SetImage",
          "SetImage",
          "SetImage",
          "SetImage",
          "SetImage",
          "SetParent",
          "SetService",
          "SetServiceImage",
          "SetImage"
        ]
      },
      {
        "class_name": "SCR_MapCampaignUI",
        "methods": [
          "InitMobileAssembly",
          "InitBases",
          "UpdateIcons",
          "ShowSpawnPoint",
          "CreatePlayerSpawnPositionHint",
          "RemoveSpawnPositionHint",
          "HideSpawnPositionHint",
          "OnSpawnPointFactionChange",
          "AddSpawnPoint",
          "RemoveSpawnPoint",
          "OnMapZoom",
          "UpdateIcons",
          "OnMapOpen",
          "InitBases",
          "CreatePlayerSpawnPositionHint",
          "OnMapClose"
        ]
      },
      {
        "class_name": "SCR_MapUIElement",
        "methods": [
          "HandlerAttached",
          "SetParent",
          "GetName",
          "GetIconVisible",
          "ShowName",
          "SetVisible",
          "GetRoot",
          "OnClick",
          "SelectIcon",
          "SelectIcon",
          "Select",
          "AnimExpand",
          "AnimCollapse",
          "AnimExpand",
          "AnimCollapse",
          "PlayHoverSound",
          "GetPos",
          "SetImage",
          "GetColorForFaction",
          "GetSpawnPointId",
          "SetName"
        ]
      },
      {
        "class_name": "SCR_MapUISpawnPoint",
        "methods": [
          "Init",
          "UpdateIcon",
          "UpdateResources",
          "SetName",
          "GetPos",
          "UpdateResources",
          "UpdateIcon",
          "HandlerAttached",
          "HandlerDeattached",
          "SelectIcon",
          "Select",
          "OnMouseEnter",
          "AnimExpand",
          "OnMouseLeave",
          "AnimCollapse",
          "GetSpawnPointId"
        ]
      },
      {
        "class_name": "SCR_AIDebugInfoComponent",
        "methods": [
          "HandlerAttached",
          "SelectAIAsFixed",
          "UpdateUI",
          "SelectAIAsFixed"
        ]
      },
      {
        "class_name": "SCR_AIMessageVisualization",
        "methods": [
          "SCR_AIMessageVisualization",
          "Draw"
        ]
      },
      {
        "class_name": "BasicButtonComponent",
        "methods": [
          "HandlerAttached",
          "OnClick",
          "OnFocus",
          "OnFocusLost",
          "OnMouseEnter"
        ]
      },
      {
        "class_name": "ButtonComponent",
        "methods": [
          "HandlerDeattached",
          "OnMouseButtonUp",
          "OnFocus",
          "OnFocusLost",
          "OnMouseEnter",
          "OnMouseLeave"
        ]
      },
      {
        "class_name": "HoverButtonComponent",
        "methods": [
          "HandlerAttached",
          "OnClick",
          "OnMouseEnter",
          "OnMouseLeave"
        ]
      },
      {
        "class_name": "SCR_OnFocusUIComponent",
        "methods": [
          "GetOnFocusChanged",
          "OnFocus",
          "OnFocusLost"
        ]
      },
      {
        "class_name": "SimpleButtonComponent",
        "methods": [
          "HandlerAttached",
          "OnClick",
          "SetOnClickSound",
          "OnMouseButtonDown",
          "OnMouseButtonUp",
          "OnFocus",
          "OnFocusLost",
          "OnMouseEnter",
          "OnFocus",
          "OnMouseLeave",
          "OnFocusLost"
        ]
      },
      {
        "class_name": "SCR_CareerEndScreenUI",
        "methods": [
          "GameOverTabInit",
          "SetEndscreenVisualInfo",
          "FillFields",
          "HandlerAttached",
          "OnDataReceived",
          "FillFields",
          "FillFields",
          "FillScreen",
          "FillScreen",
          "FillHudAndStats",
          "FillSpecializationsFrame",
          "FillHudAndStats",
          "FillSpecializationsFrame",
          "SetEndscreenVisualInfo"
        ]
      },
      {
        "class_name": "SCR_GameOverScreenCombatControlPatrolUIComponent",
        "methods": [
          "InitContent"
        ]
      },
      {
        "class_name": "SCR_GameOverScreenContentUIComponent",
        "methods": [
          "InitContent",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "GameOverScreenInput",
        "methods": [
          "OnMenuOpen",
          "OnMenuClose",
          "OnMenuUpdate",
          "OnChatToggle",
          "BackToMainMenuPopupComfirm",
          "Close",
          "OnBackToMainMenu",
          "ReturnToMainMenu",
          "OnBackToMainMenu",
          "ShowPlayerList"
        ]
      },
      {
        "class_name": "SCR_GameOverScreenUIComponent",
        "methods": [
          "OnTabChanged",
          "OnEndScreenContentShow",
          "OnTabCreated",
          "OnTabViewFadeDone",
          "OnEndScreenContentShow",
          "InitGameOverScreen",
          "OpenDebriefingScreenMenu",
          "ReturnToMenu",
          "BackToMainMenuPopupConfirm",
          "OnGameEnd",
          "SetMainMenuPopUpTexts",
          "OnGameEnd",
          "HandlerAttached",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_BaseGameOverTabUIComponent",
        "methods": [
          "GameOverTabInit"
        ]
      },
      {
        "class_name": "SCR_ServerRestartTimerUIComponent",
        "methods": [
          "IsValid",
          "Init",
          "Init",
          "StartTimer",
          "UpdateTimer",
          "StopTimer",
          "UpdateTimer",
          "OnTimeUpdate",
          "HandlerAttached",
          "Init",
          "StartTimer",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_EditorCanEnterLayerActionCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_EditorCountOrMoreEntitiesSelectedActionCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_EditorFilterActionCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_EditorHasLastNotificationLocationActionCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "SetLocationDisabled"
        ]
      },
      {
        "class_name": "SCR_EditorHoveredEntityIsSelectedActionCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_EditorIsStateActionCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_EditorLessThenCountWaypointsActionCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_EditorModeActiveActionCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_EditorOpenedActionCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_HoveredEntityHasFlagsActionComponent",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_HoveredEntityIsLockedActionComponent",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_SelectedEntitiesContainsTypeActionComponent",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_HasWoundTypeCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_IsCharacterConsciousCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_ActiveVoNActionCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CanCharacterLeaveLadderCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterAimingSightsDownCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterBleedingCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterCanFireWeaponCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_CharacterCanGetOutCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_CharacterFocusModeCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterFreelookCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterHasConsumableItemEquippedCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterHasGadgetCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterHasLongRadioCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterHasWeaponCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterIsFallingCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_CharacterIsGettingInCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_CharacterIsGettingOutCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_CharacterIsInGadgetADSCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterIsInVehicleCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterIsSwimmingCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_CharacterIsUsingItem",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterRadioCountCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterReloadingCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_CharacterSprintingCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterStanceCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CharacterWeaponTypeCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_DetonatorHasConnectedChargesCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_GadgetSelectionCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_InventoryAvailableCondition",
        "methods": [
          "IsAvailable",
          "IncrementCounter",
          "SCR_InventoryAvailableCondition"
        ]
      },
      {
        "class_name": "SCR_IsCharacterInControlCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_IsCharacterUsingRadioCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_IsCharacterUsingLRRCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_MedicalItemsCountCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_WeaponQuickSlotAvailableCondition",
        "methods": [
          "IsAvailable",
          "IncrementCounter",
          "SCR_WeaponQuickSlotAvailableCondition"
        ]
      },
      {
        "class_name": "SCR_WeaponSwitchAvailableCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_CommandMenuOpenCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_CommandMenuSelectedCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_MapCanActivateCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_MapCanDragCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_MapCanRotateCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_DaytimeCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_IsActionTriggeredCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_IsContextEnabledCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_IsUsingMouseAndKeyboardCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_LastUsedInputDevice",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_HelicopterAutohoverCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_HelicopterWheelBrakesCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_InVehicleTurretADSCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleAltitudeAGLCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleBrakeCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleClutchCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleControllerTypeCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleDamageStateCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleDrivingAssistanceCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleEngineOnCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleFuelCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleGearCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleHasAnyGroundContactCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_VehicleLightsCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehiclePersistentBrakeEngagedCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleSpeedCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleThrottleCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleTurboCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VehicleWeaponAmmoCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_HasMultipleMuzzles",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_IsUsingVariableSightsCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_MuzzleTypeCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_SightsHasIlluminationCondition",
        "methods": [
          "IsAvailable",
          "CurrentWeaponSights",
          "CurrentTurretSight"
        ]
      },
      {
        "class_name": "SCR_WeaponAmmoCountCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "GetReturnResult",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_WeaponBipodCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_WeaponChangeSwitchOpticsCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_WeaponFiremodeCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult",
          "ContainsMode"
        ]
      },
      {
        "class_name": "SCR_WeaponFiremodeCountCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_WeaponHasMagazineCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_WeaponIsRaisedCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_WeaponMagazineCountCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_WeaponManipulationCondition",
        "methods": [
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_WeaponMuzzleChamberedCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_WeaponSightHasZeroingCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_ANDCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_ORCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_RadialMenuActiveActionCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_RadialMenuTypeActiveActionCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_VONMenuActiveActionCondition",
        "methods": [
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_AvailableActionCondition",
        "methods": [
          "IsEnabled",
          "GetReturnResult",
          "IsAvailable",
          "GetReturnResult"
        ]
      },
      {
        "class_name": "SCR_AvailableActionsConditionData",
        "methods": [
          "OnItemAddedListener",
          "OnItemRemovedListener",
          "OnInventoryOpen",
          "OnQuickSlotOpen",
          "Clear",
          "GetCharacter",
          "GetHeldGadget",
          "GetHeldGadgetComponent",
          "GetGadgetRaised",
          "GetGadget",
          "GetCurrentMagazine",
          "GetCurrentMuzzle",
          "GetCurrentWeapon",
          "GetCharacterStance",
          "GetCompartmentType",
          "GetFocusModeAmount",
          "GetCharacterBleedingTime",
          "GetCharacterSprintingTime",
          "GetAdditionalMagazinesCount",
          "GetMedicalItemCount",
          "GetMedicalItemCountInQuickSlots",
          "GetIsCharacterInVehicle",
          "GetIsCharacterGettingIn",
          "GetIsCharacterGettingOut",
          "GetIsCharacterSprinting",
          "GetIsCharacterSwimming",
          "GetIsCharacterFalling",
          "GetIsCharacterReloading",
          "GetIsCharacterFreelook",
          "GetIsCharacterFreelookForced",
          "GetIsCharacterFreelookToggled",
          "GetIsCharacterADS",
          "GetIsCharacterWeaponRaised",
          "GetCanCharacterFireWeapon",
          "GetIsCharacterUsingItem",
          "GetCanCharacterGetOutVehicle",
          "GetIsCharacterBleeding",
          "GetIsCharacterUsingRadio",
          "GetCharacterRadiosCount",
          "IsInventoryOpen",
          "IsQuickSlotAvailable",
          "IsQuickSlotShown",
          "IsGadgetSelection",
          "IsWeaponManipulation",
          "GetCurrentItemEntity",
          "GetCurrentWeaponEntity",
          "GetCurrentVehicle",
          "GetCurrentVehicleController",
          "GetCurrentVehicleSignals",
          "GetCurrentVehicleWeapon",
          "GetCurrentVehicleTurboTime",
          "GetAnimationComponent",
          "GetCharacterDamageComponent",
          "GetIsCharacterConscious",
          "GetHasBleedingLimbs",
          "GetHasTourniquetLimb",
          "IsValid",
          "FetchData",
          "Clear",
          "FetchHealthData",
          "FetchMapData",
          "GetVehicle",
          "FetchHealthData",
          "FetchMapData",
          "SCR_AvailableActionsConditionData"
        ]
      },
      {
        "class_name": "SCR_AvailableActionsWidget",
        "methods": [
          "SetText",
          "SetSize",
          "SetVisible",
          "SetPadding",
          "IsVisible",
          "CreateActionsWidget",
          "GetRootWidget",
          "SCR_AvailableActionsWidget"
        ]
      },
      {
        "class_name": "SCR_AvailableActionContextTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_AvailableActionContext",
        "methods": [
          "ToString",
          "GetActionName",
          "GetUIName",
          "IsAvailable",
          "CountHideTime"
        ]
      },
      {
        "class_name": "SCR_AvailableActionsDisplay",
        "methods": [
          "GetAvailableActions",
          "CanBeShown",
          "UpdateIsEnabled",
          "DisplayUpdate",
          "DisplayWidgetsUpdate",
          "DisplayWidgetsUpdate",
          "ApplyLayoutBehavior",
          "DisplayHint",
          "HintFadeOut",
          "HintShrink",
          "HintHide",
          "SetOffsetY",
          "SetAdditionalOffsetY",
          "ApplyOffsets",
          "DisplayStartDraw",
          "SetOffsetY",
          "DisplayStopDraw",
          "DisplayInit",
          "UpdateIsEnabled",
          "OnSlotUIResize",
          "ApplyLayoutBehavior",
          "SetOffsetY"
        ]
      },
      {
        "class_name": "AvailableActionLayoutBehaviorBase",
        "methods": [
          "ConditionsChecked",
          "ApplyBehavior"
        ]
      },
      {
        "class_name": "AvailableActionLayoutBehavior",
        "methods": [
          "ConditionsChecked",
          "ApplyBehavior"
        ]
      },
      {
        "class_name": "AvailableActionMenuLayoutBehavior",
        "methods": [
          "ConditionsChecked"
        ]
      },
      {
        "class_name": "AvailableActionEditorLayoutBehavior",
        "methods": [
          "ConditionsChecked",
          "ApplyBehavior"
        ]
      },
      {
        "class_name": "SCR_Crosshair",
        "methods": [
          "UpdateValues",
          "Show",
          "OnStartDraw"
        ]
      },
      {
        "class_name": "SCR_CrosshairDebug",
        "methods": [
          "Update",
          "SCR_CrosshairDebug"
        ]
      },
      {
        "class_name": "SCR_HUDManagerEditorVisibilityHandler",
        "methods": [
          "OnEditorExit",
          "OnEditorEnter",
          "OnCharacterPossesed",
          "OnUpdate",
          "RegisterEvents",
          "RegisterEvents",
          "OnEditorEnter"
        ]
      },
      {
        "class_name": "SCR_HUDManagerHandler",
        "methods": [
          "CanUpdate",
          "SetCanUpdate",
          "OnInit",
          "OnStart",
          "OnUpdate",
          "OnStop"
        ]
      },
      {
        "class_name": "SCR_HUDManagerLayoutHandler",
        "methods": [
          "OnLayoutChangeMethod",
          "AddHUDLayout",
          "RemoveHUDLayout",
          "GetOnLayoutChange",
          "GetActiveLayout",
          "GetAllHudElements",
          "GetGroupByName",
          "GetGroupComponent",
          "GetSlotComponentByName",
          "FindSlotComponentFromAnyLayout",
          "FindWidgetByName",
          "FindWidgetByNameFromAnyLayout",
          "FindHUDLayout",
          "InitializeHUDLayouts",
          "ChangeActiveHUDLayout",
          "GetAllHudElements",
          "SetLayoutEnabled",
          "StartMainLayout",
          "ChangeActiveHUDLayout",
          "OnInit",
          "InitializeHUDLayouts",
          "OnUpdate",
          "StartMainLayout",
          "GetOnMainLayoutInitialize",
          "OnEditorOpen",
          "OnEditorClose",
          "OnEditorChange"
        ]
      },
      {
        "class_name": "SCR_InfoDisplayHandler",
        "methods": [
          "SetEnabled",
          "IsEnabled",
          "Initialize",
          "OnStart",
          "OnStop",
          "OnUpdate"
        ]
      },
      {
        "class_name": "SCR_InfoDisplayLayerHandler",
        "methods": [
          "OnStart"
        ]
      },
      {
        "class_name": "SCR_InfoDisplaySlotHandler",
        "methods": [
          "GetSlotUIComponent",
          "GetSlotWidget",
          "GetGroupUIComponent",
          "GetSlotName",
          "SetSlotComponent",
          "SetGroupComponent",
          "OnStart",
          "OnStop",
          "GrabHudComponents",
          "OnSlotResize",
          "OnUpdate"
        ]
      },
      {
        "class_name": "SCR_2DOpticsComponentClass",
        "methods": [
          "OnSightsADSChanged"
        ]
      },
      {
        "class_name": "SCR_2DOpticsComponent",
        "methods": [
          "GetADSActivationPercentageScript",
          "GetADSDeactivationPercentageScript",
          "GetReticleOffsetX",
          "GetReticleTextures",
          "GetReticleData",
          "GetObjectiveFov",
          "GetObjectiveScale",
          "GetVignetteScale",
          "GetMisalignmentDampingSpeed",
          "GetRotationScale",
          "GetRotationDampingSpeed",
          "GetMovementScale",
          "GetMovementDampingSpeed",
          "GetRollScale",
          "GetRollDampingSpeed",
          "GetMisalignmentScale",
          "GetVignetteMoveSpeed",
          "GetMotionBlurScale",
          "GetMotionBlurMax",
          "GetZeroType",
          "GetMagnification",
          "GetIsOpticsHidden",
          "OnSetupOpticImage",
          "GetFovZoomed",
          "SetFovZoomed",
          "GetNearPlane",
          "GetAnimationActivationDelay",
          "GetAnimationDeactivationDelay",
          "GetAnimationEnterTime",
          "GetAnimationSpeedBlur",
          "GetIsMoving",
          "GetIsRotating",
          "GetScratchesRoll",
          "OnInit",
          "HandleSightActivation",
          "EnableReticleIllumination",
          "HandleSightDeactivation",
          "OnSightADSActivated",
          "HandleSightActivation",
          "OnSightADSDeactivated",
          "HandleSightDeactivation",
          "OnSightADSPostFrame",
          "HideObjects",
          "CalculateZoomFOV",
          "IsMoveCloseToLimit",
          "GetMisalignmentAngles",
          "GetSightsTransform",
          "GetRotation",
          "GetMovement",
          "GetSightsRelPosition",
          "HasIllumination",
          "GetReticleColor",
          "GetReticleOutlineColor",
          "GetReticleIlluminationColor",
          "EnableReticleIllumination",
          "GetReticleOffsetYTarget",
          "GetCurrentReticleOffsetY",
          "GetCameraPitchTarget",
          "GetCurrentCameraPitchOffset",
          "GetCameraOffset",
          "GetCameraAngles",
          "GetCameraLocalTransform",
          "SetObjectiveFov",
          "SetObjectiveScale",
          "SetReticleBaseZoom",
          "SetReticleAngularSize",
          "SetReticlePortion",
          "SetReticleOffsetX",
          "SetReticleOffsetY"
        ]
      },
      {
        "class_name": "SCR_2DOpticsDisplay",
        "methods": [
          "On2DOpticsADSChange",
          "On2DOpticsIlluminationChange",
          "OnLayoutChanged",
          "DeactivateWidget",
          "DisplayStartDraw",
          "FindWidgets",
          "DisplayStopDraw",
          "DisplayUpdate",
          "DebugOptics",
          "UpdateCurrentFov",
          "MoveScopeWidgets",
          "SetReticleOffset",
          "FindWidgets",
          "SetupOpticImage",
          "UpdateCurrentFov",
          "UpdateCurrentFov",
          "UpdateReticleSize",
          "UpdateReticleSize",
          "UpdateScale",
          "OnADSChange",
          "GetOpticData",
          "Deactivate",
          "SetupOpticImage",
          "Activate",
          "Activate",
          "Deactivate",
          "PlayEntryAnimation",
          "DeactivateWidget",
          "GetOpticData",
          "UpdateScale",
          "SetReticleOffset",
          "LowerBlurIntensity",
          "ChangeReticleTint",
          "MoveScopeWidgets",
          "MotionBlur",
          "MotionBlur",
          "VignetteDefaultPosition",
          "InputFloatClamped",
          "DebugOptics",
          "SetScope2DEnabled",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "GetOpticData",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "DebugDrawCross",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "DebugDrawNotches",
          "DebugDrawNotches",
          "InputFloatClamped",
          "InputFloatClamped",
          "DebugDrawFieldOfView",
          "UpdateCurrentFov",
          "UpdateScale",
          "DebugAngleUnitsToDegrees",
          "DebugDrawFieldOfView",
          "DebugDrawNotches",
          "DebugDrawCross",
          "SetScope2DEnabled"
        ]
      },
      {
        "class_name": "SCR_CampaignInfoDisplay",
        "methods": [
          "DisplayStartDrawInit",
          "DisplayStartDraw",
          "Show",
          "UpdateHUD",
          "DisplayUpdate",
          "UpdateHUD",
          "HideHUD",
          "UpdateHUDValues",
          "UpdateHUD",
          "Show",
          "Show",
          "UpdateHUDValues"
        ]
      },
      {
        "class_name": "SCR_CampaignMapInfoDisplay",
        "methods": [
          "DisplayStartDraw",
          "DisplayStopDraw",
          "UpdateHUD",
          "Show",
          "Show",
          "UpdateHUDValues",
          "OnMapOpen",
          "Show",
          "UpdateHUD",
          "Show",
          "OnMapClose",
          "Show"
        ]
      },
      {
        "class_name": "SCR_GameModeHUDComponent",
        "methods": [
          "Show",
          "SCR_GameModeHUDComponent"
        ]
      },
      {
        "class_name": "SCR_GroupMenu",
        "methods": [
          "OnMenuOpen",
          "OnMenuShow",
          "UpdateTabs",
          "OnMenuClose",
          "UpdateTabs"
        ]
      },
      {
        "class_name": "SCR_HintInfoDisplay",
        "methods": [
          "DisplayStartDraw",
          "Show",
          "DisplayStopDraw",
          "DisplayUpdate",
          "OnHintShown",
          "Show",
          "OnSlotUIResize"
        ]
      },
      {
        "class_name": "SCR_HUDElement",
        "methods": [
          "GetParentWidgetName",
          "GetWidget",
          "SetParentWidgetName",
          "SetWidget",
          "GetParentLayout",
          "SetParentLayout"
        ]
      },
      {
        "class_name": "SCR_HUDGroupUIComponent",
        "methods": [
          "GetRootWidget",
          "GetSlotComponents",
          "FindSlotComponent",
          "OnUpdate",
          "ResizeGroup",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_HUDLayout",
        "methods": [
          "SetIdentifier",
          "GetHUDElements",
          "GetIdentifier",
          "GetLayout",
          "GetRootWidget",
          "SetRootWidget",
          "ResizeLayout",
          "GetAllGroupComponents",
          "AddHudElement",
          "RemoveHudElement",
          "GetGroupWidgetByName",
          "GetGroupComponent",
          "GetAllGroupComponents",
          "GetAllSlotComponents",
          "FindSlotComponent",
          "FindWidgetByName"
        ]
      },
      {
        "class_name": "SCR_HUDManagerComponentClass",
        "methods": [
          "OnScreenBrightnessChanged"
        ]
      },
      {
        "class_name": "SCR_HUDManagerComponent",
        "methods": [
          "GetInfoDisplayCount",
          "GetOwner",
          "FindHandler",
          "RemoveHandlerFromUpdatableHandlers",
          "GetHUDRootWidget",
          "OnInit",
          "CreateHUDLayers",
          "OnUpdate",
          "GetAdaptiveOpacity",
          "GetSceneBrightness",
          "GetInterfaceSettingsClass",
          "CreateHUDLayers",
          "InitRootWidget",
          "InitRootWidget",
          "FindInfoDisplay",
          "FindInfoDisplayByResourceName",
          "FindLayoutByResourceName",
          "InitRootWidget",
          "CreateLayout",
          "CreateFreeElement",
          "SetVisible",
          "IsVisible",
          "SetVisibleLayers",
          "GetVisibleLayers",
          "GetHUDManager",
          "GetInfoDisplays",
          "_WB_OnContextMenu",
          "GetInfoDisplays"
        ]
      },
      {
        "class_name": "SCR_HUDMenuComponent",
        "methods": [
          "HandlerAttached",
          "ActivateHudLayout",
          "HandlerDeattached",
          "DeactivateHudLayout",
          "ActivateHudLayout",
          "DeactivateHudLayout",
          "DelayHUDLayoutChange",
          "EnableHUDMenu",
          "ActivateHudLayout",
          "DisableHUDMenu",
          "DeactivateHudLayout"
        ]
      },
      {
        "class_name": "SCR_HUDSizeCalculator",
        "methods": [
          "ResizeGroup",
          "SortSlotsByPriority",
          "Resize",
          "Resize",
          "Resize",
          "GetTotalAssignedHeight",
          "GetTotalAssignedWidth",
          "SortSlotsByPriority",
          "GetMaxAvailableHeightSizeSum",
          "GetMaxAvailableWidthSizeSum",
          "GetMaxAvailableHeight",
          "GetContentHeight",
          "GetMaxAvailableWidth",
          "GetContentWidth",
          "GetMinAvailableHeight",
          "GetContentHeight",
          "GetMinAvailableWidth",
          "GetContentWidth",
          "GetContentHeight",
          "GetContentWidth"
        ]
      },
      {
        "class_name": "SCR_HUDSlotUIComponent",
        "methods": [
          "SCR_HUDSlotResizeCallback",
          "GetHeight",
          "GetWidth",
          "GetPriority",
          "SetPriority",
          "GetOnResize",
          "SetHeight",
          "DebugHeightInfo",
          "SetWidth",
          "DebugWidthInfo",
          "GetContentWidget",
          "GetRootWidget",
          "Initialize",
          "GetGroupComponent",
          "HandlerAttached",
          "GetGroupComponent",
          "DebugHeightInfo",
          "DebugWidthInfo"
        ]
      },
      {
        "class_name": "SCR_ImageRadialProgressBarUIComponent",
        "methods": [
          "SetProgress",
          "FadeImage",
          "FadeImage",
          "InstantProgressMaxMin",
          "SetProgress",
          "SetFadeImageVisible",
          "SetProgress",
          "SetFadeImageVisible",
          "GetMinProgress",
          "GetMaxProgress",
          "GetOnFadeDone",
          "FadeImage",
          "FadeUpdate",
          "GetFadeImage",
          "SetFadeImageVisible",
          "HandlerAttached",
          "SetFadeImageVisible",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_InfoDisplay",
        "methods": [
          "SCR_InfoDisplayStartStopCallback",
          "GetHandler",
          "GetOnStart",
          "GetOnStop",
          "GetOwnerEntity",
          "GetContentWidget",
          "GetContentWidgetName",
          "SetRootWidget",
          "SetContentWidget",
          "Show",
          "PrintFormat",
          "OnShownFinished",
          "OnShownFinished",
          "OnShownFinishedPrivate",
          "OnShownFinished",
          "OnShownFinished",
          "IsShown",
          "GetRootWidget",
          "GetDimensions",
          "GetAnchorPosition",
          "GetDimensions",
          "RegisterToHudManager",
          "CreateDisplayLegacy",
          "RegisterToHudManager",
          "AdaptiveOpacity_Initialize",
          "PrintFormat",
          "OnStartDraw",
          "CreateDisplayLegacy",
          "AdaptiveOpacity_Initialize",
          "Show",
          "AdaptiveOpacity_Initialize",
          "PrintFormat",
          "PrintFormat",
          "AdaptiveOpacity_OnScreenBrightnessChange",
          "AdaptiveOpacity_Update",
          "AdaptiveOpacity_Update",
          "PrintFormat",
          "PrintFormat",
          "OnStopDraw",
          "PrintFormat",
          "UpdateValues",
          "OnInit"
        ]
      },
      {
        "class_name": "SCR_InfoDisplayExtended",
        "methods": [
          "_printClass",
          "SetEnabled",
          "DisplayStartDrawInit",
          "DisplayStartDraw",
          "DisplayStopDraw",
          "DisplayInit",
          "DisplayUpdate",
          "DisplayControlledEntityChanged",
          "DisplayConsciousnessChanged",
          "DisplayOnSuspended",
          "DisplayOnResumed",
          "InitializeInterfaceSettings",
          "OnSettingsChanged",
          "UpdateVisibility",
          "OnStartDraw",
          "OnEditorInit",
          "InitializeInterfaceSettings",
          "DisplayStartDraw",
          "DisplayConsciousnessChanged",
          "UpdateVisibility",
          "OnControlledEntityChanged",
          "DisplayControlledEntityChanged",
          "DisplayConsciousnessChanged",
          "UpdateVisibility",
          "OnADSSwitched",
          "UpdateVisibility",
          "OnLifeStateChanged",
          "DisplayConsciousnessChanged",
          "UpdateVisibility",
          "OnPauseMenuOpen",
          "UpdateVisibility",
          "OnPauseMenuClose",
          "UpdateVisibility",
          "OnEditorInit",
          "OnEditorOpen",
          "UpdateVisibility",
          "OnEditorClose",
          "UpdateVisibility",
          "UpdateVisibility",
          "Show",
          "DisplayOnResumed",
          "DisplayOnSuspended",
          "Show",
          "OnStopDraw",
          "DisplayStopDraw",
          "OnInit",
          "DisplayInit",
          "UpdateValues",
          "DisplayUpdate"
        ]
      },
      {
        "class_name": "SCR_NearbyContextDisplay",
        "methods": [
          "DisplayStartDraw",
          "DisplayInit",
          "CacheWidget",
          "DisplayStopDraw",
          "DisplayUpdate",
          "GetWorldToScreenPosition",
          "CacheWidget",
          "CacheWidget",
          "CacheWidget",
          "CacheWidget",
          "SetWidgetAlpha",
          "SetVisibleWidgets",
          "CacheWidget",
          "ClearCachedWidgets",
          "IsObstructed",
          "IsCharacter",
          "SetVisibleWidgets",
          "SetWidgetAlpha",
          "GetWorldToScreenPosition",
          "IsInLineOfSight",
          "IsOnScreen",
          "GetDistanceFromScreenCenter"
        ]
      },
      {
        "class_name": "SCR_NearbyContextWidgetComponentBase",
        "methods": [
          "HandlerAttached",
          "OnAssigned",
          "ChangeBackgroundColor",
          "ChangeVisibility",
          "GetAssignedContext",
          "GetOnContextAssigned"
        ]
      },
      {
        "class_name": "SCR_NearbyContextWidgetComponentInteract",
        "methods": [
          "HandlerAttached",
          "OnAssigned",
          "SetIconFromAction"
        ]
      },
      {
        "class_name": "SCR_NotificationsLogDisplay",
        "methods": [
          "DisplayStartDraw",
          "DisplayStopDraw",
          "DisplayUpdate",
          "OnSlotUIResize"
        ]
      },
      {
        "class_name": "SCR_PlacedCommandInfoDisplay",
        "methods": [
          "DisplayStartDraw",
          "DisplayStopDraw",
          "DisplayUpdate",
          "UpdatePosition",
          "UpdatePosition",
          "IsInLineOfSight",
          "FadeOutPulse",
          "FadeOutPulseDelayed",
          "DeleteWidget",
          "HideWidget",
          "HandleVisualizationDuration",
          "GetWorldToScreenPosition",
          "VisualizeCommand",
          "HandleVisualizationDuration",
          "SetCanUpdatePosition",
          "SetIsPreview"
        ]
      },
      {
        "class_name": "SCR_PlayerListMenu",
        "methods": [
          "GetOnPlayerListMenu",
          "InitSorting",
          "OnHeaderChanged",
          "Sort",
          "Sort",
          "SortByName",
          "SortByFriends",
          "SortByFrequency",
          "SortByKills",
          "SortByDeaths",
          "SortByScore",
          "SortByMuted",
          "SortByBlocked",
          "SortByMuted",
          "SortByBlocked",
          "SortByName",
          "SortByFriends",
          "SortByFrequency",
          "SortByKills",
          "SortByDeaths",
          "SortByScore",
          "OnBlock",
          "OnMute",
          "OnAddFriend",
          "OnTabChanged",
          "CloseAllVoting",
          "OnBack",
          "OnFilter",
          "Close",
          "OnFilter",
          "OnVoting",
          "OnInvite",
          "OnViewProfile",
          "OnMuteClick",
          "OnBlockClick",
          "OnFriendClick",
          "OnEntryFocused",
          "UpdateViewProfileButton",
          "OnEntryFocusLost",
          "UpdateViewProfileButton",
          "FocusFirstItem",
          "UpdateViewProfileButton",
          "SetupPlayerActionList",
          "UpdatePlayerActionList",
          "UpdatePlayerActionList",
          "OnComboBoxConfirm",
          "GetVotingPlayerID",
          "SetEntryBackgrounColor",
          "CreateEntry",
          "OnEditorRightsChanged",
          "UpdateGameMasterIndicator",
          "UpdateGameMasterIndicator",
          "IsLocalPlayer",
          "RemoveEntry",
          "OpenPauseMenu",
          "Close",
          "OnVotingChanged",
          "UpdateVoting",
          "GetOnVotingStart",
          "UpdateVoting",
          "UpdateVoting",
          "IsVotedAbout",
          "CanOpenPlayerActionList",
          "OnPlayerAdded",
          "UpdatePlayerList",
          "OnPlayerRemoved",
          "UpdatePlayerList",
          "OnScoreChanged",
          "UpdateScore",
          "OnPlayerScoreChanged",
          "OnScoreChanged",
          "OnFactionScoreChanged",
          "OnScoreChanged",
          "OnMenuOpen",
          "UpdateViewProfileButton",
          "CreateEntry",
          "InitSorting",
          "AddFactionPlayerCounter",
          "UpdateFrequencies",
          "OnMenuUpdate",
          "DeleteDisconnectedEntries",
          "OnMenuFocusGained",
          "FocusFirstItem",
          "OnMenuFocusLost",
          "Close",
          "OnMenuClose",
          "OnPlayerConnected",
          "UpdatePlayerList",
          "CreateEntry",
          "OnHeaderChanged",
          "UpdateFrequencies",
          "UpdateScore",
          "OnHeaderChanged",
          "CloseAllVoting",
          "DeleteDisconnectedEntries",
          "AddFactionPlayerCounter"
        ]
      },
      {
        "class_name": "SCR_PlayerListComboEntryData",
        "methods": [
          "SCR_PlayerListComboEntryData",
          "GetComboEntryType",
          "GetComboEntryAction"
        ]
      },
      {
        "class_name": "SCR_PopUpNotification",
        "methods": [
          "GetInstance",
          "SetFilter",
          "Offset",
          "ProcessInit",
          "RefreshQueue",
          "OnSettingsChanged",
          "HideCurrentMsg",
          "RefreshInventoryInvoker",
          "OnInventoryToggle",
          "PopupMsg",
          "RefreshQueue",
          "GetCurrentMsg",
          "HideCurrentMsg",
          "ChangeProgressBarFinish",
          "FadeWidget",
          "RefreshQueue",
          "ClearEventMask",
          "ShowMsg",
          "SetEventMask",
          "ShowMsg",
          "HideMsg",
          "FadeWidget",
          "FadeWidget",
          "FadeWidget",
          "HideMsg",
          "FadeWidget",
          "FadeWidget",
          "FadeWidget",
          "RefreshQueue",
          "SetDefaultHorizontalPosition",
          "EOnFrame",
          "HideMsg",
          "SCR_PopUpNotification",
          "SetFlags"
        ]
      },
      {
        "class_name": "SCR_RadialProgressBarUIComponent",
        "methods": [
          "SetProgress",
          "SetPreviewProgress",
          "GetProgress",
          "GetRadialProgressBarWidget",
          "GetBackgroundWidget",
          "SetProgressBarImage",
          "SetBackgroundImage",
          "GetOnProgressFull",
          "GetOnProgressEmpty",
          "HandlerAttached",
          "SetProgress",
          "SetPreviewProgress"
        ]
      },
      {
        "class_name": "SCR_RestrictionZoneWarningHUDComponent",
        "methods": [
          "ShowZoneWarning",
          "Show",
          "Show",
          "UpdateVisualWarning",
          "OnStartDraw"
        ]
      },
      {
        "class_name": "SCR_VoiceoverSubtitles",
        "methods": [
          "DisplayStartDraw",
          "SetLingerDuration",
          "GetLingerDuration",
          "ShowSubtitle",
          "Show"
        ]
      },
      {
        "class_name": "TransmissionData",
        "methods": [
          "HideTransmission",
          "TransmissionData"
        ]
      },
      {
        "class_name": "SCR_VonDisplay",
        "methods": [
          "GetActiveTransmissionsCount",
          "IsCapturingTransmisionActive",
          "OnCapture",
          "UpdateTransmission",
          "GetWidget",
          "OnReceive",
          "UpdateTransmission",
          "OpacityFade",
          "ShowSelectedVONHint",
          "SetHintIcon",
          "SetHintIcon",
          "ShowSelectedVONDisabledHint",
          "FadeSelectedVONHint",
          "SetHintIcon",
          "OnVONActiveToggled",
          "OnCapture",
          "OnDestroyed",
          "InitDisplay",
          "OnSlotUIResize",
          "UpdateWidgets",
          "UpdateWidgets",
          "DisplayUpdate",
          "OpacityFade",
          "OpacityFade",
          "OnReceive",
          "DisplayStartDrawInit",
          "DisplayStartDraw",
          "InitDisplay",
          "DisplayControlledEntityChanged",
          "DisplayStopDraw"
        ]
      },
      {
        "class_name": "SCR_VoNOverlay_ElementWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_XPInfoDisplay",
        "methods": [
          "DisplayInit",
          "DisplayStartDrawInit",
          "DisplayStartDraw",
          "OnSettingsChanged",
          "AllowShowingInfo",
          "RecolorXPBar",
          "AllowShowingInfo",
          "HideHUD",
          "ShowXPInfo",
          "UpdateXPProgressBar",
          "Show",
          "UpdateXPProgressBar",
          "ToggleXPInfo",
          "ShowXPInfo",
          "Show"
        ]
      },
      {
        "class_name": "SCR_AIMessageSelectionMenuEntry",
        "methods": [
          "SetParentComms",
          "OnPerform",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetEntryNameScript",
          "GetEntryDescriptionScript"
        ]
      },
      {
        "class_name": "SCR_ItemSelectionMenuEntry",
        "methods": [
          "Update",
          "SetName",
          "GetQuickSlotID",
          "SetQuickSlotID",
          "GetItem",
          "OnPerform",
          "GetUIInfo",
          "SCR_ItemSelectionMenuEntry",
          "SetCustomLayout"
        ]
      },
      {
        "class_name": "SCR_MapMenuCommandingEntry",
        "methods": [
          "GetEntryIdentifier",
          "SCR_MapMenuCommandingEntry"
        ]
      },
      {
        "class_name": "SCR_MapMenuRequestedTaskEntry",
        "methods": [
          "SetSupportClass",
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_SelectionMenuEntryCommand",
        "methods": [
          "SetEntryComponent",
          "SetCommandText",
          "GetCommandText",
          "SCR_SelectionMenuEntryCommand"
        ]
      },
      {
        "class_name": "SCR_SelectionMenuEntryCommandComponent",
        "methods": [
          "HandlerAttached",
          "SetCommandText"
        ]
      },
      {
        "class_name": "SCR_SelectionMenuEntryIconComponent",
        "methods": [
          "HandlerAttached",
          "SetEntry",
          "SetImage",
          "SetLayoutSize",
          "SetIconColor",
          "GetAltColor",
          "OnEntryIconChange",
          "SetImage"
        ]
      },
      {
        "class_name": "SCR_SelectionMenuEntryPreviewComponent",
        "methods": [
          "HandlerAttached",
          "SetPreviewItem",
          "SetupPreviewAttributes",
          "SetupPreviewAttributes"
        ]
      },
      {
        "class_name": "SCR_RadialMenu",
        "methods": [
          "InvokeOnDisplaySizeChange",
          "GetOnDisplaySizeChange",
          "InvokeOnSetActionHint",
          "GetOnSetActionHint",
          "GlobalRadialMenu",
          "GetOpenedRadialMenu",
          "OnMenuOpened",
          "OnOpen",
          "AddActionListeners",
          "DeselectEntry",
          "OnClose",
          "RemoveActionListeners",
          "ReleaseContext",
          "Update",
          "OnUpdate",
          "OnUpdate",
          "SelectEntry",
          "SetMenuDisplay",
          "ChangeDisplaySize",
          "SelectEntry",
          "InvokeOnSelect",
          "PlaySound",
          "HideActionHint",
          "InvokeOnUpdateEntries",
          "SetController",
          "DebugSetupControllerInputs",
          "DebugFillWithEntries",
          "OnPerformInput",
          "Close",
          "AddActionListeners",
          "RemoveActionListeners",
          "OnQuickAction1",
          "OnQuickAction2",
          "OnQuickAction3",
          "OnQuickAction4",
          "OnQuickAction5",
          "OnQuickAction6",
          "OnQuickAction7",
          "OnQuickAction8",
          "OnQuickAction9",
          "QuickActionUse",
          "InvokeOnSelect",
          "PerformEntry",
          "GetSelectedElementIndex",
          "DebugPrint",
          "AdjustDistanceWithResolution",
          "HandleSelection",
          "DeselectEntry",
          "InvokeOnSelect",
          "ReactQuickInput",
          "InvokeOnSelect",
          "PerformEntry",
          "ChangeDisplaySize",
          "InvokeOnDisplaySizeChange",
          "SetActionHint",
          "InvokeOnSetActionHint",
          "HideActionHint",
          "InvokeOnSetActionHint",
          "SetMenuCenterPos",
          "GetEntriesAngleDistance",
          "GetPointingAngle",
          "IsPointingToCenter",
          "DebugPrint",
          "DebugSetupDiagMenu",
          "DebugCleanup",
          "DebugSetupControllerInputs",
          "DebugFillWithEntries",
          "AddEntry",
          "SCR_RadialMenu",
          "DebugSetupDiagMenu",
          "DebugCleanup",
          "SetPreventSelectionContext",
          "GetPreventSelectionContext",
          "GetUseQuickActions"
        ]
      },
      {
        "class_name": "SCR_RadialMenuInputs",
        "methods": [
          "Init",
          "SetUseRightStick",
          "GetRadialXYInput",
          "SetUseRightStick"
        ]
      },
      {
        "class_name": "SCR_RadialMenuController",
        "methods": [
          "GetOnInputOpen",
          "InvokeOnInputOpen",
          "GetOnTakeControl",
          "InvokeOnTakeControl",
          "InvokeOnControllerChanged",
          "GetOnControllerChanged",
          "Control",
          "InvokeOnTakeControl",
          "StopControl",
          "SetMenuDisplay",
          "UpdateMenuData",
          "OnInputOpen",
          "InvokeOnInputOpen",
          "Control",
          "OnMenuControllerChanged",
          "InvokeOnControllerChanged",
          "StopControl",
          "SetEnableControl",
          "GetEnableControl",
          "SetRadialMenuToControl",
          "GetRadialMenu",
          "GetControls",
          "GetData",
          "IsMenuOpen",
          "CloseMenu",
          "HasControl",
          "SCR_RadialMenuController"
        ]
      },
      {
        "class_name": "SCR_RadialMenuDisplay",
        "methods": [
          "DisplayStartDraw",
          "DisplayStopDraw",
          "DisplayUpdate",
          "SetupMenu",
          "OnMenuOpen",
          "SetupSelectionVisuals",
          "ShowCrosshair",
          "ShowInnerBackground",
          "OnShownFinished",
          "SetupMenuCenter",
          "SetupMenuCenter",
          "OnMenuClose",
          "Show",
          "Show",
          "OnMenuEntriesUpdate",
          "SetupSelectionVisuals",
          "SetupEntryWidget",
          "CreateEntrySegment",
          "CreateNumberHint",
          "CreateNumberHint",
          "OnMenuEntrySelected",
          "SetupEntryHint",
          "OnMenuEntryPerform",
          "OnEntrySizeAnimCycleCompleted",
          "ClearEntryWidgets",
          "DebugPrint",
          "GetPointOnCircle",
          "VisualizeSelection",
          "SetupFrameSlotPosition",
          "CreateEntrySegment",
          "DebugPrint",
          "CreateDivider",
          "CreateDivider",
          "DebugPrint",
          "SetupEntryHint",
          "DisplayEntryHint",
          "VisualizeEnableEntry",
          "OnDisplaySizeChange",
          "OnSetActionHint",
          "OnMenuOpenCategory",
          "LateMenuEntriesUpdate",
          "SetupSelectionVisuals",
          "ChangeCategoryOpen",
          "Show",
          "SetupSelectionVisuals",
          "ShowInnerBackground",
          "ShowCrosshair"
        ]
      },
      {
        "class_name": "SCR_RadialMenuGameModeComponent",
        "methods": [
          "Update",
          "OnPostInit",
          "ConnectToRadialMenuSystem",
          "OnDelete",
          "DisconnectFromRadialMenuSystem",
          "GetMenu",
          "ConnectToRadialMenuSystem",
          "DisconnectFromRadialMenuSystem"
        ]
      },
      {
        "class_name": "SCR_RadialMenuItemsComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "EOnInit",
          "OnMenuOpen",
          "CreateEntries",
          "Update",
          "OnControllerTakeControl",
          "OnControllerChanged",
          "CreateEntries"
        ]
      },
      {
        "class_name": "SCR_RadialMenuNumberHintComponent",
        "methods": [
          "HandlerAttached",
          "Highlight",
          "Highlight"
        ]
      },
      {
        "class_name": "SCR_RadialMenuSegmentComponent",
        "methods": [
          "HandlerAttached",
          "SetupSegment",
          "GetBackgroundWidget",
          "GetCategoryWrapWidget"
        ]
      },
      {
        "class_name": "SCR_BaseSelectionMenu",
        "methods": [
          "OnOpen",
          "OnClose",
          "OnUpdate",
          "SCR_BaseSelectionMenu",
          "IsRadialMenuDiagEnabled",
          "IsRadialMenuLoggingEnabled"
        ]
      },
      {
        "class_name": "SCR_BaseSelectionMenuDisplay",
        "methods": [
          "SetDefault",
          "SetContent",
          "SetSelection",
          "SetSelection",
          "SetOpen"
        ]
      },
      {
        "class_name": "SCR_RadialMenuIcons",
        "methods": [
          "GetSafeIconPath",
          "GetDefaultIconPath",
          "GetSafeIconPath"
        ]
      },
      {
        "class_name": "SCR_RadialMenuWidgetPairList",
        "methods": [
          "RecalculateCount",
          "Clear",
          "RecalculateCount",
          "Count",
          "RecalculateCount",
          "RemoveAt",
          "RecalculateCount",
          "AddEntry",
          "RecalculateCount",
          "AddEntry",
          "AddEntry",
          "RemoveByWidget",
          "RemoveAt",
          "RecalculateCount",
          "RemoveByEntry",
          "RemoveAt",
          "RecalculateCount",
          "SetEntryAt",
          "SetWidgetAt",
          "GetWidgetAt",
          "GetEntryAt",
          "GetAt",
          "SCR_RadialMenuWidgetPairList"
        ]
      },
      {
        "class_name": "SCR_RadialMenuPair",
        "methods": [
          "IsEmpty",
          "SCR_RadialMenuPair"
        ]
      },
      {
        "class_name": "SCR_SelectionMenu",
        "methods": [
          "InvokeOnBeforeOpen",
          "GetOnBeforeOpen",
          "InvokeOnOpen",
          "GetOnOpen",
          "InvokeOnClose",
          "GetOnClose",
          "InvokeOnSelect",
          "GetOnSelect",
          "GetOnOpenFailed",
          "InvokeOnPerform",
          "GetOnPerform",
          "InvokeOnOpenCategory",
          "GetOnOpenCategory",
          "InvokeOnAddEntry",
          "GetOnAddEntry",
          "InvokeOnRemoveEntry",
          "GetOnRemoveEntry",
          "InvokeOnUpdateEntries",
          "GetOnUpdateEntries",
          "InvokeOnControllerChanged",
          "GetOnControllerChanged",
          "Open",
          "InvokeOnBeforeOpen",
          "AllowClosing",
          "OpenInRoot",
          "OnOpen",
          "InvokeOnOpen",
          "PlaySound",
          "AllowClosing",
          "Close",
          "OnOpen",
          "Close",
          "PerformEntry",
          "OnClose",
          "InvokeOnClose",
          "PlaySound",
          "OnClose",
          "Update",
          "OnUpdate",
          "OnUpdate",
          "Init",
          "Close",
          "PlaySound",
          "SelectEntry",
          "PerformEntry",
          "Close",
          "OpenCategoryEntry",
          "PlaySound",
          "InvokeOnPerform",
          "OpenCategoryEntry",
          "PlaySound",
          "LeaveCategory",
          "InvokeOnUpdateEntries",
          "PlaySound",
          "OpenInRoot",
          "InvokeOnOpenCategory",
          "InvokeOnUpdateEntries",
          "AddEntry",
          "InvokeOnAddEntry",
          "InvokeOnUpdateEntries",
          "AddCategoryEntry",
          "AddEntry",
          "AddEntries",
          "AddEntry",
          "InvokeOnUpdateEntries",
          "UpdateEntries",
          "UpdateEntries",
          "InvokeOnUpdateEntries",
          "UpdateSelectedEntries",
          "InvokeOnUpdateEntries",
          "RemoveEntry",
          "InvokeOnUpdateEntries",
          "ClearEntries",
          "InvokeOnUpdateEntries",
          "CurrentCategory",
          "SetMenuDisplay",
          "AddActionListeners",
          "RemoveActionListeners",
          "OnOpenInputRelease",
          "Close",
          "OnPerformInput",
          "PerformEntry",
          "OnBackInput",
          "LeaveCategory",
          "Close",
          "OnAlternativeToggleInput",
          "IsOpened",
          "SetController",
          "InvokeOnControllerChanged",
          "GetControllerInputs",
          "GetSelectionEntry",
          "GetSelectedEntryId",
          "GetEntryPerformed",
          "GetEntryCount",
          "HasDisplay",
          "DebugPrint"
        ]
      },
      {
        "class_name": "SCR_SelectionMenuInputs",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_SelectionMenuControllerInputs",
        "methods": [
          "SCR_SelectionMenuOpening",
          "IsControllingMenu"
        ]
      },
      {
        "class_name": "SCR_SelectionMenuCategoryEntry",
        "methods": [
          "OnPerform",
          "PerformDefaultEntry",
          "AddEntry",
          "RemoveEntry",
          "GetDefaultAction"
        ]
      },
      {
        "class_name": "SCR_SelectionMenuDisplay",
        "methods": [
          "SetupMenu",
          "DebugPrint",
          "DisplayStartDraw",
          "DisplayOnSuspended",
          "FindMenu",
          "CreateEntryWidgets",
          "DebugPrint",
          "DebugPrint",
          "SetupEntryWidget",
          "CreateNewEntry",
          "RemoveEntry",
          "SetupEntryWidget",
          "ClearEntryWidgets",
          "EntriesChanged",
          "OnMenuOpen",
          "Show",
          "ClearEntryWidgets",
          "CreateEntryWidgets",
          "OnMenuClose",
          "Show",
          "OnMenuEntriesUpdate",
          "ClearEntryWidgets",
          "CreateEntryWidgets",
          "OnMenuEntrySelected",
          "OnMenuEntryPerform",
          "GetMenu",
          "DebugPrint"
        ]
      },
      {
        "class_name": "SCR_SelectionMenuEntry",
        "methods": [
          "InvokeOnPerform",
          "GetOnPerform",
          "InvokeOnPerformFail",
          "GetOnPerformFail",
          "InvokeOnIconChange",
          "GetOnIconChange",
          "Update",
          "Perform",
          "InvokeOnPerformFail",
          "OnPerform",
          "InvokeOnPerform",
          "OnPerform",
          "Enable",
          "OnEntryClick",
          "Perform",
          "SetId",
          "GetId",
          "SetName",
          "SetDescription",
          "SetIcon",
          "InvokeOnIconChange",
          "SetIconFromDeafaultImageSet",
          "InvokeOnIconChange",
          "GetCustomLayout",
          "SetCustomLayout",
          "SetEntryComponent",
          "GetEntryComponent",
          "IsEnabled",
          "SetInputAction",
          "GetInputAction",
          "SCR_SelectionMenuEntry"
        ]
      },
      {
        "class_name": "SCR_SelectionMenuEntryComponent",
        "methods": [
          "InvokeOnMouseEnter",
          "GetOnMouseEnter",
          "InvokeOnMouseLeave",
          "GetOnMouseLeave",
          "InvokeOnClick",
          "GetOnClick",
          "HandlerAttached",
          "SetEnabled",
          "OnMouseEnter",
          "InvokeOnMouseEnter",
          "OnMouseLeave",
          "InvokeOnMouseLeave",
          "OnClick",
          "InvokeOnClick",
          "SetEnabled",
          "GetLayoutSize",
          "SetEntry",
          "SetEntryText",
          "GetOriginalSize",
          "GetAdjustedSize"
        ]
      },
      {
        "class_name": "SCR_VONRadialDisplay",
        "methods": [
          "Compare",
          "UpdateFrequencyList",
          "SetFrequenciesVisible",
          "SetFrequenciesVisible",
          "SetFrequenciesVisible",
          "SetFrequenciesVisible",
          "SetFrequencyDisplay",
          "SetFrequencyDisplay",
          "SetFrequencyDisplay",
          "SetFrequencyDisplay",
          "SetFrequencyDisplay",
          "ClearDisplayLine",
          "SetFrequencyDisplay",
          "ClearDisplayLine",
          "SetFrequencyDisplay",
          "SetFrequencyDisplay",
          "ClearDisplayLine",
          "SetFrequencyDisplay",
          "SetFrequencyDisplay",
          "ClearDisplayLine",
          "SetFrequencyDisplay",
          "ClearDisplayLine",
          "MarkSegmentBackground",
          "SetPreviewItem",
          "SetupPreviewAttributes",
          "SetupPreviewAttributes",
          "FadeItemPreview",
          "SetFrequenciesVisible",
          "OnMenuEntryPerform",
          "DisplayStartDraw",
          "SetFrequenciesVisible"
        ]
      },
      {
        "class_name": "StanceIndicator",
        "methods": [
          "GetInstance",
          "OnStartDraw",
          "UpdateValues"
        ]
      },
      {
        "class_name": "SCR_StatsPanelBase",
        "methods": [
          "DisplayStartDrawInit",
          "DisplayStartDraw",
          "Update",
          "DisplayUpdate",
          "Update",
          "GetValue",
          "Update"
        ]
      },
      {
        "class_name": "SCR_StatsPanelWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_StatsPanel_FPS",
        "methods": [
          "DisplayStartDrawInit",
          "OnStatUpdate",
          "GetValue"
        ]
      },
      {
        "class_name": "SCR_StatsPanel_Latency",
        "methods": [
          "GetValue"
        ]
      },
      {
        "class_name": "SCR_StatsPanel_PacketLoss",
        "methods": [
          "GetValue"
        ]
      },
      {
        "class_name": "SCR_AnalogGauge",
        "methods": [
          "GetGaugeData",
          "InitGauge",
          "CreateGaugeRing",
          "CreateRingMark",
          "CreateRingLabel",
          "GetValue",
          "GetValuePerc",
          "DisplayStartDraw",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_AnalogGauge360",
        "methods": [
          "CreateGauge",
          "UpdateGauge",
          "UpdateGaugeNeedle",
          "UpdateGaugeNeedle"
        ]
      },
      {
        "class_name": "SCR_AnalogGauge360Small",
        "methods": [
          "GetGaugeData"
        ]
      },
      {
        "class_name": "SCR_AnalogGaugeMultiSignal",
        "methods": [
          "GetValue",
          "DisplayStartDraw",
          "SCR_AnalogGaugeMultiSignal"
        ]
      },
      {
        "class_name": "SCR_AnalogGaugeNonLinear",
        "methods": [
          "GetGaugeData",
          "InitGauge",
          "DestroyGauge",
          "CreateGaugeRing",
          "CreateRingMark",
          "CreateRingLabel",
          "GetValue",
          "GetValuePerc",
          "DisplayStartDraw",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_AnalogGaugeSmall",
        "methods": [
          "GetGaugeData"
        ]
      },
      {
        "class_name": "SCR_AnalogGaugeUni",
        "methods": [
          "IsGaugeShown",
          "EnableHUD",
          "DisplayStartDraw",
          "DisplayStopDraw",
          "CreateGauge",
          "UpdateGauge"
        ]
      },
      {
        "class_name": "SCR_BaseAnalogGauge",
        "methods": [
          "GetValue",
          "GetValuePerc",
          "GetGaugeData",
          "InitGauge",
          "CreateGauge",
          "CreateGaugeInfoText",
          "CreateGaugeInfoText",
          "CreateGaugeRing",
          "Scale",
          "Scale",
          "CreateGaugeNeedle",
          "Scale",
          "Scale",
          "CreateGaugeOverlay",
          "Scale",
          "CreateGaugeInfoText",
          "Scale",
          "MovePerc",
          "UpdateGauge",
          "UpdateGaugeNeedle",
          "UpdateGaugeNeedle",
          "DestroyGauge",
          "DisplayUpdate",
          "UpdateGauge",
          "DisplayStartDrawInit",
          "DisplayStartDraw",
          "InitGauge",
          "DestroyGauge",
          "CreateGauge",
          "DestroyGauge",
          "DisplayStopDraw",
          "DestroyGauge",
          "DisplayInit",
          "MovePerc",
          "Scale",
          "Scale",
          "CreateRingLabel",
          "CreateRingMark",
          "Scale"
        ]
      },
      {
        "class_name": "SCR_BaseVehicleInfo",
        "methods": [
          "GetState",
          "IsBlinking",
          "Scale",
          "Scale",
          "Scale",
          "SetIcon",
          "Scale",
          "SetColor",
          "UpdateRequired",
          "DisplayUpdate",
          "PrintFormat",
          "SetIcon",
          "SetColor",
          "Show",
          "DisplayStartDrawInit",
          "DisplayStartDraw",
          "DisplayUpdate",
          "DisplayStopDraw",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_EngineHitZoneInfo",
        "methods": [
          "GetState",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_FuelTankInfo",
        "methods": [
          "IsBlinking",
          "GetState",
          "DisplayStartDrawInit",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_GearboxHitZoneInfo",
        "methods": [
          "GetState",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_GearShiftInfo",
        "methods": [
          "GetGearSymbol",
          "GetGearboxModeDisplay",
          "PrintFormat",
          "ScalePaddings",
          "Scale",
          "ScaleChildren",
          "ScaleChildren",
          "ScalePaddings",
          "Scale",
          "Scale",
          "DisplayUpdate",
          "PrintFormat",
          "Show",
          "PrintFormat",
          "GetGearboxModeDisplay",
          "DisplayStartDrawInit",
          "DisplayStartDraw",
          "ScaleChildren",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_HandBrakeInfo",
        "methods": [
          "GetState",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_HitZoneInfo",
        "methods": [
          "GetState",
          "DisplayStartDrawInit",
          "DisplayStopDraw"
        ]
      },
      {
        "class_name": "SCR_HZInfoEngineHeli",
        "methods": [
          "GetState"
        ]
      },
      {
        "class_name": "SCR_HZInfoHeli",
        "methods": [
          "GetState",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_LightManagerInfo",
        "methods": [
          "GetState",
          "DisplayStartDrawInit",
          "PrintFormat",
          "DisplayStopDraw",
          "OnLightStateChanged",
          "PrintFormat",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_LightManagerInfoMulti",
        "methods": [
          "GetState",
          "SetIcon",
          "SetColor",
          "UpdateRequired",
          "DisplayStartDrawInit",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_VehicleGearShiftWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_VInfoAutoHover",
        "methods": [
          "GetState",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_VInfoParkingBrakeHeli",
        "methods": [
          "GetState",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_WheelHitZoneInfo",
        "methods": [
          "GetState",
          "DisplayInit"
        ]
      },
      {
        "class_name": "SCR_WeaponInfo",
        "methods": [
          "_print",
          "OnWeaponChanged",
          "_print",
          "Show",
          "OnMuzzleChanged_init",
          "OnADSChanged_init",
          "OnMuzzleChanged_init",
          "OnMuzzleChanged",
          "OnMuzzleChanged",
          "_print",
          "UpdateWeaponNameAndCaliber",
          "OnFiremodeChanged_init",
          "OnZeroingChanged_init",
          "OnMagazineChanged_init",
          "OnMagazineChanged_init",
          "_print",
          "OnMagazineChanged",
          "OnMagazineChanged",
          "_print",
          "OnMagazineCountChanged_init",
          "OnAmmoCountChanged_init",
          "UpdateMagazineIndicator_Textures",
          "UpdateAmmoTypeIndicator",
          "OnMagazineCountChanged_init",
          "_print",
          "OnMagazineCountChanged",
          "OnMagazineCountChanged",
          "OnMagazineCountChanged",
          "_print",
          "UpdateMagazineIndicator_Textures",
          "UpdateAmmoTypeIndicator",
          "UpdateMagazineIndicator_Count",
          "OnAmmoCountChanged_init",
          "_print",
          "OnAmmoCountChanged",
          "OnAmmoCountChanged",
          "_print",
          "UpdateMagazineIndicator_Progress",
          "UpdateBulletInChamberIndicator",
          "OnFiremodeChanged_init",
          "_print",
          "OnFiremodeChanged",
          "OnFiremodeChanged",
          "_print",
          "UpdateFireModeIndicator",
          "OnZeroingChanged_init",
          "_print",
          "OnZeroingChanged",
          "OnZeroingChanged",
          "_print",
          "UpdateZeroingIndicator",
          "OnADSChanged_init",
          "_print",
          "OnADSChanged",
          "OnADSChanged",
          "_print",
          "OnZoomChanged_init",
          "OnZoomChanged_init",
          "_print",
          "OnZoomChanged",
          "OnZoomChanged",
          "_print",
          "UpdateZoomIndicator",
          "OnInspectionModeChanged",
          "_print",
          "OnAttachmentChanged",
          "_print",
          "DisplayUpdate",
          "FadeElements",
          "FadeElements",
          "GetSights",
          "GetMagazineConfig",
          "UpdateMagazineIndicator_Textures",
          "SetWidgetImage",
          "SetWidgetImage",
          "SetWidgetImage",
          "SetWidgetImage",
          "SetWidgetImage",
          "SetWidgetImage",
          "SetWidgetImage",
          "SetWidgetImage",
          "UpdateMagazineIndicator_Progress",
          "UpdateMagazineIndicator_Count",
          "AnimateWidget_ColorFlash",
          "AnimateWidget_TextPopUp",
          "UpdateBulletInChamberIndicator",
          "UpdateFireModeIndicator",
          "AnimateWidget_ColorFlash",
          "UpdateZeroingIndicator",
          "AnimateWidget_ColorFlash",
          "UpdateZoomIndicator",
          "AnimateWidget_ColorFlash",
          "UpdateAmmoTypeIndicator",
          "UpdateWeaponNameAndCaliber",
          "AnimateWidget_ColorFlash",
          "AnimateWidget_TextPopUp",
          "DisplayStartDrawInit",
          "AddEventHandlers",
          "DisplayStartDraw",
          "DisplayStopDraw",
          "RemoveEventHandlers",
          "AddEventHandlers",
          "RemoveEventHandlers",
          "GetInventoryManager",
          "GetWeaponManager",
          "SetWidgetImage"
        ]
      },
      {
        "class_name": "SCR_WeaponInfoVehicle",
        "methods": [
          "DisplayUpdate",
          "UpdateMagazineIndicator_Reloading",
          "OnMuzzleChanged",
          "OnTurretReload_init",
          "OnTurretReload_init",
          "OnTurretReload",
          "OnTurretReload",
          "_print",
          "UpdateMagazineIndicator_Reloading",
          "UpdateMagazineIndicator_Reloading",
          "DisplayStartDrawInit",
          "AddEventHandlers",
          "AddEventHandlers",
          "RemoveEventHandlers",
          "GetSights"
        ]
      },
      {
        "class_name": "SCR_WeaponInfoWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_WeaponState",
        "methods": [
          "Init"
        ]
      },
      {
        "class_name": "SCR_WeaponSwitchingBaseUI",
        "methods": [
          "RefreshQuickSlots",
          "SelectQuickSlot",
          "HighlightQuickSlot",
          "Init",
          "RemoveActionListeners",
          "OpenQuickSlots",
          "Show",
          "CloseQuickSlots",
          "Show",
          "ShowCommand",
          "Action_QuickSlotsRadial",
          "CloseQuickSlots",
          "OpenQuickSlots",
          "Action_QuickSlotsBar",
          "OpenQuickSlots",
          "CloseQuickSlots",
          "Action_SwitchSlot",
          "CloseQuickSlots",
          "OpenQuickSlots",
          "SelectQuickSlot",
          "Action_ScrollSlot",
          "UpdateValues",
          "ShowQuickSlots",
          "Show",
          "OnStartDraw",
          "Init",
          "Show",
          "OnStopDraw",
          "RemoveActionListeners",
          "GetWeaponSwitchingBaseUI"
        ]
      },
      {
        "class_name": "SCR_QuickSlotRefreshCB",
        "methods": [
          "OnComplete"
        ]
      },
      {
        "class_name": "SCR_WeaponSwitchingHints",
        "methods": [
          "HandlerAttached",
          "OnWeaponChanged",
          "HandlerDeattached",
          "OnWeaponChanged",
          "Action_ChangeAmmo",
          "Action_ChangeMuzzle"
        ]
      },
      {
        "class_name": "SCR_AmmoTypeInfoConfig",
        "methods": [
          "SetIconAndDescriptionTo"
        ]
      },
      {
        "class_name": "SCR_ArsenalInventorySlotUI",
        "methods": [
          "GetArsenalResourceComponent",
          "SetArsenalResourceComponent",
          "SetStorageUI",
          "SetSlotSize",
          "SetSlotVisible",
          "Refresh",
          "UpdateTotalResources",
          "SetItemAvailability",
          "SetItemAvailability",
          "SetItemAvailability",
          "IsDraggable",
          "GetTotalResources",
          "SetItemAvailability",
          "GetItemSupplyCost",
          "SCR_ArsenalInventorySlotUI"
        ]
      },
      {
        "class_name": "SCR_CountingTimerUI",
        "methods": [
          "UpdateIngameIcon",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_InventoryAmmoTypeIndicator",
        "methods": [
          "HandlerAttached",
          "SetAmmoType",
          "SetAmmoTypeIcon"
        ]
      },
      {
        "class_name": "SCR_InventoryAttachmentStorageUI",
        "methods": [
          "HandlerAttached",
          "InitPaging",
          "SetRowsAndColumns",
          "CreateEmptyLayout",
          "CloseStorage",
          "SortSlots",
          "ShowPage",
          "ActivateCloseStorageButton",
          "SetPreviewItem",
          "CreateSlots",
          "UpdateOwnedSlots",
          "GetRelevantItems",
          "IsTraversalAllowed",
          "Refresh",
          "InitPaging",
          "SetRowsAndColumns",
          "CreateEmptyLayout",
          "CloseStorage",
          "SortSlots",
          "ShowPage",
          "ActivateCloseStorageButton",
          "CloseStorage",
          "SCR_InventoryAttachmentStorageUI"
        ]
      },
      {
        "class_name": "SCR_InventoryAttachmentPointUI",
        "methods": [
          "HandlerAttached",
          "CreateSlotUI",
          "SCR_InventoryAttachmentSlotUI",
          "GetBoneName",
          "GetBoneIndex",
          "SCR_InventoryAttachmentPointUI"
        ]
      },
      {
        "class_name": "SCR_InventoryAttachmentSlotUI",
        "methods": [
          "UpdateReferencedComponent",
          "OnDrop"
        ]
      },
      {
        "class_name": "SCR_InventoryButton",
        "methods": [
          "OnClick",
          "OnFocus",
          "OnFocusLost",
          "OnChange",
          "HandlerAttached",
          "SCR_InventoryButton"
        ]
      },
      {
        "class_name": "SCR_InventoryCharacterWidgetHelper",
        "methods": [
          "CanProcessEvent",
          "ProcessInput",
          "OnMouseButtonDown",
          "OnMouseButtonUp",
          "OnMouseWheel",
          "Update",
          "ProcessInput",
          "Destroy",
          "SCR_InventoryCharacterWidgetHelper"
        ]
      },
      {
        "class_name": "SCR_InventoryConfig",
        "methods": [
          "GetLoadoutAreaCount",
          "GetRowByArea",
          "GetRowByCommonItemType",
          "GetIcon",
          "GetIconByRow",
          "GetAreaByRow"
        ]
      },
      {
        "class_name": "SCR_InventoryDamageInfoUI",
        "methods": [
          "Show",
          "ShowInfoWidget",
          "ShowInfoWidget",
          "SetDamageStateVisible",
          "SetBleedingStateVisible",
          "SetTourniquetStateVisible",
          "SetTourniquetHintVisible",
          "SetSalineBagStateVisible",
          "SetTourniquetHintVisible",
          "SetMorphineStateVisible",
          "SetFractureStateVisible",
          "Hide",
          "Move",
          "SetName",
          "GetName",
          "HandlerAttached",
          "Destroy",
          "GetInfoWidget"
        ]
      },
      {
        "class_name": "SCR_InventoryDamageUIInfo",
        "methods": [
          "SCR_InventoryDamageUIInfo"
        ]
      },
      {
        "class_name": "SCR_InventoryGearInspectionPointUI",
        "methods": [
          "HandlerAttached",
          "CreateSlots",
          "HandlerDeattached",
          "RefreshInspectionSlots",
          "ClearSlots",
          "CreateSlots",
          "GetStorageGrid",
          "IsTraversalAllowed",
          "GetSlotType",
          "CreateSlots",
          "UpdateOwnedSlots",
          "UpdateOwnedSlots",
          "CreateSlotUI",
          "SCR_InventorySlotGearInspectionUI",
          "UpdatePreviewSlotWidgets",
          "OnDrop",
          "ClearSlots",
          "SetRowsAndColumns",
          "SortSlots",
          "InitMatrix",
          "FillWithEmptySlots",
          "Refresh",
          "InitPaging",
          "SCR_InventoryGearInspectionPointUI"
        ]
      },
      {
        "class_name": "SCR_InventorySlotGearInspectionUI",
        "methods": [
          "UpdateReferencedComponent",
          "Destroy",
          "OnMouseEnter",
          "Highlight",
          "OnMouseLeave",
          "Highlight",
          "OnClick",
          "ShowCompatibleAttachments",
          "HideCompatibleAttachments",
          "ShowCompatibleAttachments",
          "Select",
          "HideCompatibleAttachments",
          "Select",
          "Highlight",
          "Select",
          "Highlight",
          "GetAsStorage",
          "OnDrop"
        ]
      },
      {
        "class_name": "SCR_InventoryHitZonePointContainerUI",
        "methods": [
          "HandlerAttached",
          "OnClick",
          "ShowApplicableItems",
          "HideApplicableItems",
          "RemoveTourniquetFromSlot",
          "OnMouseEnter",
          "Highlight",
          "OnMouseLeave",
          "Highlight",
          "Highlight",
          "SetGlowVisible",
          "Select",
          "Highlight",
          "ShowApplicableItems",
          "Select",
          "HideApplicableItems",
          "Select",
          "GetHitZoneGroup",
          "GetHitZoneName",
          "InitializeHitZoneUI",
          "UpdateHitZoneState",
          "UpdateHitZoneState",
          "OnTourniquetMoved",
          "UpdateHitZoneDOTAdded",
          "UpdateHitZoneDOTRemoved",
          "UpdateBleedingHitZone",
          "UpdateBleedingHitZoneRemoved",
          "UpdateHitZoneState",
          "SetGlowVisible",
          "ShowApplicableItems",
          "SetGlowColor",
          "GetRootWidget",
          "GetBoneIndex",
          "GetInventoryHandler",
          "GetStorage"
        ]
      },
      {
        "class_name": "SCR_InventoryHitZonePointUI",
        "methods": [
          "HandlerAttached",
          "Highlight",
          "HandlerDeattached",
          "StopBloodDropAnim",
          "StopRegenAnim",
          "OnMouseEnter",
          "ShowVirtualHZInfo",
          "ShowVirtualHZInfo",
          "OnMouseLeave",
          "HideVirtualHZInfo",
          "HideVirtualHZInfo",
          "Select",
          "Highlight",
          "Highlight",
          "ShowHitZoneInfo",
          "GetInventoryMenuUI",
          "ShowVirtualHZInfo",
          "GetHitZoneInfo",
          "GetDamageInfoTexts",
          "GetBloodInfoText",
          "EnableVirtualHZInfoWidget",
          "HideVirtualHZInfo",
          "ShowHitZoneInfo",
          "GetHitZoneInfo",
          "GetDamageInfoTexts",
          "GetDamageInfoTexts",
          "GetBloodInfoText",
          "GetHitZoneInfo",
          "UpdateHitZoneState",
          "StopBloodDropAnim",
          "PlayBloodDropAnim",
          "StopBloodDropAnim",
          "GetHitZoneInfo",
          "SetRegeneration",
          "SetRegeneration",
          "PlayRegenAnim",
          "StopRegenAnim",
          "PlayRegenAnim",
          "StopRegenAnim",
          "PlayBloodDropAnim",
          "OnAnimCycleComplete",
          "StopBloodDropAnim",
          "SetBloodLevelProgress",
          "GetRootWidget",
          "SetParentContainer"
        ]
      },
      {
        "class_name": "SCR_InventoryHitZoneUI",
        "methods": [
          "OnDrop",
          "ApplyItem",
          "ApplyItem",
          "CanApplyItem",
          "SetTourniquetted",
          "IsTourniquetted",
          "GetMenuHandler",
          "SCR_InventoryHitZoneUI"
        ]
      },
      {
        "class_name": "SCR_InventoryHitZoneSlotUI",
        "methods": [
          "OnDrop"
        ]
      },
      {
        "class_name": "SCR_InventoryInspectionUI",
        "methods": [
          "OnMouseButtonDown",
          "OnMouseButtonUp",
          "Init",
          "CreatePreview",
          "DeletePreview",
          "CreatePreview",
          "DeletePreview",
          "CenterPreviewObject",
          "ResetPreviewCamera",
          "Destroy",
          "DeletePreview",
          "GetWidget",
          "CenterPreviewObject",
          "ResetPreviewCamera",
          "UpdateView",
          "SCR_InventoryInspectionUI",
          "Init",
          "DeletePreview"
        ]
      },
      {
        "class_name": "SCR_InventoryItemInfoUI",
        "methods": [
          "ShowInfoWidget",
          "Show",
          "ShowInfoWidget",
          "SetIcon",
          "ShowIcon",
          "Hide",
          "Move",
          "SetName",
          "SetDescription",
          "SetItemHints",
          "SetItemHints",
          "SetItemHints",
          "SetWeight",
          "SetWeight",
          "SetWeight",
          "HandlerAttached",
          "Destroy",
          "GetInfoWidget",
          "SCR_InventoryItemInfoUI"
        ]
      },
      {
        "class_name": "SCR_InvCallBack",
        "methods": [
          "InternalComplete",
          "OnComplete",
          "OnFailed",
          "OnComplete",
          "ResetVariables",
          "ResetVariables"
        ]
      },
      {
        "class_name": "SCR_InventoryMenuUI",
        "methods": [
          "GetItemPreviewManager",
          "InitializeCharacterHitZones",
          "InitHitZones",
          "HideCharacterHitZones",
          "InitializeCharacterInformation",
          "OnDamageStateChanged",
          "AddItemToAttachmentSelection",
          "SetAttachmentSpinBoxActive",
          "RemoveItemFromAttachmentSelection",
          "SetAttachmentSpinBoxActive",
          "GetAttachmentSpinBoxComponent",
          "OnDamageStateChanged",
          "RegisterUIStorage",
          "UnregisterUIStorage",
          "SetActiveStorage",
          "GetTotalWeight",
          "GetInventoryStorageManager",
          "GetActualStorageInCharacterStorageUI",
          "GetStorageList",
          "GetLootStorage",
          "GetCanInteract",
          "RefreshPlayerWidget",
          "ProcessInitQueue",
          "NavigationBarUpdate",
          "InitQuickSlots",
          "ShowEquipedWeaponStorage",
          "ShowStoragesList",
          "ShowAllStoragesInList",
          "OnQueueProcessed",
          "OnQueueProcessed",
          "UpdateCharacterPreview",
          "SetStorageSwitchMode",
          "OnMenuUpdate",
          "UpdatePreview",
          "UpdatePreview",
          "UpdateGearInspectionPreview",
          "UpdateCharacterPreview",
          "UpdateCharacterPreview",
          "UpdateGearInspectionPreview",
          "InspectItem",
          "InspectItem",
          "OnMenuOpen",
          "Action_CloseInventory",
          "ShowVicinity",
          "InitAttachmentSpinBox",
          "SetAttachmentSpinBoxActive",
          "ResetHighlightsOnAvailableStorages",
          "SetOpenStorage",
          "UpdateTotalWeightText",
          "InitializeCharacterHitZones",
          "InitializeCharacterInformation",
          "UpdateCharacterPreview",
          "InitAttachmentSpinBox",
          "SetStorageSwitchMode",
          "HideItemInfo",
          "NavigationBarUpdate",
          "ToggleStorageSwitchMode",
          "SetStorageSwitchMode",
          "SetAttachmentSpinBoxActive",
          "CanFocusOnSlotInStorage",
          "FocusOnSlotInStorage",
          "Init",
          "OnLootedCharacterLifeStateChanged",
          "RefreshLootUIListener",
          "OnAction",
          "Action_CloseInventory",
          "Action_QuickSlotUnassign",
          "SetStorageSwitchMode",
          "Action_QuickSlotAssign",
          "Action_MoveBetween",
          "Action_EquipItem",
          "FocusOnSlotInStorage",
          "SetStorageSwitchMode",
          "Action_SelectItem",
          "Action_DeselectItem",
          "Action_DeselectItem",
          "Action_UnfoldItem",
          "Action_OpenContainer",
          "Action_StepBack",
          "Action_Inspect",
          "Action_UseItem",
          "Action_Drop",
          "Action_Drop",
          "Action_MoveItemToStorage",
          "ToggleStorageSwitchMode",
          "FocusOnSlotInStorage",
          "Action_SwapItems",
          "Action_TryCloseInventory",
          "CloseOpenedStorage",
          "CloseStorage",
          "CloseStorage",
          "CloseStorage",
          "CloseStorage",
          "ToggleStorageContainerVisibility",
          "ShowStorage",
          "ShowStorage",
          "ShowStorage",
          "ShowAttachmentStorage",
          "CloseAttachmentStorage",
          "GetAttachmentStorageUI",
          "RemoveAttachmentStorage",
          "CloseStorage",
          "OpenStorageAsContainer",
          "RemoveOpenStorage",
          "ShowVicinity",
          "OpenLinkedStorages",
          "FocusOnSlotInStorage",
          "RemoveOpenStorage",
          "CloseStorage",
          "ShowVicinity",
          "RefreshLootUIListener",
          "RemoveOpenStorage",
          "RemoveOpenStorage",
          "ShowStoragesList",
          "ShowAllStoragesInList",
          "CloseStorage",
          "SortSlotsByLoadoutArea",
          "GetStorageUIFromVicinity",
          "CreateOpenedStorageUI",
          "SCR_InventoryOpenedStorageArsenalUI",
          "SCR_InventoryStorageContainerUI",
          "SCR_InventoryOpenedStorageUI",
          "GetStorageUIByBaseStorageComponent",
          "SortSlotsByLoadoutArea",
          "ShowEquipedWeaponStorage",
          "ShowItemInfo",
          "ShowDamageInfo",
          "GetDamageInfo",
          "DestroyDamageInfo",
          "HideItemInfo",
          "HideDamageInfo",
          "SetSlotFocused",
          "SetFocusedSlotEffects",
          "HideItemInfo",
          "NavigationBarUpdate",
          "SetFocusedSlotEffects",
          "HideItemInfo",
          "NavigationBarUpdate",
          "IsFocusedItemInsideDropContainer",
          "CanSwapItems",
          "CanMoveItem",
          "CanMoveItem",
          "NavigationBarUpdate",
          "NavigationBarUpdateGamepad",
          "HandleSlottedItemFunction",
          "HandleSlottedItemFunction",
          "HandleSelectButtonState",
          "CreateItemSplitDialog",
          "OnItemSplitDialogConfirm",
          "OnItemSplitDialogConfirm_Merge",
          "OnItemSplitDialogConfirm_Create",
          "NavigationBarUpdateGamepad",
          "HandleSlottedItemFunction",
          "HandleSelectButtonState",
          "GetInspectionScreen",
          "InspectItem",
          "CloseAttachmentStorage",
          "SetAttachmentSpinBoxActive",
          "InitializeCharacterHitZones",
          "UpdateCharacterPreview",
          "InitializeCharacterHitZones",
          "CloseAttachmentStorage",
          "SetAttachmentSpinBoxActive",
          "UpdateCharacterPreview",
          "InspectWeapon",
          "UpdateGearInspectionPreview",
          "InspectGear",
          "UpdateGearInspectionPreview",
          "InspectWeapon",
          "CloseAttachmentStorage",
          "HideCharacterHitZones",
          "SetAttachmentSpinBoxActive",
          "InspectGear",
          "GetGearInspectionUI",
          "FilterOutStorages",
          "FilterOutItems",
          "PrintFormat",
          "PrintFormat",
          "PrintFormat",
          "Action_TryCloseInventory",
          "SetStorageSwitchMode",
          "DeselectSlot",
          "Action_CloseInventory",
          "SetStorageSwitchMode",
          "ResetHighlightsOnAvailableStorages",
          "FocusOnSlotInStorage",
          "DeselectSlot",
          "Action_CloseInventory",
          "Action_CloseInventory",
          "HideItemInfo",
          "HideDamageInfo",
          "LifeStateChanged",
          "Action_CloseInventory",
          "OnControllableDeleted",
          "Action_CloseInventory",
          "SimpleFSM",
          "Action_MoveItemToStorage",
          "SetStorageSwitchMode",
          "NavigationBarUpdate",
          "FocusOnSlotInStorage",
          "ResetHighlightsOnAvailableStorages",
          "HighlightAvailableStorages",
          "NavigationBarUpdate",
          "SetStorageSwitchMode",
          "ResetHighlightsOnAvailableStorages",
          "NavigationBarUpdate",
          "Action_Drop",
          "InspectItem",
          "MoveBetweenFromVicinity",
          "MoveBetweenToVicinity",
          "MoveBetweenFromVicinity",
          "ResetHighlightsOnAvailableStorages",
          "ToggleStorageContainerVisibility",
          "TraverseActualSlot",
          "NavigationBarUpdate",
          "OpenAsNewContainer",
          "HideItemInfo",
          "Action_OpenContainer",
          "SimpleFSM",
          "Action_Drop",
          "InspectItem",
          "MoveItemToStorageSlot",
          "EquipWeaponIntoWeaponSlot",
          "SetItemToQuickSlotDrop",
          "MoveItemToStorageSlot",
          "MoveItem",
          "EquipDraggedItem",
          "RemoveItemFromQuickSlotDrop",
          "ResetHighlightsOnAvailableStorages",
          "Action_QuickSlotAssign",
          "SetItemToQuickSlot",
          "FocusOnSlotInStorage",
          "FocusOnSlotInStorage",
          "NavigationBarUpdate",
          "Action_QuickSlotUnassign",
          "ShowQuickSlotStorage",
          "FocusOnSlotInStorage",
          "NavigationBarUpdate",
          "MoveItemToStorageSlot",
          "EquipWeaponIntoWeaponSlot",
          "MoveItem",
          "MoveToVicinity",
          "MoveFromVicinity",
          "EquipWeapon",
          "MoveToVicinity",
          "MoveFromVicinity",
          "MoveBetweenFromVicinity",
          "ShouldSpawnItem",
          "IsStorageArsenal",
          "IsStorageArsenal",
          "EquipDraggedItem",
          "MoveBetweenToVicinity",
          "MoveToVicinity",
          "MoveBetweenToVicinity_VirtualArsenal",
          "MoveItem_VirtualArsenal",
          "EquipWeaponIntoWeaponSlot_VirtualArsenal",
          "MoveItemToStorageSlot_VirtualArsenal",
          "EquipDraggedItem_VirtualArsenal",
          "MoveBetweenFromVicinity_VirtualArsenal",
          "MoveItem_ResourceContainer",
          "CreateItemSplitDialog",
          "MoveItemToStorageSlot_ResourceContainer",
          "CreateItemSplitDialog",
          "MoveItemToStorageSlot_ResourceContainer",
          "CreateItemSplitDialog",
          "DeselectSlot",
          "SetOpenStorage",
          "SetStorageSwitchMode",
          "FocusOnSlotInStorage",
          "TraverseActualSlot",
          "FocusOnSlotInStorage",
          "ShouldAllowTraverseActualSlot",
          "OpenAsNewContainer",
          "OpenStorageAsContainer",
          "OpenLinkedStorages",
          "OpenLinkedStorages",
          "OpenLinkedStoragesDelayed",
          "OpenLinkedStoragesDelayed",
          "OpenStorageAsContainer",
          "CloseLinkedStorages",
          "CloseLinkedStoragesDelayed",
          "RemoveOpenStorage",
          "Action_SelectItem",
          "SimpleFSM",
          "Action_DeselectItem",
          "SimpleFSM",
          "ResetHighlightsOnAvailableStorages",
          "Action_MoveInsideStorage",
          "SimpleFSM",
          "ResetHighlightsOnAvailableStorages",
          "Action_EquipItem",
          "Action_MoveBetween",
          "SimpleFSM",
          "ResetHighlightsOnAvailableStorages",
          "Action_Inspect",
          "InspectItem",
          "InspectItem",
          "Action_UseItem",
          "Action_UnfoldItem",
          "SimpleFSM",
          "Action_StepBack",
          "FilterOutStorages",
          "FocusOnSlotInStorage",
          "ResetHighlightsOnAvailableStorages",
          "Action_DragDown",
          "Action_OnDrag",
          "SimpleFSM",
          "HighlightAvailableStorages",
          "ContainerSetPos",
          "ContainerSetPos",
          "Action_DragUp",
          "SimpleFSM",
          "ResetHighlightsOnAvailableStorages",
          "ContainerSetPos",
          "Action_Move",
          "ResetHighlightsOnAvailableStorages",
          "GetOpenedStorage",
          "Action_LootMove",
          "ResetHighlightsOnAvailableStorages",
          "IsStorageInsideLBS",
          "OnItemAddedListener",
          "ShowQuickSlotStorage",
          "UpdateTotalWeightText",
          "OnItemRemovedListener",
          "ShowQuickSlotStorage",
          "ShowQuickSlotStorage",
          "UpdateTotalWeightText",
          "OnContainerHovered",
          "NavigationBarUpdate",
          "HighlightAvailableStorages",
          "ResetHighlightsOnAvailableStorages",
          "OnContainerLeft",
          "NavigationBarUpdate",
          "OnContainerFocused",
          "SetActiveStorage",
          "NavigationBarUpdate",
          "OnContainerFocusLeft",
          "SetActiveStorage",
          "NavigationBarUpdate",
          "GetCharacterController",
          "RefreshUISlotStorages",
          "UpdateTotalWeightText",
          "InitQuickSlots",
          "ShowQuickSlotStorage",
          "ShowQuickSlotStorage",
          "Action_SelectQuickSlot",
          "SetItemToQuickSlot",
          "RemoveItemFromQuickSlotDrop",
          "ShowQuickSlotStorage",
          "SetItemToQuickSlot",
          "ShowQuickSlotStorage",
          "SetItemToQuickSlotDrop",
          "ShowQuickSlotStorage",
          "ShowQuickSlotStorage",
          "SetStorageSwitchMode",
          "Action_DeselectItem",
          "FocusOnSlotInStorage",
          "Action_SwapItems",
          "Action_MoveItemToStorage",
          "MoveItem",
          "ResetHighlightsOnAvailableStorages",
          "IsWeaponEquipped",
          "CanAddAttachment",
          "OnAttachmentSpinboxFocused",
          "NavigationBarUpdate",
          "IsUsingGamepad",
          "OnInputDeviceIsGamepad",
          "SetStorageSwitchMode",
          "SetAttachmentSpinBoxActive",
          "NavigationBarUpdate",
          "GetInventoryMenu",
          "SCR_InventoryMenuUI",
          "GetTotalLoadWeight",
          "GetInventoryStorageManager",
          "GetCanInteract",
          "OnMenuOpen",
          "Init",
          "ShowStorage",
          "ShowStorage",
          "ShowStoragesList",
          "ShowEquipedWeaponStorage",
          "ShowItemInfo",
          "HideItemInfo",
          "SetSlotFocused",
          "GetInspectionScreen",
          "InspectItem",
          "FilterOutStorages",
          "Action_CloseInventory",
          "Action_SelectItem",
          "Action_EquipItem",
          "Action_Drop",
          "Action_Inspect",
          "OnItemAddedListener",
          "OnItemRemovedListener",
          "OnClick",
          "FilterOutStorages",
          "MoveItem",
          "SCR_InventoryMenuUI"
        ]
      },
      {
        "class_name": "SCR_InventoryOpenedStorageArsenalUI",
        "methods": [
          "GetAllItems",
          "RefreshResources",
          "Init",
          "RefreshResources",
          "CreateSlotUI",
          "SCR_InventorySlotUI",
          "Refresh",
          "RefreshResources"
        ]
      },
      {
        "class_name": "SCR_InventoryOpenedStorageUI",
        "methods": [
          "HandlerAttached",
          "InitPaging",
          "SetRowsAndColumns",
          "CreateEmptyLayout",
          "CreateSlots",
          "SortSlots",
          "ShowPage",
          "CreateSlots",
          "UpdateOwnedSlots",
          "GetAllItems",
          "ActivateCloseStorageButton",
          "CloseStorage",
          "IsFromVicinity",
          "SCR_InventoryOpenedStorageUI",
          "SetSlotAreaType"
        ]
      },
      {
        "class_name": "SCR_InventoryProgressBar",
        "methods": [
          "HandlerAttached",
          "UpdateProgressBar",
          "SetProgressRange",
          "UpdateProgressBar",
          "SetCurrentProgress",
          "UpdateProgressBar",
          "SetCurrentProgressPreview",
          "SetPreviewColor",
          "FlipColors",
          "UpdateProgressBar",
          "UpdateProgressBar"
        ]
      },
      {
        "class_name": "SCR_InventorySlotGadgetUI",
        "methods": [
          "RemoveItem",
          "Init",
          "SCR_InventorySlotGadgetUI"
        ]
      },
      {
        "class_name": "SCR_InventorySlotLBSUI",
        "methods": [
          "SCR_InventorySlotLBSUI"
        ]
      },
      {
        "class_name": "SCR_InventorySlotQuickSlotUI",
        "methods": [
          "Init",
          "SetSlotVisible",
          "SetQuickSlotIndexVisible",
          "SetQuickSlotHintVisible",
          "SetQuickSlotHintVisible",
          "SetSlotSize",
          "UpdateHints",
          "SetQuickSlotHintVisible",
          "SCR_InventorySlotQuickSlotUI"
        ]
      },
      {
        "class_name": "SCR_InventorySlotStorageEmbeddedUI",
        "methods": [
          "SetSelected",
          "SCR_InventorySlotStorageEmbeddedUI"
        ]
      },
      {
        "class_name": "SCR_InventorySlotStorageUI",
        "methods": [
          "SetSlotVisible",
          "ToggleShownIconVisible",
          "RemoveItem",
          "Init",
          "SetItemFunctionality",
          "SetSelected",
          "SCR_InventorySlotStorageUI"
        ]
      },
      {
        "class_name": "SCR_InventorySlotUI",
        "methods": [
          "UpdateReferencedComponent",
          "Destroy",
          "UpdateInventorySlot",
          "Refresh",
          "IsDraggable",
          "SetSlotSize",
          "Init",
          "SetItemFunctionality",
          "SetSlotVisible",
          "GetStorageComponent",
          "GetLoadoutArea",
          "SetStackNumber",
          "IncreaseStackNumber",
          "IncreaseStackNumberWithRplId",
          "OnOwnedSlotsUpdated",
          "SetAmmoCount",
          "SetAmmoType",
          "OnFuelAmountChanged",
          "InitFuelAmount",
          "GetButtonWidget",
          "IsSlotEnabled",
          "IsSlotBlocked",
          "IsSlotSelected",
          "SetSlotVisible",
          "SetAmmoCount",
          "UpdateAmmoCount",
          "UpdateWeaponAmmoCount",
          "UpdateVolumeBarValue",
          "SetSlotBlocked",
          "GetSlotIndex",
          "SetQuickSlotIndexVisible",
          "OnSlotFocused",
          "PrintFormat",
          "OnMouseEnter",
          "OnSlotFocused",
          "OnMouseLeave",
          "OnSlotFocusLost",
          "OnSlotFocusLost",
          "ToggleSelected",
          "SetSelected",
          "SetEnabled",
          "OnDrop",
          "SetEnabledForMove",
          "GetInventoryItemComponent",
          "GetAsStorage",
          "GetStorageUI",
          "IsSelected",
          "GetItemDetails",
          "GetItemName",
          "SetItemDetails",
          "ClearItemDetails",
          "SetImage",
          "GetInventoryManager",
          "RemoveItem",
          "SetItemFunctionality",
          "InitFuelAmount",
          "SetAmmoCount",
          "SetAmmoType",
          "SetAmmoType",
          "GetCharacterStorage",
          "UseItem",
          "Refresh",
          "CanUseItem",
          "ShouldVehicleSlotBeVisible",
          "UpdateVolumeBarValue",
          "UpdateAmmoCount",
          "GetAmmoCount",
          "UpdateStackNumber",
          "UpdateWeaponAmmoCount",
          "Refresh",
          "UpdateVolumeBarValue",
          "UpdateStackNumber",
          "UpdateAmmoCount",
          "UpdateWeaponAmmoCount",
          "Destroy",
          "OnChangeLockState",
          "SetSelectedQuickSlot",
          "GetCommonItemType",
          "OnSelect",
          "OnFocus",
          "OnSlotFocused",
          "OnFocusLost",
          "OnSlotFocusLost",
          "OnChange",
          "ClearItemDetails",
          "OnMouseButtonDown",
          "OnMouseButtonUp",
          "GetWidget",
          "GetColumnSize",
          "GetRowSize",
          "SetSlotSize",
          "GetSlotSize",
          "SetPage",
          "GetPage",
          "GetSlotedItemFunction",
          "SetIcon",
          "HandlerAttached",
          "Init",
          "GetItemResource",
          "IsStacked",
          "CheckCompatibility",
          "IsCompatible",
          "SCR_InventorySlotUI",
          "UpdateReferencedComponent",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_InventorySlotWeaponSlotsUI",
        "methods": [
          "Init",
          "SetIcon",
          "SetIcon",
          "SetIcon",
          "SetSlotSize",
          "GetWeaponSlotIndex",
          "CheckCompatibility",
          "SCR_InventorySlotWeaponSlotsUI",
          "UpdateReferencedComponent"
        ]
      },
      {
        "class_name": "SCR_InventorySlotWeaponUI",
        "methods": [
          "GetStorageComponent",
          "RemoveItem",
          "SCR_InventorySlotWeaponUI"
        ]
      },
      {
        "class_name": "SCR_InventorySpinBoxComponent",
        "methods": [
          "HandlerAttached",
          "SetNavigationActive",
          "OnFocus",
          "SetNavigationActive",
          "OnSpinBoxSelectionChanged",
          "OnFocusLost",
          "SetNavigationActive",
          "OnSpinBoxSelectionChanged",
          "FindItem",
          "IsFocused",
          "GetFocusedHZPoint",
          "SetNavigationActive",
          "OnMenuLeft",
          "OnMenuRight"
        ]
      },
      {
        "class_name": "SCR_InventoryStorageBackpackUI",
        "methods": [
          "HandlerAttached",
          "CreateEmptyLayout",
          "Refresh",
          "CreateSlots",
          "SortSlots",
          "ShowPage",
          "SCR_InventoryStorageBackpackUI",
          "SetSlotAreaType"
        ]
      },
      {
        "class_name": "SCR_InventoryStorageBaseUI",
        "methods": [
          "Init",
          "InitPaging",
          "SetRowsAndColumns",
          "SetPreviewItem",
          "RefreshConsumer",
          "InitPaging",
          "SetPagingActive",
          "SetPagingActive",
          "OnFocus",
          "OnFocusLost",
          "OnMouseEnter",
          "OnMouseLeave",
          "OnDrop",
          "OnUpdate",
          "SetRowsAndColumns",
          "PushState",
          "PopState",
          "GetCurrentNavigationStorage",
          "IsTraversalAllowed",
          "Traverse",
          "DeleteSlots",
          "PushState",
          "FillItemsFromStorage",
          "SortSlots",
          "ShowPage",
          "Back",
          "DeleteSlots",
          "Home",
          "FillItemsFromStorage",
          "SortSlots",
          "ShowPage",
          "Home",
          "DeleteSlots",
          "ClearTraverseTitles",
          "CreateSlots",
          "SortSlots",
          "ShowPage",
          "GetTotalResources",
          "GetMaxResources",
          "GetTraverseStorage",
          "Action_ChangePage",
          "SortSlots",
          "Action_PrevPage",
          "SortSlots",
          "ShowPage",
          "Action_NextPage",
          "SortSlots",
          "ShowPage",
          "IsStorageEnabled",
          "IsStorageSelected",
          "GetLastShownPage",
          "GetStorage",
          "GetWeaponStorage",
          "GetStorageName",
          "GetSelectedSlot",
          "GetPrevSelectedSlot",
          "Show",
          "ShowPagesCounter",
          "ShowPagesCounter",
          "ToggleShow",
          "Show",
          "GetFocusedSlot",
          "GetLastFocusedSlot",
          "GetStorageGrid",
          "GetRootWidget",
          "GetInventoryMenuHandler",
          "GetInventoryManager",
          "SetSlotAreaType",
          "GetSlotAreaType",
          "GetUISlots",
          "RemoveSlotUI",
          "SortSlots",
          "RefreshSlot",
          "CreateEmptySlotUI",
          "CreateSlotUI",
          "SCR_InventorySlotUI",
          "SCR_InventorySlotWeaponUI",
          "SCR_SupplyInventorySlotUI",
          "SCR_InventorySlotStorageEmbeddedUI",
          "SCR_InventorySlotUI",
          "DeleteSlots",
          "ValidateNavigationQueue",
          "GetAllItems",
          "RefreshConsumer",
          "Refresh",
          "RefreshResources",
          "UpdateStoredResources",
          "UpdateAvailableResources",
          "Refresh",
          "ClearTraverseTitles",
          "FillItemsFromStorage",
          "CreateSlots",
          "ClearTraverseTitles",
          "CreateSlots",
          "SortSlots",
          "ShowPage",
          "GetAllItemsFromDepth",
          "SetStorageAsHighlighted",
          "GetAllItems",
          "CheckIfAnyItemInStorageHasResources",
          "RefreshResources",
          "UpdateStoredResources",
          "UpdateAvailableResources",
          "UpdateContainerResources",
          "UpdateOwnedSlots",
          "DeleteSlots",
          "UpdateSlotUI",
          "GetAllItems",
          "UpdateOwnedSlots",
          "FindItem",
          "FindItemByName",
          "GetNameFromComponent",
          "CreateSlots",
          "GetAllItems",
          "UpdateOwnedSlots",
          "GetIndexFromCoords",
          "SortSlots",
          "FillWithEmptySlots",
          "ReserveAndSetSlot",
          "ReserveAndSetSlot",
          "ShowPage",
          "ShowPagesCounter",
          "ShowPagesCounter",
          "ClearTraverseTitles",
          "FillItemsFromStorage",
          "ClearTraverseTitles",
          "UpdateOwnedSlots",
          "FindAndSetTitleName",
          "UpdateContainerResources",
          "FindAndSetTitleName",
          "GetAllItems",
          "GetAllItemsFromDepth",
          "ConstructSlashes",
          "GetAllItemsFromDepth",
          "ConstructSlashes",
          "UpdateTotalWeight",
          "GetTotalRoundedUpWeight",
          "CheckIfAnyItemInStorageHasResources",
          "GetOccupiedVolumePercentage",
          "GetOccupiedVolume",
          "GetMaxVolumeCapacity",
          "SetStorageAsHighlighted",
          "IsStorageHighlighted",
          "ConstructSlashes",
          "CreateEmptyLayout",
          "CreateEmptySlotUI",
          "GetItemComponentFromEntity",
          "GetSlots",
          "ShowItemDetails",
          "ShowPagesCounter",
          "SetLastFocusedSlot",
          "SetSlotFocused",
          "SetSlotSelected",
          "ShowContainerBorder",
          "ActivateStorageButton",
          "GetFocusedSlotId",
          "GetSlotId",
          "GetSlotIdForItem",
          "SetPreviewItem",
          "DimSlots",
          "HandlerAttached",
          "Init",
          "HandlerDeattached",
          "GetButtonWidget",
          "GetLastCloseTraverseButton",
          "IsWarningOverlayVisible",
          "SCR_InventoryStorageBaseUI"
        ]
      },
      {
        "class_name": "SCR_InventoryStorageButton",
        "methods": [
          "OnFocus",
          "OnFocusLost",
          "SetParent"
        ]
      },
      {
        "class_name": "SCR_InventoryStorageGadgetsUI",
        "methods": [
          "CreateSlotUI",
          "SCR_InventorySlotGadgetUI",
          "CreateSlots",
          "GetAllItems",
          "HandlerAttached",
          "CreateEmptyLayout",
          "CreateSlots",
          "SortSlots",
          "SCR_InventoryStorageGadgetsUI",
          "SetSlotAreaType"
        ]
      },
      {
        "class_name": "SCR_InventoryStorageLBSUI",
        "methods": [
          "CreateSlots",
          "GetAllItems",
          "UpdateOwnedSlots",
          "GetAllItems",
          "HandlerAttached",
          "CreateEmptyLayout",
          "Refresh",
          "CreateSlots",
          "SortSlots",
          "ShowPage",
          "SCR_InventoryStorageLBSUI",
          "SetSlotAreaType"
        ]
      },
      {
        "class_name": "SCR_InventoryStorageLootUI",
        "methods": [
          "CreateSlotUI",
          "SCR_InventorySlotUI",
          "SCR_InventorySlotWeaponUI",
          "SCR_SupplyInventorySlotUI",
          "SCR_InventorySlotStorageEmbeddedUI",
          "SCR_InventorySlotUI",
          "Init",
          "HandlerAttached",
          "InitPaging",
          "SetRowsAndColumns",
          "CreateEmptyLayout",
          "CreateSlots",
          "SortSlots",
          "ShowPage",
          "GetAllItems",
          "SCR_InventoryStorageLootUI",
          "SetSlotAreaType"
        ]
      },
      {
        "class_name": "SCR_InventoryStorageQuickSlotsUI",
        "methods": [
          "InitPaging",
          "HighlightSlot",
          "CheckIfQuickSlotActionsAvailable",
          "SelectSlot",
          "HighlightSlot",
          "HighlightSlot",
          "SelectSlot",
          "HighlightSlot",
          "UseItemInSlot",
          "FilterOutSlots",
          "UpdateOwnedSlots",
          "CheckIfQuickSlotActionsAvailable",
          "GetAllItems",
          "CreateSlots",
          "GetAllItems",
          "UpdateOwnedSlots",
          "CheckIfQuickSlotActionsAvailable",
          "SortSlots",
          "FillWithEmptySlots",
          "CheckIfQuickSlotActionsAvailable",
          "CheckIfQuickSlotActionsAvailable",
          "FillWithEmptySlots",
          "SetItem",
          "CreateSlotUI",
          "SCR_InventorySlotQuickSlotUI",
          "SetRowsAndColumns",
          "UseItemInSlot",
          "FilterOutSlots",
          "UseSelectedQuickslot",
          "UseSelectedQuickslot",
          "SetInitialQuickSlot",
          "HighlightSlot",
          "SetQuickBarClosed",
          "Init",
          "RefreshList",
          "CreateEmptyLayout",
          "RefreshQuickSlots",
          "RefreshQuickSlots",
          "CreateSlots",
          "InitMatrix",
          "SortSlots",
          "RefreshSlot",
          "SortSlots",
          "GetActualSlotsUsedCount",
          "InitMatrix",
          "GetGamepadIcons",
          "GetCurrentSlotItem",
          "HighlightLastSelectedSlot",
          "HighlightSlot",
          "GetLastSelectedSlotIndex",
          "HandlerAttached",
          "RefreshList",
          "SCR_InventoryStorageQuickSlotsUI"
        ]
      },
      {
        "class_name": "SCR_InventoryStoragesListUI",
        "methods": [
          "GetUISlotBySlotID",
          "FindItemSlot",
          "InitPaging",
          "GetAllStorages",
          "CreateStorageSlotUI",
          "SCR_InventorySlotLBSUI",
          "SCR_InventorySlotStorageUI",
          "SCR_InventorySlotUI",
          "CreateSlots",
          "SortSlots",
          "FillWithEmptySlots",
          "FillWithEmptySlots",
          "IsTraversalAllowed",
          "SelectSlot",
          "HandlerAttached",
          "RefreshList",
          "RefreshList",
          "CreateEmptyLayout",
          "CreateSlots",
          "SortSlots",
          "SCR_InventoryStoragesListUI"
        ]
      },
      {
        "class_name": "SCR_InventoryStorageVestUI",
        "methods": [
          "HandlerAttached",
          "CreateEmptyLayout",
          "CreateSlots",
          "SortSlots",
          "SCR_InventoryStorageVestUI",
          "SetSlotAreaType"
        ]
      },
      {
        "class_name": "SCR_InventoryStorageWeaponsUI",
        "methods": [
          "Init",
          "CreateWeaponSlotUI",
          "SCR_InventorySlotWeaponUI",
          "CreateSlots",
          "DeleteSlots",
          "HandlerAttached",
          "CreateEmptyLayout",
          "CreateSlots",
          "SortSlots",
          "SCR_InventoryStorageWeaponsUI",
          "SetSlotAreaType"
        ]
      },
      {
        "class_name": "SCR_InventoryUIInfo",
        "methods": [
          "GetInventoryItemName",
          "GetName",
          "GetInventoryItemDescription",
          "GetDescription",
          "IsIconVisible",
          "GetIconColor",
          "GetItemHintArray"
        ]
      },
      {
        "class_name": "SCR_InventoryWeaponSlotsUI",
        "methods": [
          "HandlerAttached",
          "CreateEmptyLayout",
          "CreateSlots",
          "SortSlots",
          "InitMatrix",
          "InitPaging",
          "IsTraversalAllowed",
          "CreateSlots",
          "UpdateOwnedSlots",
          "FillWithEmptySlots",
          "UpdateOwnedSlots",
          "FillWithEmptySlots",
          "SetRowsAndColumns",
          "CreateSlotUI",
          "SCR_InventorySlotWeaponSlotsUI",
          "SetRowsAndColumns",
          "GetActualSlotsUsedCount",
          "SortSlots",
          "FillWithEmptySlots",
          "InitMatrix",
          "SCR_InventoryWeaponSlotsUI"
        ]
      },
      {
        "class_name": "SCR_ItemSplitDialog",
        "methods": [
          "HandlerAttached",
          "SetSliderMax",
          "SetSliderValue",
          "GetSliderValue",
          "GetEntityTo",
          "GetEntityFrom",
          "SetEntityTo",
          "SetEntityFrom",
          "Create"
        ]
      },
      {
        "class_name": "SCR_NavigationBarUI",
        "methods": [
          "Refresh",
          "GetButton",
          "OnNavigation",
          "SetButtonEnabled",
          "SetButtonActionName",
          "SetAllButtonEnabled",
          "FillFromConfig",
          "InitNavButtons",
          "InitNavButtons",
          "HandlerAttached",
          "InitNavButtons"
        ]
      },
      {
        "class_name": "SCR_SupplyInventorySlotUI",
        "methods": [
          "SetSlotSize",
          "SetItemFunctionality",
          "SetSlotVisible",
          "Refresh",
          "Refresh",
          "UpdateConsumer",
          "UpdateStoredResources",
          "UpdateAvailableResources",
          "OnOwnedSlotsUpdated",
          "UpdateConsumer",
          "UpdateStoredResources",
          "GetAdditionalResourceValuesFromStack",
          "GetAdditionalResourceValuesFromStack",
          "IncreaseStackNumberWithRplId",
          "UpdateAvailableResources",
          "HandlerAttached",
          "Refresh",
          "HandlerDeattached",
          "SCR_SupplyInventorySlotUI",
          "UpdateConsumer"
        ]
      },
      {
        "class_name": "ArmaReforgerLoadingAnim",
        "methods": [
          "ArmaReforgerLoadingAnim",
          "Load",
          "PrintFormat",
          "Update",
          "Show",
          "PrintFormat",
          "EnableSounds",
          "Hide",
          "PrintFormat",
          "EnableSounds",
          "EnableSounds",
          "IsOpen",
          "OnMissionSet",
          "SetJoiningCrossPlay",
          "PrintFormat",
          "SetLoadingModded",
          "PrintFormat"
        ]
      },
      {
        "class_name": "SCR_LoadingHintComponent",
        "methods": [
          "HandlerAttached",
          "ShowHint",
          "OnLoadingFinished",
          "HandlerDeattached",
          "MarkHintRead",
          "Update",
          "MarkHintRead",
          "ShowHint",
          "ShowHint",
          "MarkHintRead",
          "GetUnreadHints"
        ]
      },
      {
        "class_name": "SCR_LoadingScreenComponent",
        "methods": [
          "HandlerAttached",
          "InitWidgets",
          "OnMissionDataRetrieved",
          "PrintFormat",
          "OnHide",
          "ResetLoadingTime",
          "SaveLoadingTime",
          "Update",
          "PrintFormat",
          "SetProgressBar",
          "Fade",
          "Fade",
          "SetProgressBar",
          "SetJoiningCrossPlay",
          "SetLoadingModded"
        ]
      },
      {
        "class_name": "MagazineUIInfo",
        "methods": [
          "GetAmmoCaliber",
          "GetAmmoType",
          "ShowAmmoTypeText",
          "GetAmmoTypeFlags"
        ]
      },
      {
        "class_name": "BetaWarningDialogUI",
        "methods": [
          "ConfirmButton",
          "CloseDialog",
          "CloseDialog",
          "Close",
          "OnMenuOpen"
        ]
      },
      {
        "class_name": "SCR_LoadoutStatisticsComponent",
        "methods": [
          "HandlerAttached",
          "SetupLoadoutSpin",
          "CreateStatEntries",
          "SetupLoadoutSpin",
          "CreateStatEntries",
          "OnLoadoutChanged",
          "UpdateStats",
          "UpdateStats",
          "SetStatEntry",
          "SetStatEntry",
          "SetStatLabel",
          "SetStatValue",
          "SetStatLabel",
          "SetStatValue",
          "GetCurrentLoadoutId",
          "SetCareerUI"
        ]
      },
      {
        "class_name": "LoadoutStatSet",
        "methods": [
          "GetLoadout"
        ]
      },
      {
        "class_name": "CareerMenuUI",
        "methods": [
          "Back",
          "Close",
          "CreateStatEntry",
          "OnChange",
          "OnPlayerNameConfirm",
          "UpdateCareerData",
          "TestingShow",
          "OnMenuUpdate",
          "OnMenuShow",
          "OnMenuOpen",
          "OnMenuClose",
          "OnLoadoutChange"
        ]
      },
      {
        "class_name": "CareerCallback",
        "methods": [
          "OnSuccess",
          "OnError",
          "OnTimeout"
        ]
      },
      {
        "class_name": "SCR_ButtonLegendComponent",
        "methods": [
          "HandlerAttached",
          "SetTexture",
          "SetTexture",
          "SetTexture",
          "SetTexture",
          "SetTexture",
          "SetTexture",
          "SetTexture",
          "GetOnClicked",
          "GetOnMouseEnter",
          "GetOnMouseLeave",
          "OnClick",
          "OnFocus",
          "OnClick",
          "OnMouseEnter",
          "OnMouseLeave",
          "Activate",
          "PlaySound",
          "SetTexture",
          "Deactivate",
          "PlaySound",
          "SetTexture",
          "SetOnHover",
          "Hide",
          "Unhide",
          "IsActive",
          "SetText",
          "GetText",
          "GetTextWidget",
          "GetCoreImageWidget",
          "GetBorderImageWidget",
          "GetChangeSpLeftImageWidget",
          "GetChangeSpRightImageWidget",
          "GetLeftAndRightSelectedUI",
          "SetLeftAndRightUIActivate",
          "SetButtonId",
          "SetFocus",
          "GetButtonId"
        ]
      },
      {
        "class_name": "SCR_ButtonSpecializationProgressComponent",
        "methods": [
          "HandlerAttached",
          "GetOnClicked",
          "OnClick",
          "Activate",
          "PlaySound",
          "Deactivate",
          "PlaySound",
          "OnMouseEnter",
          "OnMouseLeave",
          "Hide",
          "Unhide",
          "SetOnHover",
          "GetOnMouseEnter",
          "GetOnMouseLeave",
          "SetTitle",
          "SetValue",
          "SetButtonId",
          "SetFocus",
          "GetButtonId"
        ]
      },
      {
        "class_name": "SCR_CareerProfileHUD",
        "methods": [
          "HandlerAttached",
          "PrepareHUD",
          "OnEditAppearance",
          "SetLevelProgressGain",
          "SetPlayerRank",
          "SetRandomBackgroundPicture",
          "SetPlayerLevel",
          "SetProgressBarValue"
        ]
      },
      {
        "class_name": "SCR_CareerProfileMenuUI",
        "methods": [
          "OnMenuOpen"
        ]
      },
      {
        "class_name": "SCR_CareerProfileOverviewUI",
        "methods": [
          "OnTabCreate",
          "FillFields",
          "OnMenuUpdate",
          "FillFields",
          "FillScreen",
          "FillHudAndStats",
          "FillSpecializationsFrame",
          "FillHudAndStats",
          "FillSpecializationsFrame",
          "ControllerActive",
          "ControllerActive"
        ]
      },
      {
        "class_name": "SCR_CareerSpecializationsUI",
        "methods": [
          "HandlerAttached",
          "NavLeft",
          "UpdateSpecialization",
          "NavRight",
          "UpdateSpecialization",
          "SetShowProgression",
          "FillSpecializations",
          "SetUpSpecializationDisplay",
          "SetUpSpecializationDisplay",
          "CreateSpecializationProgressButtonWidget",
          "UpdateSpecializationPanel",
          "SpecializationStatsSetVisible",
          "SpecializationStatsSetVisible",
          "UpdateSpecialization",
          "UpdateSpecializationPanel",
          "UpdateHoveredSpecialization",
          "CreateSpecializationProgressButtonWidget",
          "AddProgressButtonHandler",
          "AddLegendButtonHandler",
          "AddProgressButtonHandler",
          "SetLeftAndRightUIActivate",
          "FillWarCrimes"
        ]
      },
      {
        "class_name": "SCR_CareerUI",
        "methods": [
          "SCR_CareerUI",
          "CreateStatEntry",
          "CreateProgressionStatEntry",
          "CreateHeaderStatEntry",
          "UpdateStatEntry",
          "UpdateStatProgressionEntry"
        ]
      },
      {
        "class_name": "SCR_ProgressBarWithSegments",
        "methods": [
          "HandlerAttached",
          "UpdateVisuals",
          "SetProgressBarValues",
          "UpdateVisuals",
          "SetValue"
        ]
      },
      {
        "class_name": "SCR_SpiderNet",
        "methods": [
          "HandlerAttached",
          "RegisterCareerProfileHandler",
          "SetSpPoints",
          "DrawSpiderNet",
          "CalculateVertices",
          "DrawVertices",
          "DrawLegends",
          "OnUpdate",
          "CalculateVertices",
          "DrawVertices",
          "InnerArea",
          "OldInnerArea",
          "OuterArea",
          "OldOuterArea",
          "DrawLegends",
          "CreateLegend",
          "CreateLegend",
          "AdjustLegend",
          "AdjustLegend",
          "OnButtonClick",
          "OnMouseEnterButton",
          "OnMouseLeaveButton",
          "CreateLegend"
        ]
      },
      {
        "class_name": "SCR_WarCrimesPanelUI",
        "methods": [
          "HandlerAttached",
          "WarCrimesActive",
          "CreateWarCrimeEntry",
          "WarCrimesActive",
          "WarCrimesActive"
        ]
      },
      {
        "class_name": "SCR_ProgressBarWithInactiveColor",
        "methods": [
          "HandlerAttached",
          "SetActive",
          "SetOnHover",
          "Hide",
          "Unhide"
        ]
      },
      {
        "class_name": "ChimeraMenuBase",
        "methods": [
          "CurrentChimeraMenu",
          "OnMenuInit",
          "OnMenuUpdate",
          "OnMenuOpen",
          "OnMenuOpened",
          "OnMenuClose",
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "OnMenuShow",
          "OnMenuHide",
          "GetOwnerMenu"
        ]
      },
      {
        "class_name": "SCR_ContentDetailsPanelBase",
        "methods": [
          "HandlerAttached",
          "OnUpdate",
          "UpdateSize",
          "FallbackContentByTag",
          "SetDescriptionText",
          "AddTypeDisplay",
          "ClearTypeDisplays"
        ]
      },
      {
        "class_name": "SCR_ContentDetailsPanelBaseWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_DynamicIconComponent",
        "methods": [
          "HandlerAttached",
          "SetImage",
          "GetIconWidget",
          "GetGlowWidget",
          "SetImage",
          "SetImage_Internal",
          "SetImage_Internal",
          "SetImage_Internal",
          "SetIconColor",
          "SetGlowColor",
          "SetVisibile",
          "GetIcon",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_FilterEntry",
        "methods": [
          "GetCategory",
          "SetSelected",
          "GetSelected",
          "Init"
        ]
      },
      {
        "class_name": "SCR_FilterCategory",
        "methods": [
          "SCR_FilterCategory",
          "FindFilter",
          "GetAllSelected",
          "GetAnySelected",
          "GetAllDeselected",
          "GetSelectedCount"
        ]
      },
      {
        "class_name": "SCR_FilterSet",
        "methods": [
          "FindFilterCategory",
          "FindFilter",
          "AnyFilterSelected",
          "ResetToDefaultValues"
        ]
      },
      {
        "class_name": "SCR_FilterEntryTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_AllFilterSetsStorage",
        "methods": [
          "SaveFilterSet",
          "IsFilterSetSaved",
          "TryLoadFilterSet",
          "ResetAllToDefault"
        ]
      },
      {
        "class_name": "SCR_ListMenuEntryComponent",
        "methods": [
          "HandlerAttached",
          "EnableTextAnimations",
          "HandlerDeattached",
          "OnClick",
          "OnDoubleClick",
          "OnFocus",
          "UpdateModularButtons",
          "EnableTextAnimations",
          "OnFocusLost",
          "UpdateModularButtons",
          "EnableTextAnimations",
          "OnMouseEnter",
          "OnTooltipShow",
          "OnInnerButtonHover",
          "OnInnerButtonLeave",
          "EnableTextAnimations",
          "HandleTextAnimation",
          "HandleTextAnimation",
          "UpdateModularButtons",
          "OpacityAnimation",
          "AnimateOpacity",
          "IsInnerButtonInteraction",
          "IsFocused",
          "GetOnMouseInteractionButtonClicked",
          "GetOnFocus",
          "GetOnFocusLost",
          "GetOnMouseEnter"
        ]
      },
      {
        "class_name": "SCR_LoadingOverlayDialog",
        "methods": [
          "Create",
          "CloseAnimated",
          "OnMenuOpen",
          "OnMenuClose",
          "Init",
          "Callback_OnBackButton"
        ]
      },
      {
        "class_name": "SCR_ScenarioDetailsPanelComponent",
        "methods": [
          "HandlerAttached",
          "UpdateAllWidgets",
          "SetScenario",
          "UpdateAllWidgets",
          "UpdateAllWidgets",
          "SetDescriptionText",
          "UpdateAuthorNameText",
          "SetDescriptionText",
          "UpdateAuthorNameText"
        ]
      },
      {
        "class_name": "SCR_SimpleMessageComponent",
        "methods": [
          "HandlerAttached",
          "SetContentFromPreset",
          "SetContentFromPreset",
          "SetContentFromPreset",
          "SetContentFromPreset",
          "GetRootWidget",
          "SetVisible"
        ]
      },
      {
        "class_name": "SCR_SimpleMessagePresets",
        "methods": [
          "GetPreset"
        ]
      },
      {
        "class_name": "SCR_SimpleWarningComponent",
        "methods": [
          "HandlerAttached",
          "ResetWarning",
          "ResetWarningColor",
          "ResetWarning",
          "SetWarning",
          "ResetWarningColor",
          "SetWarningColor",
          "SetWarning",
          "SetWarningColor",
          "SetWarningVisible",
          "SetIconVisible",
          "FindComponentInHierarchy",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_SimpleWarningOverlayComponent",
        "methods": [
          "HandlerAttached",
          "SetIconButtonEnabled",
          "ResetWarningColor",
          "SetWarningColor",
          "SetWarning",
          "FindComponentInHierarchy",
          "FindComponent",
          "OnWarningIconButtonClicked",
          "SetIconButtonEnabled",
          "SetBlurUnderneath",
          "GetOnWarningIconButtonClicked"
        ]
      },
      {
        "class_name": "SCR_VersionMismatchTooltipComponent",
        "methods": [
          "HandlerAttached",
          "SetWrongVersionMessage",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_CommonDialogs",
        "methods": [
          "CreateDialog",
          "CreateRequestErrorDialog",
          "CreateTimeoutOkDialog",
          "CreateTimeoutTryAgainCancelDialog",
          "CreateServicesStatusDialog",
          "CreateTutorialDialog",
          "CreateServerHostingDialog",
          "CreateModPresetsDialog",
          "CreateDownloadManagerDialog",
          "CreateScenarioLoadDialog"
        ]
      },
      {
        "class_name": "SCR_ExitGameDialog",
        "methods": [
          "SCR_ExitGameDialog",
          "OnConfirm"
        ]
      },
      {
        "class_name": "SCR_ExitGameWhileDownloadingDialog",
        "methods": [
          "SCR_ExitGameWhileDownloadingDialog",
          "OnConfirm"
        ]
      },
      {
        "class_name": "SCR_StartScenarioWhileDownloadingDialog",
        "methods": [
          "CreateDialog",
          "OnConfirm",
          "SetScenario"
        ]
      },
      {
        "class_name": "SCR_HostScenarioWhileDownloadingDialog",
        "methods": [
          "CreateDialog",
          "OnConfirm",
          "SetScenario",
          "SetConfig"
        ]
      },
      {
        "class_name": "SCR_NotEnoughStorageDialog",
        "methods": [
          "Create",
          "AddToSize",
          "SetMessage",
          "OnMenuOpen",
          "SetMessage",
          "SCR_NotEnoughStorageDialog"
        ]
      },
      {
        "class_name": "SCR_WidgetEditFormat",
        "methods": [
          "IsFormatValid",
          "GetFormatMessage",
          "SetEditBoxFilter"
        ]
      },
      {
        "class_name": "SCR_WidgetEditFormatRange",
        "methods": [
          "IsFormatValid",
          "BellowMin",
          "OverMax",
          "GetMinRange",
          "GetMaxRange"
        ]
      },
      {
        "class_name": "SCR_WidgetEditFormatNumberRange",
        "methods": [
          "IsFormatValid",
          "SetMaxRange",
          "GetMaxRange"
        ]
      },
      {
        "class_name": "SCR_WidgetEditFormatIP",
        "methods": [
          "IsFormatValid",
          "IsPrivate",
          "IsAddressInRange",
          "AddressToDecimal",
          "IsValidated",
          "IsPrivate"
        ]
      },
      {
        "class_name": "SCR_WidgetEditFormatName",
        "methods": [
          "IsFormatValid"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntryCustomTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_LocalizedPropertyTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_LocalizedProperty",
        "methods": [
          "SCR_LocalizedProperty"
        ]
      },
      {
        "class_name": "SCR_LocalizedPropertyExtended",
        "methods": [
          "SCR_LocalizedPropertyExtended"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntry",
        "methods": [
          "CreateWidget",
          "SetupHandlers",
          "SetInteractive",
          "SetupHandlers",
          "ValueAsString",
          "SetValue",
          "CheckValidity",
          "CanSkip",
          "SetInteractive",
          "GetEntryLayout",
          "SetEntryLayout",
          "GetLabel",
          "SetLabel",
          "GetPropertyName",
          "SetPropertyName",
          "GetGroupTag",
          "SetGroupTag",
          "GetType",
          "GetEntryRoot",
          "IsInputValid"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntryGroup",
        "methods": [
          "GetTag"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntryLabel",
        "methods": [
          "CreateWidget"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntryEditBox",
        "methods": [
          "SetupHandlers",
          "SetCharLists",
          "ValueAsString",
          "SetValue",
          "CheckValidity",
          "OnFocusChange",
          "OnInvalidInput",
          "CheckEditBoxValidity",
          "InvokeInvalidInput",
          "OnInvalidInput",
          "ClearInvalidInput",
          "GetEditBoxComponent",
          "GetFormatCheck",
          "SetWarningText"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntryEditBoxIP",
        "methods": [
          "SetupHandlers",
          "CheckValidity"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntryCheckBox",
        "methods": [
          "SetupHandlers",
          "SetValue",
          "ValueAsString",
          "GetCheckbox"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntrySelection",
        "methods": [
          "SetupHandlers",
          "ValueAsString",
          "ValueId",
          "SelectOption",
          "GetSelectedOption",
          "SetOptions",
          "GetSelectionComponent",
          "GetOptions"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntrySpinBox",
        "methods": [
          "SetupHandlers",
          "SetValue",
          "GetSpinBox"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntryBoolSpinBox",
        "methods": [
          "SetupHandlers",
          "SetValue"
        ]
      },
      {
        "class_name": "SCR_WidgetListEntrySlider",
        "methods": [
          "SetupHandlers",
          "SetValue",
          "ValueAsString",
          "SetRange"
        ]
      },
      {
        "class_name": "SCR_WorkshopDialogCopyToClipboard",
        "methods": [
          "SCR_WorkshopDialogCopyToClipboard",
          "OnConfirm"
        ]
      },
      {
        "class_name": "SCR_WorkshopErrorDialog",
        "methods": [
          "SCR_WorkshopErrorDialog",
          "SetMessage"
        ]
      },
      {
        "class_name": "SCR_WorkshopPresetConfirmDialog",
        "methods": [
          "SCR_WorkshopPresetConfirmDialog",
          "CreateDeletePresetDialog",
          "SCR_WorkshopPresetConfirmDialog",
          "CreateOverridePresetDialog"
        ]
      },
      {
        "class_name": "SCR_WorkshopErrorPresetLoadDialog",
        "methods": [
          "SCR_WorkshopErrorPresetLoadDialog",
          "OnModDownloaded"
        ]
      },
      {
        "class_name": "SCR_AddonExportDialog",
        "methods": [
          "OnMenuOpen",
          "GenerateModContent",
          "OnClickCopy",
          "GenerateModContent",
          "OnTabChanged",
          "SubMenuFromTab"
        ]
      },
      {
        "class_name": "SCR_AddonsExportDialogWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_AddonsExportSubMenuComponent",
        "methods": [
          "HandlerAttached",
          "OnTabShow",
          "DisplayText",
          "GenerateAddonJson",
          "qstr",
          "GenerateJSONFormat",
          "DisplayText",
          "GenerateCLIFormat",
          "DisplayText",
          "CopyToClipboard",
          "GetGeneratedText"
        ]
      },
      {
        "class_name": "SCR_AddonsExportSubMenuWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_AddonLinePresetComponent",
        "methods": [
          "InvokeEventOnButtonClick",
          "GetEventOnButtonClick",
          "InvokeEventOnNameChanged",
          "GetEventOnNameChanged",
          "InvokeEventOnNameEditStart",
          "InvokeEventOnButtonClick",
          "GetEventOnNameEditStart",
          "InvokeEventOnNameEditLeave",
          "GetEventOnNameEditLeave",
          "InvokeEventOnFocus",
          "GetEventOnFocus",
          "InvokeEventOnFocusLost",
          "GetEventOnFocusLost",
          "InvokeEventOnLoad",
          "InvokeEventOnButtonClick",
          "GetEventOnLoad",
          "InvokeEventOnOverride",
          "InvokeEventOnButtonClick",
          "GetEventOnOverride",
          "InvokeEventOnDelete",
          "InvokeEventOnButtonClick",
          "GetEventOnDelete",
          "HandlerAttached",
          "ShowEditWidget",
          "ShowButtons",
          "HandlerDeattached",
          "OnDoubleClick",
          "InvokeEventOnLoad",
          "OnFocus",
          "InvokeEventOnFocus",
          "ShowButtons",
          "OnFocusLost",
          "InvokeEventOnFocusLost",
          "ShowButtons",
          "ToggleSelected",
          "InvokeEventOnLoad",
          "StartEditName",
          "ShowEditWidget",
          "ShowButtons",
          "InvokeEventOnNameEditStart",
          "ShowEditWidget",
          "RemoveEditActions",
          "OnEditNameConfirm",
          "RemoveEditActions",
          "InvokeEventOnLoad",
          "OnEditNameCancel",
          "OnEditNameConfirm",
          "ShowEditWidget",
          "RemoveEditActions",
          "InvokeEventOnNameEditLeave",
          "ShowButtons",
          "DefaultName",
          "GetPreset",
          "SetPreset",
          "UpdateWidgets",
          "ShowWarning",
          "ShowModCount",
          "ShowDefaultName",
          "GetName",
          "SetSelected",
          "GetSelected",
          "OnInputDeviceChange",
          "ShowButtons"
        ]
      },
      {
        "class_name": "SCR_AddonLinePresetWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_AddonsPresetsSubMenuComponent",
        "methods": [
          "OnMenuFocusGained",
          "HandleFocus",
          "HandlerAttached",
          "HandlerDeattached",
          "OnTabShow",
          "UpdatePresetListbox",
          "OnTabCreate",
          "UpdatePresetListbox",
          "HandleFocus",
          "HasAllPresetAddons",
          "CanCreatePreset",
          "SCR_WorkshopErrorDialog",
          "IsPresetAddonsListEmpty",
          "SCR_WorkshopErrorDialog",
          "IsAddonsListEmpty",
          "SCR_WorkshopErrorDialog",
          "IsNameValid",
          "SCR_WorkshopErrorDialog",
          "SCR_WorkshopErrorDialog",
          "OnUsedPresetChanged",
          "IsNameUnique",
          "CreateNewPreset",
          "SetupLineCreationState",
          "Callback_OnNameNewPreset",
          "ClearLineCreationState",
          "UpdatePresetListbox",
          "Callback_OnNewPresetFocusLost",
          "UpdatePresetListbox",
          "ClearLineCreationState",
          "SetupLineCreationState",
          "SetExistingLinesEnabled",
          "ClearLineCreationState",
          "SetExistingLinesEnabled",
          "SetExistingLinesEnabled",
          "LoadPreset",
          "OverridePreset",
          "SetToFocusPreset",
          "Callback_OnConfirmOverride",
          "UpdatePresetListbox",
          "DeletePreset",
          "SetToFocusPreset",
          "Callback_OnConfirmDelete",
          "UpdatePresetListbox",
          "RenamePreset",
          "SetToFocusPreset",
          "UpdatePresetListbox",
          "OnNameEditStart",
          "OnLineFocus",
          "OnLineButtonClick",
          "FocusedPresetLine",
          "OnNewPresetFocus",
          "OnNewPresetFocusLost",
          "OnLoadButton",
          "LoadPreset",
          "OnOverrideButton",
          "OverridePreset",
          "OnRenameButton",
          "OnDeleteButton",
          "DeletePreset",
          "SetToFocusPreset",
          "HandleFocus"
        ]
      },
      {
        "class_name": "AddonsToolsUI",
        "methods": [
          "OnMenuOpen",
          "EnableExportTabs",
          "OnMenuClose",
          "IsAddonManagerOpened",
          "OnOpenWorkshopButton",
          "OnCancel",
          "AllMenuClosed",
          "Close",
          "EnableExportTabs"
        ]
      },
      {
        "class_name": "SCR_AddonLineBaseWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_AddonsPresetSubMenuWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_AddonLineBaseComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "StopContinuousUpdate",
          "OnFocus",
          "UpdateAllWidgets",
          "OnFocusLost",
          "UpdateAllWidgets",
          "UpdateModularButtons",
          "OnTooltipShow",
          "OnIncompatibleTooltipShow",
          "OnUpdateTooltipShow",
          "OnDependenciesTooltipShow",
          "OnSideTooltipShow",
          "OnSideTooltipShow",
          "UpdateAllWidgets",
          "HandleDownloadChanges",
          "HandleDownloadChanges",
          "UpdateIssueState",
          "UpdateCompatibilityWidgets",
          "UpdateDownloadProgressWidgets",
          "StartContinuousUpdate",
          "StopContinuousUpdate",
          "StartContinuousUpdate",
          "StopContinuousUpdate",
          "ContinuousUpdate",
          "StopContinuousUpdate",
          "UpdateDownloadProgressWidgets",
          "HandleEnableButtons",
          "UpdateCompatibilityWidgets",
          "UpdateDownloadProgressWidgets",
          "UpdateIssueState",
          "RequiresDownloadingDependencies",
          "HasItemAnyIssue",
          "OnAnyNewDownload",
          "HandleDownloadChanges",
          "OnAnyDownloadError",
          "HandleDownloadChanges",
          "OnAnyDownloadCompleted",
          "HandleDownloadChanges",
          "OnWorkshopItemChange",
          "UpdateAllWidgets",
          "OnDeleteButton",
          "OnActionButton",
          "OnFixButton",
          "OnUpdateButton",
          "OnOpenDetailsButton",
          "OnEnableButton",
          "HandleEnableButtons",
          "UpdateModularButtons",
          "OnDisableButton",
          "HandleEnableButtons",
          "UpdateModularButtons",
          "OnUpdateTooltipShow",
          "OnIncompatibleTooltipShow",
          "OnSideTooltipShow",
          "OnDependenciesTooltipShow",
          "IsEnabled",
          "Init",
          "UpdateAllWidgets",
          "UpdateModularButtons",
          "GetWorkshopItem",
          "GetErrorFlags",
          "CanBeEnabled",
          "UpdateIssueState",
          "GetOnEnableButton",
          "GetOnDisableButton",
          "GetOnFixButton"
        ]
      },
      {
        "class_name": "SCR_ListAddonsSubMenuWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_WorkshopAddonBarComponent",
        "methods": [
          "HandlerAttached",
          "UpdateAllWidgets",
          "HandleUpdatesButton",
          "HandlerDeattached",
          "OnMenuShow",
          "HandleUpdatesButton",
          "Callback_OnAddonsEnabledChanged",
          "UpdateAllWidgets",
          "OnUsedPresetChanged",
          "UpdateAllWidgets",
          "OnUpdateButtonClicked",
          "OnUpdatePatchSizeLoaded",
          "OnAddonUpdateDialogClose",
          "HandleUpdatesButton",
          "HandleUpdatesButton",
          "DisplayFailDialog",
          "Callback_OnFailDialogConfirm"
        ]
      },
      {
        "class_name": "SCR_WorkshopAddonBarWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_WorkshopAddonLineComponent",
        "methods": [
          "OnClick",
          "OnOpenDetailsButton",
          "UpdateAllWidgets",
          "IsEnabled"
        ]
      },
      {
        "class_name": "SCR_WorkshopAddonPresetAddonMeta",
        "methods": [
          "GetName",
          "GetGuid",
          "Copy",
          "Init"
        ]
      },
      {
        "class_name": "SCR_WorkshopAddonPreset",
        "methods": [
          "GetName",
          "SetName",
          "Init",
          "Copy",
          "GetAddonCount"
        ]
      },
      {
        "class_name": "SCR_WorkshopAddonManagerPresetStorage",
        "methods": [
          "InvokeEventOnUsedPresetChanged",
          "GetEventOnUsedPresetChanged",
          "SCR_WorkshopAddonManagerPresetStorage",
          "ReadPresetsFromStorage",
          "SavePreset",
          "SetUsedPreset",
          "SavePresetsToStorage",
          "CanChangePresetName",
          "SetUsedPreset",
          "SavePresetsToStorage",
          "InvokeEventOnUsedPresetChanged",
          "ClearUsedPreset",
          "SetUsedPreset",
          "GetUsedPreset",
          "DeletePreset",
          "SavePresetsToStorage",
          "ClearUsedPreset",
          "PresetExists",
          "GetPreset",
          "ReadPresetsFromStorage",
          "SavePresetsToStorage",
          "GetPresetId"
        ]
      },
      {
        "class_name": "SCR_WorkshopAddonPresetListItemData",
        "methods": [
          "SCR_WorkshopAddonPresetListItemData"
        ]
      },
      {
        "class_name": "SCR_WorkshopListAddonsSubmenu",
        "methods": [
          "OnTabCreate",
          "CreateNavigationButtons",
          "RefreshAll",
          "OnTabRemove",
          "OnTabShow",
          "RefreshAll",
          "OnTabHide",
          "OnMenuFocusGained",
          "FocusLastWidget",
          "OnMenuShow",
          "RefreshAll",
          "CreateListLines",
          "CreateListLines",
          "FocusFirstLine",
          "CreateListLines",
          "CreateNavigationButtons",
          "UpdateNavigationButtons",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "GetEnableErrorTexture",
          "GetErrorTexture",
          "GetErrorTexture",
          "OnNavEnableActivated",
          "OnNavEnableAllActivated",
          "EnableAll",
          "EnableAll",
          "FocusLastWidget",
          "FocusFirstLine",
          "ApplyLineFocus",
          "ApplyLineFocus",
          "ClosestAddonLine",
          "OnNavDeleteActivated",
          "OnDeleteDialogClose",
          "OnNavOpenDetailsActivated",
          "OnNavUpdateActivate",
          "OnNavDeleteAll",
          "OnDeleteAllEnabled",
          "OnDeleteAllDisabled",
          "OnDeleteAllEnabled",
          "OnDeleteAllDisabled",
          "DeleteAll",
          "OnLineFocus",
          "UpdateNavigationButtons",
          "OnLineFocusLost",
          "UpdateNavigationButtons",
          "OnActionTriggered",
          "OnEnableButton",
          "OnDisableButton",
          "OnToolsButton",
          "OnButtonEnableAll",
          "EnableAll",
          "OnButtonDisableAll",
          "EnableAll",
          "EnableAll",
          "OnAllAddonsEnabled",
          "RefreshAll",
          "Callback_OnAddonOfflineStateChanged",
          "RefreshAll",
          "Callback_OnAddonEnabledStateChanged",
          "RefreshAll",
          "OnDownloadCanceled",
          "RefreshAll",
          "OnInputDeviceIsGamepad",
          "FocusFirstLine"
        ]
      },
      {
        "class_name": "SCR_AddonListDialog",
        "methods": [
          "SCR_AddonListDialog",
          "OnMenuOpen",
          "CreateItemsList",
          "CreateRestrictedAddonsDownload",
          "DisplayRestrictedAddonsList",
          "CreateRestrictedAddonsJoinServer",
          "DisplayRestrictedAddonsList",
          "DisplayRestrictedAddonsList",
          "SCR_AddonListDialog",
          "SCR_ReportedAddonsDialog",
          "CreateFailedToStartWithMods",
          "SCR_AddonListDialog"
        ]
      },
      {
        "class_name": "SCR_DisableDependentAddonsDialog",
        "methods": [
          "SCR_DisableDependentAddonsDialog",
          "CreateDisableDependentAddons",
          "SCR_DisableDependentAddonsDialog",
          "OnConfirm",
          "OnCancel"
        ]
      },
      {
        "class_name": "SCR_DeleteAddonDependentAddonsDetected",
        "methods": [
          "Create",
          "SCR_DeleteAddonDependentAddonsDetected",
          "SCR_DeleteAddonDependentAddonsDetected",
          "OnConfirm"
        ]
      },
      {
        "class_name": "SCR_AddonUpdateConfirmationDialog",
        "methods": [
          "CreateForUpdates",
          "SetupDownloadDialogAddons",
          "CreateAddonList",
          "CreateAddonWidget",
          "CreateAddonWidget",
          "CreateAddonWidget"
        ]
      },
      {
        "class_name": "SCR_BannedAddonsDetectedDialog",
        "methods": [
          "SCR_BannedAddonsDetectedDialog",
          "OnMenuOpen",
          "SetMessage"
        ]
      },
      {
        "class_name": "SCR_CancelDownloadConfirmationDialog",
        "methods": [
          "SCR_CancelDownloadConfirmationDialog",
          "OnMenuOpen",
          "OnConfirm"
        ]
      },
      {
        "class_name": "SCR_CancelMyReportDialog",
        "methods": [
          "SCR_CancelMyReportDialog",
          "OnMenuOpen",
          "SetMessage",
          "OnConfirm",
          "Callback_OnSuccess",
          "Close",
          "Callback_OnFailed",
          "Close",
          "GetWorkshopItemAction"
        ]
      },
      {
        "class_name": "SCR_DeleteAddonDialog",
        "methods": [
          "CreateUnsubscribeAddon",
          "SCR_DeleteAddonDialog",
          "CreateDeleteAddon",
          "SCR_DeleteAddonDialog",
          "SCR_DeleteAddonDialog",
          "OnConfirm"
        ]
      },
      {
        "class_name": "SCR_DeleteAddonsListDialog",
        "methods": [
          "CreateDialog",
          "SCR_DeleteAddonsListDialog",
          "SCR_DeleteAddonsListDialog",
          "OnConfirm"
        ]
      },
      {
        "class_name": "SCR_DownloadConfirmationDialog",
        "methods": [
          "CreateForAddonAndDependencies",
          "SetupDownloadDialogAddons",
          "CreateForAddons",
          "SetupDownloadDialogAddons",
          "OnMenuOpen",
          "OnAllPatchSizeLoaded",
          "LoadAddonPatchSizes",
          "OnAllPatchSizeLoaded",
          "OnAllPatchSizeLoaded",
          "CreateAddonList",
          "CreateAddonWidget",
          "CreateAddonList",
          "CreateAddonWidget",
          "CreateAddonWidget",
          "SetStyleDownloadAddonsWithDependencies",
          "SetStyleDownloadAddons",
          "OnConfirm",
          "OnConfirmAlternative"
        ]
      },
      {
        "class_name": "SCR_DownloadFailDialog",
        "methods": [
          "CreateFailedAddonsDialog",
          "SetupAddons",
          "SetupAddons",
          "OnMenuOpen"
        ]
      },
      {
        "class_name": "SCR_ModDetailsAdditionalInfoDialog",
        "methods": [
          "CreateDialog",
          "OnMenuOpen",
          "OnMenuClose",
          "ClearWorkshopItemInvokers",
          "UpdateWidgets",
          "ClearWorkshopItemInvokers",
          "OnItemLoaded",
          "ClearWorkshopItemInvokers",
          "UpdateWidgets",
          "OnItemLoadTimeout",
          "ClearWorkshopItemInvokers",
          "OnCommStatusCheckFinished",
          "UpdateLicenseButton",
          "OnLicensesButton",
          "SetItem",
          "ClearWorkshopItemInvokers",
          "UpdateWidgets",
          "UpdateWidgets"
        ]
      },
      {
        "class_name": "SCR_ModDetailsAdditionalInfoDialogContentWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_ReportedAddonsDialog",
        "methods": [
          "OnMenuOpen",
          "SetupReports",
          "FocusTopLine",
          "SetupReports",
          "CreateAddonEntry",
          "CreateAuthorEntry",
          "CreateAddonEntry",
          "OnConfirm",
          "OnCancelReportActived",
          "CreateEntry",
          "CreateAddonEntry",
          "OnAddonEntrySelected",
          "OnAddonReportLoadSuccess",
          "OnAddonReportLoadError",
          "CreateAuthorEntry",
          "OnAuthorEntrySelected",
          "AuthorBlockCancelDialog",
          "OnCancelReport",
          "OnAddonEntrySelected",
          "OnAuthorEntrySelected",
          "AuthorBlockCancelDialog",
          "OnAuthorReportLoadResponse",
          "OpenAuthorModsDialog",
          "OpenAuthorModsDialog",
          "OnConfirmRemoveAuthorBlock",
          "OnCancelRemoveAuthorReport",
          "OnRemoveAuthorBlockResponse",
          "DisplayReportCancelSuccess",
          "AllButtonsCanceled",
          "OnReportDialogClose",
          "DisplayReportCancelSuccess",
          "AllButtonsCanceled",
          "Close",
          "InvokeOnAllReportsCanceled",
          "OnCancelRemoveAuthorReport",
          "OnAddonLineFocus",
          "OnCancelReportActived",
          "OnAuthorEntrySelected",
          "OnAddonEntrySelected",
          "OnCancelReportConfirm",
          "OnCancelReportSuccess",
          "DisplayReportCancelSuccess",
          "AllButtonsCanceled",
          "OnCancelReportFail",
          "OnCancelReportDialog",
          "FocusTopLine",
          "InvokeOnAllReportsCanceled",
          "GetOnAllReportsCanceled"
        ]
      },
      {
        "class_name": "SCR_ServerJoinDownloadsConfirmationDialog",
        "methods": [
          "Create",
          "SCR_ServerJoinDownloadsConfirmationDialog",
          "SCR_ServerJoinDownloadsConfirmationDialog",
          "OnMenuOpen"
        ]
      },
      {
        "class_name": "SCR_SimpleEntryListDialog",
        "methods": [
          "OnMenuOpen",
          "CreateDialog",
          "SCR_SimpleEntryListDialog"
        ]
      },
      {
        "class_name": "SCR_WorkshopDialogs",
        "methods": [
          "CreateDialog"
        ]
      },
      {
        "class_name": "SCR_AddonDetailsPanelComponent",
        "methods": [
          "HandlerAttached",
          "UpdateAllWidgets",
          "UpdateAllWidgets",
          "ClearTypeDisplays",
          "UpdateInfo",
          "UpdateTypes",
          "UpdateImage",
          "UpdateDependencies",
          "UpdateErrorMessage",
          "UpdateImage",
          "UpdateInfo",
          "UpdateTypes",
          "ClearTypeDisplays",
          "AddTypeDisplay",
          "UpdateDependencies",
          "UpdateErrorMessage",
          "HandlerDeattached",
          "Callback_OnChanged",
          "UpdateAllWidgets",
          "OnGetAsset",
          "UpdateInfo",
          "UpdateImage",
          "UpdateErrorMessage",
          "SetWorkshopItem",
          "UpdateAllWidgets",
          "GetItem"
        ]
      },
      {
        "class_name": "SCR_BrowserListMenuEntryComponent",
        "methods": [
          "ScriptInvokerBrowserListMenuEntryMethod",
          "HandlerAttached",
          "UpdateModularButtons",
          "OnFavoriteClicked",
          "SetFavorite",
          "SetFavorite",
          "IsFavorite",
          "GetOnFavorite"
        ]
      },
      {
        "class_name": "SCR_ConnectionUICommon",
        "methods": [
          "SetConnectionButtonEnabled",
          "SetConnectionButtonTexture",
          "ForceConnectionButtonEnabled",
          "SetConnectionButtonTexture",
          "SetConnectionButtonTexture",
          "GetConnectionIssuesIcon",
          "GetConnectionIssuesMessage"
        ]
      },
      {
        "class_name": "SCR_ListEntryHelper",
        "methods": [
          "UpdateMouseButtonColor"
        ]
      },
      {
        "class_name": "SCR_ScenarioUICommon",
        "methods": [
          "TryPlayScenario",
          "TryHostScenario",
          "HasSave",
          "IsMultiplayer",
          "IsReady",
          "IsEnabled",
          "IsAddonDownloaded",
          "IsMissingDependencies",
          "AreDependenciesAvailable",
          "GetOwnerRevisionAvailability",
          "IsOwnerRestricted",
          "CanPlay",
          "CanJoin",
          "CanHost",
          "GetInGameScenario",
          "GetPlayHighestPriorityIssue",
          "GetJoinHighestPriorityIssue",
          "GetHostHighestPriorityIssue",
          "GetErrorTexture",
          "GetErrorMessage",
          "SetInputButtonEnabled",
          "UpdateMouseButtonTooltip",
          "UpdatePlayMouseButton",
          "UpdateContinueMouseButton",
          "UpdateRestartMouseButton",
          "UpdatePlayMouseButtonTooltip",
          "UpdatePlayInputButton",
          "UpdateContinueInputButton",
          "UpdateRestartInputButton",
          "UpdateJoinMouseButton",
          "UpdateJoinMouseButtonTooltip",
          "UpdateJoinInputButton",
          "UpdateHostMouseButton",
          "UpdateHostMouseButtonTooltip",
          "UpdateHostInputButton",
          "UpdateInputButtons",
          "UpdateMouseButtonTooltips",
          "UpdatePlayMouseButtonTooltip",
          "UpdateJoinMouseButtonTooltip",
          "UpdateHostMouseButtonTooltip"
        ]
      },
      {
        "class_name": "SCR_WorkshopDownloadSequence",
        "methods": [
          "Create",
          "CreateLoadingOverlay",
          "AllPatchSizeLoaded",
          "HandleError",
          "SetupAddonFail",
          "ShowRestrictedItemDialog",
          "ShowConfirmationUI",
          "OnItemError",
          "HandleError",
          "OnAllDependenciesDetailsLoaded",
          "OnRestrictedDependenciesFound",
          "ShowRestrictedDependenciesDialog",
          "OnItemDependenciesLoaded",
          "ShowRestrictedItemDialog",
          "OnAllDependenciesDetailsLoaded",
          "LoadDependenciesDetails",
          "OnItemGetAsset",
          "OnItemError",
          "OnItemPatchLoaded",
          "HandleError",
          "ShowConfirmationUI",
          "SCR_WorkshopDownloadSequence"
        ]
      },
      {
        "class_name": "SCR_WorkshopSettings",
        "methods": [
          "Get",
          "Save"
        ]
      },
      {
        "class_name": "SCR_WorkshopUiCommon",
        "methods": [
          "OnGameStart",
          "InitAddonTagMaps",
          "TryOpenWorkshop",
          "OnTryOpenWorkshopUgcPrivilegeResult",
          "OnEnableAddonButton",
          "OnEnableAddonToggleButton",
          "OnDeleteAddonButton",
          "ExecutePrimaryAction",
          "SCR_CancelDownloadConfirmationDialog",
          "IsDownloadingAddonOrDependencies",
          "IsDownloadingAddon",
          "GetPrimaryActionState",
          "GetTagImage",
          "GetDefaultAddonThumbnail",
          "GetPrimaryActionName",
          "GetPrimaryActionLook",
          "GetPrimaryActionTooltipMessage",
          "GetVersionDisplayLook",
          "GetRestrictedAddonStateText",
          "GetReportTypeString",
          "UpdateEnableAddonToggleButton",
          "GetDownloadProgressPercentage",
          "GetRatingPercentage",
          "GetUpvotes",
          "GetDownvotes",
          "GetRevisionAvailabilityErrorMessage",
          "GetRevisionAvailabilityErrorMessage",
          "GetRevisionAvailabilityErrorMessageVerbose",
          "GetRevisionAvailabilityErrorMessageVerbose",
          "GetRevisionAvailabilityErrorTexture",
          "GetRevisionAvailabilityErrorTexture",
          "Callback_OnAddonsChecked",
          "SCR_BannedAddonsDetectedDialog",
          "SetAddonEnabled",
          "InitAddonTagMaps"
        ]
      },
      {
        "class_name": "SCR_ContentEntryComponent",
        "methods": [
          "HandlerAttached",
          "SetTextSafe",
          "SetLabelText",
          "SetDescriptionText",
          "SetThumbnail"
        ]
      },
      {
        "class_name": "SCR_ModEntryComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "OnFocus",
          "OnFocusLost",
          "UpdateAllWidgets",
          "SetLabelText",
          "UpdateEachFrame",
          "UpdateDownloadButtonState",
          "OnDownloadClick",
          "DownloadContent",
          "SetModContent",
          "SetModRating",
          "SetModDataSize",
          "DownloadContent",
          "OnDownloadButtonHover",
          "OnDownloadButtonHoverLeave",
          "OnItemDownload",
          "MarkAsUpdated",
          "UpdateDownloadButtonState",
          "GetWorkshopItem",
          "IsUpdated",
          "IsDownloading",
          "GetDependency",
          "Callback_OnChanged",
          "UpdateAllWidgets"
        ]
      },
      {
        "class_name": "ContentBrowserDetailsMenu",
        "methods": [
          "OnMenuOpen",
          "OnNavButtonClose",
          "Close",
          "SetWorkshopItem",
          "Close",
          "OpenForWorkshopItem"
        ]
      },
      {
        "class_name": "SCR_AddonInfoWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserDetails_GalleryComponent",
        "methods": [
          "HandlerAttached",
          "UpdateAllWidgets",
          "HandlerDeattached",
          "SetImages",
          "UpdateAllWidgets",
          "Update",
          "UpdateAllWidgets",
          "UpdateTiles",
          "UpdateTiles",
          "ShowImageOnTile",
          "ShowImageOnTile",
          "ShowImageOnTile",
          "OffsetCurrentItem",
          "UpdateAllWidgets",
          "OnTileClick",
          "OnNextAction",
          "OffsetCurrentItem",
          "OnPrevAction",
          "OffsetCurrentItem",
          "OnNextButton",
          "OffsetCurrentItem",
          "OnPrevButton",
          "OffsetCurrentItem",
          "OnUpdate",
          "UpdateSize"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserDetails_OverviewSubMenu",
        "methods": [
          "SetWorkshopItem",
          "ClearWorkshopItemInvokers",
          "LoadWorkshopDetails",
          "HandlerAttached",
          "HandlerDeattached",
          "StopContinuousUpdate",
          "ClearWorkshopItemInvokers",
          "OnTabCreate",
          "OnTabShow",
          "UpdateAllWidgets",
          "OnTabRemove",
          "ClearWorkshopItemInvokers",
          "UpdateNavigationButtons",
          "OnTabHide",
          "OnMenuFocusGained",
          "UpdateFocus",
          "OnLineFocus",
          "OnLineFocusLost",
          "OnLineMouseEnter",
          "UpdateNavigationButtons",
          "OnLineClick",
          "LineInteractionTryDownload",
          "OnLineDoubleClick",
          "LineInteractionTryDownload",
          "OnPlayInteraction",
          "Play",
          "Join",
          "SetFavorite",
          "OnScenarioStateChanged",
          "HandleDownloadChanges",
          "InitWidgets",
          "UpdateSidePanel",
          "HandleDownloadChanges",
          "UpdateStateFlags",
          "UpdatePrimaryActionButton",
          "UpdateDownloadProgressBar",
          "UpdateDeleteButton",
          "StartContinuousUpdate",
          "StopContinuousUpdate",
          "StartContinuousUpdate",
          "StopContinuousUpdate",
          "ContinuousUpdate",
          "StopContinuousUpdate",
          "UpdatePrimaryActionButton",
          "UpdateDownloadProgressBar",
          "ClearWorkshopItemInvokers",
          "Callback_OnGetAsset",
          "UpdateGallery",
          "UpdateAllWidgets",
          "Callback_OnItemChanged",
          "UpdateAllWidgets",
          "Callback_OnDownloadScenarios",
          "UpdateScenarioLines",
          "Callback_OnTimeout",
          "OnAnyNewDownload",
          "OnAnyDownloadError",
          "HandleDownloadChanges",
          "OnAnyDownloadCompleted",
          "HandleDownloadChanges",
          "OnDeleteButton",
          "OnLicensesButton",
          "OnPrimaryActionButton",
          "OnDependenciesButton",
          "RequestTabChange",
          "OnDependentButton",
          "RequestTabChange",
          "OnVoteUpButton",
          "OnVoteButtons",
          "OnVoteDownButton",
          "OnVoteButtons",
          "OnVoteButtons",
          "UpdateRatingButtons",
          "OnEnableButtonToggled",
          "OnAddonFavouriteButtonToggled",
          "UpdateFavoriteButtonTooltip",
          "OnReportButton",
          "OnReportStateChanged",
          "LoadWorkshopDetails",
          "OnAllMenuCloseJoin",
          "OnDescriptionMouseEnter",
          "Callback_OnLoadMyReportCancel",
          "Callback_OnLoadMyReportSuccess",
          "SCR_CancelMyReportDialog",
          "Callback_OnLoadMyReportError",
          "LoadWorkshopDetails",
          "Callback_OnDownloadScenarios",
          "Callback_OnItemChanged",
          "Callback_OnGetAsset",
          "UpdateAllWidgets",
          "HandleDownloadChanges",
          "UpdateButtons",
          "UpdateScenarioLines",
          "UpdateSizeInfoWidgets",
          "UpdateVersionInfoWidgets",
          "UpdateVersionComboBox",
          "ShowBackendEnv",
          "UpdateStateFlags",
          "UpdateButtons",
          "UpdateEnableButtonTooltip",
          "UpdateReportButtonTooltip",
          "UpdateRatingButtons",
          "UpdateFavoriteButtonTooltip",
          "UpdateDependencyCountButtons",
          "UpdateNavigationButtons",
          "UpdatePrimaryActionButton",
          "UpdatePrimaryActionTooltip",
          "UpdateDeleteButton",
          "UpdateDownloadProgressBar",
          "UpdateRatingButtons",
          "UpdateDependencyCountButtons",
          "UpdateDependenciesTooltip",
          "UpdateTimeInfoWidgets",
          "UpdateSizeInfoWidgets",
          "UpdateVersionInfoWidgets",
          "UpdateGallery",
          "ShowBackendEnv",
          "UpdateVersionComboBox",
          "UpdateScenarioLines",
          "LineInteractionTryDownload",
          "OnPrimaryActionButton",
          "UpdateFocus",
          "HasLicenseOrContributors",
          "OnTooltipShow",
          "UpdatePrimaryActionTooltip",
          "UpdateEnableButtonTooltip",
          "UpdateReportButtonTooltip",
          "UpdateFavoriteButtonTooltip",
          "UpdateDependenciesTooltip",
          "UpdatePrimaryActionTooltip",
          "UpdateEnableButtonTooltip",
          "UpdateReportButtonTooltip",
          "UpdateFavoriteButtonTooltip",
          "UpdateDependenciesTooltip"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserDetails_OverviewSubMenuWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_GalleryDialog",
        "methods": [
          "CreateForImages",
          "OnMenuOpen",
          "OnMenuClose",
          "SetImages",
          "ShowImage",
          "ShowImage",
          "UpdateButtons",
          "UpdateButtons",
          "OffsetCurrentItem",
          "ShowImage",
          "OnBackButton",
          "Close",
          "OnNextButton",
          "OffsetCurrentItem",
          "OnPrevButton",
          "OffsetCurrentItem"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_GalleryDialogWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_GalleryWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ModDetailsSuperMenuComponent",
        "methods": [
          "OnTabCreate",
          "InitDependenciesTab",
          "InitDependentTab",
          "OnMenuClose",
          "SetWorkshopItem",
          "LoadItemDetails",
          "LoadItemDetails",
          "OnDetailsLoaded",
          "OnDetailsLoaded",
          "InitDependenciesTab",
          "InitDependentTab"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserFilterTag",
        "methods": [
          "GetWorkshopTag",
          "RegisterInWorkshopApi"
        ]
      },
      {
        "class_name": "ContentBrowserUI",
        "methods": [
          "Create",
          "OnMenuOpen",
          "OnMenuClose",
          "OnMenuUpdate",
          "LowFreqUpdate",
          "LowFreqUpdate",
          "GetOpenedSubMenu",
          "OpenModManager",
          "_print"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserTileComponent",
        "methods": [
          "HandlerAttached",
          "UpdateWarningOverlay",
          "UpdateHeader",
          "HandlerDeattached",
          "StopContinuousUpdate",
          "OnFocus",
          "UpdateFavouriteButton",
          "UpdateNamesScrolling",
          "UpdateHeader",
          "OnFocusLost",
          "UpdateFavouriteButton",
          "UpdateNamesScrolling",
          "UpdateHeader",
          "UpdateStateFlags",
          "UpdateNames",
          "UpdateNamesScrolling",
          "UpdateRating",
          "UpdateImage",
          "UpdateDependencyCountWidgets",
          "UpdateDependenciesTooltip",
          "UpdateDownloadProgressBar",
          "UpdateFavouriteButton",
          "ShowBackendEnv",
          "UpdateWarningOverlay",
          "UpdateHeader",
          "UpdateHeaderTooltip",
          "UpdateAllWidgets",
          "HandleDownloadChanges",
          "UpdateNames",
          "UpdateNamesScrolling",
          "UpdateRating",
          "UpdateImage",
          "ShowBackendEnv",
          "UpdateFavouriteButton",
          "UpdateDependencyCountWidgets",
          "UpdateEnableButtonTooltip",
          "HandleDownloadChanges",
          "UpdateStateFlags",
          "UpdateDownloadProgressBar",
          "UpdateWarningOverlay",
          "UpdateHeader",
          "StartContinuousUpdate",
          "StopContinuousUpdate",
          "StartContinuousUpdate",
          "StopContinuousUpdate",
          "ContinuousUpdate",
          "StopContinuousUpdate",
          "UpdateDownloadProgressBar",
          "UpdateHeader",
          "OnEnableButtonToggled",
          "OnFavouriteButtonToggled",
          "OnWarningButtonClicked",
          "OnMainActionButtonClicked",
          "OnWorkshopItemChange",
          "UpdateAllWidgets",
          "OnAnyNewDownload",
          "HandleDownloadChanges",
          "OnAnyDownloadError",
          "HandleDownloadChanges",
          "OnAnyDownloadCompleted",
          "HandleDownloadChanges",
          "OnTooltipShow",
          "UpdateDependenciesTooltip",
          "UpdateHeaderTooltip",
          "UpdateEnableButtonTooltip",
          "UpdateDependenciesTooltip",
          "UpdateHeaderTooltip",
          "UpdateEnableButtonTooltip",
          "SetWorkshopItem",
          "UpdateAllWidgets",
          "GetWorkshopItem",
          "GetOnFocus",
          "GetOnFocusLost",
          "GetOnChange",
          "FindComponent",
          "GetTileWidth",
          "GetTileHeight"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_AddonsSubMenu",
        "methods": [
          "OnTabCreate",
          "InitWidgets",
          "GridScreen_Init",
          "InitWorkshopApi",
          "InitWidgetEventHandlers",
          "OnConnected",
          "SetPanelsMode",
          "RequestPage",
          "OnTabShow",
          "InitWorkshopApi",
          "RequestPage",
          "OnTabHide",
          "OnTabRemove",
          "OnMenuShow",
          "InitWorkshopApi",
          "OnMenuUpdate",
          "OnConnected",
          "OnMenuFocusGained",
          "SwitchFocus",
          "InitWidgets",
          "InitWidgetEventHandlers",
          "InitWorkshopApi",
          "RequestPage",
          "GridScreen_Clear",
          "SetPanelsMode",
          "DisplayExternalItems",
          "DisplayOfflineItems",
          "RequestOnlinePageUnfiltered",
          "RequestOnlinePage",
          "PageRequestCallbackCleanup",
          "DisplayExternalItems",
          "SetPanelsMode",
          "GridScreen_DisplayItems",
          "DisplayOfflineItems",
          "SetPanelsMode",
          "UpdateItemsFoundMessage",
          "SetPanelsMode",
          "GridScreen_DisplayItems",
          "GridScreen_Init",
          "GridScreen_Clear",
          "GridScreen_DisplayItems",
          "GridScreen_Clear",
          "SwitchFocus",
          "UpdatePagingWidgets",
          "SetPanelsMode",
          "SwitchFocus",
          "UpdateNavigationButtons",
          "UpdateItemsFoundMessage",
          "GetSelectedItem",
          "UpdatePagingWidgets",
          "UpdateNavigationButtons",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "IsWidgetUnderCursor",
          "SwitchFocus",
          "OnInputDeviceUserChanged",
          "UpdateNavigationButtons",
          "OnConnected",
          "InitWorkshopApi",
          "RequestPage",
          "OnTileClick",
          "OnTileFocus",
          "UpdateNavigationButtons",
          "OnTileFocusLost",
          "UpdateNavigationButtons",
          "OnTileStateChange",
          "UpdateNavigationButtons",
          "OnFilterPanelToggled",
          "SwitchFocus",
          "SwitchFocus",
          "OnInputAction",
          "OnFilterButton",
          "OnPrimaryButton",
          "ExecuteItemPrimaryAction",
          "ExecuteItemPrimaryAction",
          "OnEnableButton",
          "SetItemEnabled",
          "SetItemEnabled",
          "OnFavouriteButton",
          "SetItemFavorite",
          "SetItemFavorite",
          "OnDetailsButton",
          "OpenItemDetails",
          "OpenItemDetails",
          "OnTileClick",
          "Callback_OnRequestPageGetAllAssets",
          "PageRequestCallbackCleanup",
          "UpdateItemsFoundMessage",
          "Callback_OnRequestPageGetAssets",
          "PageRequestCallbackCleanup",
          "UpdateItemsFoundMessage",
          "SetPanelsMode",
          "GridScreen_DisplayItems",
          "Callback_OnRequestPageTimeout",
          "PageRequestCallbackCleanup",
          "RequestPage",
          "Callback_OnRequestPageTimeout_OnCloseDialog",
          "SetPanelsMode",
          "RequestTabChange",
          "Callback_OnRequestPageTimeout_OnDialogTryAgain",
          "RequestPage",
          "Callback_OnAddonOfflineStateChanged",
          "RequestPage",
          "Callback_OnAddonReportedStateChanged",
          "RequestPage",
          "OnPrevPageButton",
          "RequestPage",
          "UpdatePagingWidgets",
          "OnNextPageButton",
          "RequestPage",
          "UpdatePagingWidgets",
          "OnScrollPage",
          "OnNextPageButton",
          "OnPrevPageButton",
          "OnMouseWheelSoundCooldownEnd",
          "OnFilterChange",
          "RequestPage",
          "OnFilterSearchConfirm",
          "RequestPage",
          "OnSortingHeaderChange",
          "RequestPage",
          "Filter_IntersectArrays",
          "PackGetAssetListParams",
          "SetWorkshopItems",
          "RequestPage"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_GetAssetListParams",
        "methods": [
          "SCR_ContentBrowser_GetAssetListParams",
          "OnPack",
          "Compare",
          "Compare",
          "Compare",
          "Compare"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_AddonsSubMenuBaseWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_AddonsTooltipComponent",
        "methods": [
          "HandlerAttached",
          "Init",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_ListTooltipComponent",
        "methods": [
          "HandlerAttached",
          "Init",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_WorkshopTileWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_ScenarioLineComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "UpdateModularButtons",
          "SetFavorite",
          "OnTooltipShow",
          "UpdateAllWidgets",
          "UpdateModularButtons",
          "OnPlay",
          "OnContinue",
          "OnRestart",
          "OnHost",
          "OnFindServers",
          "OnCommStatusCheckFinished",
          "UpdateModularButtons",
          "NotifyScenarioUpdate",
          "UpdateModularButtons",
          "UpdateAllWidgets",
          "SetScenario",
          "UpdateAllWidgets",
          "GetScenario",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_ScenarioLineWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_ScenarioSubMenu",
        "methods": [
          "OnTabCreate",
          "InitWidgets",
          "UpdateScenarioList",
          "OnTabShow",
          "InitWorkshopApi",
          "OnTabHide",
          "OnMenuFocusGained",
          "InitWidgets",
          "UpdateNavigationButtons",
          "Play",
          "Continue",
          "OnRestartConfirmed",
          "OnScenarioStateChanged",
          "UpdateNavigationButtons",
          "UpdateScenarioList",
          "ScenarioList_ClearMissionEntries",
          "SetPanelsMode",
          "ScenarioList_ClearMissionEntries",
          "SetPanelsMode",
          "ScenarioList_ClearMissionEntries",
          "SetPanelsMode",
          "ScenarioList_ClearMissionEntries",
          "SetPanelsMode",
          "SetPanelsMode",
          "ScenarioList_CreateMissionEntries",
          "SearchStringLocalized",
          "ScenarioList_ClearMissionEntries",
          "ScenarioList_CreateMissionEntries",
          "ScenarioList_ClearMissionEntries",
          "OnSearchConfirm",
          "UpdateScenarioList",
          "OnSortingHeaderChange",
          "UpdateScenarioList",
          "SetPanelsMode",
          "Compare",
          "ResolveName",
          "Compare",
          "ResolveAddonName",
          "Compare",
          "Compare",
          "Compare"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_ScenarioSubMenuWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ScenarioDialogs",
        "methods": [
          "CreateDialog",
          "CreateScenarioConfirmationDialog"
        ]
      },
      {
        "class_name": "SCR_ScenarioConfirmationDialogUi",
        "methods": [
          "SCR_ScenarioConfirmationDialogUi",
          "OnMenuOpen",
          "OnMenuClose",
          "OnButtonPressed",
          "Close",
          "SetTitle",
          "CreateButton",
          "OnCommStatusCheckFinished",
          "OnFavoritesButton",
          "UpdateFavoriteWidgets",
          "UpdateFavoriteWidgets",
          "GetScenario",
          "GetOnFavorite"
        ]
      },
      {
        "class_name": "SCR_ScenarioMenu",
        "methods": [
          "OnMenuOpen"
        ]
      },
      {
        "class_name": "SCR_ContentBrowser_ScenarioSubMenuBase",
        "methods": [
          "HandlerAttached",
          "InitWidgets",
          "OnTabCreate",
          "UpdateNavigationButtons",
          "OnMenuUpdate",
          "UpdateNavigationButtons",
          "OnTabShow",
          "OnTabHide",
          "UpdateNavigationButtons",
          "OnMenuFocusGained",
          "UpdateNavigationButtons",
          "OnMenuShow",
          "OnCommStatusCheckFinished",
          "UpdateNavigationButtons",
          "OnLineFocus",
          "UpdateNavigationButtons",
          "UpdateSidePanel",
          "OnLineFocusLost",
          "UpdateSidePanel",
          "OnLineMouseEnter",
          "OnLineMouseClick",
          "OnLineFavorite",
          "OnScenarioStateChanged",
          "UpdateSidePanel",
          "OnActionTriggered",
          "Host",
          "OnInteractionButtonPressed",
          "OnConfirmationDialogButtonPressed",
          "SwitchOnButton",
          "OnLineClickInteraction",
          "OnLineClick",
          "OnPlayInteraction",
          "OnPlayInteraction",
          "OnLineDoubleClick",
          "OnFavouriteButton",
          "OnPlayInteraction",
          "Continue",
          "Play",
          "Play",
          "Continue",
          "Restart",
          "OnRestartConfirmed",
          "Join",
          "Host",
          "SetFavorite",
          "CreateLines",
          "InitWidgets",
          "InitWorkshopApi",
          "UpdateSidePanel",
          "UpdateNavigationButtons",
          "GetSelectedLine",
          "GetLineUnderCursor",
          "GetSelectedScenario",
          "GetOnLineFavorite"
        ]
      },
      {
        "class_name": "SCR_DebriefingScreenMenu",
        "methods": [
          "OnMenuOpen",
          "Close",
          "UpdatePlayerCount",
          "UpdateElapsedTime",
          "ReturnToMenu",
          "BackToMainMenuPopupConfirm",
          "OpenDebriefingScreenMenu",
          "CloseDebriefingScreenMenu"
        ]
      },
      {
        "class_name": "SCR_DeployMenuBase",
        "methods": [
          "OnSpawnPointRplIdSet",
          "OnMenuOpen",
          "OnMenuOpened",
          "MuteSounds",
          "OnMenuClose",
          "MuteSounds",
          "OnMenuHide",
          "MuteSounds",
          "OpenPlayerList",
          "MuteSounds",
          "OnEditorLimitedChanged",
          "SGetOnMenuOpen"
        ]
      },
      {
        "class_name": "SCR_DeployMenuMain",
        "methods": [
          "GetLoadoutCost",
          "AllowMapContext",
          "GetAllowMapContext",
          "OnMenuOpen",
          "ResetRespawnResultVars",
          "FindRequestHandlers",
          "HookEvents",
          "InitMapDeploy",
          "OnMenuHide",
          "OnMenuFocusLost",
          "OnMenuFocusGained",
          "NextSpawn",
          "PrevSpawn",
          "OnMenuOpened",
          "OnMenuClose",
          "OnMenuUpdate",
          "UpdateRespawnButton",
          "ResetRespawnResultVars",
          "OnCanRespawnRequestResponse",
          "UpdateRespawnButton",
          "UpdateRespawnButton",
          "UpdateRespawnButton",
          "FindRequestHandlers",
          "HookEvents",
          "OnMapOpen",
          "OnLocalPlayerGroupJoined",
          "InitMapDeploy",
          "SetSpawnPointExt",
          "SetInitialSpawnPoint",
          "SetSpawnPoint",
          "SetSpawnPoint",
          "ResetRespawnResultVars",
          "FocusOnPoint",
          "UpdateRespawnButton",
          "FocusOnPoint",
          "HideLoading",
          "RequestRespawn",
          "UpdateRespawnButton",
          "OnPlayerFactionRequest",
          "OnPlayerFactionResponse",
          "OnPlayerFactionSet",
          "OnPlayerLoadoutRequest",
          "OnPlayerLoadoutResponse",
          "OnPlayerFactionSet",
          "OnChatToggle",
          "OnPauseMenu",
          "OnRespawnRequest",
          "UpdateRespawnButton",
          "OnRespawnResponse",
          "UpdateRespawnButton",
          "OpenGroupMenu",
          "OpenDeployMenu",
          "GetDeployMenu",
          "CloseDeployMenu",
          "GetDeployMenu",
          "GetSpawnPointRequestHandler",
          "GetOnSpawnPointRplIdSet"
        ]
      },
      {
        "class_name": "SCR_DeployButton",
        "methods": [
          "HandlerAttached",
          "SetSuppliesEnabled",
          "SetSupplyCost",
          "GetSupplyCost",
          "SetText",
          "UpdateSpinner",
          "ShowLoading",
          "UpdateBackground"
        ]
      },
      {
        "class_name": "SCR_DeployMenuHandler",
        "methods": [
          "HandlerAttached",
          "ForceHUDLayout",
          "HandlerDeattached",
          "OnPauseMenuOpened",
          "UpdateWidgetsOnPause",
          "OnPauseMenuClosed",
          "UpdateWidgetsOnPause",
          "ForceHUDLayout",
          "UpdateWidgetsOnPause",
          "ForceHUDLayout",
          "GetFactionRequestHandler",
          "GetLoadoutRequestHandler",
          "GetGroupRequestHandler",
          "GetSpawnPointRequestHandler",
          "GetFactionPlayerList",
          "GetGroupPlayerList"
        ]
      },
      {
        "class_name": "SCR_DeployRequestUIBaseComponent",
        "methods": [
          "HandlerAttached",
          "Update",
          "Lock",
          "Unlock",
          "IsEnabled",
          "GetFirstValidButton",
          "ToggleCollapsed",
          "SetExpanded",
          "IsExpanded",
          "OnListExpand",
          "SetExpanded",
          "SetListWidget",
          "GetListWidget",
          "OnMouseLeft",
          "GetOnButtonFocused",
          "GetOnMouseLeft",
          "GetOnListCollapse"
        ]
      },
      {
        "class_name": "SCR_DeployButtonBase",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "OnFocus",
          "OnFocusLost",
          "GetList",
          "GetGridList",
          "ExpandList",
          "CollapseList",
          "SetParentHandler",
          "HideTooltip",
          "Update",
          "Lock",
          "SetEnabled",
          "Unlock",
          "SetEnabled",
          "SetSelected",
          "SetFocused",
          "OnClick",
          "SetEnabled",
          "OnEnabled",
          "OnDisabled",
          "ShouldUnlock",
          "SetShouldUnlock",
          "ShouldShowTooltip",
          "SetTooltipAvailable",
          "OnTooltipShow"
        ]
      },
      {
        "class_name": "SCR_PlayerList",
        "methods": [
          "HandlerAttached",
          "UpdatePlayerList",
          "ShowPlayerList",
          "CreatePlayerName"
        ]
      },
      {
        "class_name": "SCR_FactionPlayerList",
        "methods": [
          "HandlerAttached",
          "SetFaction",
          "UpdatePagination",
          "UpdatePlayerList",
          "UpdatePagination",
          "SetLastIndex",
          "HandleNavigationButtons",
          "GetStartingIndex",
          "HandleNavigationButtons",
          "SetLastIndex",
          "UpdatePlayerList",
          "CreatePlayerName",
          "HandlerDeattached"
        ]
      },
      {
        "class_name": "SCR_GroupPlayerList",
        "methods": [
          "SetGroup",
          "UpdatePlayerList",
          "UpdatePlayerList",
          "CreatePlayerName"
        ]
      },
      {
        "class_name": "SCR_PlayerName",
        "methods": [
          "HandlerAttached",
          "SetIcon",
          "SetPlayer",
          "SetPlatform",
          "GetPlayerId",
          "SetPlatform"
        ]
      },
      {
        "class_name": "SCR_FactionRequestUIComponent",
        "methods": [
          "HandlerAttached",
          "ShowAvailableFactions",
          "ShowAvailableFactions",
          "OnPlayerFactionAssigned",
          "OnPlayableFactionChanged",
          "UpdateFactionButtons",
          "OnButtonFocused",
          "RequestPlayerFaction",
          "Lock",
          "OnButtonClicked",
          "RequestPlayerFaction",
          "OnFactionDialogConfirm",
          "RequestPlayerFaction",
          "RequestRandomFaction",
          "GetFactionButton",
          "GetOnFactionRequested"
        ]
      },
      {
        "class_name": "SCR_FactionButton",
        "methods": [
          "HandlerAttached",
          "SetFaction",
          "UpdatePlayerCount",
          "GetFaction",
          "GetPlayerCount",
          "UpdatePlayerCount",
          "SetFactionName",
          "SetSelected"
        ]
      },
      {
        "class_name": "SCR_GroupRequestUIComponent",
        "methods": [
          "HandlerAttached",
          "ToggleCollapsed",
          "SetExpanded",
          "SetExpanded",
          "IsExpanded",
          "HandlerDeattached",
          "UpdateGroupPlayers",
          "UpdateNewGroupButton",
          "UpdateLocalPlayerGroup",
          "UpdateNewGroupButton",
          "UpdateGroupPrivacy",
          "UpdateNewGroupButton",
          "UpdateGroupNames",
          "UpdateGroupFrequency",
          "UpdateGroupFlag",
          "SetPlayerGroup",
          "ShowAvailableGroups",
          "ClearGroupList",
          "CreateNewGroupButton",
          "JoinGroupAutomatically",
          "RequestNewGroup",
          "RemoveGroup",
          "UpdateNewGroupButton",
          "CreateNewGroupButton",
          "UpdateNewGroupButton",
          "UpdateNewGroupButton",
          "RequestNewGroup",
          "AddGroup",
          "UpdateNewGroupButton",
          "UpdateNewGroupButton",
          "OnButtonFocused",
          "RequestJoinGroup",
          "GetGroupButton",
          "GetGroupList",
          "GetPlayerGroup",
          "SetListWidget",
          "ClearGroupList",
          "ClearGroupList",
          "GetShownGroupId",
          "SetShownGroupId",
          "GetOnPlayerGroupJoined",
          "GetOnLocalPlayerGroupJoined"
        ]
      },
      {
        "class_name": "SCR_GroupButton",
        "methods": [
          "HandlerAttached",
          "SetGroup",
          "UpdateGroup",
          "UpdateGroupFrequency",
          "UpdateGroupFlag",
          "SetEnabled",
          "UpdateGroupName",
          "GetGroupName",
          "SGetGroupName",
          "GetGroupId",
          "GetGroup",
          "UpdateGroupPrivacy",
          "UpdateButtonAvailability",
          "SetEnabled",
          "SetGroupFull",
          "SetText",
          "UpdateGroupFrequency",
          "UpdateGroupFlag",
          "SetImage",
          "SetImage",
          "SetImage",
          "SetImage",
          "SetSelected"
        ]
      },
      {
        "class_name": "SCR_JournalSetupConfig",
        "methods": [
          "GetJournalConfig",
          "GetJournalEntryToBeShown"
        ]
      },
      {
        "class_name": "SCR_JournalConfig",
        "methods": [
          "GetFactionKey"
        ]
      },
      {
        "class_name": "SCR_JournalEntry",
        "methods": [
          "GetEntryID",
          "GetEntryName",
          "GetCustomEntryName",
          "SetEntryText",
          "GetEntryText",
          "GetEntryTextWithParam1",
          "SetEntryTextParam1",
          "GetEntryTextParam1",
          "GetWidget",
          "SetEntryLayoutTo",
          "GetEntryButtonLayout"
        ]
      },
      {
        "class_name": "SCR_LoadoutGallery",
        "methods": [
          "OnLoadoutFocusLostDelegate",
          "HandlerAttached",
          "EnablePagingInputListeners",
          "GetOnFocusChange",
          "SetGalleryFocused",
          "OnFocus",
          "SetGalleryFocused",
          "OnFocusLost",
          "SetGalleryFocused",
          "GetFocused",
          "EnablePagingInputListeners",
          "AddItem",
          "ShowPagingButtons",
          "ShowPagingButtons",
          "OnLoadoutClicked",
          "OnLoadoutHovered",
          "OnLoadoutFocusLost",
          "OnLoadoutMouseLeave",
          "OnLoadoutFocusLost",
          "GetContentRoot",
          "SetSelected",
          "ClearAll",
          "GetButtonForLoadout",
          "GetOnLoadoutClicked",
          "GetOnLoadoutHovered",
          "GetOnLoadoutFocusLost"
        ]
      },
      {
        "class_name": "SCR_LoadoutRequestUIComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "ToggleCollapsed",
          "SetExpanded",
          "SetExpanded",
          "IsExpanded",
          "OnLoadoutsChanged",
          "OnPlayerLoadoutAssigned",
          "ShowAvailableLoadouts",
          "ResetPlayerLoadoutPreview",
          "ShowPlayerLoadouts",
          "SetListVisible",
          "ClearLoadoutList",
          "CreatePlayerLoadoutButton",
          "CreateEmptySlot",
          "ClearLoadoutList",
          "CreatePlayerLoadoutButton",
          "CreateEmptySlot",
          "UpdateLoadouts",
          "RequestPlayerLoadout",
          "Lock",
          "SetLoadoutPreview",
          "OnButtonFocused",
          "OnButtonFocusLost",
          "GetOnPlayerEntryFocused",
          "GetOnPlayerEntryFocusLost",
          "RequestRandomLoadout",
          "SetSelected",
          "OnSpawnPointChanged",
          "RefreshLoadoutPreview",
          "OnLoadoutSpawnCostMultiplierChanged",
          "RefreshLoadoutPreview",
          "RegisterOnSpawnPointInvoker",
          "GetLoadoutCost",
          "SetLoadoutPreview",
          "RefreshLoadoutPreview",
          "SetLoadoutPreview",
          "GetPlayerLoadout",
          "AddLoadout",
          "ResetPlayerLoadoutPreview",
          "SetListVisible",
          "ShowLoadoutSelector",
          "GetUIInfo",
          "SetListWidget",
          "ClearLoadoutList",
          "IsSelectorFocused"
        ]
      },
      {
        "class_name": "SCR_LoadoutButton",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "OnFocus",
          "ShowBorder",
          "ShowBorder",
          "OnFocusLost",
          "ShowBorder",
          "ShowBorder",
          "SetLoadout",
          "SetPlayer",
          "OnLeaderChanged",
          "SetIsLeader",
          "GetPlayerId",
          "IsSelected",
          "SetSelected",
          "ShowBorder",
          "SetPlayerName",
          "GetLoadout",
          "GetUIInfo"
        ]
      },
      {
        "class_name": "SCR_PersistentFactionDialog",
        "methods": [
          "CreatePersistentFactionDialog",
          "GetRequestedFactionIndex",
          "HandlerAttached",
          "HandlerDeattached",
          "OnConfirm",
          "Toggle",
          "CanCreateDialog"
        ]
      },
      {
        "class_name": "SCR_RoleSelectionMenu",
        "methods": [
          "OnMenuOpen",
          "UpdateElapsedTime",
          "UpdatePlayerCount",
          "FindRequestHandlers",
          "HookEvents",
          "UpdateViewProfileButton",
          "InitMapPlain",
          "OnMenuOpened",
          "OnMenuUpdate",
          "UpdateElapsedTime",
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "FindRequestHandlers",
          "HookEvents",
          "UpdateElapsedTime",
          "UpdatePlayerCount",
          "InitMapPlain",
          "OnMouseLeft",
          "ShowLoadoutList",
          "ShowFactionPlayerList",
          "ShowLoadoutList",
          "UpdatePlayerCount",
          "CanContinue",
          "CanOpenGroupMenu",
          "OpenGroupMenu",
          "OnPlayerFactionRequest",
          "OnPlayerFactionResponse",
          "OnPlayerGroupJoined",
          "OnLocalGroupJoined",
          "OnPlayerGroupJoined",
          "OnPlayerLoadoutRequest",
          "OnPlayerLoadoutResponse",
          "OnChatToggle",
          "OnPauseMenu",
          "UpdateViewProfileButton",
          "OnMenuClose",
          "OnPlayerEntryFocused",
          "UpdateViewProfileButton",
          "OnPlayerEntryFocusLost",
          "UpdateViewProfileButton",
          "OnViewProfile",
          "UpdateViewProfileButton",
          "OpenRoleSelectionMenu",
          "GetRoleSelectionMenu",
          "CloseRoleSelectionMenu",
          "GetRoleSelectionMenu"
        ]
      },
      {
        "class_name": "SCR_SpawnPointRequestUIComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "SelectSpawnPoint",
          "SetSpawnPoint",
          "AddSpawnPoint",
          "RemoveSpawnPoint",
          "UpdateSpawnPointName",
          "OnSpawnPointAdded",
          "AddSpawnPoint",
          "OnSpawnPointFactionChange",
          "AddSpawnPoint",
          "RemoveSpawnPoint",
          "ClearSpawnPoints",
          "ShowAvailableSpawnPoints",
          "ClearSpawnPoints",
          "AddSpawnPoint",
          "UpdateRelevantSpawnPoints",
          "RemoveSpawnPoint",
          "AddSpawnPoint",
          "SelectSpawnPointExt",
          "GetOnSpawnPointSelected",
          "SGetOnSpawnPointSelected",
          "GetCurrentRplId",
          "IsSelectorFocused"
        ]
      },
      {
        "class_name": "SCR_SpawnPointSpinBox",
        "methods": [
          "OnFocus",
          "OnFocusLost",
          "AddItem",
          "SetInitialState",
          "RemoveItem",
          "ClearAll",
          "GetSpawnPointId",
          "GetItemId",
          "IsEmpty",
          "SetItemName",
          "SetInitialState",
          "IsFocused"
        ]
      },
      {
        "class_name": "SCR_SpawnPreload",
        "methods": [
          "PreloadSpawnPosition",
          "SCR_SpawnPreload"
        ]
      },
      {
        "class_name": "SCR_WelcomeScreenMenu",
        "methods": [
          "OnMenuOpen",
          "Close",
          "UpdatePlayerCount",
          "UpdateElapsedTime",
          "InitMap",
          "OnMenuOpened",
          "MuteSounds",
          "InitMap",
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "OpenPauseMenu",
          "OpenWelcomeScreenMenu",
          "CloseWelcomeScreenMenu",
          "OnMenuUpdate",
          "UpdateElapsedTime",
          "OnChatToggle",
          "UpdateElapsedTime",
          "UpdatePlayerCount",
          "UpdatePlayerCount"
        ]
      },
      {
        "class_name": "SCR_MessageDialogContent",
        "methods": [
          "HandlerAttached",
          "SetMessage",
          "GetMessage"
        ]
      },
      {
        "class_name": "SCR_EditboxDialogUi",
        "methods": [
          "InitWidgets",
          "OnMenuOpen",
          "OnWriteModeLeave",
          "OnTextChange",
          "DisplayWarningMessage",
          "SetWarningMessage",
          "GetEditbox"
        ]
      },
      {
        "class_name": "SCR_ErrorDialog",
        "methods": [
          "HandlerAttached",
          "SetErrorMessage",
          "GetErrorMessage",
          "SetErrorDetail",
          "FindErrorComponent"
        ]
      },
      {
        "class_name": "SCR_GamepadRemovalUI",
        "methods": [
          "OnMenuOpen",
          "OnMenuClose",
          "OpenGamepadRemovalDialog",
          "GetOnGamepadRemovalDialogOpen",
          "GetOnGamepadRemovalDialogClose"
        ]
      },
      {
        "class_name": "SCR_KickDialogCutomTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_ModReportDialogComponent",
        "methods": [
          "OpenSelectReport",
          "OpenSelectReportAuthor",
          "OpenReportAuthorModList",
          "OpenRemoveAuthorBlockModList",
          "OnSelectReportConfirm",
          "OpenReportThis",
          "OnSelectReportAuthor",
          "OpenSelectReportAuthor",
          "OpenReportThis",
          "OnItemReportedSuccessfully",
          "OnItemReportSuccessDialogClose",
          "OnCancelThisReport",
          "OpenSelectReport",
          "OpenReportAuthorModList",
          "OpenAuthorModsDialog",
          "OpenRemoveAuthorBlockModList",
          "OpenAuthorModsDialog",
          "OnConfirmReportAuthorModList",
          "OnCancelReportAuthorModList",
          "OnConfirmRemoveAuthorBlock",
          "OnCancelReportAuthorModList",
          "OnAuthorReportFail",
          "CloseDialogs",
          "OnAuthorReportSuccess",
          "OnItemReportedSuccessfully",
          "CloseDialogs",
          "CloseDialogs",
          "OnCancelReportAuthorModList",
          "OnRemoveAuthorBlockSuccess",
          "OnCancelRemoveAuthorReport",
          "OnCancelAuthorReport",
          "GetOnItemReportSuccessDialogClose"
        ]
      },
      {
        "class_name": "SCR_RejoinDialog",
        "methods": [
          "InvokeEventOnTimerChanged",
          "GetEventOnTimerChanged",
          "HandlerAttached",
          "DecreaseTime",
          "InvokeEventOnTimerChanged",
          "RunTimer",
          "SetTimer",
          "InvokeEventOnTimerChanged",
          "GetTimer",
          "ShowLoading",
          "FindRejoinComponent"
        ]
      },
      {
        "class_name": "SCR_TabDialog",
        "methods": [
          "OnMenuOpen",
          "OnMenuShow",
          "OnMenuHide",
          "OnMenuUpdate",
          "OnMenuClose",
          "OnMenuFocusGained",
          "OnMenuFocusLost"
        ]
      },
      {
        "class_name": "WelcomeDialogUI",
        "methods": [
          "OnMenuOpen",
          "ShowIndex",
          "OnMenuUpdate",
          "OnConfirm",
          "OnPrevious",
          "ShowIndex",
          "OnNext",
          "ShowIndex",
          "OnLinkButtonFocus",
          "ShowIndex"
        ]
      },
      {
        "class_name": "DialogUI",
        "methods": [
          "OnMenuOpen",
          "SetDialogType",
          "OnMenuInit",
          "OnMenuClose",
          "OnMenuUpdate",
          "OnConfirm",
          "Close",
          "OnCancel",
          "Close",
          "SetDialogType",
          "SetTitle",
          "GetTitle",
          "SetMessage",
          "GetMessage",
          "SetConfirmText",
          "SetCancelText",
          "SetType",
          "SetTitleIcon",
          "SetTitleIcon",
          "CloseAnimated",
          "GetFooterComponent"
        ]
      },
      {
        "class_name": "SCR_AddonPatchSizeLoader",
        "methods": [
          "ScriptInvoker_AddonPatchSizeLoad",
          "InsertItem",
          "RemoveItem",
          "ClearItems",
          "LoadPatchSizes",
          "OnPatchSizeLoadResponse"
        ]
      },
      {
        "class_name": "SCR_BackendCallbackWorkshopItem",
        "methods": [
          "GetItem",
          "SCR_BackendCallbackWorkshopItem"
        ]
      },
      {
        "class_name": "SCR_DownloadSequence",
        "methods": [
          "ScriptInvoker_DownloadSequence",
          "ScriptInvoker_DownloadSequenceDependencies",
          "Create",
          "Init",
          "OnAllDependenciesDetailsLoaded",
          "LoadDependenciesDetails",
          "ShowRestrictedDependenciesDialog",
          "Cancel",
          "Setup",
          "HasAllDetails",
          "LoadDependenciesDetails",
          "OnAllDependenciesDetailsLoaded",
          "OnDependencyDetailsLoaded",
          "OnAllDependenciesDetailsLoaded",
          "AllPatchSizeLoaded",
          "OnDependencyPatchSizeLoadResponse",
          "OnDependencyPatchSizeLoadResponse",
          "AllPatchSizeLoaded",
          "OnAllReportsCanceled",
          "OnAllDependenciesDetailsLoaded",
          "OnDependencyDetailsLoaded",
          "OnAllDependenciesDetailsLoaded",
          "OnDependencyPatchSizeLoadResponse",
          "CheckAllPatchSizeLoaded",
          "SetDependencySize",
          "CheckAllPatchSizeLoaded",
          "CheckAllPatchSizeLoaded",
          "AllPatchSizeLoaded",
          "OnItemError",
          "OnItemTimeout",
          "GetRestrictedAddons",
          "GetBlockedAddons"
        ]
      },
      {
        "class_name": "SCR_DownloadConfirmationDialogContentWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DownloadConfirmationDialogWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DownloadManagerClass",
        "methods": [
          "ScriptInvoker_DownloadManagerAction",
          "ScriptInvoker_DownloadManagerActionError"
        ]
      },
      {
        "class_name": "SCR_DownloadManager",
        "methods": [
          "InvokeEventOnDownloadFail",
          "GetEventOnDownloadFail",
          "GetOnDownloadQueueCompleted",
          "GetOnAllDownloadsStopped",
          "GetInstance",
          "GetAllDownloads",
          "GetDownloadQueueState",
          "HasRunningDownloads",
          "DownloadingActionAddonById",
          "GetActionOfItem",
          "SetDownloadsPaused",
          "PauseAction",
          "PauseAction",
          "GetDownloadsPaused",
          "EndAllDownloads",
          "IsDownloadingActionRequired",
          "IsLatestDownloadRequired",
          "SelectAddonsForLatestDownload",
          "DownloadDependecies",
          "GetTotalSizeBytes",
          "DownloadQueueSize",
          "GetTotalSizeBytes",
          "GetDownloadActionsProgress",
          "GetItemDownloadActionsProgress",
          "ClearFailedDownloads",
          "AddDownloadManagerEntry",
          "RemoveSameAddonFromDownloads",
          "RemoveSameAddonFromDownloads",
          "GetDownloadQueueSize",
          "GetDownloadedSize",
          "EOnFrame",
          "ClearUnfinishedAction",
          "EOnInit",
          "Callback_OnNewDownload",
          "RemoveSameAddonFromDownloads",
          "OnDownloadProgress",
          "Callback_OnDownloadCompleted",
          "Callback_OnFailed",
          "Callback_OnFullStorageError",
          "Callback_OnCanceled",
          "ForceFailRunningDownloads",
          "DownloadAddons",
          "OnDownloadAddonsReady",
          "ClearUnfinishedAction",
          "SCR_DownloadManager",
          "SetEventMask",
          "SetFlags",
          "_print"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_Entry",
        "methods": [
          "SCR_DownloadManager_Entry"
        ]
      },
      {
        "class_name": "SCR_DownloadManagerEntry",
        "methods": [
          "ScriptInvoker_DownloadManagerEntry",
          "HandlerAttached",
          "AnimateIcon",
          "OnMouseEnter",
          "UpdateButtons",
          "OnMouseLeave",
          "UpdateButtons",
          "SetupWidgets",
          "FallbackVisuals",
          "FallbackVisuals",
          "UpdateProgressWidgets",
          "UpdateButtons",
          "UpdateMessage",
          "UpdateMessage",
          "StateMessage",
          "UpdateButtons",
          "CanDoActions",
          "StateMessage",
          "FailReason",
          "FailReason",
          "AnimateIcon",
          "DisablePauserResume",
          "EnablePauserResume",
          "OnActionChanged",
          "UpdateProgressWidgets",
          "DownloadActionState",
          "InitForDownloadAction",
          "SetupWidgets",
          "UpdateProgressWidgets",
          "CanDoActions",
          "OnClickPause",
          "UpdateProgressWidgets",
          "OnClickResume",
          "UpdateProgressWidgets",
          "OnClickCancel",
          "UpdateProgressWidgets",
          "OnClickRetry",
          "UpdateProgressWidgets",
          "GetItem",
          "GetDownloadAction",
          "GetState",
          "GetPauseEnabled"
        ]
      },
      {
        "class_name": "SCR_DownloadManagerListComponent",
        "methods": [
          "HandlerAttached",
          "OnTabShow",
          "UpdateNavButtons",
          "OnTabCreate",
          "OnMenuFocusGained",
          "AddEntry",
          "ShowFallbackText",
          "ChangeEntryCategory",
          "RemoveEntry",
          "DownloadActionLine",
          "EntryWithItem",
          "FocusedEntry",
          "ShowPauseResumeAllButton",
          "SetNavigationButtonVisibile",
          "ShowFallbackText",
          "HasContent",
          "OnEntryFocus",
          "UpdateNavButtons",
          "OnEntryFocusLost",
          "UpdateNavButtons",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "OnClickPauseResume",
          "OnClickCancel",
          "OnClickRetry",
          "OnClickPauseResumeAll",
          "EnablePauseResumeAll",
          "FocusFirstLine"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_AddonDownloadLine",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "InitForDownloadAction",
          "Update",
          "InitForCancelDownloadAction",
          "Update",
          "InitForServerDownloadAction",
          "Update",
          "InitForServerBrowser",
          "InitForWorkshopItem",
          "InitForWorkshopItem",
          "DisplayActionIcon",
          "DisplayError",
          "GetItem",
          "GetRootWidget",
          "GetDownloadAction",
          "Update",
          "UpdateAllWidgets",
          "UpdateAllWidgets",
          "OnPauseButton",
          "OnCancelButton",
          "DisplayActionIcon"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_AddonDownloadLineBaseWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_CircleProgressIndicatorWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_CircularIndicatorComponent",
        "methods": [
          "HandlerAttached",
          "UpdateAllWidgets",
          "HandlerDeattached",
          "OnFrame",
          "UpdateAllWidgets",
          "UpdateAllWidgets",
          "OnButtonClick",
          "OnMenuEnabled",
          "UpdateAllWidgets",
          "OnMenuDisabled"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_Dialog",
        "methods": [
          "IsOpened",
          "Create",
          "OnMenuOpen",
          "InitList",
          "OnMenuClose",
          "OnMenuUpdate",
          "UpdateProgressWidgets",
          "UpdateProgressWidgets",
          "UpdateDownloadingSpeedWidget",
          "InitList",
          "GetSelectedAction",
          "OnNewDownload",
          "OnNewActionActivate",
          "OnDownloadComplete",
          "OnDownloadFailed",
          "ShowFailedModsDialog",
          "ShowFailedModsDialog",
          "OnFullStorageError",
          "CreateStoraLimitError",
          "CreateStoraLimitError",
          "OnStorageLimitDialogClosed",
          "OnDownloadFailDialogClose",
          "OnDownloadCanceled",
          "OnBackButton",
          "Close",
          "OnPauseAllButton",
          "OnPauseButton",
          "OnCancelButton",
          "OnAutoenableButton",
          "SCR_DownloadManager_Dialog"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_MiniDialog",
        "methods": [
          "Create",
          "OnMenuOpen",
          "OnMenuUpdate",
          "OnPauseResumeButton",
          "OnCancelButton"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_MiniDialogWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_OpenDownloadManagerComponent",
        "methods": [
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_PanelComponent",
        "methods": [
          "HandlerAttached",
          "Update",
          "HandlerDeattached",
          "Update",
          "UpdateAllWidgets",
          "UpdateAllWidgets",
          "Callback_OnNewDownload",
          "OnOpenButton"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_PanelWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_ProgressIndicatorComponent",
        "methods": [
          "HandlerAttached",
          "Update",
          "HandlerDeattached",
          "Update",
          "UpdateAllWidgets",
          "UpdateAllWidgets"
        ]
      },
      {
        "class_name": "SCR_DownloadManager_ProgressIndicatorWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DownloadManagerDialogWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DownloadManagerEntryWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_DownloadManagerTabActiveWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "ErrorDialogUI",
        "methods": [
          "OnMenuOpen",
          "DisplayError",
          "FindTextsInMsgConfig",
          "FindTextsInMsgConfig"
        ]
      },
      {
        "class_name": "FeedbackDialogUI",
        "methods": [
          "FormatMessage",
          "GetWorldFile",
          "GetUserName",
          "GetBuildTime",
          "GetBuildVersion",
          "GetFeedbackSubmitTime",
          "GetFeedbackType",
          "GetFeedbackCategory",
          "GetFeedbackContent",
          "GetCurrentTimestamp",
          "FetchCoords",
          "FeedbackData",
          "FetchCoords",
          "OnConfirm",
          "SendFeedback",
          "OnMenuShow",
          "OnMenuUpdate",
          "OpenFeedbackDialog",
          "CanSendFeedback",
          "SendFeedback",
          "ClearFeedback",
          "OnCreateAccount",
          "OnMenuOpen",
          "OnWriteModeLeave",
          "OnTextChange",
          "OnTextChange"
        ]
      },
      {
        "class_name": "SCR_FieldManualEntryScriptedWidgetEventHandler",
        "methods": [
          "OnClick",
          "SCR_FieldManualEntryScriptedWidgetEventHandler"
        ]
      },
      {
        "class_name": "SCR_FieldManualSubCategoryScriptedWidgetEventHandler",
        "methods": [
          "SCR_FieldManualSubCategoryScriptedWidgetEventHandler",
          "OnClick"
        ]
      },
      {
        "class_name": "SCR_FieldManualUI",
        "methods": [
          "OnMenuOpen",
          "Close",
          "Close",
          "SetAllEntriesAndParents",
          "Close",
          "Close",
          "Close",
          "OnMenuShow",
          "CreateCategoryMenuWidgets",
          "CloseReadingPanel",
          "OpenFirstSubCategory",
          "OnMenuClose",
          "OnSubCategoryClicked",
          "CloseReadingPanel",
          "ResetLastSearch",
          "SetTilesByWidget",
          "OnTileClicked",
          "SetCurrentEntryByWidget",
          "CreateTileWidget",
          "SetTilesByWidget",
          "SetTiles",
          "SetTiles",
          "SetCurrentEntry",
          "FillEntry_Weapon",
          "QueueRefreshCurrentEntry",
          "RefreshCurrentEntry",
          "SetCurrentEntry",
          "SetScrollAfterRefresh",
          "SetScrollAfterRefresh",
          "OpenEntry",
          "SetCurrentEntry",
          "SetCurrentEntry",
          "SetCurrentEntry",
          "SetCurrentEntryByWidget",
          "SetCurrentEntry",
          "FillEntry_Weapon",
          "FillEntry_Weapon_Render",
          "FillEntry_Weapon_Statistics",
          "FillEntry_Weapon_Statistics_Mass",
          "FillEntry_Weapon_Statistics_SightAdjustments",
          "FillEntry_Weapon_Statistics_DefaultSightAdjustment",
          "FillEntry_Weapon_Statistics_RateOfFire",
          "FillEntry_Weapon_Statistics_MuzzleVelocity",
          "FillEntry_Weapon_Statistics_FireModes",
          "FillEntry_Weapon_Statistics_Mass",
          "FillEntry_Weapon_Statistics_SightAdjustments",
          "FillEntry_Weapon_Statistics_DefaultSightAdjustment",
          "FillEntry_Weapon_Statistics_RateOfFire",
          "FillEntry_Weapon_Statistics_MuzzleVelocity",
          "FillEntry_Weapon_Statistics_FireModes",
          "SetAllEntriesAndParents",
          "CreateCategoryMenuWidgets",
          "OpenFirstSubCategory",
          "OnSubCategoryClicked",
          "ResetLastSearch",
          "ProcessSearch",
          "ResetLastSearch",
          "CloseReadingPanel",
          "SetCurrentEntry",
          "ResetLastSearch",
          "SetTiles",
          "CloseReadingPanel",
          "SetCurrentEntry",
          "CloseMenuOrReadingPanel",
          "CloseReadingPanel",
          "Close",
          "Open",
          "ArrayJoin",
          "SCR_FieldManualUI"
        ]
      },
      {
        "class_name": "SCR_FieldManualUI_WeaponStatsHelper",
        "methods": [
          "GetDisplayName",
          "GetInventoryIcon",
          "GetDescription",
          "GetRateOfFire",
          "GetMass",
          "GetDefaultSightDistanceSetting",
          "SCR_FieldManualUI_WeaponStatsHelper"
        ]
      },
      {
        "class_name": "SCR_LoadoutPreviewComponent",
        "methods": [
          "HandlerAttached",
          "DeleteChildrens",
          "DeleteChildrens",
          "SetPreviewedLoadout",
          "DeleteChildrens",
          "GetPreviewManagerEntity",
          "SetPreviewManagerEntity",
          "GetItemPreviewWidget",
          "SetItemPreviewWidget",
          "SetReloadLoadout"
        ]
      },
      {
        "class_name": "SCR_TaskIconComponent",
        "methods": [
          "HandlerAttached",
          "SetBackgroundColor",
          "SetIconColor",
          "SetOutlineColor",
          "SetHoverColor",
          "BackgroundShown",
          "IconShown",
          "OutlineShown",
          "HoverShown",
          "SetIconType",
          "SetBackgroundColor",
          "SetIconColor",
          "SetOutlineColor",
          "SetHoverColor",
          "BackgroundShown",
          "IconShown",
          "OutlineShown",
          "HoverShown",
          "SetIconType"
        ]
      },
      {
        "class_name": "SCR_GMMenu",
        "methods": [
          "OnMenuOpen",
          "PrepareTiles",
          "OnMenuFocusGained",
          "PrepareTiles",
          "OnBack",
          "Close",
          "OnTileFocused"
        ]
      },
      {
        "class_name": "GroupSettingsDialogUI",
        "methods": [
          "OnMenuOpen",
          "Close",
          "OnPrivilegeCallback",
          "SetupGroupStatusCombo",
          "OnMenuUpdate",
          "OnConfirm",
          "Close",
          "SetupGroupStatusCombo",
          "OnStatusChanged"
        ]
      },
      {
        "class_name": "SCR_Login2FADialogUI",
        "methods": [
          "SCR_Login2FADialogUI",
          "OnMenuOpen",
          "BindEditBoxInputEvent",
          "OnMenuClose",
          "OnConfirm",
          "ShowWarningMessage",
          "OnTimeout",
          "Clear",
          "OnFailDelayed",
          "Clear",
          "VerifyFormatting",
          "ActivateFirstEditBox",
          "BindEditBoxInputEvent",
          "OnTextChange",
          "OnConfirm",
          "IsCodeComplete",
          "Clear",
          "ActivateFirstEditBox"
        ]
      },
      {
        "class_name": "SCR_Login2FADialogConsoleUI",
        "methods": [
          "BindEditBoxInputEvent",
          "IsCodeComplete",
          "ActivateFirstEditBox"
        ]
      },
      {
        "class_name": "SCR_LoginDialogUI",
        "methods": [
          "OnMenuOpen",
          "CheckFilledEditBoxes",
          "OnConfirm",
          "ShowWarningMessage",
          "OnFailDelayed",
          "Close",
          "ShowWarningMessage",
          "VerifyFormatting",
          "CheckFilledEditBoxes"
        ]
      },
      {
        "class_name": "SCR_LoginDialogConsoleUI",
        "methods": [
          "OnMenuOpen",
          "GetDialogBaseOverlay"
        ]
      },
      {
        "class_name": "SCR_IntroSplashScreen2Component",
        "methods": [
          "HandlerAttached",
          "ActivateContext",
          "InitWidgets",
          "ActivateContext",
          "OnInput",
          "OnFadedOut",
          "Close"
        ]
      },
      {
        "class_name": "SCR_MenuLoadingComponent",
        "methods": [
          "LoadLastMenu",
          "SaveLastMenu",
          "ClearLastMenu",
          "JoinInvite",
          "OpenAdditionalDialog"
        ]
      },
      {
        "class_name": "SCR_MenuToolsLib",
        "methods": [
          "InvokeEventOnAllMenuClosed",
          "GetEventOnAllMenuClosed",
          "CloseAllMenus",
          "CloseTopMenu",
          "CloseTopMenu",
          "AllMenuClosed",
          "InvokeEventOnAllMenuClosed"
        ]
      },
      {
        "class_name": "MainMenuUI",
        "methods": [
          "OnMenuOpen",
          "GetNewsEntries",
          "GetNotificationEntries",
          "OnMenuOpened",
          "OnMenuFocusLost",
          "OnMenuFocusGained",
          "OnBack",
          "TryExitGame",
          "OnCredits",
          "OnTileClick",
          "OnTileFocus",
          "OnButtonSelect",
          "OnTileClick",
          "OnServicesStatus",
          "OnFeedback",
          "OnLogoClicked",
          "RestoreFocus",
          "GetNewsEntries",
          "GetNotificationEntries",
          "GetUnreadNewsCount",
          "GetUnreadNotificationCount",
          "TryExitGame",
          "SCR_ExitGameWhileDownloadingDialog",
          "SCR_ExitGameDialog",
          "CheckServicesStatusIfFocused"
        ]
      },
      {
        "class_name": "MenuRootBase",
        "methods": [
          "GetOnMenuFocusGained",
          "GetOnMenuFocusLost",
          "GetOnMenuShow",
          "GetOnMenuHide",
          "GetOnMenuItem",
          "GetOnMenuUpdate",
          "GetOnMenuOpen",
          "GetOnMenuInit",
          "GetOnMenuClose",
          "OnMenuClosed",
          "InitChat",
          "ShowChat",
          "GetRootComponent",
          "GetFooterComponent",
          "OnMenuFocusGained",
          "ShowChat",
          "OnMenuFocusLost",
          "OnMenuShow",
          "OnMenuHide",
          "OnMenuItem",
          "OnMenuUpdate",
          "OnMenuOpen",
          "InitChat",
          "ShowChat",
          "OnMenuInit",
          "OnMenuClose",
          "OnMenuClosed"
        ]
      },
      {
        "class_name": "NewsDialogUI",
        "methods": [
          "HandlerAttached",
          "SetAuthor",
          "SetDate",
          "SetImage",
          "GetAuthor",
          "GetDate"
        ]
      },
      {
        "class_name": "SCR_PlayMenuEntry",
        "methods": [
          "SCR_PlayMenuEntry"
        ]
      },
      {
        "class_name": "SCR_PlayMenu",
        "methods": [
          "OnMenuOpen",
          "GetScenarios",
          "GetScenarios",
          "GetScenarios",
          "CreateMenuEntries",
          "CreateMenuEntries",
          "CreateMenuEntries",
          "SetupSectionTiles",
          "SetupSectionTiles",
          "SetupSectionTiles",
          "OnMenuClose",
          "OnMenuShow",
          "OnMenuFocusGained",
          "SetupSectionTiles",
          "CreateMenuEntries",
          "GetScenarios",
          "GetRecentScenarios",
          "GetRecentScenarios",
          "OnActionTriggered",
          "OnInteractionButtonPressed",
          "OnConfirmationDialogButtonPressed",
          "SwitchOnButton",
          "OnTileClickInteraction",
          "OnClickInteraction",
          "OnPlayInteraction",
          "OnDoubleClickInteraction",
          "OnPlayInteraction",
          "OnTileMouseClick",
          "OnPlayInteraction",
          "Continue",
          "Play",
          "OnBack",
          "Close",
          "OnScenarios",
          "Play",
          "PlayCurrentScenario",
          "Continue",
          "PlayCurrentScenario",
          "Restart",
          "OnRestartConfirmed",
          "PlayCurrentScenario",
          "Host",
          "HostCurrentScenario",
          "Join",
          "FindCurrentScenarioServers",
          "OnTileFocused",
          "UpdateNavigationButtons",
          "OnTileFocusLost",
          "UpdateNavigationButtons",
          "UpdateNavigationButtons",
          "PlayCurrentScenario",
          "FindCurrentScenarioServers",
          "HostCurrentScenario",
          "OnPlayTutorial",
          "GetSelectedTile",
          "GetTileUnderCursor",
          "GetSelectedScenario",
          "OnCommStatusCheckFinished",
          "UpdateNavigationButtons"
        ]
      },
      {
        "class_name": "SCR_PlayMenuComponent",
        "methods": [
          "HandlerAttached",
          "CreateWidgets",
          "SetFocusedItem",
          "CreateWidgets",
          "CreateWidget",
          "CreateWidget",
          "SetAnimationRate",
          "OnItemFocused",
          "SetFocusedItem",
          "GetComponent"
        ]
      },
      {
        "class_name": "ReportDialogUI",
        "methods": [
          "OnMenuOpen",
          "OnMenuShow",
          "OnMenuUpdate",
          "OnConfirm",
          "OnReportSuccess",
          "Close",
          "OnReportFailed",
          "SetAcceptInput",
          "IsContentEmpty",
          "OnWriteModeLeave",
          "OnTextChange",
          "OnTextChange",
          "OnFieldChanged",
          "OnTos",
          "SetWorkshopItem",
          "GetOnReportSuccess"
        ]
      },
      {
        "class_name": "SCR_MainMenuEntity",
        "methods": [
          "SCR_MainMenuEntity",
          "SetEventMask",
          "SetFlags",
          "EOnFrame",
          "ShowWarningScreen",
          "ShowMainMenu",
          "ClearEventMask",
          "ShowWarningScreen",
          "ShowMainMenu",
          "GetInstance"
        ]
      },
      {
        "class_name": "SCR_ConfigurableDialogUi",
        "methods": [
          "ScriptInvokerConfigurableDialogMethod",
          "CreateFromPreset",
          "GetCurrentDialog",
          "GetCurrentDialogTag",
          "IsPresetValid",
          "CreateByPreset",
          "GetContentWidget",
          "GetRootWidget",
          "GetDialogBaseOverlay",
          "GetContentLayoutRoot",
          "GetDialogPreset",
          "Close",
          "Internal_Close",
          "SetTitle",
          "SetMessage",
          "SetMessageColor",
          "GetMessageWidget",
          "GetMessageStr",
          "SetTitleIcon",
          "SetIconColor",
          "SetStyle",
          "BindButtonConfirm",
          "BindButtonCancel",
          "BindButtonGeneric",
          "FindButton",
          "GetButtonTag",
          "OnConfirm",
          "Close",
          "OnCancel",
          "Close",
          "OnButtonPressed",
          "OnMenuOpen",
          "OnMenuUpdate",
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "OnMenuShow",
          "OnMenuHide",
          "OnMenuClose",
          "Init",
          "InitWidgets",
          "SetTitle",
          "SetMessage",
          "SetStyle",
          "SetTitleIcon",
          "CreateButton",
          "BindButtonConfirm",
          "BindButtonCancel",
          "InitWidgets",
          "CreateButton",
          "Internal_Close",
          "InitAttributedVariables"
        ]
      },
      {
        "class_name": "SCR_ConfigurableDialogUiProxy",
        "methods": [
          "Init",
          "OnMenuUpdate",
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "OnMenuShow",
          "OnMenuHide",
          "OnMenuClose"
        ]
      },
      {
        "class_name": "SCR_ConfigurableDialogUiPresets",
        "methods": [
          "FindPreset"
        ]
      },
      {
        "class_name": "SCR_ContentBrowserSortingBar",
        "methods": [
          "HandlerAttached",
          "ListenToSelectables",
          "GetSelectedIndex",
          "OnSorting"
        ]
      },
      {
        "class_name": "SCR_CoreMenuHeaderComponent",
        "methods": [
          "HandlerAttached",
          "SetTitle",
          "SetTitle",
          "SetTitleVisible",
          "FindComponentInHierarchy",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_DynamicFooterComponent",
        "methods": [
          "HandlerAttached",
          "RegisterButton",
          "UpdateAllButtonsPadding",
          "UpdateAllButtonsPadding",
          "OnButtonActivated",
          "UpdateAllButtonsPadding",
          "UpdateButtonPadding",
          "UpdateButtonPadding",
          "CreateButton",
          "RegisterButton",
          "UpdateButtonPadding",
          "CreateButtonAtPosition",
          "UpdateButtonPadding",
          "RegisterButton",
          "FindButton",
          "GetButtonTag",
          "RemoveButton",
          "ClearButtons",
          "GetLeftFooter",
          "GetRightFooter",
          "GetOnButtonActivated",
          "FindComponentInHierarchy",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_GamepadScrollComponent",
        "methods": [
          "HandlerAttached",
          "HandlerDeattached",
          "OnMenuFocusGained",
          "SetForceDisabled",
          "OnMenuFocusLost",
          "SetForceDisabled",
          "OnEachFrame",
          "Update",
          "Update",
          "DebugMarks_StartUpdate",
          "PlaceDebugMark",
          "HandleGamepadScrolling",
          "TryFindNewFocus",
          "DebugMarks_EndUpdate",
          "HandleGamepadScrolling",
          "GetVScrollInput",
          "TryUnfocusWidget",
          "TryFindNewFocus",
          "FindAllButtons",
          "GetReferencePoint",
          "GetFocusMetric",
          "GetWidgetRect",
          "FindAllButtons",
          "FindAllButtons",
          "SetTryFindNewFocus",
          "SetEnabled",
          "SetEnabled_Internal",
          "SetEnabled_Internal",
          "SetForceDisabled",
          "SetEnabled_Internal",
          "SetEnabled_Internal",
          "DebugMarks_StartUpdate",
          "PlaceDebugMark",
          "DebugMarks_EndUpdate"
        ]
      },
      {
        "class_name": "SCR_KeybindDialogs",
        "methods": [
          "CreateKeybindsResetDialog",
          "CreateSimpleKeybindDialog",
          "CreateAdvancedKeybindDialog"
        ]
      },
      {
        "class_name": "SCR_KeybindDialogBase",
        "methods": [
          "Setup"
        ]
      },
      {
        "class_name": "SCR_KickDialogs",
        "methods": [
          "CreateKickErrorDialog",
          "DisplayKickErrorDialog",
          "DisplayKickErrorDialog",
          "Clear",
          "Clear",
          "Clear",
          "CheckLastServerHost",
          "OnProcessLastHostResponse",
          "SetReconnectEnabled",
          "Clear",
          "GetCurrentKickDialog",
          "GetOnCancel",
          "GetOnReconnect",
          "OnDialogTimerChange",
          "OnReconnect",
          "OnDialogClose",
          "Clear",
          "OnReconnect",
          "OnCancel"
        ]
      },
      {
        "class_name": "SCR_LoginProcessDialogUI",
        "methods": [
          "CreateLoginDialog",
          "CreateProfileDialog",
          "Create2FADialog",
          "CreateLoginSuccessDialog",
          "CreateLoginTimeoutDialog",
          "CreateAccountLockedDialog",
          "OnMenuOpen",
          "ShowWarningMessage",
          "UpdateButtons",
          "OnMenuClose",
          "OnConfirm",
          "ShowLoadingAnim",
          "ShowWarningMessage",
          "UpdateButtons",
          "ShowLoadingAnim",
          "ShowWarningMessage",
          "CopyPID",
          "VerifyFormatting",
          "OnCommStatusCheckFinished",
          "UpdateButtons",
          "OnTOSButton",
          "OnCreateAccount",
          "OnSuccess",
          "CreateLoginSuccessDialog",
          "Close",
          "OnFail",
          "OnTimeout",
          "ShowLoadingAnim",
          "ShowWarningMessage",
          "CreateLoginTimeoutDialog",
          "OnFailDelayed",
          "ShowLoadingAnim",
          "ShowWarningMessage",
          "ShowWarningMessage",
          "ShowWarningMessage",
          "CreateAccountLockedDialog",
          "CreateLoginTimeoutDialog",
          "OnTimeoutScripted",
          "OnTimeout"
        ]
      },
      {
        "class_name": "SCR_AccountLockedDialogUi",
        "methods": [
          "OnMenuOpen",
          "UpdateMessage",
          "OnMenuClose",
          "UpdateMessage"
        ]
      },
      {
        "class_name": "SCR_MenuHelper",
        "methods": [
          "ScriptInvokerActiveWidgetInteractionMethod",
          "ScriptInvokerDialogMethod",
          "ScriptInvokerMenuMethod",
          "GetOnActiveWidgetInteraction",
          "GetOnDialogOpen",
          "GetOnDialogClose",
          "GetOnMenuOpen",
          "GetOnMenuOpened",
          "GetOnMenuClose",
          "GetOnMenuFocusGained",
          "GetOnMenuFocusLost",
          "GetOnMenuShow",
          "GetOnMenuHide",
          "GetOnTabChange",
          "SetActiveWidgetInteractionState",
          "IsInTopMenu",
          "OnDialogOpen",
          "OnDialogClose",
          "OnMenuOpen",
          "OnMenuOpened",
          "OnMenuClose",
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "OnMenuShow",
          "OnMenuHide",
          "OnTabChange"
        ]
      },
      {
        "class_name": "PauseMenuUI",
        "methods": [
          "MoveToTop",
          "OpenMenuOnTop",
          "OnMenuOpen",
          "SetEditorUnlimitedButton",
          "SetEditorPhotoButton",
          "OnMenuShow",
          "OnMenuHide",
          "OnMenuClose",
          "OnMenuFocusLost",
          "OnMenuFocusGained",
          "FadeBackground",
          "OnSettings",
          "OnFieldManual",
          "OnReturnToHub",
          "OnExit",
          "OnRewind",
          "SCR_RewindDialog",
          "OnExitConfirm",
          "Close",
          "OnSaved",
          "Close",
          "OnEditorUnlimited",
          "Close",
          "SetEditorUnlimitedButton",
          "OnEditorModeChanged",
          "SetEditorUnlimitedButton",
          "SetEditorPhotoButton",
          "OnEditorPhoto",
          "Close",
          "SetEditorPhotoButton",
          "OnFeedback",
          "OnRestart",
          "OnRestartConfirm",
          "OnPlayers",
          "OnInviteFriends",
          "CanRespawn",
          "OnRespawn",
          "Close",
          "OnLeaveFaction",
          "Close",
          "OnCamera",
          "Close",
          "HandlerDeattached",
          "IsSavingOnExit"
        ]
      },
      {
        "class_name": "SCR_PlayerProfileDialogUI",
        "methods": [
          "OnConfirm",
          "OnSuccess",
          "Close"
        ]
      },
      {
        "class_name": "SCR_ProgressDialog",
        "methods": [
          "HandlerAttached",
          "SetProgress"
        ]
      },
      {
        "class_name": "SCR_ServicesStatusDialogUI",
        "methods": [
          "OnMenuOpen",
          "OnRefresh",
          "OnMenuClose",
          "OnRefresh",
          "OnCommStatusUpdated",
          "UpdateUI",
          "UpdateUI",
          "UpdatePingValueUI",
          "UpdateRefreshWidgets",
          "UpdateServiceStates",
          "UpdatePingValueUI",
          "UpdateRefreshWidgets",
          "GetEnumStatus",
          "GetStatusFromString",
          "OpenIfServicesAreNotOK",
          "OnCommStatusUpdatedOpenDialog"
        ]
      },
      {
        "class_name": "SCR_PasswordDialogComponent",
        "methods": [
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_BackendCallbackRoomMods",
        "methods": [
          "GetRoom",
          "SCR_BackendCallbackRoomMods",
          "ScriptInvoker_RoomModsDependencies"
        ]
      },
      {
        "class_name": "SCR_RoomModsManager",
        "methods": [
          "GetOnGetAllDependencies",
          "GetOnGetScenario",
          "GetOnModsFail",
          "Clear",
          "ReceiveRoomMods",
          "ReceiveRoomScenario",
          "OnScenarioModLoaded",
          "OnLoadingModsFail",
          "UpdatedDependencies",
          "AllItemsLoaded",
          "UpdatedDependencies",
          "ReceiveRoomScenario",
          "LoadScenario",
          "OnScenarioDetails",
          "DisplayRestrictedAddonsList",
          "OnAllReportsCanceled",
          "OnScenarioModLoaded",
          "LoadScenario",
          "OnScenarioDetails",
          "OnRoomCallbackResponse",
          "OnRoomFullList",
          "OnRoomFullList",
          "OnLoadingModsFail",
          "OnLoadingModsFail",
          "AllItemsLoaded",
          "InitDownloadSequence",
          "InitDownloadSequence",
          "OnDownloadSequenceReady",
          "AllItemsLoaded",
          "OnDependenciesLoadingPrevented",
          "OnCancelDownloadConfirm",
          "OnCancelDownloadDialogClose",
          "InitDownloadSequence",
          "OnDownloadSequenceError",
          "OnDownloadSequenceRestrictedAddons",
          "GetModListSizeString",
          "GetModsSize",
          "GetModListPatchSizeString",
          "GetModListPatchSize",
          "HasBlockedMods",
          "SetRoom",
          "GetModsMatching"
        ]
      },
      {
        "class_name": "SCR_RoomPasswordVerification",
        "methods": [
          "GetOnVerified",
          "GetOnFailVerification",
          "SetupDialog",
          "InitCheck",
          "CheckRejoinAuthorization",
          "InitCheck",
          "OnPasswordConfirm",
          "InitCheck",
          "OnPasswordCheckResponse",
          "ClearInvokers",
          "ClearInvokers"
        ]
      },
      {
        "class_name": "SCR_ServerBrowserDialogManager",
        "methods": [
          "DisplayDialog",
          "SetDialogByTag",
          "SetDialogByTag",
          "SetDialogByTag",
          "SetDialogByTag",
          "SetDialogByTag",
          "SetDialogByTag",
          "SetDialogByTag",
          "DisplayWaitingQueue",
          "DisplayPasswordRequired",
          "SetDialogByTag",
          "SetDialogByTag",
          "SetDialogByTag",
          "SetDialogMessage",
          "CloseCurrentDialog",
          "SetDialogByTag",
          "OnDialogConfirm",
          "OnDialogCancel",
          "OnDialogClose",
          "DisplayJoinFail",
          "CloseCurrentDialog",
          "SetDialogByTag",
          "DisplayJoinBan",
          "CloseCurrentDialog",
          "SetDialogByTag",
          "OnAllReportsCanceled",
          "DisplayJoinDownloadsWarning",
          "OnDownloadingDone",
          "DisplayWaitingQueue",
          "SetDialogByTag",
          "UpdateWaitingQueue",
          "DisplayPasswordRequired",
          "SetDialogByTag",
          "OnPasswordEditboxChanged",
          "OnServerBrowserAutoRefresh",
          "UpdateWaitingQueue",
          "OnWaitingQueueConfirm",
          "UpdateWaitingQueue",
          "CreateManualJoinDialog",
          "CreateServerDetailsDialog",
          "FillRoomDetailsMods",
          "UpdateRoomDetailsScenarioImage",
          "GetOnConfirm",
          "GetOnCancel",
          "GetOnJoinProcessCancel",
          "GetOnDialogClose",
          "GetOnDownloadComplete",
          "GetOnDownloadCancelDialogClose",
          "GetOnJoinRoomDemand",
          "GetJoinRoom",
          "GetDisplayState",
          "GetCurrentDialog",
          "IsDialogOpen",
          "GetCurrentDialog",
          "SetJoinRoom",
          "SetServerBrowser",
          "SetModManager"
        ]
      },
      {
        "class_name": "SCR_ServerDetailEntryComponent",
        "methods": [
          "HandlerAttached",
          "VisualSetup",
          "SetIconFromImageSet",
          "VisualSetup",
          "SetLabelText",
          "SetIconFromImageSet",
          "SetDataText",
          "SetElementsVisible",
          "SetBackroundVisible"
        ]
      },
      {
        "class_name": "SCR_ServerFilterBarComponent",
        "methods": [
          "GetFirstWidget",
          "GetRootWidget",
          "HandlerAttached",
          "ListenToSelectables",
          "CreateGroups",
          "CreateQuery",
          "ListenToSelectables",
          "OnFilter",
          "SetEnabled",
          "SetVisible"
        ]
      },
      {
        "class_name": "ServerFilterGroup",
        "methods": [
          "GetFirstEntryWidget",
          "GetEntriesCount",
          "SetSize",
          "CreateButtons",
          "AddPaddings",
          "SetupButtonSize",
          "AddPaddings",
          "AddPaddings",
          "SetupButtonSize",
          "WasFilterCheck",
          "GroupBehavior"
        ]
      },
      {
        "class_name": "ServerFilterEntry",
        "methods": [
          "SetText",
          "GetText",
          "GetImageName",
          "SetId",
          "GetId"
        ]
      },
      {
        "class_name": "SCR_ServerListComponent",
        "methods": [
          "OnSuccess",
          "OnError",
          "OnTimeout",
          "OnSuccess",
          "OnError",
          "OnTimeout",
          "HandlerAttached",
          "SetupEntryBehavior",
          "FillEntry",
          "ClearServerList",
          "UpdateRooms",
          "UpdateScrollbar",
          "UpdateEntries",
          "RoomByWidget",
          "OnRoomEntryFocus",
          "OnRoomEntryClick"
        ]
      },
      {
        "class_name": "SCR_ServerScenarioDetailsPanelComponent",
        "methods": [
          "HandlerAttached",
          "SetDefaultScenario",
          "HideModsWidgets",
          "SetScenario",
          "DisplayRoomDataScenario",
          "UpdateAllWidgets",
          "OnScenarioBackendImageSelected",
          "SetHideScenarioImg",
          "UpdateAllWidgets",
          "SetDefaultScenario",
          "HideModsWidgets",
          "DisplayRoomData",
          "DisplayRoomDataScenario",
          "HideModsWidgets",
          "DisplayRoomDataScenario",
          "DisplayDefaultScenarioImage",
          "HideModsWidgets",
          "DisplayMods",
          "DisplayModsCount",
          "SetModsManager"
        ]
      },
      {
        "class_name": "SCR_ServerSortingComponent",
        "methods": [
          "HandlerAttached",
          "AddWidgetCells",
          "AddWidgetCells",
          "OnElementClicked",
          "SetCurrentItem",
          "GetLastFocusedButton"
        ]
      },
      {
        "class_name": "FilteredServerParams",
        "methods": [
          "OnPack",
          "StoreString",
          "FormatePlayersFilters",
          "StoreInteger",
          "StoreInteger",
          "StoreInteger",
          "StoreInteger",
          "ActivateFilterValues",
          "StoreString",
          "UnregV",
          "AddModId",
          "ClearModIds",
          "SetHostAddress",
          "SetJoinCode",
          "FilteredServerParams",
          "FindFilterByInternalName",
          "ActivateFilterValues",
          "FormatePlayersFilters",
          "SetFilters",
          "SetFavoriteFilter",
          "GetFavoriteFilter",
          "SetRecentlyPlayedFilter",
          "GetRecentlyPlayedFilter",
          "SetOfficialFilter",
          "SetSorting",
          "GetSortOrder",
          "SetSearch",
          "GetSearchText",
          "SetSelectedTab",
          "GetSelectedTab",
          "GetScenarioId",
          "SetScenarioId",
          "GetHostedScenarioModId",
          "SetHostedScenarioModId",
          "UnregV",
          "IsModdedFilterSelected",
          "IsCrossPlayFilterSelected",
          "SetOwnedOnly",
          "DefaultFilter",
          "SetSearch",
          "DefaulFilterFavorite",
          "DefaultFilter",
          "DefaulFilterRecentlyPlayed",
          "DefaultFilter",
          "RestoreFilters",
          "SetUsePlayerLimit"
        ]
      },
      {
        "class_name": "BoolFilter",
        "methods": [
          "BoolFilter"
        ]
      },
      {
        "class_name": "SCR_FilterEntryRoom",
        "methods": [
          "AddFilterValue",
          "FindValue"
        ]
      },
      {
        "class_name": "SCR_FilterEntryRoomValue",
        "methods": [
          "SetName",
          "GetName",
          "SetType",
          "GetType",
          "SetValue",
          "GetStringValue",
          "GetBoolValue",
          "GetIntNumberValue",
          "GetFloatNumberValue"
        ]
      },
      {
        "class_name": "SCR_RoomCallback",
        "methods": [
          "OnSuccess",
          "CacheLastResponse",
          "OnError",
          "CacheLastResponse",
          "OnTimeout",
          "CacheLastResponse",
          "CacheLastResponse",
          "GetCode",
          "GetRestCode",
          "GetApiCode",
          "GetResultType",
          "OnSuccess",
          "OnDirectJoinCallback",
          "SetRoom",
          "GetRoom",
          "OnSuccess",
          "OnError",
          "OnTimeout",
          "OnPack",
          "UnregV",
          "UnregV",
          "UnregV",
          "UnregV",
          "UnregV",
          "UnregV",
          "StoreString",
          "OnExpand",
          "SetPassword"
        ]
      },
      {
        "class_name": "ServerBrowserMenuWidgets",
        "methods": [
          "FindAllWidgets",
          "FindButton",
          "FindHandlerReference"
        ]
      },
      {
        "class_name": "SCR_ServerDetailsDialog",
        "methods": [
          "InitWidgets",
          "Init",
          "BindButtonConfirm",
          "OnMenuOpen",
          "SetTitle",
          "CreateServerDetailsDialog",
          "FillModList",
          "UpdateModsAmountMessages",
          "SetScenarioImage",
          "SetCanJoin",
          "OnFavorites",
          "DisplayFavoriteAction",
          "OnRoomSetFavoriteResponseDialog",
          "OnCopyIPAddress",
          "OnDiscord",
          "SetIPAddressText",
          "SetDiscordText",
          "UpdateModsAmountMessages",
          "UpdateDetailIcons",
          "UpdateAlertMessage"
        ]
      },
      {
        "class_name": "SCR_AddonLineDSConfigComponent",
        "methods": [
          "Init",
          "HandleEnableButtons",
          "UpdateAllWidgets",
          "HandleEnableButtons",
          "HandleSortingButtons",
          "HandleEnableButtons",
          "OnDisableButton",
          "IsEnabled",
          "HandleSortingButtons",
          "OnRequiredDisableDialogConfirm",
          "OnSortConfirm",
          "InvokeEventOnButtonUp",
          "InvokeEventOnButtonDown",
          "SetWidgetEnabled",
          "UpdateAllWidgets",
          "SetRequired",
          "HandleEnableButtons",
          "IsItemRequired",
          "SetOnBottom",
          "NotifySorting",
          "HandleSortingButtons",
          "HandleEnableButtons",
          "GetEventOnButtonUp",
          "GetEventOnButtonDown",
          "GetOnSortConfirm",
          "GetOnRequiredDisabled"
        ]
      },
      {
        "class_name": "SCR_ConfigListComponent",
        "methods": [
          "HandlerAttached",
          "FindEntry",
          "GetInvalidEntry"
        ]
      },
      {
        "class_name": "SCR_DSConfig",
        "methods": [
          "SCR_DSConfig",
          "StoreFullJson",
          "GetConfigName",
          "FindValue",
          "StringToNumber"
        ]
      },
      {
        "class_name": "SCR_DSGameProperties",
        "methods": [
          "SCR_DSGameProperties",
          "OnPack",
          "UnregV",
          "StoreBoolean",
          "UnregV",
          "StoreBoolean",
          "UnregV",
          "StoreBoolean",
          "UnregV",
          "StoreBoolean",
          "OnExpand"
        ]
      },
      {
        "class_name": "SCR_HostButtonComponent",
        "methods": [
          "HandlerAttached",
          "OnClicked",
          "SetScenario",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_JsonApiStructHandler",
        "methods": [
          "StoreValue",
          "ToBool",
          "StringToBool",
          "BoolToString"
        ]
      },
      {
        "class_name": "SCR_CombinedDSConfig",
        "methods": [
          "DefineEntriesMap",
          "StoreCategoryToJson",
          "StoreFullJson",
          "DefaultConfigName"
        ]
      },
      {
        "class_name": "SCR_ServerConfigAdvancedComponent",
        "methods": [
          "GetOnPortChanged",
          "HandlerAttached",
          "OnHostLocalyChanged",
          "OnBindPortChanged",
          "OnPublicPortChanged",
          "FillFromDSConfig",
          "SetIPPort",
          "SetPorts"
        ]
      },
      {
        "class_name": "SCR_ServerConfigListComponent",
        "methods": [
          "GetOnScenarioSelected",
          "GetOnPortChanged",
          "HandlerAttached",
          "FillScenarios",
          "FillScenarios",
          "FillScenarioSources",
          "SelectDefaultScenario",
          "ConsoleSetup",
          "FillScenarioSources",
          "InsertScenarioToMap",
          "GetScenarioIndexById",
          "ConsoleSetup",
          "SelectDefaultScenario",
          "SelectScenario",
          "SelectScenario",
          "GetSelectedScenario",
          "GetScenarioOwnerMod",
          "FillFromDSConfig",
          "ScrollToTheEntry",
          "SetPort",
          "OnNameChanged",
          "OnSimplePortChanged",
          "OnFileNameChanged",
          "OnSelectScenario",
          "GenerateName",
          "GenerateFileName",
          "GenerateName",
          "GenerateFileName",
          "SetupPlayerLimit"
        ]
      },
      {
        "class_name": "SCR_ScenarioSources",
        "methods": [
          "SCR_ScenarioSources"
        ]
      },
      {
        "class_name": "SCR_ServerConfigSaveDialog",
        "methods": [
          "Init",
          "HandlerAttached",
          "SetFileNameText",
          "GetFileNameText",
          "OnFileNameChanged"
        ]
      },
      {
        "class_name": "SCR_ServerHostingDialogs",
        "methods": [
          "CreateSaveConfirmDialog",
          "CreateSaveSuccessDialog",
          "CreateSaveFailedDialog",
          "CreateSaveOverrideDialog",
          "CreateNoConnectionDialog",
          "CreateRequiredDisableDialog"
        ]
      },
      {
        "class_name": "SCR_ServerHostingModSubMenu",
        "methods": [
          "HandlerAttached",
          "CreateAddonList",
          "SetupDownloadingCallbacks",
          "HandlerDeattached",
          "ClearDownloadingCallbacks",
          "OnTabCreate",
          "FlagNavigationButtonVisibility",
          "ShowNavigationButtons",
          "OnTabShow",
          "UpdateWorkshopButton",
          "OnTabHide",
          "ReleaseSort",
          "UpdateWorkshopButton",
          "OnCommStatusCheckFinished",
          "UpdateWorkshopButton",
          "ShowNavigationButtons",
          "FocusFirstEntry",
          "CreateAddonList",
          "AddLineEntry",
          "AddLineEntry",
          "LastFocusedId",
          "ClosestAddonLine",
          "FindLineByModId",
          "SetupDownloadingCallbacks",
          "ClearDownloadingCallbacks",
          "UpdateNavigationButtons",
          "OnAddonEnabled",
          "EnableItems",
          "OnAddonDisabled",
          "EnableItems",
          "OnLineFocus",
          "UpdateNavigationButtons",
          "OnLineFocusLost",
          "UpdateNavigationButtons",
          "OnDownloadComplete",
          "OnRequiredAddonDisabled",
          "RequestTabChange",
          "EnableItems",
          "EnableItems",
          "OnLineFocus",
          "UpdateRequiredItems",
          "EnableItems",
          "OnLineButtonUp",
          "StartSort",
          "OnLineButtonDown",
          "StartSort",
          "OnSortConfirm",
          "Sort",
          "OnEnableAllClicked",
          "EnableItems",
          "OnDisableAllClicked",
          "EnableItems",
          "OnOpenWorkshopButton",
          "OnNavEnableActivated",
          "SetLineEnabled",
          "OnNavEnableAllActivated",
          "OnDisableAllClicked",
          "OnEnableAllClicked",
          "OnNavSelectSortActivate",
          "Sort",
          "Sort",
          "ReleaseSort",
          "StartSort",
          "StartSort",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "ReleaseSort",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "SetNavigationButtonVisibile",
          "OnLineFocus",
          "OnDownSort",
          "OnLineButtonDown",
          "OnUpSort",
          "OnLineButtonUp",
          "FocusLine",
          "EnableModsFromDSConfig",
          "EnableItems",
          "SetScenario",
          "UpdateRequiredItems",
          "GetEventOnWorkshopButtonActivate",
          "GetOnRequestDefaultScenario"
        ]
      },
      {
        "class_name": "SCR_ServerHostingSettingsSubMenu",
        "methods": [
          "HandlerDeattached",
          "OnTabCreate",
          "UpdateHostButton",
          "ShowNavigationButtons",
          "OnTabShow",
          "UpdateHostButton",
          "OnTabHide",
          "UpdateHostButton",
          "OnCommStatusCheckFinished",
          "UpdateHostButton",
          "OnHost",
          "OnSave",
          "GetConfigList",
          "GetOnHost",
          "GetOnSave"
        ]
      },
      {
        "class_name": "ServerHostingUI",
        "methods": [
          "OnMenuOpen",
          "SelectDefaultScenario",
          "VerifyAndStoreConfig",
          "OnOverrideConfirm",
          "SaveConfig",
          "OnHostServerClick",
          "OnSaveTemplateClick",
          "DisplaySaveDialog",
          "DisplaySaveDialog",
          "OnSaveDialogConfirm",
          "SaveConfig",
          "SaveConfig",
          "OnWorkshopOpenActivate",
          "AllMenuClosed",
          "Close",
          "OnSubMenuChangePort",
          "OnScenarioSelected",
          "SelectScenario",
          "SelectDefaultScenario",
          "GetTemporaryConfig"
        ]
      },
      {
        "class_name": "SCR_ServerHostingModsWidgets",
        "methods": [
          "Init",
          "GetLayout"
        ]
      },
      {
        "class_name": "ServerBrowserMenuUI",
        "methods": [
          "ScriptInvokerRoomMethod",
          "OnMenuOpen",
          "SetupHandlers",
          "SetupCallbacks",
          "SetupParams",
          "Messages_ShowMessage",
          "Messages_ShowMessage",
          "UpdateNavigationButtons",
          "SwitchFocus",
          "OnMenuOpened",
          "Refresh",
          "OnMenuFocusGained",
          "SwitchFocus",
          "OnMenuClose",
          "ClearScenarioFilters",
          "ClearConnectionTimeoutWaiting",
          "OnMenuUpdate",
          "WaitingForRunningBackend",
          "UpdateNavigationButtons",
          "OnMenuShow",
          "UpdateNavigationButtons",
          "OnActionTriggered",
          "OnActionRefresh",
          "Refresh",
          "Refresh",
          "PrintDebug",
          "Messages_ShowMessage",
          "NegotiatePrivilegeAsync",
          "CheckBackendState",
          "SearchRooms",
          "Messages_ShowMessage",
          "Messages_ShowMessage",
          "OnActionManualConnect",
          "OnActionFilter",
          "SwitchFocus",
          "OnActionBack",
          "Close",
          "OnActionFavorite",
          "OnActionDetails",
          "JoinActions_Join",
          "OnServerEntryClickInteraction",
          "OnServerEntryDoubleClick",
          "OnServerEntryFocusEnter",
          "JoinActions_Join",
          "OnEntryMouseButton",
          "OnJoinButton",
          "OnServerEntryClick",
          "OnServerEntryFocusEnter",
          "JoinActions_Join",
          "WaitingForRunningBackend",
          "ClearConnectionTimeoutWaiting",
          "Refresh",
          "IsBackendReady",
          "CheckBackendState",
          "ShowTimeoutDialog",
          "Messages_ShowMessage",
          "ConnectionTimeout",
          "ShowTimeoutDialog",
          "ClearConnectionTimeoutWaiting",
          "OnConnectionTimeoutDialogConfirm",
          "Messages_ShowMessage",
          "Messages_ShowMessage",
          "ClearConnectionTimeoutWaiting",
          "OnRoomsFound",
          "PrintDebug",
          "DisplayRooms",
          "DisplayRooms",
          "PrintDebug",
          "PrintDebug",
          "Messages_ShowMessage",
          "SwitchFocus",
          "SwitchFocus",
          "Messages_ShowMessage",
          "Messages_Hide",
          "SwitchFocus",
          "OnRoomAutoRefresh",
          "DisplayRooms",
          "SearchRooms",
          "SearchRoomsFiltered",
          "OnSearchAllRoomsSuccess",
          "OnSearchAllRooms",
          "OnSearchAllRoomsFail",
          "OnSearchAllRooms",
          "OnSearchAllRoomsTimeOut",
          "OnSearchAllRooms",
          "OnSearchAllRooms",
          "SearchRoomsFiltered",
          "SearchRoomsFiltered",
          "OnSearchRoomsSuccess",
          "OnRoomsFound",
          "PrintDebug",
          "OnSearchRoomsFail",
          "Refresh",
          "Messages_ShowMessage",
          "OnSearchRoomsTimeOut",
          "ShowTimeoutDialog",
          "PrintDebug",
          "SetupParams",
          "SetupFilteringUI",
          "SetupFilteringUI",
          "SetupCallbacks",
          "OnServerEntryFocusEnter",
          "UpdateNavigationButtons",
          "ReceiveRoomContent",
          "OnServerEntryFocusLeave",
          "OnEntryMouseClick",
          "ReceiveRoomContent",
          "ReceiveRoomContent_Mods",
          "ReceiveRoomContent_Scenario",
          "ReceiveRoomContent_Mods",
          "SetupHandlers",
          "FilterCrossplayCheck",
          "FilterCrossplayCheck",
          "SwitchFocus",
          "ActivateFilter",
          "ActivateFiltersFromList",
          "ActivateFiltersFromList",
          "Refresh",
          "FocusWidget",
          "CallOnServerListSetPage",
          "Messages_ShowMessage",
          "PrintDebug",
          "Messages_Hide",
          "PrintDebug",
          "DisplayFavoriteAction",
          "OnOpeningByLoadComponent",
          "OnChangeSort",
          "Refresh",
          "OnTabViewSwitch",
          "Refresh",
          "SwitchFocus",
          "OnFilterPanelToggle",
          "SwitchFocus",
          "SwitchFocus",
          "OnChangeFilter",
          "Refresh",
          "NegotiatePrivilegeAsync",
          "OnCrossPlayPrivilegeResultFilter",
          "FilterCrossplayCheck",
          "Refresh",
          "OnServerListSetPage",
          "OnScrollResponse",
          "OnScrollSuccess",
          "PrintDebug",
          "PrintDebug",
          "OnScrollSuccess",
          "PrintDebug",
          "Refresh",
          "DisplayRooms",
          "OnSearchEditBoxConfirm",
          "Refresh",
          "OnRoomEntrySetFavorite",
          "OnRoomSetFavoriteResponse",
          "OnLoadingDependencyList",
          "ReceiveRoomContent_Scenario",
          "OnModListFail",
          "OnModListFailDialogClose",
          "OnLoadingScenario",
          "OnRejoinCancel",
          "OnDirectJoinCancel",
          "MissionFromMod",
          "CanJoinRoom",
          "PrintDebug",
          "ClientRoomVersionMatch",
          "GetEntryUnderCursor",
          "GetSelectedEntry",
          "ClearScenarioFilters",
          "SetMenuHeader",
          "FilterScenarioId",
          "FilterHostedScenarioModId",
          "SetFilteredScenario",
          "OpenWithScenarioFilter",
          "IsServerPingAboveThreshold",
          "JoinActions_Join",
          "PrintDebug",
          "JoinProcess_Init",
          "JoinActions_DirectJoin",
          "JoinProcess_FindRoom",
          "OnLastRoomReconnectConfirm",
          "JoinProcess_FindRoomById",
          "JoinProcess_FindRoom",
          "PrintDebug",
          "SetupJoinDialogs",
          "JoinProcess_OnFindRoomSuccess",
          "PrintDebug",
          "JoinProcess_Init",
          "OnRoomsFound",
          "JoinProcess_CleanFindCallback",
          "JoinProcess_OnFindRoomFail",
          "JoinProcess_CleanFindCallback",
          "JoinProcess_OnFindRoomTimeout",
          "JoinProcess_CleanFindCallback",
          "JoinProcess_CleanFindCallback",
          "JoinProcess_FindRoomById",
          "SetupJoinDialogs",
          "JoinProcess_OnFindRoomByIdResponse",
          "JoinProcess_OnFindRoomFail",
          "JoinProcess_Init",
          "JoinProcess_OnFindRoomFail",
          "JoinProcess_OnFindRoomFail",
          "JoinProcess_Init",
          "SetupJoinDialogs",
          "NegotiatePrivilegeAsync",
          "JoinProcess_CheckVersion",
          "JoinProcess_CheckRoomPasswordProtected",
          "OnCrossPlayPrivilegeResultJoin",
          "JoinProcess_CheckVersion",
          "JoinProcess_CheckVersion",
          "JoinProcess_CheckHighPing",
          "JoinProcess_CheckHighPing",
          "JoinProcess_CheckRoomPasswordProtected",
          "OnHighPingServerWarningDialogConfirm",
          "JoinProcess_CheckRoomPasswordProtected",
          "JoinProcess_ShowJoinDetailsDialog",
          "OnRejoinAuthorizationFailed",
          "JoinProcess_PasswordClearInvokers",
          "JoinProcess_PasswordDialogOpen",
          "OnPasswordVerified",
          "JoinProcess_PasswordClearInvokers",
          "JoinProcess_ShowJoinDetailsDialog",
          "ReceiveRoomContent",
          "OnPasswordFailVerification",
          "JoinProcess_PasswordClearInvokers",
          "JoinProcess_ShowJoinDetailsDialog",
          "JoinProcess_LoadModContent",
          "CreateServerDetailsDialog",
          "CreateServerDetailsDialog",
          "OnServerDetailModsLoaded",
          "OnServerDetailModsLoaded",
          "OnServerDetailsClosed",
          "JoinProcess_LoadModContent",
          "JoinProcess_LoadModContentVisualize",
          "Platform_OnUgcPrivilegeResult",
          "JoinProcess_LoadModContentVisualize",
          "JoinProcess_LoadModContentVisualize",
          "JoinProcess_CheckModContent",
          "JoinProcess_OnModCheckFailed",
          "OnModListFail",
          "OnDependenciesLoadingPrevented",
          "JoinProcess_CheckModContent",
          "JoinProcess_CheckModContent",
          "JoinProcess_CheckUnrelatedDownloads",
          "JoinProcess_CheckUnrelatedDownloads",
          "JoinProcess_DisplayUnrelatedDownloadsWarning",
          "JoinProcess_CheckRequiredDownloads",
          "JoinProcess_DisplayUnrelatedDownloadsWarning",
          "JoinProcess_StopDownloadingUnrelatedMods",
          "JoinProcess_CheckUnrelatedDownloadsCanceling",
          "JoinProcess_CheckRequiredDownloads",
          "JoinProcess_DownloadRequiredMods",
          "JoinProcess_WaitToCheckRunningDownloads",
          "JoinProcess_DownloadRequiredMods",
          "OnDownloadRequiredModsCancel",
          "JoinProcess_OnJoinRoomDemand",
          "JoinProcess_WaitToCheckRunningDownloads",
          "JoinProcess_WaitToCheckRunningDownloads",
          "JoinProcess_CheckRunningDownloads",
          "JoinProcess_Join",
          "OnInterruptDownloadConfirm",
          "PrintDebug",
          "JoinProcess_Join",
          "JoinProcess_Join",
          "JoinProcess_OnJoinSuccess",
          "JoinProcess_Clear",
          "JoinProcess_OnJoinFail",
          "JoinProcess_Clear",
          "JoinProcess_OnJoinTimeout",
          "JoinProcess_Clear",
          "JoinProcess_Clear",
          "SetupJoinDialogs",
          "NegotiateMPPrivilegeAsync",
          "NegotiatePrivilegeAsync",
          "OnMPPrivilegeResult",
          "Refresh",
          "OnCrossPlayPrivilegeResult",
          "Refresh",
          "PrintDebug",
          "PrintFormat",
          "RegisterId",
          "ClearIds"
        ]
      },
      {
        "class_name": "SCR_AdvancedActionRowComponent",
        "methods": [
          "HandlerAttached",
          "StopScrolling",
          "Init",
          "GetKeybindIndex",
          "StartScrolling",
          "StopScrolling",
          "FindComponent",
          "FindComponentInHierarchy"
        ]
      },
      {
        "class_name": "SCR_AdvancedKeybindDialogUI",
        "methods": [
          "OnMenuOpen",
          "SetTitle",
          "SetupCaptureButton",
          "SetupPrefixesCombo",
          "SetupBindsCombo",
          "SetupCombinationCombo",
          "ShowBindsForAction",
          "ReselectRow",
          "ReselectRow",
          "SetSelectedKeybind",
          "ShowBindsForAction",
          "UnbindAction",
          "ShowBindsForCurrentAction",
          "ShowBindsForAction",
          "ReselectRow",
          "SetSelectedKeybind",
          "ResetBindings",
          "ShowBindsForAction",
          "ReselectRow",
          "DeleteSelectedBind",
          "ShowBindsForAction",
          "ReselectRow",
          "StartCapturingKeybind",
          "UnbindAction",
          "ShowBindsForAction",
          "ReselectRow",
          "SetupCaptureButton",
          "SetupPrefixesCombo",
          "SetupBindsCombo",
          "SetupCombinationCombo",
          "OnPrefixesComboChanged",
          "ShowBindsForAction",
          "ReselectRow",
          "OnBindsComboChanged",
          "ShowBindsForAction",
          "ReselectRow",
          "OnCombinationComboChanged",
          "ShowBindsForAction",
          "ReselectRow",
          "OnSelectButton",
          "SetSelectedKeybind",
          "OnKeybindRowClick",
          "SetSelectedKeybind",
          "OnKeybindRowFocus",
          "OnKeybindRowFocusLost",
          "SCR_AdvancedKeybindDialogUI",
          "Setup"
        ]
      },
      {
        "class_name": "SCR_AudioSettingsSubMenu",
        "methods": [
          "OnTabCreate",
          "LoadSettings"
        ]
      },
      {
        "class_name": "SCR_EditorSettingsSubMenu",
        "methods": [
          "OnTabCreate",
          "SetEnableLayerEditing",
          "SetVerticalSnap",
          "SetVerticalMode",
          "SetHorizontalCameraSpeed",
          "SetATLSpeed",
          "SetSpeedCoef",
          "SetCameraAboveTerrain",
          "SetCameraRotateWithModifier",
          "GetSliderText"
        ]
      },
      {
        "class_name": "SCR_GameplaySettingsSubMenu",
        "methods": [
          "ScriptInvoker_GameplaySettingsSubMenu",
          "OnTabHide",
          "OnTabCreate",
          "LoadSettings",
          "BindFOVSettings",
          "BindSensitivitySettings",
          "BindLanguage",
          "HideMenuItem",
          "HideMenuItem",
          "HideMenuItem",
          "HideMenuItem",
          "BindLanguage",
          "BindFOVSettings",
          "BindSensitivitySettings",
          "OnLanguageChange",
          "OnGameSettingsSliderChange",
          "OnGameSettingsCheckboxChange"
        ]
      },
      {
        "class_name": "SCR_InterfaceSettingsSubMenu",
        "methods": [
          "SetupSpinboxes",
          "PrintFormat",
          "OnTabCreate",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "SetupSpinboxes",
          "OnChatChange",
          "OnNotificationsChange",
          "OnVoNChange",
          "OnControlHintsChange",
          "OnHintsChange",
          "OnNearbyInteractionsChange",
          "OnNameTagsChange",
          "OnFPSChange",
          "OnServerFPSChange",
          "OnPacketLossChange",
          "OnLatencyChange",
          "OnGameVersionChange",
          "OnWeaponInfoChange",
          "OnVehicleInfoChange"
        ]
      },
      {
        "class_name": "SCR_KeybindActionDisplayComponent",
        "methods": [
          "HandlerAttached",
          "UpdateActionDisplay",
          "GetActionDisplayData",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_KeybindActionDisplayData",
        "methods": [
          "SCR_KeybindActionDisplayData"
        ]
      },
      {
        "class_name": "SCR_KeybindActionDisplayRowComponent",
        "methods": [
          "HandlerAttached",
          "ResetScrolling",
          "CreateActionDisplays",
          "ResetScrolling",
          "GetAlignment",
          "UpdateScrollFrameSkip",
          "OnAdditionalBindsButtonClicked",
          "UpdateScrolling",
          "ResetScrolling",
          "CreateActionDisplays",
          "SetAllActionDisplayStates",
          "GetOnAdditionalBindsClicked",
          "FindComponent",
          "FindComponentInHierarchy"
        ]
      },
      {
        "class_name": "SCR_KeyBindingEntryTitleField",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_KeyBindingFilter",
        "methods": [
          "GetFilterType"
        ]
      },
      {
        "class_name": "SCR_KeybindRowComponent",
        "methods": [
          "OnFocus",
          "UpdateInlineButtons",
          "UpdateBindButtons",
          "UpdateActionDisplays",
          "OnFocusLost",
          "UpdateInlineButtons",
          "UpdateBindButtons",
          "UpdateActionDisplays",
          "HandlerDeattached",
          "Init",
          "SetRichTextAction",
          "SetRichTextAction",
          "UpdateInlineButtons",
          "UpdateBindButtons",
          "UpdateActionDisplays",
          "OnButtonClick",
          "CaptureKeyboard",
          "CaptureGamepad",
          "CaptureKeyboard",
          "CaptureGamepad",
          "OnInlineMouseButtonEnter",
          "OnInlineMouseButtonLeave",
          "OnBindKeyboardClicked",
          "CaptureKeyboard",
          "OnBindControllerClicked",
          "CaptureGamepad",
          "OnAdvancedKeybind",
          "OnReset",
          "OnUnbind",
          "OnKeyCaptured",
          "OnInputDeviceChange",
          "UpdateInlineButtons",
          "UpdateBindButtons",
          "UpdateActionDisplays",
          "OnDialogOpen",
          "OnDialogClose",
          "UpdateBindButtons",
          "UpdateActionDisplays",
          "SetRichTextAction",
          "UpdateActionDisplayScrolling",
          "UpdateInlineButtons",
          "UpdateBindButtons",
          "UpdateActionDisplays",
          "ResetAction",
          "SetRichTextAction",
          "UpdateActionDisplayScrolling",
          "Unbind",
          "SetRichTextAction",
          "UpdateActionDisplayScrolling",
          "GetEntry",
          "GetActionName",
          "GetDisplayName",
          "GetActionPreset",
          "GetFinalActionPreset",
          "GetActionPrefixType",
          "GetOnFocus",
          "GetOnFocusLost",
          "GetOnKeyCaptured",
          "GetOnInlineButton",
          "FindComponent"
        ]
      },
      {
        "class_name": "SCR_KeybindSetting",
        "methods": [
          "OnTabCreate",
          "CreateResetAllKeybindsButton",
          "CreateSimpleBindingButton",
          "CreateUnbindSingleButton",
          "CreateSingleKeybindResetButton",
          "CreateAdvancedBindingButton",
          "InsertCategoriesToComboBox",
          "OnMenuUpdate",
          "UpdateButtons",
          "OnTabShow",
          "ListActionsFromCurrentCategory",
          "UpdateDescription",
          "OnTabHide",
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "OnMenuShow",
          "ListActionsFromCurrentCategory",
          "UpdateListSelectionDisplay",
          "UpdateListSelectionDisplay",
          "UpdateFocusedWidget",
          "UpdateFocusedWidget",
          "InsertCategoriesToComboBox",
          "ResetKeybindsToDefault",
          "ResetSingleKeybindToDefault",
          "ResetKeybindsToDefaultConfirm",
          "ListActionsFromCurrentCategory",
          "CreateResetAllKeybindsButton",
          "CreateSingleKeybindResetButton",
          "CreateUnbindSingleButton",
          "CreateSimpleBindingButton",
          "CreateAdvancedBindingButton",
          "UnbindSingleAction",
          "AdvancedKeybindButtonClick",
          "UpdateButtons",
          "UpdateDescription",
          "OnRowFocus",
          "UpdateDescription",
          "OnRowFocusLost",
          "UpdateDescription",
          "OnRowInlineButton",
          "OnActionTriggered",
          "OnKeyCaptured",
          "ListActionsFromCurrentCategory",
          "OnComboBoxChange",
          "ListActionsFromCurrentCategory",
          "OnInputDeviceChange",
          "UpdateDescription"
        ]
      },
      {
        "class_name": "SCR_SettingBindingEngine",
        "methods": [
          "SCR_SettingBindingEngine"
        ]
      },
      {
        "class_name": "SCR_SettingBindingGameplay",
        "methods": [
          "SCR_SettingBindingGameplay"
        ]
      },
      {
        "class_name": "SCR_SettingsBindingBase",
        "methods": [
          "SCR_SettingsBindingBase",
          "GetComponent",
          "GetEntryChangedInvoker",
          "GetWidgetName",
          "LoadEntry",
          "InitSpinBox",
          "InitSlider",
          "InitCheckBox",
          "InitComboBox",
          "SetBaseContainer",
          "OnSelectableChanged",
          "OnSliderChanged",
          "OnCheckboxChanged"
        ]
      },
      {
        "class_name": "SCR_SettingsManager",
        "methods": [
          "SCR_SettingsManager",
          "AddModule",
          "AddModule",
          "GetModule",
          "AddModule"
        ]
      },
      {
        "class_name": "SCR_SettingsManagerModuleBase",
        "methods": [
          "GetModuleType",
          "SetModuleType",
          "SCR_SettingsManagerModuleBase"
        ]
      },
      {
        "class_name": "SCR_SettingsManagerKeybindModule",
        "methods": [
          "SCR_SettingsManagerKeybindModule",
          "SetModuleType",
          "GetActionBindCount",
          "GetInputBindings",
          "DeleteActionBindByIndex",
          "StartCaptureForAction",
          "SetFilterForActionByIndex",
          "AddKeybindToActionByIndex",
          "IsActionConflicted",
          "UnbindAction",
          "AddComboToActionByIndex",
          "ResetAction",
          "ResetAllActions",
          "ResetAction",
          "GetGamepadPresetPrefix",
          "GetPrimaryPresetPrefix"
        ]
      },
      {
        "class_name": "SCR_SettingsManagerVideoModule",
        "methods": [
          "SetConsolePreset",
          "SCR_SettingsManagerVideoModule",
          "SetModuleType"
        ]
      },
      {
        "class_name": "SCR_SettingsSubMenuBase",
        "methods": [
          "OnTabCreate",
          "OnTabHide",
          "OnTabShow",
          "LoadSettings",
          "OnMenuItemChanged"
        ]
      },
      {
        "class_name": "SCR_SimpleKeybindDialogUI",
        "methods": [
          "OnMenuOpen",
          "OnMenuUpdate",
          "Close",
          "OnMenuClose",
          "SetupActionDisplayFrameSkip",
          "SetupActionDisplay",
          "CancelCapture",
          "GetOnKeyCaptured",
          "SCR_SimpleKeybindDialogUI",
          "Setup"
        ]
      },
      {
        "class_name": "SCR_VideoSettingsConsoleSubMenu",
        "methods": [
          "OnTabCreate",
          "SetupQualityPreset",
          "OnQualityPresetChanged",
          "ChangePreset",
          "ChangePreset",
          "SetupQualityPreset"
        ]
      },
      {
        "class_name": "SCR_VideoSettingsSubMenu",
        "methods": [
          "OnMenuItemChanged",
          "OnCustomMenuItemChanged",
          "SetQualityPresetIndex",
          "OnTabCreate",
          "LoadSettings",
          "SetupQualityPreset",
          "SetupViewDistance",
          "SetupGrassDistance",
          "SetupResolution",
          "SetupResolutionScale",
          "SetupShadowQuality",
          "SetupHardwareAA",
          "SetupTextureDetail",
          "SetupMaxFPS",
          "RemoveQualityPresetFocus",
          "SetupTextureDetail",
          "OnMaxFPSChanged",
          "OnCustomMenuItemChanged",
          "OnTextureDetailChanged",
          "OnCustomMenuItemChanged",
          "OnQualityPresetChanged",
          "LoadSettings",
          "SetupHardwareAA",
          "SetupTextureDetail",
          "SetupShadowQuality",
          "SetupQualityPreset",
          "SetupHardwareAA",
          "OnHardwareAAChanged",
          "OnCustomMenuItemChanged",
          "OnResolutionScaleChanged",
          "OnRenderResolutionChanged",
          "OnCustomMenuItemChanged",
          "OnRenderResolutionChanged",
          "OnShadowDetailChanged",
          "OnCustomMenuItemChanged",
          "OnViewDistanceChanged",
          "OnCustomMenuItemChanged",
          "OnGrassDistanceChanged",
          "OnCustomMenuItemChanged",
          "OnWindowModeChanged",
          "SetResolutionCombo",
          "OnCustomMenuItemChanged",
          "SetResolutionCombo",
          "SetupViewDistance",
          "SetupGrassDistance",
          "SetupShadowQuality",
          "SetupResolution",
          "SetResolutionCombo",
          "SetupResolutionScale",
          "OnRenderResolutionChanged",
          "RemoveQualityPresetFocus",
          "UpdateResolution",
          "OnRenderResolutionChanged",
          "OnCustomMenuItemChanged",
          "SetupMaxFPS"
        ]
      },
      {
        "class_name": "SCR_SettingsSuperMenu",
        "methods": [
          "OnMenuOpen",
          "OnBack",
          "Close"
        ]
      },
      {
        "class_name": "SCR_SubMenuBase",
        "methods": [
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "OnMenuShow",
          "OnMenuHide",
          "OnMenuUpdate",
          "OnTabCreate",
          "OnTabShow",
          "ShowNavigationButtons",
          "OnTabHide",
          "ShowNavigationButtons",
          "OnTabRemove",
          "OnTabChange",
          "ShowNavigationButtons",
          "FlagNavigationButtonVisibility",
          "SetNavigationButtonVisibile",
          "FlagNavigationButtonVisibility",
          "CreateNavigationButton",
          "RequestCloseMenu",
          "RequestTabChange",
          "GetShown",
          "GetIndex",
          "GetOnRequestCloseMenu",
          "GetOnRequestTabChange"
        ]
      },
      {
        "class_name": "SCR_SuperMenuBase",
        "methods": [
          "OnMenuOpen",
          "OnMenuShow",
          "OnMenuHide",
          "OnMenuUpdate",
          "OnMenuClose",
          "OnMenuFocusGained",
          "OnMenuFocusLost"
        ]
      },
      {
        "class_name": "SCR_SuperMenuComponent",
        "methods": [
          "Init",
          "OnTabCreate",
          "OnTabShow",
          "OnMenuShow",
          "OnMenuHide",
          "OnMenuUpdate",
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "OnMenuClose",
          "OnTabCreate",
          "OnTabShow",
          "OnTabHide",
          "OnTabRemove",
          "OnTabChange",
          "OnRequestCloseMenu",
          "OnRequestTabChange",
          "GetTabView",
          "GetSelectedTab",
          "GetOpenedSubMenu",
          "GetSubMenu",
          "FindComponent",
          "GetOnRequestCloseMenu"
        ]
      },
      {
        "class_name": "WidgetLibraryMenuUI",
        "methods": [
          "OnMenuOpen",
          "OnBack"
        ]
      },
      {
        "class_name": "MuzzleUIInfo",
        "methods": [
          "ShowCaliber",
          "GetCaliber",
          "ShowFiremodeIcon",
          "GetFiremodeIconImageset",
          "GetFiremodeGlowImageset",
          "GetFiremodeIconName"
        ]
      },
      {
        "class_name": "SCR_NameTagElementTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_NTElementBase",
        "methods": [
          "InitElementWidget",
          "SetDefaults",
          "GetEntityStateConfig",
          "SetDefaults",
          "ScaleElement",
          "UpdateElement",
          "InitElementWidget",
          "ScaleElement",
          "SCR_NTElementBase"
        ]
      },
      {
        "class_name": "SCR_NameTagStateTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_NTIconBase",
        "methods": [
          "ScaleElement",
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_NTIconState",
        "methods": [
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_NTTextBase",
        "methods": [
          "GetText",
          "SetText",
          "ScaleElement",
          "SetDefaults"
        ]
      },
      {
        "class_name": "SCR_NTName",
        "methods": [
          "GetText",
          "UpdateElement",
          "GetText",
          "SetText",
          "SetText"
        ]
      },
      {
        "class_name": "SCR_NTTextDebug",
        "methods": [
          "GetText",
          "UpdateElement",
          "GetText",
          "SetText"
        ]
      },
      {
        "class_name": "SCR_NameTagCollectorBase",
        "methods": [
          "UpdatePerformed",
          "RefreshEntities",
          "RefreshEntities",
          "Init"
        ]
      },
      {
        "class_name": "SCR_NameTagCollectorGroup",
        "methods": [
          "OnPlayerAdded",
          "RefreshEntities",
          "OnPlayerRemoved",
          "OnControllableDestroyed",
          "UpdatePerformed",
          "RefreshEntities",
          "Init",
          "RefreshEntities"
        ]
      },
      {
        "class_name": "SCR_NameTagConfig",
        "methods": [
          "AdjustZoneRanges",
          "RestoreZoneRanges",
          "SCR_NameTagConfig"
        ]
      },
      {
        "class_name": "SCR_NameTagZoneTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_NameTagZone",
        "methods": [
          "GetZoneStart",
          "OnZoneChanged",
          "DrawElements",
          "UpdateElementDefs",
          "HideElements",
          "SCR_NameTagZone"
        ]
      },
      {
        "class_name": "SCR_NametagConfigComponent",
        "methods": [
          "GetConfigPath"
        ]
      },
      {
        "class_name": "SCR_NameTagData",
        "methods": [
          "UpdatePriorityEntityState",
          "ActivateEntityState",
          "UpdatePriorityEntityState",
          "SetTagPosition",
          "DeactivateEntityState",
          "UpdatePriorityEntityState",
          "SetVisibility",
          "ResizeElement",
          "UpdateEntityType",
          "SetGroup",
          "CheckAISubordinate",
          "GetName",
          "SetTagPosition",
          "SetGroup",
          "ActivateEntityState",
          "DeactivateEntityState",
          "CheckAISubordinate",
          "DeactivateEntityState",
          "ActivateEntityState",
          "AddAsVehicleOccupant",
          "RemoveVehicleOccupant",
          "OnVehicleEntered",
          "AddAsVehicleOccupant",
          "OnVehicleLeft",
          "RemoveVehicleOccupant",
          "OnReceivedVON",
          "OnLifeStateChanged",
          "ActivateEntityState",
          "DeactivateEntityState",
          "Cleanup",
          "UpdateEntityStateFlags",
          "SetGroup",
          "AddAsVehicleOccupant",
          "ActivateEntityState",
          "UpdateTagPos",
          "InitDefaults",
          "InitData",
          "UpdateEntityType",
          "GetName",
          "InitTag",
          "InitDefaults",
          "InitData",
          "ResetTag",
          "SCR_NameTagData",
          "ResetTag"
        ]
      },
      {
        "class_name": "SCR_NameTagDisplay",
        "methods": [
          "GetEntityNameTag",
          "OnControllableDestroyed",
          "CleanupAllTags",
          "StopUpdate",
          "OnControllableDeleted",
          "CleanupAllTags",
          "StopUpdate",
          "OnNewVehicleOccupant",
          "CreateTagWidget",
          "OnLeaveVehicleOccupant",
          "OnGroupJoined",
          "OnGroupLeft",
          "Update",
          "ProcessFiltered",
          "UpdateTagElements",
          "IsFactionFriendly",
          "AdjustRange",
          "InitNameTags",
          "CreateTagWidget",
          "CreateTagWidget",
          "ProcessFiltered",
          "InitializeTag",
          "InitializeTag",
          "InitializeTag",
          "CreateTagWidget",
          "CreateTagWidget",
          "CreateTagWidget",
          "CleanupTag",
          "CleanupAllTags",
          "CleanupDisplay",
          "StopUpdate",
          "CleanupDisplay",
          "UpdateDebug",
          "DisplayUpdate",
          "Update",
          "UpdateDebug",
          "DisplayStartDrawInit",
          "DisplayStartDraw",
          "InitNameTags",
          "DisplayControlledEntityChanged",
          "CleanupAllTags",
          "ProcessFiltered",
          "DisplayStopDraw",
          "CleanupDisplay"
        ]
      },
      {
        "class_name": "SCR_NameTagRulesetBase",
        "methods": [
          "TestVisibility",
          "CalculateScreenPos",
          "TestVisibilityFiltered",
          "UpdateVisibleTag",
          "CheckLOS",
          "TraceLOS",
          "SelectTagToExpand",
          "ExpandTag",
          "ExpandTag",
          "ExpandTag",
          "CollapseTag",
          "DisableTag",
          "CalculateScreenPos",
          "CollapseTag",
          "GetCameraToEntityAngle",
          "CalculateScreenPos",
          "DetermineVisibility",
          "DisableTag",
          "CheckLOS",
          "OnUserSettingChanged",
          "Cleanup",
          "UpdateDebug",
          "Init",
          "OnUserSettingChanged",
          "Update",
          "DetermineVisibility",
          "SelectTagToExpand",
          "UpdateDebug",
          "Cleanup"
        ]
      },
      {
        "class_name": "SCR_NameTagRulesetFriendlies",
        "methods": [
          "TestVisibilityFiltered",
          "DetermineVisibility",
          "UpdateVisibleTag"
        ]
      },
      {
        "class_name": "SCR_NameTagRulesetSingle",
        "methods": [
          "TestVisibilityFiltered",
          "DetermineVisibility",
          "DisableTag",
          "UpdateVisibleTag",
          "UpdateVisibleTag",
          "CollapseTag",
          "DisableTag",
          "Cleanup"
        ]
      },
      {
        "class_name": "SCR_VehicleTagData",
        "methods": [
          "UpdatePassenger",
          "UpdateMainTag",
          "ActivateEntityState",
          "DeactivateEntityState",
          "GetName",
          "UpdateMainTag",
          "UpdateEntityStateFlags",
          "UpdateTagPos",
          "InitDefaults"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkTriggerCountdownDisplay",
        "methods": [
          "DisplayStartDraw",
          "ShowHUD",
          "DisplayUpdate",
          "UpdateHUD",
          "ShowHUD",
          "HandleHUD",
          "ShowHUD",
          "RetrieveTriggerInfo",
          "HandleHUD",
          "RetrieveCountInsideTrigger",
          "HandleHUD",
          "UpdateHUD",
          "ShowHUD",
          "ShowHUD",
          "ShowHUD",
          "ShowHUD"
        ]
      },
      {
        "class_name": "SCR_BaseScreenEffect",
        "methods": [
          "DisplayStartDraw",
          "SettingsChanged",
          "DisplayControlledEntityChanged",
          "DisplayUpdate",
          "UpdateEffect",
          "ClearEffects"
        ]
      },
      {
        "class_name": "SCR_BleedingScreenEffect",
        "methods": [
          "DisplayStartDraw",
          "DisplayControlledEntityChanged",
          "ClearEffects",
          "OnDamageEffectAdded",
          "OnDamageEffectAdded",
          "CreateEffectOverTime",
          "OnDamageEffectRemoved",
          "ClearEffectOverTime",
          "DisplayOnSuspended",
          "DisplayOnResumed",
          "CreateEffectOverTime",
          "BlackoutEffect",
          "ClearEffectOverTime",
          "BlackoutEffect",
          "BlackoutEffect",
          "ClearEffects"
        ]
      },
      {
        "class_name": "SCR_DamageBlurEffect",
        "methods": [
          "DisplayStartDraw",
          "DisplayControlledEntityChanged",
          "ClearEffects",
          "OnDamage",
          "DisplayOnSuspended",
          "DisplayOnResumed",
          "UpdateEffect",
          "MomentaryDamageEffect",
          "MomentaryDamageEffect",
          "ClearEffects"
        ]
      },
      {
        "class_name": "SCR_DeathScreenEffect",
        "methods": [
          "DisplayStartDraw",
          "DisplayControlledEntityChanged",
          "ClearEffects",
          "OnDamageStateChanged",
          "DeathEffect",
          "InstaDeathEffect",
          "DeathEffect",
          "InstaDeathEffect",
          "ClearEffects"
        ]
      },
      {
        "class_name": "SCR_DepthOfFieldEffect",
        "methods": [
          "DisplayStartDraw",
          "SettingsChanged",
          "ClearEffects",
          "DisplayControlledEntityChanged",
          "SettingsChanged",
          "DisplayOnSuspended",
          "ClearEffects",
          "DisplayOnResumed",
          "UpdateEffect",
          "AddDOFEffect",
          "AddDOFBokehEffect",
          "IsNearDOFAllowed",
          "ToggleForcedSimpleDOF",
          "ToggleForcedSimpleDOF",
          "GetDOFType",
          "ToggleForcedSimpleDOF",
          "ToggleForcedSimpleDOF",
          "ToggleForcedSimpleDOF",
          "AddDOFBokehEffect",
          "AddDOFEffect",
          "ClearEffects"
        ]
      },
      {
        "class_name": "SCR_DesaturationEffect",
        "methods": [
          "DisplayStartDraw",
          "SettingsChanged",
          "DisplayControlledEntityChanged",
          "ClearEffects",
          "DisplayOnSuspended",
          "DisplayOnResumed",
          "UpdateEffect",
          "AddDesaturationEffect",
          "AddDesaturationEffect",
          "ClearEffects"
        ]
      },
      {
        "class_name": "SCR_DrowningScreenEffect",
        "methods": [
          "DisplayStartDraw",
          "DisplayControlledEntityChanged",
          "ClearEffects",
          "RemoveInvokers",
          "CreateEffect",
          "CreateEffect",
          "BlackoutEffect",
          "ClearEffect",
          "BlackoutEffect",
          "BlackoutEffect",
          "OnDeath",
          "ClearEffect",
          "ClearEffects",
          "RemoveInvokers"
        ]
      },
      {
        "class_name": "SCR_FadeInOutEffect",
        "methods": [
          "DisplayStartDraw",
          "FadeOutEffect"
        ]
      },
      {
        "class_name": "SCR_InspectCasualtyWidget",
        "methods": [
          "DisplayStartDraw",
          "DisableWidget",
          "DisplayUpdate",
          "DisableWidget",
          "UpdateTarget",
          "UpdateWidget",
          "ShowInspectCasualtyWidget",
          "UpdateTarget",
          "EnableWidget",
          "UpdateTarget",
          "DisableWidget",
          "DisableWidget",
          "UpdateWidgetData",
          "UpdateWidgetData",
          "GetCasualtyName",
          "GetDamageInfo",
          "UpdateWidget",
          "DisableWidget",
          "DisableWidget",
          "GetDamageInfo",
          "GetCasualtyName",
          "DisplayOnSuspended",
          "DisableWidget",
          "SetTarget",
          "IsActive",
          "DisableWidget",
          "SetEnabled",
          "EnableWidget",
          "SetEnabled",
          "DisplayOnResumed"
        ]
      },
      {
        "class_name": "SCR_NoiseFilterEffect",
        "methods": [
          "DisplayControlledEntityChanged",
          "ClearEffects",
          "LowPassFilterEffect",
          "DisplayConsciousnessChanged",
          "LowPassFilterEffect",
          "DisplayOnSuspended",
          "LowPassFilterEffect",
          "DisplayOnResumed",
          "LowPassFilterEffect",
          "OnDamageStateChanged",
          "LowPassFilterEffect",
          "LowPassFilterEffect",
          "OnRespawnMenuOpen",
          "LowPassFilterEffect",
          "DisplayInit",
          "ClearEffects"
        ]
      },
      {
        "class_name": "SCR_RegenerationScreenEffect",
        "methods": [
          "DisplayStartDraw",
          "DisplayControlledEntityChanged",
          "ClearEffects",
          "DisplayOnSuspended",
          "DisplayOnResumed",
          "UpdateEffect",
          "RegenerationEffect",
          "RegenerationEffect",
          "OnDamageEffectAdded",
          "ClearEffects"
        ]
      },
      {
        "class_name": "SCR_StaminaBlurEffect",
        "methods": [
          "DisplayStartDraw",
          "DisplayControlledEntityChanged",
          "FindStaminaValues",
          "StaminaEffects",
          "ClearStaminaEffect",
          "StaminaEffects",
          "ClearStaminaEffect",
          "DisplayOnSuspended",
          "DisplayOnResumed",
          "UpdateEffect",
          "FindStaminaValues",
          "ClearEffects"
        ]
      },
      {
        "class_name": "SCR_UnconsciousScreenEffect",
        "methods": [
          "DisplayStartDraw",
          "DisplayControlledEntityChanged",
          "ClearEffects",
          "DisplayConsciousnessChanged",
          "DisplayConsciousnessChanged",
          "UnconsciousnessEffect",
          "UnconsciousnessEffect",
          "PlayUnconAnim",
          "StopUnconAnim",
          "PlayUnconAnim",
          "OnAnimCycleComplete",
          "GetUnconProgress",
          "StopUnconAnim",
          "ClearEffects"
        ]
      },
      {
        "class_name": "SCR_ScreenEffectsManager",
        "methods": [
          "GetScreenEffectsDisplay",
          "DisplayStartDraw",
          "SettingsChanged",
          "ManagerClearEffects",
          "SettingsChanged",
          "GetInfoDisplays",
          "DisplayControlledEntityChanged",
          "DisplayUpdate",
          "GetInfoDisplays",
          "ManagerClearEffects",
          "GetInfoDisplays",
          "DisplayStopDraw",
          "ManagerClearEffects"
        ]
      },
      {
        "class_name": "ScriptedChatEntity",
        "methods": [
          "ScriptedChatEntity",
          "SetEventMask",
          "GetChannelId"
        ]
      },
      {
        "class_name": "SCR_ActionContextUIInfo",
        "methods": [
          "SetIconTo",
          "GetLayout",
          "OnWidgetAssigned",
          "GetAssignedWidget",
          "GetOnWidgetAssigned"
        ]
      },
      {
        "class_name": "SCR_ActionUIInfo",
        "methods": [
          "SetIconTo",
          "GetIconName"
        ]
      },
      {
        "class_name": "SCR_CursorCustom",
        "methods": [
          "SetCursorVisual",
          "SetOpacity",
          "Update",
          "SCR_CursorCustom"
        ]
      },
      {
        "class_name": "SCR_FactionUIInfo",
        "methods": [
          "GetFactionNameUpperCase"
        ]
      },
      {
        "class_name": "SCR_FadeInOutAnimator",
        "methods": [
          "SCR_FadeInOutAnimator",
          "Update",
          "FadeIn",
          "FadeOut",
          "FadeOutInstantly",
          "Update",
          "ForceVisible",
          "GetState",
          "IsRunning",
          "GetOnStateChanged"
        ]
      },
      {
        "class_name": "SCR_NearbyContextCachingConfig",
        "methods": [
          "GetCachedLayouts",
          "GetDataFromLayout"
        ]
      },
      {
        "class_name": "SCR_NearbyContextCachingData",
        "methods": [
          "GetLayout",
          "GetPrecacheAmount",
          "GetMaxCacheAmount"
        ]
      },
      {
        "class_name": "SCR_NearbyContextTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SimplePreload",
        "methods": [
          "SimplePreload",
          "Update",
          "Preload"
        ]
      },
      {
        "class_name": "SCR_UICore",
        "methods": [
          "OnGameStart",
          "OnGameEnd"
        ]
      },
      {
        "class_name": "SCR_UISoundEntity",
        "methods": [
          "GetInstance",
          "SoundEvent",
          "SetSignalValueStr",
          "EOnInit",
          "SCR_UISoundEntity",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_PreviewRichText",
        "methods": [
          "DisplayUpdate",
          "DisplayStartDrawInit",
          "DisplayStartDraw",
          "DisplayStopDraw"
        ]
      },
      {
        "class_name": "SCR_WeaponSelectionMenu",
        "methods": [
          "Init",
          "CreateWeaponWidgets",
          "EquipHealingItem",
          "UpdateWeaponsList",
          "DidWeaponsChange",
          "SelectHighlightedWeapon",
          "OnSelectWeapon",
          "CreateWeaponWidgets",
          "LoadWeaponPrefab",
          "SetDefaultColor",
          "HighlightWeapon",
          "SetDefaultColor",
          "SetHighlightColor",
          "HighlightNextWeapon",
          "HighlightWeapon",
          "HighlightPreviousWeapon",
          "HighlightWeapon",
          "HighlightCurrentWeapon",
          "HighlightWeapon",
          "GetHighlightedWeaponIndex",
          "HandleKeyboardWeaponSwitch",
          "OnSelectWeapon",
          "Show",
          "SetDefaultColor",
          "HighlightWidget",
          "SetHighlightColor",
          "HighlightWidget",
          "HighlightWidget",
          "RegisterListeners",
          "Show",
          "UpdateWeaponsList",
          "CreateWeaponWidgets",
          "OnSelectWeapon",
          "GetOnSelectWeaponInvoker",
          "UpdateValues",
          "UpdateWeaponsList",
          "CreateWeaponWidgets",
          "Show",
          "SelectHighlightedWeapon",
          "Show",
          "Show",
          "Show",
          "Show",
          "HighlightCurrentWeapon",
          "HighlightPreviousWeapon",
          "HighlightNextWeapon",
          "OnStopDraw",
          "OnStartDraw",
          "Init",
          "RegisterListeners"
        ]
      },
      {
        "class_name": "WeaponUIInfo",
        "methods": [
          "ShowWeaponName"
        ]
      },
      {
        "class_name": "GrenadeUIInfo",
        "methods": [
          "GetAmmoType",
          "ShowAmmoTypeText",
          "GetAmmoTypeFlags"
        ]
      },
      {
        "class_name": "SCR_AddTarget",
        "methods": [
          "Init",
          "PerformAction",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript",
          "SCR_AddTarget"
        ]
      },
      {
        "class_name": "SCR_RemoveTarget",
        "methods": [
          "Init",
          "PerformAction",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript",
          "SCR_RemoveTarget"
        ]
      },
      {
        "class_name": "SCR_SetTargetDistanceDownUserAction",
        "methods": [
          "Init",
          "PerformAction",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript"
        ]
      },
      {
        "class_name": "SCR_SetTargetDistanceUpUserAction",
        "methods": [
          "Init",
          "PerformAction",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript"
        ]
      },
      {
        "class_name": "SCR_SetTargetsModeUserAction",
        "methods": [
          "Init",
          "PerformAction",
          "CanBeShownScript",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript",
          "ResetStartButton"
        ]
      },
      {
        "class_name": "SCR_DetachMagazineUserAction",
        "methods": [
          "CanBeShownScript",
          "PerformActionInternal",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_FireModeSwitchUserAction",
        "methods": [
          "CanBeShownScript",
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_InspectionUserAction",
        "methods": [
          "CanBeShownScript",
          "Init"
        ]
      },
      {
        "class_name": "SCR_RadioToggleUserAction",
        "methods": [
          "CanBeShownScript",
          "PerformAction",
          "Init",
          "HasLocalEffectOnlyScript",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_RadioTuningUserAction",
        "methods": [
          "CanBeShownScript",
          "PerformAction",
          "HasLocalEffectOnlyScript",
          "Init",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_ToggleSafetyUserAction",
        "methods": [
          "PerformAction",
          "CanBeShownScript",
          "IsSafetyOn",
          "GetActionNameScript",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ActivateMineUserAction",
        "methods": [
          "OrientToForward",
          "AllowArming",
          "GetGroundNormal",
          "CheckAngle",
          "PerformAction",
          "OrientToForward",
          "IsUnderWater",
          "CanBePerformedScript",
          "Init",
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_AdjustSignalAction",
        "methods": [
          "IsManuallyAdjusted",
          "Init",
          "CanBeShownScript",
          "ToggleActionBypass",
          "HandleAction",
          "PerformContinuousAction",
          "HandleAction",
          "OnActionStart",
          "ToggleActionBypass",
          "OnActionCanceled",
          "HandleAction",
          "SetSendActionDataFlag",
          "HandleActionDecrease",
          "HandleAction",
          "PlayMovementAndStopSound",
          "HasLocalEffectOnlyScript",
          "CanBroadcastScript",
          "OnSaveActionData",
          "SetSignalValue",
          "OnLoadActionData",
          "SetSignalValue",
          "GetActionProgressScript"
        ]
      },
      {
        "class_name": "SCR_AdjustTimedFuzeAction",
        "methods": [
          "Init",
          "CanBeShownScript",
          "GetActionNameScript",
          "GetActionProgressScript",
          "OnSaveActionData",
          "OnLoadActionData"
        ]
      },
      {
        "class_name": "SCR_ArmExplosiveChargeWithRemoteFuzeAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "PerformAction",
          "AnimateUsage",
          "ProcesFinished",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_ArmExplosiveChargeWithTimedFuzeAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "PerformAction",
          "ProcesFinished"
        ]
      },
      {
        "class_name": "SCR_AttachementAction",
        "methods": [
          "Init",
          "CanBeShownScript",
          "CanBePerformedScript",
          "PerformActionInternal",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_AttachItemFromInventoryAction",
        "methods": [
          "Init",
          "PerformActionInternal",
          "CanBeShownScript",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_BandageUserAction",
        "methods": [
          "OnActionCanceled",
          "CanBeShownScript",
          "SetCannotPerformReason"
        ]
      },
      {
        "class_name": "SCR_BaseAudioScriptedUserAction",
        "methods": [
          "PerformAction",
          "PlayActionSoundEffect",
          "PlayActionSoundEffect"
        ]
      },
      {
        "class_name": "SCR_BaseFactionCheckUserAction",
        "methods": [
          "CanBePerformedScript",
          "IsFactionValid",
          "Init"
        ]
      },
      {
        "class_name": "SCR_BaseWeaponAction",
        "methods": [
          "CanEquipOrReplaceWeapon",
          "Init",
          "GetWeaponToSwap"
        ]
      },
      {
        "class_name": "BurnUserAction",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingBuildUserAction",
        "methods": [
          "Init",
          "PerformAction",
          "ProcesXPreward",
          "OnActionStart",
          "OnActionCanceled",
          "OnConfirmed",
          "PerformContinuousAction",
          "PerformAction",
          "CanBeShownScript",
          "CanBePerformedScript",
          "CancelPlayerAnimation",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript",
          "SetNewGadgetManager",
          "GetBuildingTool",
          "GetBuildingToolValue",
          "ProcesXPreward",
          "GetNetworkManager",
          "CancelPlayerAnimation"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingDisassemblyUserAction",
        "methods": [
          "Init",
          "SetEditorManager",
          "OnActionStart",
          "OnActionCanceled",
          "CancelPlayerAnimation",
          "PerformAction",
          "TryToSendNotification",
          "TryToSendNotification",
          "HasCompositionService",
          "CanBeShownScript",
          "SetNewGadgetManager",
          "CanBePerformedScript",
          "GetAllTurretsInComposition",
          "SetEditorManager",
          "HasLocalEffectOnlyScript",
          "SetEditorManager",
          "GetAllTurretsInComposition",
          "OnCompositionSpawned",
          "CacheFactionAffiliationComponent",
          "GetBuildingTool",
          "IsPlayerFactionSame",
          "GetNetworkManager",
          "CancelPlayerAnimation"
        ]
      },
      {
        "class_name": "SCR_CampaignBuildingStartUserAction",
        "methods": [
          "Init",
          "InitializeSuppliesComponent",
          "InitializeSuppliesComponent",
          "PerformAction",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetTemporaryBlockedAccess",
          "SetCannotPerformReason",
          "GetUserRank",
          "CanBeShownScript",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript",
          "SetNewCompartmentComponent",
          "SetTemporaryBlockedAccess",
          "ResetTemporaryBlockedAccess",
          "EvaluateEntity"
        ]
      },
      {
        "class_name": "SCR_CampaignDeployMobileAssemblyUserAction",
        "methods": [
          "Init",
          "GetDamageManagerComponent",
          "CanBeShownScript",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "PerformAction",
          "HasLocalEffectOnlyScript"
        ]
      },
      {
        "class_name": "SCR_CampaignPackMobileAssemblyUserAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "PerformAction",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_CampaignReconfigureHQRadioUserAction",
        "methods": [
          "IsParentBase",
          "CheckParentBase",
          "ToggleBaseCaptured",
          "Init",
          "OnActionStart",
          "ToggleBaseCaptured",
          "OnActionCanceled",
          "ToggleBaseCaptured",
          "PerformAction",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "CanBeShownScript",
          "HasLocalEffectOnlyScript"
        ]
      },
      {
        "class_name": "SCR_CampaignReconfigureRelayUserAction",
        "methods": [
          "GetPlayerFaction",
          "Init",
          "OnActionStart",
          "OnActionCanceled",
          "PerformAction",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "CanBeShownScript",
          "HasLocalEffectOnlyScript"
        ]
      },
      {
        "class_name": "SCR_CampaignRepairEntityUserAction",
        "methods": [
          "Init",
          "CompositionInit",
          "PerformAction",
          "HasLocalEffectOnlyScript",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "CanBeShownScript",
          "CompositionInit",
          "GetNearestSlot",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_CatalogSpawnerUserAction",
        "methods": [
          "SetSpawnerData",
          "HasLocalEffectOnlyScript",
          "Init",
          "OnActionSelected",
          "OnActionDeselected",
          "PerformAction",
          "GetActionNameScript",
          "SetPreviewSlot",
          "IsAnySlotAvailable",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "CanBeShownScript",
          "GetActionIndex",
          "GetActionID"
        ]
      },
      {
        "class_name": "SCR_ChangeComparmentAction",
        "methods": [
          "CanBeShownScript",
          "PerformAction",
          "GetRelevantDoorIndex",
          "GetFreeCompartmentSlot",
          "GetPilotCompartmentSlot"
        ]
      },
      {
        "class_name": "SCR_CloseVehicleDoorUserAction",
        "methods": [
          "GetActionNameScript",
          "HasLocalEffectOnlyScript",
          "PerformAction",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_DetonateChargesAction",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_RemoteDetonatorAction",
        "methods": [
          "Init",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript",
          "CanBroadcastScript"
        ]
      },
      {
        "class_name": "SCR_DisarmExplosiveChargeAction",
        "methods": [
          "CanBeShownScript",
          "PerformAction",
          "ProcesFinished"
        ]
      },
      {
        "class_name": "SCR_DisconnectChargesAction",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_DoorUserAction",
        "methods": [
          "PerformAction",
          "CanBePerformedScript",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_LadderDoorUserAction",
        "methods": [
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_EnableDefendersAction",
        "methods": [
          "PerformAction",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "CanBeShownScript",
          "HasLocalEffectOnlyScript",
          "GetActionNameScript",
          "Init"
        ]
      },
      {
        "class_name": "SCR_EngineAction",
        "methods": [
          "HasLocalEffectOnlyScript",
          "CanBroadcastScript",
          "PerformContinuousAction",
          "OnActionStart",
          "OnActionCanceled",
          "CanBeShownScript",
          "GetState",
          "SetState"
        ]
      },
      {
        "class_name": "SCR_EquipClothAction",
        "methods": [
          "PerformActionInternal",
          "CanBePerformedScript",
          "GetActionNameScript",
          "Init"
        ]
      },
      {
        "class_name": "SCR_EquipGadgetAction",
        "methods": [
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "PerformActionInternal"
        ]
      },
      {
        "class_name": "SCR_EquipWeaponAction",
        "methods": [
          "OnConfirmed",
          "OnRejected",
          "PerformActionInternal",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_EquipPickedWeapon",
        "methods": [
          "OnComplete"
        ]
      },
      {
        "class_name": "SCR_RemoveEquippedWeapon",
        "methods": [
          "OnComplete"
        ]
      },
      {
        "class_name": "SCR_EquipWeaponHolsterAction",
        "methods": [
          "OnConfirmed",
          "PerformActionInternal",
          "CanBePerformedScript",
          "GetActionNameScript",
          "GetWeaponToSwap"
        ]
      },
      {
        "class_name": "SCR_EquipWeaponAttachment",
        "methods": [
          "PerformActionInternal",
          "CanBeShownScript",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ExplosiveChargeAction",
        "methods": [
          "Init",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetActionNameScript",
          "PerformAction",
          "AnimateUsage",
          "AnimateUsage",
          "ProcesFinished"
        ]
      },
      {
        "class_name": "SCR_FlushToilet",
        "methods": [
          "PerformAction",
          "GetOnToiletFlushed",
          "GetActionNameScript",
          "CanBePerformedScript"
        ]
      },
      {
        "class_name": "SCR_GetInUserAction",
        "methods": [
          "Init",
          "PerformAction",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_GetOutAction",
        "methods": [
          "PerformAction",
          "CanBePerformedScript",
          "CanBeShownScript",
          "CanBePerformed",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_HealingUserAction",
        "methods": [
          "GetConsumableComponent",
          "CanBeShownScript",
          "PerformAction",
          "HealingAllowedFromSeat",
          "GetUserActionGroup"
        ]
      },
      {
        "class_name": "SCR_HelicopterEngineAction",
        "methods": [
          "Init",
          "CanBeShownScript",
          "PerformContinuousAction",
          "SetState",
          "OnActionStart",
          "SetState"
        ]
      },
      {
        "class_name": "SCR_HelicopterHoverAction",
        "methods": [
          "SetState",
          "GetState"
        ]
      },
      {
        "class_name": "SCR_InspectCasualtyUserAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "CanBePerformedScript",
          "CanBePerformedScript",
          "PerformAction",
          "OnActionStart",
          "HasLocalEffectOnlyScript",
          "CanBroadcastScript"
        ]
      },
      {
        "class_name": "SCR_InventoryAction",
        "methods": [
          "GetReason",
          "CanBeShownScript",
          "CanBePerformedScript",
          "PerformAction",
          "PerformActionInternal",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript",
          "PerformActionInternal",
          "Init",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_JumpOutAction",
        "methods": [
          "PerformAction",
          "CanBePerformedScript",
          "CanBeShownScript",
          "CanBePerformed",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_LadderUserAction",
        "methods": [
          "Init",
          "FindCommandHandler",
          "PerformAction",
          "CanBePerformedScript",
          "CanBeShownScript",
          "HasLocalEffectOnlyScript"
        ]
      },
      {
        "class_name": "SCR_LightFireplaceUserAction",
        "methods": [
          "Init",
          "CanBeShownScript",
          "PerformAction",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_LightsDashboardUserAction",
        "methods": [
          "PerformAction",
          "PlaySound",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_LightsHazardUserAction",
        "methods": [
          "PerformAction",
          "PlaySound",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_LightsHiBeamsUserAction",
        "methods": [
          "PerformAction",
          "PlaySound",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_LightsPresenceUserAction",
        "methods": [
          "PerformAction",
          "PlaySound",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_LightsSearchLightUserAction",
        "methods": [
          "PerformAction",
          "PlaySound",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_LightsTurnLeftUserAction",
        "methods": [
          "PerformAction",
          "PlaySound",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_LightsTurnRightUserAction",
        "methods": [
          "PerformAction",
          "PlaySound",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_LoadCasualtySupportStationUserAction",
        "methods": [
          "GetSupportStationType",
          "DelayedInit",
          "GetInvalidPerformReasonString",
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_LootAction",
        "methods": [
          "PerformActionInternal"
        ]
      },
      {
        "class_name": "SCR_LootDeadBodyAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "CanBePerformedScript"
        ]
      },
      {
        "class_name": "SCR_MineAddFlagAction",
        "methods": [
          "FindFlagInInventory",
          "PlaceFlag",
          "PerformAction",
          "PlaceFlag",
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_MineEquipWeaponAction",
        "methods": [
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_MineEquipHolsterAction",
        "methods": [
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_MineFlagPickUpAction",
        "methods": [
          "GetOnItemPickUp",
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_MinePickUpItemAction",
        "methods": [
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_MorphineUserAction",
        "methods": [
          "OnActionCanceled",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason"
        ]
      },
      {
        "class_name": "SCR_OpenStorageAction",
        "methods": [
          "PerformActionInternal"
        ]
      },
      {
        "class_name": "SCR_OpenTurretStorageAction",
        "methods": [
          "PerformActionInternal"
        ]
      },
      {
        "class_name": "SCR_OpenVehicleDoorUserAction",
        "methods": [
          "GetActionNameScript",
          "HasLocalEffectOnlyScript",
          "PerformAction",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_OpenVehicleStorageAction",
        "methods": [
          "PerformActionInternal",
          "CanBeShownScript",
          "Init",
          "DelayedInit"
        ]
      },
      {
        "class_name": "SCR_PickUpItemAction",
        "methods": [
          "PerformActionInternal",
          "CanBePerformedScript"
        ]
      },
      {
        "class_name": "SCR_PlayInstrument",
        "methods": [
          "OnActionStart",
          "OnActionCanceled",
          "GetOnInstrumentPlayed"
        ]
      },
      {
        "class_name": "SCR_PushVehicleAction",
        "methods": [
          "ClearDebug",
          "Init",
          "CanBeShownScript",
          "ApplyForce",
          "PerformContinuousAction",
          "OnActionStart",
          "OnActionCanceled",
          "GetActionProgressScript",
          "CanBroadcastScript"
        ]
      },
      {
        "class_name": "SCR_RemoveCasualtyUserAction",
        "methods": [
          "PerformAction",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "CanBeShownScript",
          "HasLocalEffectOnlyScript"
        ]
      },
      {
        "class_name": "SCR_ReplaceWheelUserAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "PerformAction",
          "Init"
        ]
      },
      {
        "class_name": "SCR_ResourceEntityRefundAction",
        "methods": [
          "PerformAction",
          "GetActionNameScript",
          "CanBePerformedScript",
          "SelectSuitableResourceGenerator",
          "CanBeShownScript",
          "Init",
          "DelayedInit"
        ]
      },
      {
        "class_name": "SCR_SalineBagUserAction",
        "methods": [
          "OnActionCanceled",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason"
        ]
      },
      {
        "class_name": "SCR_SaveArsenalLoadout",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "UpdateActionDisplayName",
          "Init",
          "UpdateActionDisplayName",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "GetActionNameScript",
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_ScriptedSignalUserActionDecrease",
        "methods": [
          "PerformContinuousAction"
        ]
      },
      {
        "class_name": "SCR_ScriptedSignalUserActionIncrease",
        "methods": [
          "PerformContinuousAction"
        ]
      },
      {
        "class_name": "SCR_ScriptedUserAction",
        "methods": [
          "UserActionEventListener",
          "CanBeShownScript",
          "IsSameVehicleOrNone",
          "IsSameVehicleOrNone",
          "GetLocalPositionAction",
          "GetWorldPositionAction",
          "LoopActionUpdate",
          "GetActionProgressScript",
          "IsActionLooping",
          "GetLoopActionHoldDuration",
          "OnActionSelected",
          "OnActionStart"
        ]
      },
      {
        "class_name": "SCR_SwitchLightUserAction",
        "methods": [
          "Init",
          "CanBeShownScript",
          "PerformAction",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_SwitchSeatAction",
        "methods": [
          "CanBePerformedScript",
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_TestScriptedRadioMsgUserAction",
        "methods": [
          "PerformAction",
          "msg"
        ]
      },
      {
        "class_name": "SCR_ToggleHandbrakeAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "PerformAction",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_TourniquetUserAction",
        "methods": [
          "OnActionCanceled",
          "CanBeShownScript",
          "SetCannotPerformReason",
          "IsTourniquetted",
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "SetCannotPerformReason",
          "PerformAction",
          "GetActionNameScript",
          "HealingAllowedFromSeat"
        ]
      },
      {
        "class_name": "SCR_TurnOnAction",
        "methods": [
          "PerformAction",
          "CanBePerformedScript",
          "CanBroadcastScript",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_TurretAssemblyAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "CanBePerformedScript",
          "PerformAction",
          "GetActionNameScript",
          "Init"
        ]
      },
      {
        "class_name": "SCR_TurretGetInUserAction",
        "methods": [
          "CanBePerformedScript",
          "CanBeShownScript",
          "IsTurretOperational"
        ]
      },
      {
        "class_name": "SCR_TurretPickUpItemAction",
        "methods": [
          "CanBePerformedScript",
          "IsTurretDisassembled"
        ]
      },
      {
        "class_name": "SCR_TutorialSelectionUserAction",
        "methods": [
          "Init",
          "PerformAction",
          "CanBePerformedScript",
          "CanBroadcastScript",
          "GetActionNameScript",
          "CanBeShownScript"
        ]
      },
      {
        "class_name": "SCR_UnflipVehicleAction",
        "methods": [
          "CanBeShownScript",
          "PerformContinuousAction",
          "ApplyForce",
          "OnActionStart",
          "OnActionCanceled",
          "GetActionNameScript",
          "GetActionProgressScript",
          "CanBroadcastScript"
        ]
      },
      {
        "class_name": "SCR_VehicleAction",
        "methods": [
          "CanBePerformedScript",
          "Init",
          "GetState",
          "SetState"
        ]
      },
      {
        "class_name": "SCR_VehicleActionBase",
        "methods": [
          "Init",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetState",
          "SetState",
          "PerformAction",
          "SetState",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_VehicleLockControlsAction",
        "methods": [
          "PerformAction",
          "GetState"
        ]
      },
      {
        "class_name": "SCR_VehicleTakeControlsAction",
        "methods": [
          "PerformAction",
          "CanBeShownScript",
          "CanBePerformedScript",
          "SetCannotPerformReason"
        ]
      },
      {
        "class_name": "SCR_WeaponAction",
        "methods": [
          "Init",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetState",
          "SetState",
          "PerformAction",
          "SetState",
          "GetActionNameScript",
          "HasLocalEffectOnlyScript"
        ]
      },
      {
        "class_name": "SCR_WeaponLoadAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "CanBePerformedScript",
          "PerformAction",
          "GetActionNameScript",
          "Init"
        ]
      },
      {
        "class_name": "SCR_BaseDamageHealSupportStationAction",
        "methods": [
          "DelayedInit",
          "SetHitZonesToHeal",
          "GetHitZonesToHeal",
          "SetHitZonesToHeal",
          "GetActionDamageManager",
          "GetActionStringParam"
        ]
      },
      {
        "class_name": "SCR_BaseUseSupportStationAction",
        "methods": [
          "GetSupportStationType",
          "GetClosestValidSupportStation",
          "CanBeShownScript",
          "CanShowDestroyed",
          "CanBePerformedScript",
          "SetCanPerform",
          "SetCanPerform",
          "SetCanPerform",
          "CanBePerformedUpdate",
          "SetCanPerform",
          "SetCanPerform",
          "CanPerform",
          "CanBePerformedUpdate",
          "GetInvalidPerformReasonString",
          "ResetReferencesOnServer",
          "PerformContinuousAction",
          "PerformAction",
          "PerformAction",
          "ResetReferencesOnServer",
          "Init",
          "GetSupportStationType",
          "DelayedInit",
          "CanBroadcastScript",
          "CanHaveMultipleUsers",
          "GetActionPercentage",
          "GetActionDecimalCount",
          "RequiresGadget",
          "PrioritizeHeldGadget",
          "AllowGetSupportStationFromGadget",
          "GetCurrentActionUser",
          "OnActionStart",
          "IsUserInVehicle",
          "OnActionCanceled",
          "GetActionStringParam",
          "OnActionSelected",
          "OnActionDeselected",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_CheckFuelAction",
        "methods": [
          "Init",
          "DelayedInit",
          "CanBeShownScript",
          "CanBePerformedScript",
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_DrainFuelUserAction",
        "methods": [
          "Init",
          "GetCannotPerformReason",
          "CanBeShownScript",
          "CanBePerformedScript",
          "PerformContinuousAction",
          "PerformAction",
          "PerformAction",
          "OnActionStart",
          "OnActionCanceled",
          "GetActionNameScript"
        ]
      },
      {
        "class_name": "SCR_HealSupportStationAction",
        "methods": [
          "GetSupportStationType",
          "GetHitZoneGroup",
          "RequiresGadget",
          "GetActionDecimalCount",
          "GetInvalidPerformReasonString",
          "CanBeShownScript",
          "CanBePerformedScript",
          "SetCanPerform",
          "SetCanPerform",
          "GetBloodHitZoneToHeal",
          "SetHitZonesToHeal"
        ]
      },
      {
        "class_name": "SCR_RefuelAtSupportStationAction",
        "methods": [
          "GetSupportStationType",
          "GetFuelTankIDs",
          "CheckIfFuelNodeIsValid",
          "GetValidFuelNodesCount",
          "Init",
          "GetInvalidPerformReasonString",
          "CanBeShownScript",
          "GetClosestValidSupportStation",
          "PrioritizeHeldGadget",
          "CanBePerformedScript",
          "SetCanPerform",
          "GetActionDecimalCount",
          "GetActionPercentage"
        ]
      },
      {
        "class_name": "SCR_RepairAtSupportStationAction",
        "methods": [
          "GetSupportStationType",
          "GetInvalidPerformReasonString",
          "GetHitZoneGroups",
          "RequiresGadget",
          "CanBeShownScript",
          "CanShowDestroyed",
          "CanBePerformedScript",
          "SetCanPerform",
          "SetCanPerform",
          "SetHitZonesToHeal",
          "GetActionStringParam",
          "GetActionNameScript",
          "DelayedInit"
        ]
      },
      {
        "class_name": "SCR_ResupplyOtherSupportStationAction",
        "methods": [
          "CanBeShownScript",
          "CanBePerformedScript",
          "RequiresGadget",
          "PrioritizeHeldGadget",
          "DelayedInit"
        ]
      },
      {
        "class_name": "SCR_ResupplySelfSupportStationAction",
        "methods": [
          "SetTargetInventory",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetProviderInventory",
          "ResetReferencesOnServer",
          "Init"
        ]
      },
      {
        "class_name": "SCR_BaseResupplySupportStationAction",
        "methods": [
          "GetSupportStationType",
          "GetInvalidPerformReasonString",
          "GetShowButDisabled",
          "GetNotificationOnUse",
          "CanHaveMultipleUsers",
          "CanBeShownScript",
          "CanBePerformedScript",
          "SetCanPerform",
          "SetCanPerform",
          "SetCanPerform",
          "SetCanPerform",
          "CanBePerformedUpdate",
          "GetItemToResupply",
          "UpdateCanResupply",
          "SetTargetInventory",
          "PerformAction",
          "UpdateCanResupply",
          "SetTargetInventory",
          "GetTargetInventory",
          "GetProviderInventory",
          "ResetReferencesOnServer",
          "DelayedInit",
          "GetActionStringParam"
        ]
      },
      {
        "class_name": "SCR_ResupplySupportStationData",
        "methods": [
          "Init",
          "GetResupplyItemOrMuzzle",
          "GetFactionAffiliationGadgetOrOwner"
        ]
      },
      {
        "class_name": "SCR_ResupplyItemSupportStationData",
        "methods": [
          "GetResupplyItemOrMuzzle"
        ]
      },
      {
        "class_name": "SCR_ResupplyCatalogItemSupportStationData",
        "methods": [
          "Init",
          "GetResupplyItemOrMuzzle"
        ]
      },
      {
        "class_name": "SCR_ResupplyHeldWeaponSupportStationData",
        "methods": [
          "GetResupplyItemOrMuzzle"
        ]
      },
      {
        "class_name": "TestDragUserAction",
        "methods": [
          "Init",
          "PerformAction",
          "GetActionNameScript",
          "CanBePerformedScript"
        ]
      },
      {
        "class_name": "TestPushUserAction",
        "methods": [
          "Init",
          "PerformAction"
        ]
      },
      {
        "class_name": "ThrowGrenadeAction",
        "methods": [
          "Init",
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_BitMaskArray",
        "methods": [
          "GetNumBitMasks",
          "GetBitMask",
          "SetBitMask",
          "GetEmpty",
          "GetBit",
          "SetBit",
          "SCR_BitMaskArray"
        ]
      },
      {
        "class_name": "SCR_ByteFormat",
        "methods": [
          "ReadableSizeFromBytes",
          "GetReadableSize",
          "GetReadableSizeMb",
          "ContentDownloadFormat"
        ]
      },
      {
        "class_name": "SCR_Easing",
        "methods": [
          "EaseInSine",
          "EaseOutSine",
          "EaseInOutSine",
          "EaseInQuad",
          "EaseOutQuad",
          "EaseInOutQuad",
          "EaseInCubic",
          "EaseOutCubic",
          "EaseInOutCubic",
          "EaseInQuart",
          "EaseOutQuart",
          "EaseInOutQuart",
          "EaseInQuint",
          "EaseOutQuint",
          "EaseInOutQuint",
          "EaseInExpo",
          "EaseOutExpo",
          "EaseInOutExpo",
          "EaseInCirc",
          "EaseOutCirc",
          "EaseInOutCirc",
          "EaseInBack",
          "EaseOutBack",
          "EaseInOutBack",
          "EaseInElastic",
          "EaseOutElastic",
          "EaseInOutElastic",
          "EaseOutBounce",
          "EaseInBounce",
          "EaseInOutBounce"
        ]
      },
      {
        "class_name": "SCR_GameErrorMessage",
        "methods": [
          "GetMessage",
          "GetTitle",
          "SCR_GameErrorMessage"
        ]
      },
      {
        "class_name": "SCR_GameLogHelper",
        "methods": [
          "LogScenariosConfPaths"
        ]
      },
      {
        "class_name": "SCR_ProfaneFilter",
        "methods": [
          "ReplaceProfanities"
        ]
      },
      {
        "class_name": "SCR_BaseEffectManagerComponent",
        "methods": [
          "DeactivateModule",
          "ActivateModule",
          "ActivateAllModules",
          "ActivateModule",
          "DeactivateAllModules",
          "DeactivateModule",
          "InitModules",
          "ActivateModule",
          "_WB_AfterWorldUpdate",
          "UpdateModules",
          "EOnInit",
          "ActivateAllModules",
          "EOnPhysicsActive",
          "ActivateAllModules",
          "DeactivateAllModules",
          "EOnDeactivate",
          "DisconnectFromEffectManagerSystem",
          "EOnActivate",
          "ConnectToEffectManagerSystem",
          "OnPostInit",
          "SetEventMask",
          "ConnectToEffectManagerSystem",
          "OnDelete",
          "DisconnectFromEffectManagerSystem",
          "ConnectToEffectManagerSystem",
          "DisconnectFromEffectManagerSystem",
          "_WB_OnInit"
        ]
      },
      {
        "class_name": "SCR_HelicopterEffectManagerComponent",
        "methods": [
          "GetHelicopterController",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_BayonetEffectComponent",
        "methods": [
          "OnImpact",
          "EmitParticles",
          "Rpc",
          "RPC_OnImpactBroadcast",
          "EmitParticles"
        ]
      },
      {
        "class_name": "SCR_CompartmentAccessComponentClass",
        "methods": [
          "OnPlayerEnterCompartmentMethod",
          "OnPlayerExitCompartmentMethod"
        ]
      },
      {
        "class_name": "SCR_CompartmentAccessComponent",
        "methods": [
          "GetOnCompartmentEntered",
          "GetOnCompartmentLeft",
          "GetOnPlayerCompartmentEnter",
          "GetOnPlayerCompartmentExit",
          "OnCompartmentEntered",
          "OnCompartmentLeft",
          "OnLifeStateChanged",
          "FindFreeAndAccessibleCompartment",
          "MoveInVehicle",
          "Rpc",
          "MoveInVehicleOwner",
          "GetInVehicle",
          "MoveInVehicleAny",
          "GetVehicle",
          "GetVehicle",
          "GetCompartmentType"
        ]
      },
      {
        "class_name": "SCR_DoctorCompartmentSlot",
        "methods": [
          "AllowHealingFromCompartment"
        ]
      },
      {
        "class_name": "SCR_EffectModule",
        "methods": [
          "GetTickOnFrame",
          "GetOwner",
          "TurnOn",
          "CreateEmitter",
          "TurnOff",
          "CreateEmitter",
          "spawnParams",
          "WB_PlayEffect",
          "CreateEmitter",
          "GetEmitter",
          "GetSignalManager",
          "InitActions",
          "DeInitActions",
          "Init",
          "InitActions",
          "DeInit",
          "DeInitActions",
          "Update",
          "WB_Update",
          "WB_OnInit",
          "TurnOff",
          "WB_PlayEffect"
        ]
      },
      {
        "class_name": "SCR_EffectModuleHelicopterExhaust",
        "methods": [
          "Init",
          "Update"
        ]
      },
      {
        "class_name": "SCR_BaseEffectParticleAction",
        "methods": [
          "Init",
          "DeInit",
          "Update",
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_BaseEffectParticleSignalAction",
        "methods": [
          "Init",
          "DeInit",
          "Update",
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_BaseEffectParticleHelicopterEventAction",
        "methods": [
          "RegisterEvent",
          "Init",
          "RegisterEvent",
          "DeInit",
          "PerformAction"
        ]
      },
      {
        "class_name": "SCR_BaseEffectParticleHelicopterRotorControlAction",
        "methods": [
          "Init",
          "Update"
        ]
      },
      {
        "class_name": "SCR_ImpactEffectComponent",
        "methods": [
          "GetEffectMagnitude",
          "ResetContactsDelayed",
          "OnImpact",
          "EmitParticles",
          "Rpc",
          "OnWaterEnter",
          "EmitParticles",
          "PlaySound",
          "Rpc",
          "EmitParticles",
          "PlaySound",
          "RPC_OnImpactBroadcast",
          "EmitParticles",
          "RPC_OnWaterEnterBroadcast",
          "EmitParticles",
          "PlaySound",
          "TraceFilter",
          "EOnInit",
          "OnPostInit"
        ]
      },
      {
        "class_name": "SCR_LightSlot",
        "methods": [
          "GetOnLightStateChanged",
          "OnLightStateChanged",
          "OnInit",
          "PlaySound",
          "GetHitZoneName"
        ]
      },
      {
        "class_name": "SCR_MotorExhaustEffectGeneralComponent",
        "methods": [
          "OnInit",
          "Deactivate",
          "OnDelete",
          "DisconnectFromMotorExhaustSystem",
          "GetStageIndex",
          "Update",
          "UpdateExhaustEmitter",
          "UpdateDamagedEmitter",
          "UpdateExhaustParticles",
          "AdjustEngineEffects",
          "UpdateExhaustEmitter",
          "UpdateExhaustParticles",
          "UpdateDamagedEmitter",
          "CreateDamageEffect",
          "CreateDamageEffect",
          "spawnParams",
          "AdjustEngineEffects",
          "OnEngineStart",
          "ConnectToMotorExhaustSystem",
          "OnEngineStop",
          "TurnOff",
          "DisconnectFromMotorExhaustSystem",
          "ConnectToMotorExhaustSystem",
          "DisconnectFromMotorExhaustSystem"
        ]
      },
      {
        "class_name": "SCR_VehicleCameraAimpoint",
        "methods": [
          "SampleAside",
          "Sample",
          "Vector"
        ]
      },
      {
        "class_name": "SCR_VehicleCameraAlignment",
        "methods": [
          "Update"
        ]
      },
      {
        "class_name": "SCR_VehicleDebug",
        "methods": [
          "SCR_VehicleDebug",
          "DelayedInit",
          "OnPlayerSpawned",
          "GetInVehicle",
          "GetInVehicle"
        ]
      },
      {
        "class_name": "SCR_VehicleDust",
        "methods": [
          "OnPostInit",
          "Deactivate",
          "SetEventMask",
          "EOnInit",
          "RegisterSurfaceTypes",
          "RegisterSurfaceTypes",
          "EOnFrame",
          "UpdateEffect",
          "UpdateEffect",
          "RegisterSurfaceTypes",
          "spawnParams"
        ]
      },
      {
        "class_name": "SCR_VehicleDustPerWheel",
        "methods": [
          "OnPostInit",
          "Deactivate",
          "Deactivate",
          "Deactivate",
          "SetEventMask",
          "OnDelete",
          "DisconnectFromVehiclesDustSystem",
          "OnTicksOnRemoteProxy",
          "EOnInit",
          "ConnectToVehiclesDustSystem",
          "ConnectToVehiclesDustSystem",
          "DisconnectFromVehiclesDustSystem",
          "Update",
          "UpdateBatch",
          "UpdateBatch",
          "UpdateEffect",
          "TraceWheelContact",
          "UpdateEffect",
          "UpdatePosition",
          "UpdateCurrent",
          "UpdateCurrent",
          "spawnParams",
          "UpdateCurrent",
          "UpdateCurrent",
          "UpdatePosition",
          "UpdateVehicleDustEffect",
          "UpdatePosition",
          "UpdateVehicleDustEffect"
        ]
      },
      {
        "class_name": "SCR_VehicleFactionAffiliationComponent",
        "methods": [
          "OnPostInit",
          "ClearAffiliatedFaction",
          "IsVehicleOccupied",
          "IsVehicleActive",
          "OnCompartmentEntered",
          "SetAffiliatedFaction",
          "SetAffiliatedFaction",
          "UpdateOccupantsCount",
          "OnCompartmentLeft",
          "UpdateOccupantsCount",
          "UpdateOccupantsCount",
          "ClearAffiliatedFaction",
          "OnOccupantLifeStateChanged",
          "UpdateOccupantsCount"
        ]
      },
      {
        "class_name": "TrackDecalInfo",
        "methods": [
          "TrackDecalInfo",
          "Finalize"
        ]
      },
      {
        "class_name": "SCR_VehicleTrackDecal",
        "methods": [
          "OnPostInit",
          "Deactivate",
          "SetEventMask",
          "EOnInit",
          "SetEventMask",
          "EOnFrame",
          "UpdateTrack",
          "UpdateTrack"
        ]
      },
      {
        "class_name": "SCR_WheelSlotComponent",
        "methods": [
          "OnAttachedEntity"
        ]
      },
      {
        "class_name": "SCR_WheelSlotInfo",
        "methods": [
          "OnAttachedEntity",
          "OnDetachedEntity"
        ]
      },
      {
        "class_name": "SCR_VoiceoverData",
        "methods": [
          "GetLineByName",
          "GetSequenceByName"
        ]
      },
      {
        "class_name": "SCR_VoiceoverSequence",
        "methods": [
          "GetName",
          "GetLines"
        ]
      },
      {
        "class_name": "SCR_VoiceoverLine",
        "methods": [
          "GetActor",
          "GetSoundEventName",
          "GetSubtitleText"
        ]
      },
      {
        "class_name": "SCR_VoiceoverLineStandalone",
        "methods": [
          "GetName"
        ]
      },
      {
        "class_name": "SCR_VONControllerClass",
        "methods": [
          "OnVONActiveToggled",
          "OnEntriesChanged"
        ]
      },
      {
        "class_name": "SCR_VONController",
        "methods": [
          "SetDisplay",
          "GetDisplay",
          "GetVONMenu",
          "SetVONDisabled",
          "UpdateSystemState",
          "IsVONDisabled",
          "GetVONComponent",
          "SetVONComponent",
          "GetVONEntries",
          "GetVONEntryCount",
          "GetActiveEntry",
          "IsUsingLRR",
          "IsLRRAvailable",
          "SetEntryActive",
          "OnVONToggle",
          "SetGamepadLRRMode",
          "AddEntry",
          "SetEntryActive",
          "RemoveEntry",
          "OnVONToggle",
          "DeactivateVON",
          "SetGamepadLRRMode",
          "SetActiveTransmit",
          "OnVONDirect",
          "VONDirect",
          "VONDirect",
          "OnVONChannel",
          "VONChannel",
          "VONChannel",
          "OnVONLongRange",
          "VONLongRange",
          "VONLongRange",
          "OnVONGamepad",
          "VONLongRange",
          "VONLongRange",
          "VONDirect",
          "VONDirect",
          "VONChannel",
          "VONChannel",
          "OnVONLongRangeGamepadToggle",
          "SetGamepadLRRMode",
          "SetGamepadLRRMode",
          "OnVONToggle",
          "DeactivateVON",
          "ActivateVON",
          "DeactivateVON",
          "SetGamepadLRRMode",
          "ActivateVON",
          "DeactivateVON",
          "OnVONToggleGamepad",
          "OnVONToggle",
          "OnVONToggle",
          "OnVONSwitch",
          "OnVONToggleGamepad",
          "VONDirect",
          "OnVONToggle",
          "ActivateVON",
          "DeactivateVON",
          "VONChannel",
          "OnVONToggle",
          "VONDirect",
          "ActivateVON",
          "DeactivateVON",
          "VONLongRange",
          "OnVONToggle",
          "VONDirect",
          "ActivateVON",
          "DeactivateVON",
          "SetActiveTransmit",
          "ActivateVON",
          "InitEncryptionKey",
          "SetActiveTransmit",
          "DeactivateVON",
          "ActivateVON",
          "ActivateVON",
          "GetEntryByTransmitType",
          "SetActiveTransmit",
          "SetEntryActive",
          "TimeoutVON",
          "DeactivateVON",
          "OnControlledEntityChanged",
          "OnVONToggle",
          "SetVONComponent",
          "UpdateSystemState",
          "OnDestroyed",
          "OnVONToggle",
          "OnPlayerDeleted",
          "OnVONToggle",
          "OnInputDeviceIsGamepad",
          "OnPauseMenuOpened",
          "OnPauseMenuClosed",
          "SetVONDisabled",
          "AssignVONComponent",
          "OnLifeStateChanged",
          "UpdateSystemState",
          "OnVONToggle",
          "TimeoutVON",
          "InitEncryptionKey",
          "Init",
          "Deactivate",
          "ConnectToHandleUpdateVONControllersSystem",
          "UpdateSystemState",
          "Cleanup",
          "UpdateSystemState",
          "UpdateDebug",
          "OnPostInit",
          "Init",
          "EOnDeactivate",
          "Cleanup",
          "UpdateSystemState",
          "ConnectToHandleUpdateVONControllersSystem",
          "DisconnectFromHandleUpdateVONControllersSystem",
          "ConnectToHandleUpdateVONControllersSystem",
          "DisconnectFromHandleUpdateVONControllersSystem",
          "Update",
          "TimeoutVON",
          "UpdateDebug",
          "OnDelete",
          "Cleanup",
          "DisconnectFromHandleUpdateVONControllersSystem"
        ]
      },
      {
        "class_name": "SCR_VONEntry",
        "methods": [
          "InitEntry",
          "SetUsable",
          "IsUsable",
          "SetActive",
          "IsActive",
          "SetSelected",
          "AdjustEntry",
          "AdjustEntryModif",
          "ToggleEntry",
          "GetDisplayText",
          "GetIconResource",
          "GetVONMethod",
          "Update"
        ]
      },
      {
        "class_name": "SCR_VONEntryComponent",
        "methods": [
          "SetPowerIcon",
          "SetActiveIcon",
          "SetTransceiverText",
          "SetTransceiverOpacity",
          "SetFrequencyText",
          "SetFrequencyColor",
          "SetChannelText",
          "HandlerAttached"
        ]
      },
      {
        "class_name": "SCR_VONEntryRadio",
        "methods": [
          "GetTransceiver",
          "GetTransceiverNumber",
          "GetEntryFrequency",
          "GetGadget",
          "GetUIInfo",
          "IsLongRange",
          "SetRadioEntry",
          "SetChannelText",
          "InitEntry",
          "SetCustomLayout",
          "AdjustEntryModif",
          "AdjustEntryModif",
          "AdjustEntry",
          "ToggleEntry",
          "AdjustEntryModif",
          "GetIconResource",
          "GetVONMethod",
          "Update"
        ]
      },
      {
        "class_name": "SCR_VONMenu",
        "methods": [
          "GetRadialMenu",
          "SetMenuDisabled",
          "GetKnownChannel",
          "AddRadialEntry",
          "AddRadialCategory",
          "GetGroupedRadioIndex",
          "OnInputOpenMenu",
          "AddRadialEntry",
          "AddRadialEntry",
          "OnControllerTakeControl",
          "OnControllerChanged",
          "OnOpenMenu",
          "OnCloseMenu",
          "OnEntryPerformed",
          "OnEntrySelected",
          "OnActiveEntriesChanged",
          "OnAdjustEntry",
          "ActionTuneFrequency",
          "OnAdjustEntry",
          "OnAdjustEntry",
          "ActionCycleChannel",
          "OnAdjustEntry",
          "OnAdjustEntry",
          "OnMenuToggle",
          "UpdateEntries",
          "Update",
          "Init"
        ]
      },
      {
        "class_name": "FuzeSlotInfo",
        "methods": [
          "GetFuzeType"
        ]
      },
      {
        "class_name": "SCR_BaseTriggerComponent",
        "methods": [
          "IsActivated",
          "SetUser",
          "ActivateTrigger",
          "SetLive",
          "ShowFuse",
          "ShowFuse",
          "OnActivatedChanged",
          "ShowFuse",
          "RPC_DoTrigger",
          "EOnInit",
          "ActivateTrigger",
          "SCR_BaseTriggerComponent",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_ExplosiveTriggerComponent",
        "methods": [
          "GetExplosiveChargeComponent",
          "UseTrigger",
          "Rpc",
          "EOnInit"
        ]
      },
      {
        "class_name": "SCR_PressureTriggerComponent",
        "methods": [
          "EOnContact",
          "Rpc",
          "TriggerManuallyServer",
          "Rpc",
          "ActivateTrigger",
          "SetEventMask",
          "EOnInit",
          "ActivateTrigger"
        ]
      },
      {
        "class_name": "SCR_BayonetComponent",
        "methods": [
          "GetDamage",
          "GetRange",
          "GetAccuracy",
          "AddBloodToBayonet",
          "Rpc_AddBloodToBayonet",
          "Rpc",
          "Rpc_AddBloodToBayonet"
        ]
      },
      {
        "class_name": "SCR_MeleeWeaponProperties",
        "methods": [
          "GetBayonet",
          "GetWeaponDamage",
          "GetWeaponRange",
          "GetWeaponMeleeAccuracy",
          "OnAttachmentAdded",
          "OnAttachmentRemoved",
          "EOnInit",
          "OnPostInit",
          "SetEventMask"
        ]
      },
      {
        "class_name": "SCR_AnimatedBeltComponent",
        "methods": [
          "OnAddedToParent",
          "OnCompartmentEntered",
          "OnProjectileShot",
          "Update",
          "OnCompartmentLeft",
          "DisconnectSystem",
          "RemoveCharacterInvokers",
          "OnDelete",
          "DisconnectSystem",
          "RemoveTurretInvokers",
          "RemoveCharacterInvokers",
          "DisconnectSystem",
          "RemoveTurretInvokers",
          "RemoveCharacterInvokers"
        ]
      },
      {
        "class_name": "SCR_MineWeaponComponent",
        "methods": [
          "IsFlagged",
          "OnFlagRemoved",
          "RplLoad",
          "RplSave",
          "OnFlagParentSlotChanged",
          "RegisterToFlag",
          "FindAction",
          "SetFlag",
          "RegisterToFlag"
        ]
      },
      {
        "class_name": "SCR_2DPIPSightsComponent",
        "methods": [
          "IsScreenPositionInSights",
          "GetPIPCamera",
          "GetPIPCameraIndex",
          "GetADSActivationPercentageScript",
          "GetADSDeactivationPercentageScript",
          "IsPIPEnabled",
          "IsPIPActive",
          "GetMainCameraFOV",
          "GetFOV",
          "IsLocalControlledEntity",
          "CreateCamera",
          "CreateUI",
          "SetPIPEnabled",
          "Destroy",
          "DestroyCamera",
          "Destroy",
          "DestroyCamera",
          "EnableReticleIllumination",
          "HandleSightActivation",
          "SetupFovInfo",
          "SetPIPEnabled",
          "UpdateScopeMaterial",
          "EnableReticleIllumination",
          "SetPIPEnabled",
          "HandleSightDeactivation",
          "SetPIPEnabled",
          "SetPIPEnabled",
          "UpdateCamera",
          "GetCameraLocalTransform",
          "GetSightsTransform",
          "UpdateHDR",
          "UpdateScopeMaterial",
          "OnSightADSPostFrame",
          "OnSightADSDeactivated",
          "OnSightADSActivated",
          "UpdateCamera",
          "UpdateHDR",
          "UpdateScopeMaterial",
          "DrawDiagWindow",
          "OnInit",
          "ApplyRecoilToCamera",
          "CanFreelook",
          "_WB_AfterWorldUpdate",
          "GetSightsTransform",
          "InputFloatClamped",
          "DrawDiagWindow",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "InputFloatClamped",
          "SCR_2DPIPSightsComponent",
          "Destroy",
          "SetPIPEnabled"
        ]
      },
      {
        "class_name": "SCR_2DSightsComponent",
        "methods": [
          "RegisterInputs",
          "UnregisterInputs",
          "UnregisterInputs",
          "HandleSightActivation",
          "SetupFovInfo",
          "SelectZoomLevel",
          "HandleSightDeactivation",
          "OnSightADSActivated",
          "RegisterInputs",
          "OnSightADSDeactivated",
          "UnregisterInputs",
          "CanFreelook",
          "ApplyRecoilToCamera",
          "SetupFovInfo",
          "SelectZoomLevel",
          "ActionZoomIn",
          "AdjustZoom",
          "ActionZoomOut",
          "AdjustZoom",
          "AdjustZoom",
          "SelectZoomLevel",
          "SelectZoomLevel",
          "ToggleIllumination",
          "EnableReticleIllumination",
          "GetReticleOffsetYTarget",
          "GetSightsFovInfo"
        ]
      },
      {
        "class_name": "SCR_CollimatorControllerComponent",
        "methods": [
          "UpdateUVCoordinates",
          "SetReticleBrightness",
          "SetReticleColors",
          "SetReticleIndex",
          "SetReticleBrightnessScale",
          "OnPostInit",
          "UpdateUVCoordinates",
          "SetReticleBrightness",
          "SetReticleColors",
          "SetReticleIndex",
          "SetReticleBrightnessScale"
        ]
      },
      {
        "class_name": "SCR_CollimatorSightsComponent",
        "methods": [
          "GetReticleBrightnessDay",
          "GetReticleBrightnessNight",
          "OnPostInit",
          "OnSightADSActivate",
          "OnSightADSDeactivated",
          "ToggleIllumination",
          "ReticleToggleIllumination",
          "ReticleToggleIllumination",
          "UpdateReticlePosition",
          "UpdateReticleShapeIndex",
          "UpdateReticleColor",
          "UpdateReticleBrightnessScale",
          "UpdateReticleBrightness"
        ]
      },
      {
        "class_name": "SCR_PIPSightsComponent",
        "methods": [
          "_WB_AfterWorldUpdate",
          "SetEnabled",
          "Destroy",
          "CreateUI",
          "DestroyUI",
          "CreateCamera",
          "DestroyCamera",
          "Destroy",
          "DestroyCamera",
          "DestroyUI",
          "OnSightADSActivated",
          "SetEnabled",
          "OnSightADSDeactivated",
          "SetEnabled",
          "OnInit",
          "SCR_PIPSightsComponent",
          "Destroy"
        ]
      },
      {
        "class_name": "SCR_BaseVariableSightsFOVInfo",
        "methods": [
          "GetCount",
          "GetCurrentIndex",
          "GetNextIndex",
          "GetPreviousIndex",
          "SetIndex",
          "SetNext",
          "SetIndex",
          "SetPrevious",
          "SetIndex",
          "IsAdjusting",
          "GetBaseFOV",
          "GetCurrentFOV"
        ]
      },
      {
        "class_name": "SCR_FixedFOVInfo",
        "methods": [
          "GetCurrentFOV"
        ]
      },
      {
        "class_name": "SCR_SightsZoomFOVInfo",
        "methods": [
          "GetCount",
          "GetCurrentIndex",
          "SetIndex",
          "OnInit",
          "SetIndex",
          "OnUpdate",
          "GetCurrentFOV",
          "InsertFov",
          "GetStepsCount",
          "SetCurrentFov",
          "GetZoom",
          "GetCurrentZoom",
          "GetZoom",
          "GetBaseZoom",
          "GetZoom",
          "GetBaseFOV",
          "IsAdjusting",
          "ForceUpdate",
          "OnUpdate",
          "GetEventOnZoomChanged",
          "InvokeOnZoomChanged"
        ]
      },
      {
        "class_name": "SCR_VariableSightsFOVInfo",
        "methods": [
          "GetCount",
          "GetCurrentIndex",
          "SetIndex",
          "OnInit",
          "SetIndex",
          "OnUpdate",
          "IsAdjusting",
          "GetCurrentFOV",
          "GetBaseFOV"
        ]
      },
      {
        "class_name": "SCR_2DPiPScopeZeroingGenerator",
        "methods": [
          "WB_InitGenerator",
          "SetPointInfoGeneration",
          "SetProjectileResource",
          "WB_GetZeroingData",
          "WB_CalculateWeaponZeroingAnimationValue"
        ]
      },
      {
        "class_name": "TestAimModifier",
        "methods": [
          "Register",
          "OnInit",
          "Register",
          "Register",
          "Register",
          "Register",
          "Register",
          "Register",
          "Register",
          "Register",
          "SetLinear",
          "GetLinear",
          "SetAngular",
          "GetAngular",
          "SetTurn",
          "GetTurn",
          "OnCalculate",
          "SetLinear",
          "SetAngular",
          "SetTurn",
          "OnWeaponFired",
          "OnActivated"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemActionDownload",
        "methods": [
          "ScriptInvoker_ActionDownloadProgress",
          "ScriptInvoker_ActionDownloadFullStorage",
          "SCR_WorkshopItemActionDownload",
          "GetTargetRevision",
          "GetStartRevision",
          "GetTargetedAtLatestVersion",
          "GetUpdate",
          "GetProgress",
          "GetProcessingProgress",
          "GetSizeBytes",
          "OnActivate",
          "StartDownloadOrLoadDetails",
          "OnReactivate",
          "OnActivate",
          "OnCancel",
          "GetRunningAsync",
          "IsRunningAsyncSolved",
          "IsPauseAsyncSolved",
          "OnPause",
          "OnPauseResponse",
          "InvokeOnChanged",
          "OnResume",
          "InvokeOnChanged",
          "StartDownloadOrLoadDetails",
          "OnResumeResponse",
          "InvokeOnChanged",
          "OnComplete",
          "StartDownloadOrLoadDetails",
          "Fail",
          "Internal_Update",
          "Fail",
          "StartDownloadOrLoadDetails",
          "InvokeOnChanged",
          "InvokeOnChanged",
          "Complete",
          "Callback_OnError",
          "Fail",
          "FullStorageFail",
          "FullStorageFail",
          "Callback_OnTimeout",
          "Fail",
          "RetryDownload",
          "ForceFail",
          "Fail",
          "GetDownloadSize",
          "IsProcessing"
        ]
      },
      {
        "class_name": "SCR_AddonManager",
        "methods": [
          "GetInstance",
          "Register",
          "RegisterNewItem",
          "Register",
          "RegisterNewItem",
          "GetReady",
          "GetAddonsChecked",
          "GetUgcPrivilege",
          "GetCountAddonsOutdated",
          "NegotiateUgcPrivilegeAsync",
          "GetAddonsEnabledExternally",
          "GetAddonEnabledExternally",
          "CountItemsBasic",
          "CountItemsAnd",
          "CountItemsOr",
          "DifferenceBetweenVersions",
          "ItemAvailability",
          "InvokeEventOnAddonEnabled",
          "GetEventOnAddonEnabled",
          "InvokeEventOnAllAddonsEnabled",
          "GetEventOnAllAddonsEnabled",
          "EnableMultipleAddons",
          "EnableAddonsRecursively",
          "InvokeEventOnAddonEnabled",
          "InvokeEventOnAllAddonsEnabled",
          "InvokeEventOnAllAddonsEnabled",
          "Internal_CheckAddons",
          "RegisterNewItem",
          "CountOutdatedAddons",
          "GetItemId",
          "GetItemId",
          "CheckQueryFlag",
          "CheckQueryFlagsAnd",
          "CheckQueryFlagsOr",
          "SCR_AddonManager",
          "SetEventMask",
          "SetFlags",
          "FinalizeInitAfterAsyncChecks",
          "_print",
          "EOnInit",
          "Internal_CheckAddons",
          "AddonCheckResponse",
          "Callback_CheckAddons_OnSuccess",
          "Callback_CheckAddons_OnSuccess",
          "FinalizeInitAfterAsyncChecks",
          "Callback_GetPrivilege_OnPrivilegeResult",
          "Callback_OnAddonOfflineStateChanged",
          "Callback_OnAddonReportStateChanged",
          "EOnFrame",
          "Internal_OnNewDownload",
          "CountOutdatedAddons",
          "GetPresetStorage",
          "GetItem",
          "SelectPreset",
          "EnableMultipleAddons",
          "OnOfflineAddonsDisabled",
          "EnableMultipleAddons",
          "OnAllAddonsEnabledCorrupted",
          "SCR_WorkshopErrorPresetLoadDialog",
          "CreatePresetFromEnabledAddons",
          "CountOfEnabledAddons",
          "_print"
        ]
      },
      {
        "class_name": "SCR_WorkshopItem",
        "methods": [
          "ScriptInvokerMissionWorkshopItemMethod",
          "GetWorkshopItem",
          "GetDependency",
          "GetItemDataLoaded",
          "GetDetailsLoaded",
          "GetScenariosLoaded",
          "GetRevisionsLoaded",
          "GetDependenciesLoaded",
          "GetRequestFailed",
          "IsDownloadRunning",
          "LogState",
          "GetMyRating",
          "_print",
          "_print",
          "LoadDetails",
          "_print",
          "Internal_LoadDetails",
          "GetScenarios",
          "GetLatestVersion",
          "IsDownloadedVersionCompatible",
          "SetMyRating",
          "SetChanged",
          "ResetMyRating",
          "SetChanged",
          "GetMyRating",
          "SetFavourite",
          "SetChanged",
          "GetFavourite",
          "SetSubscribed",
          "SetChanged",
          "GetSubscribed",
          "SetEnabled",
          "SetChanged",
          "SetDependenciesEnabled",
          "GetEnabled",
          "GetLoaded",
          "GetBlocked",
          "GetReportedByMe",
          "GetModAuthorReportedByMe",
          "GetRestricted",
          "DeleteLocally",
          "SetChanged",
          "DeleteDownloadProgress",
          "SetChanged",
          "GetName",
          "GetId",
          "GetAuthorName",
          "GetOnline",
          "GetOffline",
          "GetCurrentLocalRevision",
          "GetCurrentLocalVersionMatchDependency",
          "GetCorrupted",
          "GetThumbnail",
          "GetDescription",
          "GetSummary",
          "GetRatingCount",
          "GetSizeBytes",
          "GetAverageRating",
          "GetDownloadState",
          "GetDownloadAction",
          "GetDependencyCompositeAction",
          "GetUpdateAvailable",
          "GetAnyDependencyMissing",
          "GetAnyDependencyUpdateAvailable",
          "GetEnabledAndAnyDependencyDisabled",
          "GetHighestPriorityProblem",
          "GetTimeSinceLastPlay",
          "GetTimeSinceFirstDownload",
          "DownloadRevision",
          "Download",
          "DownloadRevision",
          "DownloadLatestVersion",
          "DownloadRevision",
          "RetryDownload",
          "DownloadDependenciesLatest",
          "PauseDownload",
          "CancelDownload",
          "ResumeDownload",
          "Report",
          "LoadReport",
          "GetReport",
          "CancelReport",
          "AddAuthorBlock",
          "RemoveAuthorBlock",
          "FindRevision",
          "GetLatestRevision",
          "Callback_AskDetails_OnGetAsset",
          "TryLoadItemFromDependency",
          "TryLoadRevisions",
          "_print",
          "SetChanged",
          "Callback_AskDetails_OnTimeout",
          "Callback_AskDetails_OnError",
          "SetChanged",
          "Callback_LoadDependencies_OnSuccess",
          "TryLoadDependencies",
          "Callback_LoadDependencies_OnError",
          "CustomDebugError",
          "Callback_LoadDependencies_OnTimeout",
          "Callback_LoadScenarios_OnSuccess",
          "TryLoadScenarios",
          "Callback_LoadScenarios_OnError",
          "CustomDebugError",
          "Callback_LoadScenarios_OnTimeout",
          "Callback_LoadMyReport_OnSuccess",
          "Callback_LoadMyReport_OnError",
          "Callback_LoadMyReport_OnTimeout",
          "TryLoadItemFromDependency",
          "UpdateStateFromWorkshopItem",
          "TryLoadRevisions",
          "TryLoadDependencies",
          "RegisterDependency",
          "TryLoadScenarios",
          "_print",
          "SetChanged",
          "RegisterDependency",
          "UnregisterDependency",
          "RegisterDependent",
          "UnregisterDependent",
          "Internal_StartDownload",
          "Internal_CancelDownload",
          "OnCancelDownloadResponse",
          "Internal_PauseDownload",
          "OnPauseDownloadResponse",
          "Internal_ResumeDownload",
          "Internal_Report",
          "SetChanged",
          "Internal_CancelReport",
          "SetChanged",
          "Internal_AddAuthorBlock",
          "SetChanged",
          "Internal_RemoveAuthorBlock",
          "SetChanged",
          "Internal_Update",
          "TryLoadRevisions",
          "_print",
          "SetChanged",
          "_print",
          "SetChanged",
          "_print",
          "SetChanged",
          "_print",
          "SetChanged",
          "_print",
          "SetChanged",
          "_print",
          "SetChanged",
          "_print",
          "SetChanged",
          "_print",
          "SetChanged",
          "UpdateAuthorBlock",
          "_print",
          "SetChanged",
          "UpdateAuthorBlock",
          "_print",
          "SetChanged",
          "_print",
          "SetChanged",
          "Internal_OnChanged",
          "SetChanged",
          "Internal_GetCanBeUnregistered",
          "Internal_GetWorkshopItem",
          "Internal_GetDownloadProgress",
          "Internal_GetIsProcessing",
          "Internal_GetProcessingProgress",
          "Internal_LoadDetails",
          "SetItemTargetRevision",
          "GetItemTargetRevision",
          "SetTargetRevisionPatchSize",
          "GetTargetRevisionPatchSize",
          "SetChanged",
          "SCR_WorkshopItem",
          "UpdateStateFromWorkshopItem",
          "Internal_UpdateObjects",
          "UpdateStateFromWorkshopItem",
          "Internal_OnAddonsChecked",
          "UpdateStateFromWorkshopItem",
          "Internal_GetUpdateAvailable",
          "Internal_CreateFromWorkshopItem",
          "Internal_CreateFromDependency",
          "UpdateStateFromWorkshopItem",
          "TryLoadDependencies",
          "TryLoadScenarios",
          "_sprint",
          "_print",
          "CustomDebugError"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemAction",
        "methods": [
          "SCR_WorkshopItemAction",
          "_print",
          "_print",
          "IsInactive",
          "IsActive",
          "IsCompleted",
          "IsCanceled",
          "IsPaused",
          "IsFailed",
          "IsAttached",
          "GetWorkshopItem",
          "SetUserData",
          "GetUserData",
          "GetAddonName",
          "GetAddonId",
          "Activate",
          "InvokeOnChanged",
          "Fail",
          "Cancel",
          "InvokeOnChanged",
          "Fail",
          "Pause",
          "InvokeOnChanged",
          "Fail",
          "Resume",
          "InvokeOnChanged",
          "Fail",
          "Activate",
          "Reactivate",
          "InvokeOnChanged",
          "Fail",
          "OnFail",
          "InvokeOnChanged",
          "Complete",
          "OnComplete",
          "InvokeOnChanged",
          "InvokeOnChanged",
          "OnActivate",
          "OnCancel",
          "OnPause",
          "OnResume",
          "OnReactivate",
          "OnFail",
          "OnComplete",
          "Internal_Update",
          "Internal_Detach",
          "_print"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemActionComposite",
        "methods": [
          "RegisterAction",
          "UnregisterAction",
          "UnregisterActions",
          "UnregisterAction",
          "AllCompleted",
          "AnyFailed",
          "CancelAll",
          "PauseAll",
          "ResumeAll",
          "ActivateAll"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemActionDownloadDependenciesLatest",
        "methods": [
          "SCR_WorkshopItemActionDownloadDependenciesLatest",
          "OnActivate",
          "OnReactivate",
          "OnActivate",
          "OnCancel",
          "CancelAll",
          "OnPause",
          "PauseAll",
          "OnResume",
          "ResumeAll",
          "Internal_Update",
          "UnregisterActions"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemActionReportBase",
        "methods": [
          "OnActivateInternal",
          "OnActivate",
          "OnReactivate",
          "Callback_OnError",
          "Fail",
          "Callback_OnTimeout",
          "Fail",
          "Callback_OnSuccess"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemActionReport",
        "methods": [
          "SCR_WorkshopItemActionReport",
          "OnActivateInternal"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemActionCancelReport",
        "methods": [
          "OnActivateInternal"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemActionAddAuthorBlock",
        "methods": [
          "OnActivateInternal"
        ]
      },
      {
        "class_name": "SCR_WorkshopItemActionRemoveAuthorBlock",
        "methods": [
          "OnActivateInternal"
        ]
      },
      {
        "class_name": "SCR_BasePrefabSpawner",
        "methods": [
          "SCR_BasePrefabSpawner",
          "SetEventMask",
          "Activate",
          "EOnInit",
          "EOnFrame",
          "Spawn",
          "CanSpawn",
          "Spawn",
          "params",
          "GetWorldTransform",
          "OnSpawn",
          "OnSpawn"
        ]
      },
      {
        "class_name": "SCR_VehicleSpawn",
        "methods": [
          "EOnInit",
          "CanSpawn",
          "EOnFrame",
          "OnSpawn",
          "OnDestroyed"
        ]
      },
      {
        "class_name": "ScriptedCameraItem",
        "methods": [
          "ScriptedCameraItem",
          "OnActivate",
          "OnBlendIn",
          "OnBlendOut",
          "OnUpdate",
          "OnAfterCameraUpdate",
          "GetBaseAngles",
          "SetBaseAngles",
          "GetBaseFOV"
        ]
      },
      {
        "class_name": "ScriptedCameraSet",
        "methods": [
          "Init",
          "RegisterTransitionTime",
          "RegisterTransitionTime",
          "GetTransitionTime"
        ]
      },
      {
        "class_name": "ScriptedCameraItemResult",
        "methods": [
          "ScriptedCameraItemResult"
        ]
      },
      {
        "class_name": "SCR_CameraManager",
        "methods": [
          "OnInit",
          "SetupFOV",
          "SetupFOV",
          "SetFirstPersonFOV",
          "SetThirdPersonFOV",
          "SetVehicleFOV"
        ]
      },
      {
        "class_name": "SCR_DebugShootComponent",
        "methods": [
          "OnPostInit",
          "SetEventMask",
          "CallbackFunc",
          "Fire",
          "Cleanup"
        ]
      },
      {
        "class_name": "SCR_ChimeraCharacter",
        "methods": [
          "EOnInit",
          "GetFaction",
          "GetFactionKey",
          "RPC_SetIllumination_BC",
          "RPC_SetIllumination_S",
          "RPC_SetIllumination_BC",
          "Rpc",
          "SetIllumination",
          "Rpc",
          "RPC_SetNewZoomLevel_BC",
          "RPC_SetNewZoomLevel_S",
          "RPC_SetNewZoomLevel_BC",
          "Rpc",
          "SetNewZoomLevel",
          "Rpc",
          "IsDriving",
          "IsRecruitable",
          "SetRecruitable",
          "IsRecruited",
          "SetRecruited"
        ]
      },
      {
        "class_name": "SCR_ArmoredClothItemData",
        "methods": [
          "SCR_ArmoredClothItemData"
        ]
      },
      {
        "class_name": "SCR_CharacterVicinityComponent",
        "methods": [
          "OnUpdate"
        ]
      },
      {
        "class_name": "SCR_WeaponAttachmentsStorageComponent",
        "methods": [
          "CanStoreItem",
          "OnAddedToSlot",
          "OnRemovedFromSlot"
        ]
      },
      {
        "class_name": "SCR_DamageManagerComponentClass",
        "methods": [
          "GetSecondaryExplosions",
          "GetSecondaryFires",
          "GetBurnStateForHealth"
        ]
      },
      {
        "class_name": "SCR_DamageManagerComponent",
        "methods": [
          "IsRplReady",
          "OnRplSave",
          "GetAllHitZones",
          "OnRplLoad",
          "GetAllHitZones",
          "GetHitZoneByName",
          "GetAllHitZonesInHierarchy",
          "GetPhysicalHitZones",
          "GetAllHitZonesInHierarchy",
          "GetRegeneratingHitZones",
          "GetAllHitZonesInHierarchy",
          "RpcDo_SetFireState",
          "GetAllHitZones",
          "FilterContact",
          "CalculateMomentum",
          "GetSurroundingHitzones",
          "GetMinDestroyDamage",
          "GetScriptedDamageManagerData",
          "AllocateScriptedDamageManagerData",
          "FreeScriptedDamageManagerData",
          "GetOnDamage",
          "GetOnDamageOverTimeAdded",
          "GetOnDamageOverTimeRemoved",
          "GetOnDamageStateChanged",
          "OnDamage",
          "ShouldOverrideInstigator",
          "FreeScriptedDamageManagerData",
          "GetDamageManager",
          "GetHitZonesOfGroup",
          "GetAllHitZonesInHierarchy",
          "GetHitZonesOfGroups",
          "GetAllHitZonesInHierarchy",
          "GetGroupDamageOverTime",
          "GetHitZonesOfGroup",
          "Kill",
          "HandleDamage",
          "DamageRandomHitZones",
          "GetPhysicalHitZones",
          "GetAllHitZonesInHierarchy",
          "CanBeHealed",
          "GetAllHitZonesInHierarchy",
          "FullHeal",
          "GetAllHitZonesInHierarchy",
          "RemoveDamageOverTime",
          "HealHitZones",
          "GetPhysicalHitZones",
          "ReduceSmoke",
          "HealHitZonesInSequence",
          "HealHitZonesInParallel",
          "ReduceSmoke",
          "GetAllHitZones",
          "GetHitZonesDamage",
          "GetPhysicalHitZones",
          "GetHitZonesHealthScaled",
          "GetPhysicalHitZones",
          "GetSingleHitZonesHealthScaled",
          "GetPhysicalHitZones",
          "GetSecondaryExplosion",
          "GetSecondaryExplosionForScale",
          "GetSecondaryExplosionScale",
          "GetSecondaryFireParticle",
          "IsOnFire",
          "IsOnFire",
          "IsOnFire",
          "GetAllHitZones",
          "SecondaryExplosion",
          "GetResourceEncapsulator",
          "SupplySecondaryExplosion",
          "spawnParams",
          "SecondaryExplosion",
          "GetSecondaryExplosionPosition",
          "GetAllHitZonesInHierarchy",
          "FuelSecondaryExplosion",
          "spawnParams",
          "SecondaryExplosion",
          "UpdateFireDamage",
          "UpdateFireParticles",
          "params",
          "ConnectToFireDamageSystem",
          "DisconnectFromFireDamageSystem",
          "OnDamageStateChanged",
          "SupplySecondaryExplosion",
          "FuelSecondaryExplosion",
          "OnDamageOverTimeAdded",
          "ConnectToFireDamageSystem",
          "OnDamageOverTimeRemoved",
          "DisconnectFromFireDamageSystem",
          "HijackDamageHandling",
          "_WB_AfterWorldUpdate",
          "GetAllHitZones"
        ]
      },
      {
        "class_name": "SCR_DamageManagerData",
        "methods": [
          "Reset",
          "GetOnDamage",
          "GetOnDamageOverTimeAdded",
          "GetOnDamageOverTimeRemoved",
          "GetOnDamageStateChanged",
          "GetOnDamageEffectAdded",
          "GetOnDamageEffectRemoved"
        ]
      },
      {
        "class_name": "SCR_ExtendedDamageManagerComponent",
        "methods": [
          "GetOnDamageEffectAdded",
          "GetOnDamageEffectRemoved",
          "OnDamageEffectAdded",
          "OnDamageEffectRemoved",
          "GetPersistentEffects",
          "GetPersistentEffects"
        ]
      },
      {
        "class_name": "SCR_SecondaryExplosions",
        "methods": [
          "GetSecondaryExplosionForScale",
          "GetSecondaryExplosionScale",
          "GetExplosionPrefab",
          "GetFireParticles"
        ]
      },
      {
        "class_name": "SCR_SecondaryExplosionType",
        "methods": [
          "GetExplosionType",
          "GetResourceType",
          "GetSecondaryExplosionForScale",
          "GetSecondaryExplosionScale",
          "GetExplosionPrefab",
          "GetFireParticles"
        ]
      },
      {
        "class_name": "SCR_SecondaryExplosionTypeContainerTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_SecondaryExplosionContainerTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_VolumeDataProviderComponent",
        "methods": [
          "SCR_VolumeDataProviderComponent",
          "SetCategory"
        ]
      },
      {
        "class_name": "ResourceRequest",
        "methods": [
          "GetResource",
          "GetResource",
          "GetResource",
          "GetResource",
          "RegisterPrefabArray"
        ]
      },
      {
        "class_name": "BasicPrefabList",
        "methods": [
          "OnPostInit"
        ]
      },
      {
        "class_name": "FactionChatChannel",
        "methods": [
          "IsDelivering",
          "IsAvailable"
        ]
      },
      {
        "class_name": "GroupChatChannel",
        "methods": [
          "IsDelivering",
          "IsAvailable"
        ]
      },
      {
        "class_name": "LocalChatChannel",
        "methods": [
          "IsDelivering",
          "IsAvailable"
        ]
      },
      {
        "class_name": "SCR_VoNComponent",
        "methods": [
          "GetDisplay",
          "IsTransmiting",
          "IsTransmitingRadio",
          "OnCapture",
          "OnReceive"
        ]
      },
      {
        "class_name": "ServerChatChannel",
        "methods": [
          "IsDelivering",
          "IsAvailable"
        ]
      },
      {
        "class_name": "SystemChatChannel",
        "methods": [
          "ProcessMessage",
          "IsDelivering",
          "IsAvailable"
        ]
      },
      {
        "class_name": "BackendExamples",
        "methods": [
          "ExecuteTest"
        ]
      },
      {
        "class_name": "Backend_Test_Storage",
        "methods": [
          "Backend_Test_Storage",
          "Init",
          "Read",
          "Update"
        ]
      },
      {
        "class_name": "SCR_BinSaveContext",
        "methods": [
          "SCR_BinSaveContext",
          "SetContainer",
          "SaveToFile",
          "SaveToContainer"
        ]
      },
      {
        "class_name": "SCR_BinLoadContext",
        "methods": [
          "SCR_BinLoadContext",
          "SetContainer",
          "LoadFromFile",
          "LoadFromContainer"
        ]
      },
      {
        "class_name": "SCR_JsonSaveContext",
        "methods": [
          "SCR_JsonSaveContext",
          "SetContainer",
          "SetMaxDecimalPlaces",
          "GetMaxDecimalPlaces",
          "SaveToFile",
          "ExportToString"
        ]
      },
      {
        "class_name": "SCR_JsonLoadContext",
        "methods": [
          "SCR_JsonLoadContext",
          "SetContainer",
          "ImportFromString",
          "LoadFromFile"
        ]
      },
      {
        "class_name": "SCR_BaseHUDComponent",
        "methods": [
          "RegisterHUDElement",
          "UnregisterHUDElement"
        ]
      },
      {
        "class_name": "ScriptedSelectionMenuEntry",
        "methods": [
          "OnPerform",
          "CanBeShownScript",
          "CanBePerformedScript",
          "GetEntryNameScript",
          "GetEntryDescriptionScript",
          "GetEntryIconPathScript",
          "GetUIInfoScript",
          "UpdateVisuals",
          "GetEntryLayout",
          "SetEntryLayout",
          "GetEntryWidget",
          "SetEntryWidget",
          "GetName",
          "SetName"
        ]
      },
      {
        "class_name": "ActionsManagerComponent",
        "methods": [
          "NicifyGeneratedContextName"
        ]
      },
      {
        "class_name": "InteractionHandlerComponent",
        "methods": [
          "CanContextChange",
          "DoIntersectCheck",
          "GetIsInteractionAvailableScript",
          "GetCanInteractScript",
          "GetSelectedActionScript"
        ]
      },
      {
        "class_name": "LightUserAction",
        "methods": [
          "CanBePerformedScript",
          "SetCannotPerformReason",
          "HasLocalEffectOnlyScript",
          "CanBeShownScript",
          "PerformAction",
          "PlaySound",
          "GetActionNameScript",
          "GetLightAudioPos",
          "PlaySound"
        ]
      },
      {
        "class_name": "SCR_CompartmentUserAction",
        "methods": [
          "GetActionNameScript",
          "SetCompartmentDoorInfoIndex",
          "GetCompartmentDoorInfoIndex",
          "GetRelevantDoorIndex",
          "HasLocalEffectOnlyScript"
        ]
      },
      {
        "class_name": "BaseCompartmentSlot",
        "methods": [
          "DebugDrawPosition",
          "IsCompartmentAccessible",
          "SetCompartmentAccessible",
          "GetCompartmentSection",
          "GetIsWaterTight",
          "GetVehicle",
          "GetVehicle",
          "IsOccupied",
          "DamageOccupant",
          "ScreenShakeOccupant",
          "KillOccupant",
          "GetDefaultOccupantData",
          "GetDefaultOccupantPrefab",
          "SpawnDefaultCharacterInCompartment",
          "SpawnCharacterInCompartment",
          "GetFreelookAimLimitOverrideDown",
          "GetFreelookAimLimitOverrideUp",
          "GetFreelookAimLimitOverrideLeft",
          "GetFreelookAimLimitOverrideRight",
          "GetFreelookCameraNeckOffsetScale",
          "GetFreelookCameraNeckFollowTraverse"
        ]
      },
      {
        "class_name": "SCR_DefaultOccupantData",
        "methods": [
          "GetDefaultOccupantPrefab",
          "IsValid"
        ]
      },
      {
        "class_name": "SCR_BaseScreenShakeData",
        "methods": [
          "GetScreenShakeData"
        ]
      },
      {
        "class_name": "SCR_BaseCompartmentManagerComponent",
        "methods": [
          "BlockSuppliesIfOccupied",
          "GetCompartmentsOfType",
          "GetCompartmentsOfTypes",
          "GetCompartments",
          "GetFreeCompartmentsOfType",
          "GetFirstFreeCompartmentOfType",
          "GetFirstFreeCompartmentOfType",
          "GetCompartments",
          "HasFreeCompartmentOfTypes",
          "GetCompartmentsOfType",
          "GetOccupantCount",
          "GetOccupants",
          "GetOccupants",
          "GetOccupantsOfType",
          "DamageOccupants",
          "GetCompartments",
          "KillOccupants",
          "GetCompartments",
          "SetCompartmentsAccessibleForAI",
          "GetCompartments",
          "GetOnDoneSpawningDefaultOccupants",
          "SetAllCompartmentsAccessibleOfTypes",
          "GetCompartmentsOfTypes",
          "CanOccupy",
          "SpawnDefaultOccupants",
          "InitiateSpawnDefaultOccupants",
          "GetFreeCompartmentsOfType",
          "InitiateSpawnDefaultOccupants",
          "GetFreeCompartmentsOfType",
          "FinishedSpawningDefaultOccupants",
          "SpawnDefaultOccupantEachFrame",
          "FinishedSpawningDefaultOccupants",
          "FinishedSpawningDefaultOccupants",
          "CancelSpawningCharacters",
          "FinishedSpawningDefaultOccupants",
          "IsSpawningDefaultOccupants",
          "FinishedSpawningDefaultOccupants",
          "InitiateSpawnDefaultOccupants",
          "IsOccupiedByFriendlies",
          "GetCompartments",
          "AnyCompartmentsOccupiedOrLocked",
          "GetOccupants",
          "GetCompartments",
          "HasDefaultOccupantsDataForTypes",
          "GetCompartmentsOfType",
          "FinishedSpawningDefaultOccupants"
        ]
      },
      {
        "class_name": "SCR_CarControllerComponent",
        "methods": [
          "OnCompartmentEntered",
          "OnCompartmentLeft",
          "ActionCarLightsHiBeamToggle"
        ]
      },
      {
        "class_name": "SCR_CarControllerComponent_B",
        "methods": [
          "OnCompartmentEntered",
          "OnCompartmentLeft",
          "ActionCarLightsHiBeamToggle"
        ]
      },
      {
        "class_name": "SCR_HelicopterControllerComponent",
        "methods": [
          "OnCompartmentEntered",
          "OnCompartmentLeft",
          "ActionHelicopterLightsTaxiToggle",
          "ActionHelicopterLightsLandingToggle"
        ]
      },
      {
        "class_name": "Vehicle",
        "methods": [
          "GetOnPhysicsActive",
          "EOnPhysicsActive",
          "GetFaction",
          "GetFactionAffiliation",
          "GetDefaultFaction",
          "IsOccupied",
          "GetVehicleController",
          "GetPilotCompartmentSlot",
          "GetPilot",
          "GetResourceComponent",
          "UpdateResourceComponent",
          "Vehicle",
          "SetEventMask",
          "EOnInit",
          "UpdateResourceComponent"
        ]
      },
      {
        "class_name": "VehicleControllerComponent",
        "methods": [
          "GetOnEngineStart",
          "GetOnEngineStop",
          "GetDamageManager",
          "IsStarterFunctional",
          "OnDestroyed",
          "OnCompartmentEntered",
          "OnCompartmentLeft",
          "OnPostInit",
          "OnDelete",
          "OnEngineStartBegin",
          "OnEngineStartProgress",
          "OnEngineStartFail",
          "OnEngineStartFail",
          "OnEngineStartInterrupt",
          "OnEngineStartSuccess",
          "OnEngineStartFail",
          "OnBeforeEngineStart",
          "OnEngineStart",
          "OnEngineStop",
          "ValidateCanMove"
        ]
      },
      {
        "class_name": "OnHitAimModifier",
        "methods": [
          "OnInit",
          "OnActivated",
          "OnDeactivated",
          "OnDamage",
          "OnCalculate",
          "DrawDiagWindow",
          "VectorSpring",
          "ResetEffect",
          "DrawDiagWindow",
          "ResetEffect",
          "OnDamage"
        ]
      },
      {
        "class_name": "SightsComponent",
        "methods": [
          "ApplyRecoilToCamera",
          "CanFreelook",
          "GetDOFRelatedPrefabData",
          "WB_GetZeroingData",
          "FindParent",
          "CalculateDataWithParent"
        ]
      },
      {
        "class_name": "TimeAndWeatherManagerEntityClass",
        "methods": [
          "SCR_TimeAndWeatherManager_OnWeatherStatePreview",
          "SCR_TimeAndWeatherManager_OnWindPreview",
          "SCR_TimeAndWeatherManager_OnDateTimePreview"
        ]
      },
      {
        "class_name": "TimeAndWeatherManagerEntity",
        "methods": [
          "SetWeatherStatePreview",
          "SetWindPreview",
          "SetDateTimePreview",
          "IsSunSet",
          "IsSunSet",
          "GetWeekDayString",
          "GetWeekDayStringForDate",
          "SetCurrentWeatherLooping",
          "ForceWeatherTo",
          "ForceWeatherTo",
          "SetWeatherStatePreview",
          "UpdateWeatherLooping",
          "Rpc",
          "UpdateWeatherLooping",
          "IsWeatherLooping",
          "GetCurrentMoonPhaseInfoForDate",
          "GetDate",
          "GetMoonPhaseInfoForDate",
          "GetTime",
          "GetHoursMinutesSeconds",
          "CreateDayTimeInfoArray",
          "GetCurrentDayTimeUIInfo",
          "CreateDayTimeInfoArray",
          "GetCurrentDayTimeUIInfoAndPhase",
          "CreateDayTimeInfoArray",
          "GetDayTimeUIInfo",
          "CreateDayTimeInfoArray",
          "GetDayTimeInfoArray",
          "CreateDayTimeInfoArray",
          "GetOrderedWindDirectionInfoArray",
          "GetWindDirectionInfoFromIndex",
          "GetWindDirectionInfoFromFloat",
          "DelayedSetWindOverride",
          "StartListeningToWindApplyDelay",
          "DelayedOverrideWindSpeed",
          "StartListeningToWindApplyDelay",
          "DelayedOverrideWindDirection",
          "StartListeningToWindApplyDelay",
          "StartListeningToWindApplyDelay",
          "DelayedApplyWindOverride",
          "SetWindSpeedOverride",
          "SetWindDirectionOverride",
          "SetWindSpeedOverride",
          "SetWindDirectionOverride",
          "GetWindDirectionInfoFromFloat",
          "ClearDelayedWindOverrideVars",
          "ClearDelayedWindOverrideVars",
          "SetTime",
          "SetHoursMinutesSeconds",
          "RplSave",
          "RplLoad",
          "UpdateWeatherLooping"
        ]
      },
      {
        "class_name": "TimeContainer",
        "methods": [
          "TimeContainer",
          "FromHoursMinutesSeconds",
          "TimeContainer",
          "FromTimeOfTheDay",
          "TimeContainer",
          "ToTimeOfTheDay"
        ]
      },
      {
        "class_name": "SCR_DayTimeInfoBase",
        "methods": [
          "GetDayTimeUIInfo",
          "GetDaytimeEnum",
          "GetDayTime",
          "Clear",
          "GetDayTime",
          "SetDayTime",
          "SetDayTime"
        ]
      },
      {
        "class_name": "SCR_DayTimeInfoStatic",
        "methods": [
          "SetDayTime"
        ]
      },
      {
        "class_name": "SCR_DayTimeInfoAuto",
        "methods": [
          "SetDayTime"
        ]
      },
      {
        "class_name": "SCR_DayTimeInfoBetween",
        "methods": [
          "SetDayTime"
        ]
      },
      {
        "class_name": "SCR_WindDirectionInfo",
        "methods": [
          "GetUIInfo",
          "GetWindDirectionValue"
        ]
      },
      {
        "class_name": "SCR_MoonPhaseInfo",
        "methods": [
          "GetUIInfo",
          "IsMoonPhase"
        ]
      },
      {
        "class_name": "DecoratorTestNotNull",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "AnimateWidget",
        "methods": [
          "GetInstance",
          "StopAnimation",
          "StopAnimation",
          "StopAllAnimations",
          "IsAnimating",
          "IsAnimatingType",
          "GetAnimation",
          "IsActive",
          "AddAnimation",
          "BlurIntensity",
          "Opacity",
          "Saturation",
          "AlphaMask",
          "Color",
          "Size",
          "Position",
          "Padding",
          "LayoutFill",
          "Rotation",
          "Value",
          "PrepareAnimation",
          "UpdateAnimations",
          "AnimateWidget"
        ]
      },
      {
        "class_name": "CinematicTrackAttribute",
        "methods": [
          "CinematicTrackAttribute"
        ]
      },
      {
        "class_name": "CinematicEventAttribute",
        "methods": [
          "CinematicEventAttribute"
        ]
      },
      {
        "class_name": "NoiseCinematicTrackModifier",
        "methods": [
          "OnApplyModifierBool",
          "OnApplyModifierInt",
          "OnApplyModifierFloat",
          "OnApplyModifierVector"
        ]
      },
      {
        "class_name": "SignalInput",
        "methods": [
          "SignalInput"
        ]
      },
      {
        "class_name": "SimpleTimeSignal",
        "methods": [
          "SimpleTimeSignal",
          "Update",
          "Restart",
          "RestartAndSignal"
        ]
      },
      {
        "class_name": "AutotestGrid",
        "methods": [
          "AutotestGrid",
          "SetEventMask",
          "SetFlags",
          "GridPositionToWorldPosition",
          "UpdateMeasurements",
          "MakeSummeryFile",
          "MakeSummeryFile",
          "RotateCamera",
          "UpdateMeasurements",
          "RotateCamera",
          "QuatToString",
          "GetYDistance"
        ]
      },
      {
        "class_name": "MeasurementFile",
        "methods": [
          "MeasurementFile",
          "IsValid",
          "GetFilePath",
          "SetGraphHeader",
          "AddData",
          "IsChart",
          "AddHeader"
        ]
      },
      {
        "class_name": "AutotestRegister",
        "methods": [
          "Init",
          "GetAutotestPageName",
          "GetWorldFileFolderPath",
          "GetTestIndex",
          "DoesMeasurementExist",
          "OpenMeasurementFile",
          "UploadLogFileWithResults",
          "SavePersistentData",
          "LoadPersistentData",
          "GetNumberOfDataLines",
          "GetNumberOfWorldFiles",
          "CreatePersistentFilePath",
          "CreateMeasurementFilePath"
        ]
      },
      {
        "class_name": "FPS_Autotest",
        "methods": [
          "FPS_Autotest",
          "SetEventMask",
          "SetFlags",
          "FormatTimestamp"
        ]
      },
      {
        "class_name": "Measurement",
        "methods": [
          "AddValue",
          "ComputeAverage"
        ]
      },
      {
        "class_name": "MotionZonePoint",
        "methods": [
          "MotionZonePoint",
          "SetEventMask",
          "SetFlags"
        ]
      },
      {
        "class_name": "MotionZone",
        "methods": [
          "MotionZone",
          "SetEventMask",
          "SetFlags",
          "GetMin",
          "GetMax",
          "Initialize",
          "EOnInit",
          "Initialize"
        ]
      },
      {
        "class_name": "MotionAutoTest",
        "methods": [
          "MotionAutoTest",
          "SetEventMask",
          "SetFlags",
          "UpdateMeasurements",
          "CreateLines",
          "GeneratePathFromWaypoints",
          "GeneratePath",
          "Initialize",
          "Initialize",
          "GeneratePath",
          "GeneratePathFromWaypoints",
          "TransformCameraToWaypoint",
          "MakeSummeryFile",
          "MakeCSVFile",
          "GetCurrentTimestamp",
          "UpdatePosition",
          "MakeSummeryFile",
          "MakeCSVFile",
          "UpdateMeasurements",
          "UpdatePosition",
          "UpdateState",
          "UpdateTime",
          "CompareQuat",
          "UpdateState",
          "UpdateTime",
          "ComputePosition",
          "ComputeOrientation",
          "QuatToString",
          "Initialize",
          "GetYDistance",
          "TransformCameraToWaypoint"
        ]
      },
      {
        "class_name": "Screenshot_Autotest",
        "methods": [
          "Screenshot_Autotest",
          "SetEventMask",
          "SetFlags",
          "GetDefaultTimeOfTheDay",
          "GetDefaultYear",
          "GetDefaultMonth",
          "GetDefaultDay",
          "GetDefaultWeatherState",
          "TransformCameraToWaypoint",
          "MakeSummaryFile",
          "MakeCSVSummaryFile",
          "MakeLocationsCSVSummaryFile",
          "MakeScreenshotMetafile",
          "TransformCameraToWaypoint",
          "MakeSummaryFile",
          "MakeCSVSummaryFile",
          "MakeLocationsCSVSummaryFile",
          "GetCurrentTimestamp",
          "MakeScreenshotMetafile",
          "TransformCameraToWaypoint",
          "GetTimeAndDate",
          "SetTimeAndDate",
          "SetWeatherState"
        ]
      },
      {
        "class_name": "Screenshot_Waypoint",
        "methods": [
          "Screenshot_Waypoint",
          "SetFlags",
          "SetTransform",
          "EOnEnter",
          "EOnExit",
          "GetDescription"
        ]
      },
      {
        "class_name": "CrossroadEntity",
        "methods": [
          "CrossroadEntity",
          "SetEventMask",
          "EOnInit",
          "Init",
          "Init",
          "UpdateTerrain",
          "UpdateTerrain",
          "GetWorldBounds",
          "_WB_CanAnchorSnap",
          "GetTangent",
          "_WB_OnAnchorSnapped",
          "GetWorldTransform",
          "_WB_OnKeyChanged",
          "UpdateTerrain",
          "_WB_GetAnchorCount",
          "_WB_GetAnchor",
          "Init"
        ]
      },
      {
        "class_name": "WorldDecal",
        "methods": [
          "WorldDecal",
          "ClearFlags",
          "SetFlags",
          "SetEventMask",
          "Destroy",
          "GetForwardVec",
          "GetSize",
          "CreateArrow",
          "GetPitchMatrix",
          "RecreateVisualizers",
          "GetTransform",
          "_WB_GetBoundBox",
          "ClearShapes",
          "_WB_SetExtraVisualiser",
          "ClearShapes",
          "RecreateVisualizers",
          "_WB_SetTransform",
          "Destroy",
          "Create",
          "RecreateVisualizers",
          "Create",
          "Destroy",
          "ClearShapes",
          "Create"
        ]
      },
      {
        "class_name": "RoadGeneratorEntity",
        "methods": [
          "GetRoadClearance",
          "GetRoadWidth",
          "RoadGeneratorEntity",
          "SetEventMask",
          "OnShapeInit",
          "_WB_CanSelect",
          "_WB_OnDelete",
          "_WB_OnKeyChanged",
          "UpdateTerrain",
          "UpdateRoad",
          "_WB_OnCreate",
          "UpdateRoad",
          "UpdateTerrain",
          "OnShapeInitInternal",
          "UpdateTerrain",
          "OnShapeTransformInternal",
          "UpdateTerrain",
          "UpdateRoad",
          "OnShapeChangedInternal",
          "UpdateTerrain",
          "UpdateRoad",
          "UpdateRoad",
          "UpdateTerrain",
          "UpdateRoadEntity"
        ]
      },
      {
        "class_name": "WB_UIMenuItem",
        "methods": [
          "WB_UIMenuItem"
        ]
      },
      {
        "class_name": "GenericEntityClass",
        "methods": [
          "GenericEntityClass"
        ]
      },
      {
        "class_name": "ScriptCamera",
        "methods": [
          "ScriptCamera",
          "SetFlags",
          "SetEventMask",
          "GetTransform",
          "FreeFly",
          "GetWorldTransform",
          "FreeFly",
          "GetTransform",
          "SetTransform",
          "DebugInfo"
        ]
      },
      {
        "class_name": "EntitySpawnParams",
        "methods": [
          "EntitySpawnParams"
        ]
      },
      {
        "class_name": "LoadingAnim",
        "methods": [
          "LoadingAnim",
          "Show",
          "Update",
          "Hide"
        ]
      },
      {
        "class_name": "BaseLoadingAnim",
        "methods": [
          "Load",
          "Unload",
          "BaseLoadingAnim",
          "Unload",
          "CreateLayout",
          "Update",
          "Show",
          "Load",
          "Hide",
          "Unload",
          "GameLibInit"
        ]
      },
      {
        "class_name": "ScriptStringTableItem",
        "methods": [
          "GetTargetPrefix"
        ]
      },
      {
        "class_name": "MyGameSettings",
        "methods": [
          "ChangeMySettings",
          "SomewhereInInit",
          "OnSpeedChanged"
        ]
      },
      {
        "class_name": "AIAgent",
        "methods": [
          "GetControlledEntity",
          "GetParentGroup",
          "SetLOD",
          "GetLOD",
          "SetPermanentLOD",
          "GetPermanentLOD",
          "PreventMaxLOD",
          "AllowMaxLOD",
          "GetMaxLOD",
          "CountTowardsAIWorldLimit",
          "GetDangerEventsCount",
          "GetDangerEvent",
          "ClearDangerEvents",
          "GetActionManager",
          "GetCommunicationComponent",
          "GetControlComponent",
          "GetMovementComponent",
          "GetAimingComponent",
          "ActivateAI",
          "DeactivateAI",
          "IsAIActivated",
          "OnLODChanged"
        ]
      },
      {
        "class_name": "AIBaseMovementComponent",
        "methods": [
          "HasCompletedRequest",
          "RequestFollowPathOfEntity",
          "GetCurrentPath",
          "GetPathfindingComponent",
          "OnPathSet"
        ]
      },
      {
        "class_name": "AIBehaviorTreeComponent",
        "methods": [
          "SetBtBreakpoint"
        ]
      },
      {
        "class_name": "AICommunicationComponent",
        "methods": [
          "CreateMessage",
          "RequestBroadcast",
          "GetOrder",
          "RemoveOrder",
          "GetOrderCount",
          "ClearOrders",
          "GetMessage",
          "RemoveMessage",
          "GetMessageCount",
          "ClearMessages",
          "OnReceived",
          "OnFrame",
          "OnInit"
        ]
      },
      {
        "class_name": "AIComponent",
        "methods": [
          "GetAIAgent"
        ]
      },
      {
        "class_name": "AIControlComponent",
        "methods": [
          "GetControlAIAgent",
          "ActivateAI",
          "DeactivateAI",
          "IsAIActivated"
        ]
      },
      {
        "class_name": "AIDangerEvent",
        "methods": [
          "GetVictim",
          "GetDangerType",
          "SetVictim",
          "SetDangerType",
          "GetCount"
        ]
      },
      {
        "class_name": "AIFormationComponent",
        "methods": [
          "GetOffsetPosition",
          "GetFormationCenterPosition",
          "SetFormation",
          "GetFormation"
        ]
      },
      {
        "class_name": "AIFormationDefinition",
        "methods": [
          "GetOffsetPosition",
          "GetScaledOffsetPosition",
          "GetCenterOfFormation",
          "GetScaledCenterOfFormation",
          "GetName"
        ]
      },
      {
        "class_name": "AIGroup",
        "methods": [
          "AddAgent",
          "RemoveAgent",
          "GetAgents",
          "GetAgentsCount",
          "ActivateAllMembers",
          "DeactivateAllMembers",
          "GetFormationComponent",
          "AddWaypoint",
          "RemoveWaypoint",
          "AddWaypointAt",
          "RemoveWaypointAt",
          "CompleteWaypoint",
          "GetCurrentWaypoint",
          "GetWaypoints",
          "GetLeaderAgent",
          "GetLeaderEntity",
          "GetCenterOfMass",
          "SetNewLeader",
          "OnCurrentWaypointChanged",
          "OnWaypointCompleted",
          "OnWaypointAdded",
          "OnWaypointRemoved",
          "OnEmpty",
          "OnAgentAdded",
          "OnAgentRemoved",
          "OnLeaderChanged"
        ]
      },
      {
        "class_name": "AIMessage",
        "methods": [
          "SetFlag",
          "ClearFlag",
          "GetFlag",
          "SetText",
          "GetText",
          "GetPosition",
          "SetPosition",
          "GetSender",
          "SetReceiver",
          "GetReceiver",
          "GetObject",
          "SetObject",
          "OnBroadcast",
          "OnReceived"
        ]
      },
      {
        "class_name": "AIOrder",
        "methods": [
          "IsFinished",
          "GetOrderTypeString",
          "GetOrderType",
          "SetOrderType"
        ]
      },
      {
        "class_name": "AIPathfindingComponent",
        "methods": [
          "RayTrace",
          "GetNavmeshComponent",
          "GetClosestPositionOnNavmesh"
        ]
      },
      {
        "class_name": "AISpawnerGroup",
        "methods": [
          "Spawn",
          "IsSpawningFinished",
          "SetMaxAgentsToSpawn",
          "GetMaxAgentsToSpawn",
          "OnSpawn"
        ]
      },
      {
        "class_name": "AITaskScripted",
        "methods": [
          "OnEnter",
          "OnInit",
          "OnAbort",
          "EOnTaskSimulate",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "AIWaypoint",
        "methods": [
          "GetCompletionRadius",
          "SetCompletionRadius",
          "GetCompletionType",
          "SetCompletionType",
          "IsWithinCompletionRadius"
        ]
      },
      {
        "class_name": "AIWaypointCycle",
        "methods": [
          "PerformOn",
          "SetRerunCounter",
          "GetRerunCounter",
          "SetWaypoints",
          "GetWaypoints"
        ]
      },
      {
        "class_name": "AIWorld",
        "methods": [
          "GetCurrentAmountOfLimitedAIs",
          "GetAILimit",
          "SetAILimit",
          "CanLimitedAIBeAdded",
          "GetCurrentNumOfActiveAIs",
          "GetLimitOfActiveAIs",
          "SetLimitOfActiveAIs",
          "CanAIBeActivated",
          "GetAIAgents",
          "RequestBroadcastDangerEvent",
          "GetFormation",
          "GetRoadNetworkManager",
          "GetNavmeshWorldComponent",
          "RequestNavmeshRebuild",
          "RequestNavmeshLoad",
          "OnDebugCameraTeleport",
          "OnDebugAgentTeleport",
          "AddedAIAgent",
          "RemovingAIAgent"
        ]
      },
      {
        "class_name": "AssignmentSolver",
        "methods": [
          "AssignmentSolver",
          "Solve"
        ]
      },
      {
        "class_name": "BaseAimPoint",
        "methods": [
          "GetPosition",
          "GetDimension"
        ]
      },
      {
        "class_name": "DecoratorScripted",
        "methods": [
          "GetOnHoverDescription",
          "VisibleInPalette",
          "TestFunction",
          "OnInit",
          "GetNodeMiddleText"
        ]
      },
      {
        "class_name": "DecoratorTestScripted",
        "methods": [
          "TestFunction"
        ]
      },
      {
        "class_name": "NavmeshCustomLinkComponent",
        "methods": [
          "HasLinkOfNavmeshType"
        ]
      },
      {
        "class_name": "NavmeshWorldComponent",
        "methods": [
          "IsTileLoaded",
          "IsTileValid",
          "IsTileRequested",
          "LoadTileIn",
          "GetReachablePoint"
        ]
      },
      {
        "class_name": "Node",
        "methods": [
          "GetNodeID",
          "GetVariableType",
          "GetVariableIn",
          "SetVariableOut",
          "ClearVariable",
          "GetCallstackStr",
          "GetParentTreeName",
          "GetVariablesIn",
          "GetVariablesOut",
          "VisibleInPalette",
          "GetOnHoverDescription",
          "CanReturnRunning"
        ]
      },
      {
        "class_name": "BaseWeatherStateTransitionManager",
        "methods": [
          "BaseWeatherStateTransitionManager",
          "IsPreviewingState",
          "IsPreviewingDateTime",
          "IsPreviewingWind",
          "SetStatePreview",
          "SetDateTimePreview",
          "SetWindPreview",
          "RequestStateTransitionImmediately",
          "RequestStateTransition",
          "CreateStateTransition",
          "EnqueueStateTransition",
          "InsertStateTransition",
          "GetStateTransitionNodeList",
          "GetStateTransitionNode",
          "GetCurrentStateTransitionNode",
          "GetCurrentState",
          "GetNextState",
          "GetTimeLeftUntilNextState",
          "GetTimeLeftUntilNextVariant",
          "RemoveStateTransition",
          "GetStateTransitionsCount",
          "CheckValidStateTransition",
          "AddTransitionCallbacks",
          "RemoveTransitionCallbacks"
        ]
      },
      {
        "class_name": "BaseWeatherTransitionCallbacks",
        "methods": [
          "OnStateSetImmediately",
          "OnNewTransitionSet",
          "OnTransitionStarted",
          "OnTransitionEnded"
        ]
      },
      {
        "class_name": "CinematicTrackBase",
        "methods": [
          "GetTrackName",
          "GetSceneName",
          "OnInit",
          "OnFinish",
          "OnApply"
        ]
      },
      {
        "class_name": "CinematicTrackModifier",
        "methods": [
          "OnApplyModifierBool",
          "OnApplyModifierInt",
          "OnApplyModifierFloat",
          "OnApplyModifierVector",
          "OnApplyModifierColor"
        ]
      },
      {
        "class_name": "AnimationControllerComponent",
        "methods": [
          "RebindEntity",
          "BindCommand",
          "CallCommand",
          "CallCommand4I",
          "BindIntVariable",
          "SetIntVariable",
          "BindFloatVariable",
          "SetFloatVariable",
          "BindBoolVariable",
          "SetBoolVariable"
        ]
      },
      {
        "class_name": "AnimationPlayerComponent",
        "methods": [
          "Play",
          "Stop",
          "IsPlaying",
          "Prepare",
          "GetOwner",
          "GetAnimation",
          "GetLoop",
          "GetPlaySpeed",
          "GetStartTime"
        ]
      },
      {
        "class_name": "BaseProcAnimComponent",
        "methods": [
          "GetControllerCount",
          "GetBoneNames",
          "GetBoneSlotNames",
          "GetBoneSlotIndex",
          "GetSignals",
          "GetSignalIndex"
        ]
      },
      {
        "class_name": "BaseRplComponent",
        "methods": [
          "GetNode",
          "Give",
          "Id",
          "ChildId",
          "Role",
          "IsOwner",
          "IsProxy",
          "IsMaster",
          "IsOwnerProxy",
          "IsRemoteProxy",
          "InsertItem",
          "InsertToReplication",
          "GetEntity",
          "ReleaseFromRpl",
          "IsReleasedFromRpl",
          "IsSelfInserted"
        ]
      },
      {
        "class_name": "BaseSoundComponent",
        "methods": [
          "GetEvents",
          "GetEventIndex",
          "GetSignalNames",
          "GetSignalIndex",
          "SetSignalValue",
          "SetSignalValueStr",
          "PlayStr",
          "Play",
          "UpdateTrigger",
          "TerminateAll",
          "Terminate",
          "IsFinishedPlaying",
          "IsPlaying",
          "IsHandleValid",
          "SetTransformation",
          "SetSoundTransformation",
          "SetDebug",
          "SetMute",
          "GetGain"
        ]
      },
      {
        "class_name": "CharacterAnimGraphComponent",
        "methods": [
          "SetAnimSetInstance",
          "SetAttachment",
          "RemoveAttachment",
          "SetExternalIKPose",
          "BindCommand",
          "CallCommand",
          "CallCommand4I",
          "BindIntVariable",
          "SetIntVariable",
          "BindFloatVariable",
          "SetFloatVariable",
          "BindBoolVariable",
          "SetBoolVariable",
          "BindTag",
          "IsTag",
          "BindEvent",
          "IsEvent",
          "GetEventCompletion",
          "GetEventUserData"
        ]
      },
      {
        "class_name": "CharacterMovementComponent",
        "methods": [
          "HasRootMotion",
          "SetRootMotion",
          "GetVelocityWS",
          "GetVelocityMS",
          "GetAngularVelocity",
          "GetMovementMode",
          "SetRotationMode",
          "SetMovementMaxSpeed",
          "GetMovementMaxSpeed",
          "GetFloorEntity",
          "GetFloorNormal",
          "PredictStopPosition",
          "GetCurrentMoveTimeStamp",
          "SetJumpInput",
          "IsMovingOnGround",
          "IsFalling"
        ]
      },
      {
        "class_name": "GenericComponent",
        "methods": [
          "Preload",
          "GenericComponent",
          "GetComponentData",
          "GetComponentSource",
          "Rpc",
          "GetEventMask",
          "SetEventMask",
          "ClearEventMask",
          "FindComponent",
          "FindComponents",
          "Activate",
          "Deactivate",
          "IsActive",
          "OnTransformResetImplNative",
          "ConnectToDiagSystem",
          "DisconnectFromDiagSystem",
          "OnTransformReset",
          "_WB_SetTransform",
          "_WB_OnInit",
          "_WB_CanDelete",
          "_WB_CanRename",
          "_WB_CanCopy",
          "_WB_CanSelect",
          "_WB_GetBoundBox",
          "_WB_SetExtraVisualiser",
          "_WB_OnPhysSimulPlacementBegin",
          "_WB_EnablePhysics",
          "_WB_OnKeyChanged",
          "_WB_AfterWorldUpdate",
          "_WB_OnContextMenu",
          "_WB_OnKeyDown",
          "_WB_OnCreate",
          "_WB_OnParentChange",
          "_WB_OnDelete",
          "_WB_OnRename",
          "OnTransformResetImpl"
        ]
      },
      {
        "class_name": "PawnMovementComponent",
        "methods": [
          "AddInputVector",
          "GetCurrentInputVector",
          "GetLastInputVector",
          "ConsumeInputVector"
        ]
      },
      {
        "class_name": "ScriptComponent",
        "methods": [
          "RplLoad",
          "RplSave",
          "GetOwner",
          "EOnTouch",
          "EOnInit",
          "EOnVisible",
          "EOnFrame",
          "EOnPostFrame",
          "EOnAnimEvent",
          "EOnSimulate",
          "EOnPostSimulate",
          "EOnJointBreak",
          "EOnPhysicsMove",
          "EOnContact",
          "EOnPhysicsActive",
          "EOnDiag",
          "EOnFixedFrame",
          "EOnPostFixedFrame",
          "EOnActivate",
          "EOnDeactivate",
          "OnPostInit",
          "OnDelete",
          "OnAddedToParent",
          "OnRemovedFromParent",
          "OnChildAdded",
          "OnChildRemoved"
        ]
      },
      {
        "class_name": "SndComponent",
        "methods": [
          "GetOwner",
          "Update"
        ]
      },
      {
        "class_name": "SoundOutputStateComponent",
        "methods": [
          "GetSignalNames",
          "GetSignalIndex",
          "SetSignalValueName",
          "SetSignalValue",
          "SetDebug"
        ]
      },
      {
        "class_name": "BaseWeatherManagerEntity",
        "methods": [
          "GetCurrentWeatherState",
          "GetDayDuration",
          "SetDayDuration",
          "SetIsDayAutoAdvanced",
          "GetIsDayAutoAdvanced",
          "SetCurrentLongitude",
          "GetCurrentLongitude",
          "GetCurrentLatitude",
          "SetCurrentLatitude",
          "GetTimeZoneOffset",
          "SetTimeZoneOffset",
          "GetDSTOffset",
          "SetDSTOffset",
          "IsDSTEnabled",
          "SetDSTEnabled",
          "SetWindSpeedOverride",
          "GetWindSpeed",
          "SetWindDirectionOverride",
          "GetWindDirection",
          "IsWindSpeedOverridden",
          "IsWindDirectionOverridden",
          "SetRainIntensityOverride",
          "GetRainIntensity",
          "IsRainIntensityOverridden",
          "SetFogAmountOverride",
          "SetFogHeightDensityOverride",
          "GetFogAmount",
          "IsFogAmountOverridden",
          "GetFogHeightDensity",
          "IsFogHeightDensityOverridden",
          "SetCurrentWetness",
          "GetCurrentWetness",
          "SetCurrentWaterAccumulation",
          "GetCurrentWaterAccumulationCracks",
          "GetCurrentWaterAccumulationPuddles",
          "AddLightning",
          "GetTransitionManager",
          "GetMoonPhaseForDate",
          "GetCurrentSunMoonDirAndPhase",
          "GetSunriseHour",
          "GetSunsetHour",
          "GetSunriseHourForDate",
          "GetSunsetHourForDate",
          "SetTimeOfTheDay",
          "GetTimeOfTheDay",
          "SetTimeOfTheDay",
          "GetHoursMinutesSeconds",
          "SetTimeOfTheDay",
          "SetHoursMinutesSeconds",
          "GetHoursMinutesSeconds",
          "SetHoursMinutesSeconds",
          "GetYear",
          "GetMonth",
          "GetDay",
          "GetDayInYear",
          "SetDate",
          "GetDate",
          "SetTimeOfTheDay",
          "GetHoursMinutesSeconds",
          "GetHoursMinutesSeconds",
          "TimeToHoursMinutesSeconds",
          "HoursMinutesSecondsToTime",
          "GetWeekDay",
          "GetWeekDayForDate",
          "GetEngineTime",
          "GetWeatherStatesList",
          "GetMoonPhase",
          "CheckValidDate",
          "UpdateWeather"
        ]
      },
      {
        "class_name": "CharacterEntity",
        "methods": [
          "GetMovementComponent",
          "GetAnimGraphComponent",
          "GetSoundComponent",
          "EnableCollisionResponse"
        ]
      },
      {
        "class_name": "CinematicEntity",
        "methods": [
          "Play",
          "Pause",
          "Stop",
          "IsPlaying",
          "Isfinished",
          "AttachCameraToEntity",
          "DetachCamera",
          "PlayCameraAnimation",
          "PlayCameraAnimationExt",
          "StopCameraAnimation"
        ]
      },
      {
        "class_name": "EnvironmentProbeEntity",
        "methods": [
          "SetProbePosition",
          "SetReflectionEV",
          "SetDiffuseEV"
        ]
      },
      {
        "class_name": "GeneratorBaseEntity",
        "methods": [
          "OnShapeInitInternal",
          "BeforeShapeTransformInternal",
          "OnShapeTransformInternal",
          "OnShapeChangedInternal",
          "OnPointDataChangedInternal",
          "OnPointChangedInternal",
          "OnAnchorSnappedInternal",
          "CanAnchorSnapInternal",
          "OnIntersectingShapeChangedXZInternal",
          "OnShapeInit",
          "BeforeShapeTransform",
          "OnShapeTransform",
          "OnShapeChanged",
          "OnPointDataChanged",
          "OnPointChanged",
          "OnAnchorSnapped",
          "CanAnchorSnap",
          "OnIntersectingShapeChangedXZ"
        ]
      },
      {
        "class_name": "GenericEntity",
        "methods": [
          "RplLoad",
          "RplSave",
          "Preload",
          "Activate",
          "Deactivate",
          "Show",
          "Rpc",
          "_WB_GetEditorAPI",
          "GetMatrixFromSource",
          "OnTransformResetImplNative",
          "ConnectToDiagSystem",
          "DisconnectFromDiagSystem",
          "OnTransformReset",
          "EOnDiag",
          "EOnActivate",
          "EOnDeactivate",
          "_WB_GetEditableOwner",
          "_WB_MakeVisible",
          "_WB_SetTransform",
          "_WB_OnInit",
          "_WB_CanDelete",
          "_WB_CanRename",
          "_WB_CanCopy",
          "_WB_CanSelect",
          "_WB_GetAnchorCount",
          "_WB_GetAnchor",
          "_WB_OnAnchorSnapped",
          "_WB_CanAnchorSnap",
          "_WB_GetBoundBox",
          "_WB_ShouldShowBoundBox",
          "_WB_SetExtraVisualiser",
          "_WB_OnPhysSimulPlacementBegin",
          "_WB_EnablePhysics",
          "_WB_OnKeyChanged",
          "_WB_AfterWorldUpdate",
          "_WB_OnContextMenu",
          "_WB_OnKeyDown",
          "_WB_OnCreate",
          "_WB_OnParentChange",
          "_WB_OnDelete",
          "_WB_OnRename",
          "OnTransformResetImpl"
        ]
      },
      {
        "class_name": "GenericTerrainEntity",
        "methods": [
          "FlattenGrassSphere",
          "FlattenGrassEllipse",
          "FlattenGrassBox",
          "FlattenGrassRect",
          "GetTileTextureResName",
          "GetTileNumber",
          "WorldToTerrCoord",
          "TerrToWorldCoord",
          "TryGetHeightTC",
          "GetTileVerticesCount"
        ]
      },
      {
        "class_name": "GenericWorldEntity",
        "methods": [
          "GetTerrain",
          "GetSkyMaterial"
        ]
      },
      {
        "class_name": "LightEntity",
        "methods": [
          "CreateLight",
          "SetEnabled",
          "IsEnabled",
          "SetLightFlags",
          "ClearLightFlags",
          "IsLightFlagsSet",
          "IsDynamic",
          "SetCastShadow",
          "IsCastShadow",
          "SetColor",
          "SetRadius",
          "GetRadius",
          "SetIntensityEVClip",
          "SetConeAngle",
          "SetDistanceAtt",
          "SetConeAngleAttenuation",
          "GetConeAngle",
          "SetTexture",
          "SetNearPlane",
          "GetNearPlane",
          "SetVolumeEffect",
          "SetLensFlareType",
          "SetLensFlareIndex",
          "SetLensFlareScale",
          "SetLensFlareOffset",
          "SetLightDirection"
        ]
      },
      {
        "class_name": "PawnEntity",
        "methods": [
          "SetSimulationTickStep",
          "Possess",
          "Dispossess",
          "GetController",
          "GetPawnMovementComponent",
          "IsLocal",
          "IsAuthority",
          "IsControlledAuthority",
          "IsControlledProxy",
          "IsControlledMaster",
          "IsSimulatedProxy",
          "AddRelatedEntity",
          "RemoveRelatedEntity",
          "SetSimulationDisabled",
          "OnPossesion",
          "OnDispossesion",
          "SimPhaseMainLogic",
          "SimPhasePreAnim",
          "SimPhasePostAnim"
        ]
      },
      {
        "class_name": "PawnRelatedEntity",
        "methods": [
          "SimPhaseMainLogic",
          "SimPhasePreAnim",
          "SimPhasePostAnim"
        ]
      },
      {
        "class_name": "RoadEntity",
        "methods": [
          "WB_EnableAutoReinits",
          "WB_DisableAutoReinits"
        ]
      },
      {
        "class_name": "ShapeEntity",
        "methods": [
          "GetPointContainerOfType",
          "SetPoints",
          "GenerateTesselatedShape",
          "GetAllInfluenceBBoxes",
          "GetInfluenceBBoxesInSegments",
          "GetPointCount",
          "IsClosed",
          "GetPointsPositions",
          "AddPointData"
        ]
      },
      {
        "class_name": "SplineShapeEntity",
        "methods": [
          "HasPointExplicitTangents",
          "SetPointsSpline",
          "GetTangents"
        ]
      },
      {
        "class_name": "SplineTerrainGeneratorEntityBase",
        "methods": [
          "GetSegmentBoundBoxes",
          "RegisterGenerator",
          "RemoveGenerator",
          "AddRectsToUpdateQueue",
          "UpdateRectsFromQueue",
          "GetMaxTerrainResolution"
        ]
      },
      {
        "class_name": "StaticModelEntity",
        "methods": [
          "CreateOccluders",
          "DestroyOccluders"
        ]
      },
      {
        "class_name": "TreeEntityClass",
        "methods": [
          "GetSoundType",
          "GetSoundFoliageHeight"
        ]
      },
      {
        "class_name": "Game",
        "methods": [
          "GetWorld",
          "GetInputManager",
          "GetMenuManager",
          "GetWorkspace",
          "GetWorldFile",
          "GetWorldEditor",
          "StartCinematic",
          "StopCinematic",
          "IsPlayingCinematic",
          "GetEngineUserSettings",
          "GetGameUserSettings",
          "ApplySettingsPreset",
          "UserSettingsChanged",
          "SaveUserSettings",
          "IsSaveStorageAvailable",
          "GetBackendApi",
          "GetBackendDebugApi",
          "GetRestApi",
          "BeginPreload",
          "IsPreloadFinished",
          "GetLoadTime",
          "RequestClose",
          "GetBuildVersion",
          "GetBuildTime",
          "GetWorldEntity",
          "FindEntity",
          "InPlayMode",
          "ReloadFailureAddons",
          "GetScriptModule",
          "GetPlatformService",
          "IsDev",
          "RequestReload",
          "SpawnEntity",
          "SpawnEntityPrefab",
          "GetMenuPreset",
          "CreateLoadingAnim",
          "OnUpdate",
          "OnAfterInit",
          "OnGameStart",
          "OnGameEnd",
          "OnEvent",
          "OnUserSettingsChangedEvent",
          "OnInputDeviceUserChangedEvent",
          "OnInputDeviceIsGamepadEvent",
          "OnWorldPostProcess",
          "OnWorldSimulatePhysics",
          "OnWorldPostSimulatePhysics",
          "OnWindowResize",
          "HostGameConfig",
          "PlayGameConfig",
          "ReadGameConfig",
          "OnGamepadConnectionStatus"
        ]
      },
      {
        "class_name": "GameWorldEditor",
        "methods": [
          "GetEditorAPI",
          "LoadWorld",
          "SaveWorld",
          "SaveWorldAs",
          "CreateNewSubsceneWorld",
          "Undo",
          "Redo",
          "SwitchToGameMode",
          "SwitchToEditMode"
        ]
      },
      {
        "class_name": "GenericComponentClass",
        "methods": [
          "GenericComponentClass"
        ]
      },
      {
        "class_name": "ActionManager",
        "methods": [
          "ActionManager",
          "SetDebug",
          "ActivateContext",
          "IsContextActive",
          "SetContextDebug",
          "ActivateAction",
          "IsActionActive",
          "GetActionValue",
          "GetActionInputType",
          "GetActionTriggered",
          "SetActionValue",
          "GetActionCount",
          "GetActionName",
          "AddActionListener",
          "RemoveActionListener"
        ]
      },
      {
        "class_name": "InputBinding",
        "methods": [
          "InputBinding",
          "ResetDefault",
          "IsDefault",
          "CreateUserBinding",
          "GetBindingsCount",
          "RemoveBinding",
          "AddBinding",
          "InsertCombo",
          "SetFilter",
          "GetFilter",
          "StartCapture",
          "CancelCapture",
          "SaveCapture",
          "GetCaptureState",
          "FindContext",
          "FindAction",
          "Save",
          "GetConflicts",
          "GetBindings",
          "GetContexts",
          "GetPresets"
        ]
      },
      {
        "class_name": "InputManager",
        "methods": [
          "InputManager",
          "SetCursorPosition",
          "IsUsingMouseAndKeyboard",
          "GetLastUsedInputDevice",
          "SetLastUsedInputDevice",
          "SetLoading",
          "SetGamepadRumble",
          "StopRumble",
          "ResetAction",
          "ResetContext",
          "RegisterActionManager",
          "UnregisterActionManager",
          "CreateUserBinding",
          "GetKeyUIMapping",
          "ProcessKeybindStack",
          "DoKeybindTest",
          "GetActionKeybinding"
        ]
      },
      {
        "class_name": "NetScriptConnectionListener",
        "methods": [
          "EOnPlayerConnected",
          "EOnPlayerDisconnected"
        ]
      },
      {
        "class_name": "BackendDebugApi",
        "methods": [
          "SetLag",
          "SetTimeoutRate",
          "SetErrorRate",
          "SetErrorCode",
          "SetTamperRate",
          "Reset",
          "ApplyOnHost"
        ]
      },
      {
        "class_name": "BanServiceApi",
        "methods": [
          "CreateBanPlayerId",
          "CreateBanIdentityId",
          "RemoveBans",
          "RemoveBanByName",
          "RequestServerBanList",
          "GetTotalItemCount",
          "GetPageCount",
          "SetPageItems",
          "GetPage",
          "GetPageItemCount",
          "GetPageItems"
        ]
      },
      {
        "class_name": "RestApi",
        "methods": [
          "GetContext",
          "GetContextCount",
          "DebugList",
          "GetDownloadTrafficKBPerS",
          "GetUploadTrafficKBPerS"
        ]
      },
      {
        "class_name": "RestContext",
        "methods": [
          "RestContext",
          "GET",
          "GET_now",
          "FILE",
          "FILE_now",
          "POST",
          "POST_now",
          "PUT",
          "PUT_now",
          "DELETE",
          "DELETE_now",
          "SetHeaders",
          "reset"
        ]
      },
      {
        "class_name": "ParticleEffectEntity",
        "methods": [
          "SpawnParticleEffect",
          "GetState",
          "GetTotalSimulationTime",
          "HasActiveParticles",
          "SetUseFrameEvent",
          "SetPlayOnHeadlessClient",
          "SetEffectPath",
          "SetDeleteWhenStopped",
          "SetUseParentAsVelocitySource",
          "SetFollowParent",
          "Play",
          "Stop",
          "Pause",
          "StopEmission",
          "OnUpdateEffect",
          "OnStateChanged"
        ]
      },
      {
        "class_name": "PawnEntityController",
        "methods": [
          "GetPawnOwner",
          "SetFlags",
          "ClearFlags",
          "IsFlagSet",
          "SetControlRotation",
          "GetControlRotation",
          "SetAimRotation",
          "GetAimRotation",
          "SetLookRotation",
          "GetLookRotation",
          "OnInit",
          "OnUpdate",
          "OnPackControls",
          "OnUnpackControls"
        ]
      },
      {
        "class_name": "PhysicsUtils",
        "methods": [
          "PhysicsUtils",
          "FindColliderIndex",
          "GetNodeIndex"
        ]
      },
      {
        "class_name": "ContactSurface",
        "methods": [
          "GetNoiseSteer",
          "GetNoiseFrequency",
          "GetRoughness",
          "GetFrictionNonTread",
          "GetFrictionTread",
          "GetRollingResistance",
          "GetRollingDrag"
        ]
      },
      {
        "class_name": "PointInfo",
        "methods": [
          "PointInfo",
          "Init",
          "GetOwner",
          "Set",
          "GetTransform",
          "GetModelTransform",
          "GetWorldTransform",
          "GetLocalTransform",
          "GetTransformAxis",
          "GetWorldTransformAxis",
          "GetModelTransformAxis",
          "GetLocalTransformAxis",
          "GetTransformNode",
          "GetBoneName",
          "GetNodeId"
        ]
      },
      {
        "class_name": "BaseRoad",
        "methods": [
          "GetWidth",
          "GetPoints"
        ]
      },
      {
        "class_name": "RoadNetworkManager",
        "methods": [
          "GetClosestRoad",
          "GetRoadsInAABB"
        ]
      },
      {
        "class_name": "RplSession",
        "methods": [
          "RplSession",
          "TryGetListenAddress",
          "RegisterCallbacks",
          "Mode"
        ]
      },
      {
        "class_name": "ScriptComponentClass",
        "methods": [
          "DependsOn",
          "DependsOn"
        ]
      },
      {
        "class_name": "ScriptedWidgetTooltip",
        "methods": [
          "CheckOverflow",
          "Show",
          "Hide",
          "CreateTooltipWidget"
        ]
      },
      {
        "class_name": "ScriptPlatformRequestCallback",
        "methods": [
          "OnPrivilegeResult"
        ]
      },
      {
        "class_name": "ScriptWorldClock",
        "methods": [
          "ScriptWorldClock",
          "SetTimeOfDay",
          "GetTimeOfDay",
          "SetMonth",
          "GetMonth",
          "SetYear",
          "GetYear",
          "SetDay",
          "GetDay",
          "SetDayInYear",
          "GetDayInYear"
        ]
      },
      {
        "class_name": "BaseJsonSerializationSaveContainer",
        "methods": [
          "ExportToString",
          "SaveToFile",
          "container",
          "SetMaxDecimalPlaces",
          "GetMaxDecimalPlaces"
        ]
      },
      {
        "class_name": "BaseSerializationContext",
        "methods": [
          "IsValid",
          "EnableTypeDiscriminator",
          "IsTypeDiscriminatorEnabled",
          "StartObject",
          "EndObject"
        ]
      },
      {
        "class_name": "BaseSerializationLoadContext",
        "methods": [
          "ReadValue"
        ]
      },
      {
        "class_name": "BaseSerializationSaveContext",
        "methods": [
          "WriteValue"
        ]
      },
      {
        "class_name": "BinSerializationContainer",
        "methods": [
          "BinSerializationContainer"
        ]
      },
      {
        "class_name": "BinSerializationLoadContainer",
        "methods": [
          "LoadFromFile",
          "LoadFromContainer"
        ]
      },
      {
        "class_name": "BinSerializationSaveContainer",
        "methods": [
          "SaveToFile",
          "SaveToContainer"
        ]
      },
      {
        "class_name": "ContainerSerializationLoadContext",
        "methods": [
          "ContainerSerializationLoadContext",
          "GetContainer",
          "SetContainer"
        ]
      },
      {
        "class_name": "ContainerSerializationSaveContext",
        "methods": [
          "ContainerSerializationSaveContext",
          "GetContainer",
          "SetContainer"
        ]
      },
      {
        "class_name": "JsonLoadContainer",
        "methods": [
          "ImportFromString",
          "LoadFromFile"
        ]
      },
      {
        "class_name": "PrettyJsonSaveContainer",
        "methods": [
          "SetFormatOptions",
          "SetIndent"
        ]
      },
      {
        "class_name": "SndWorld",
        "methods": [
          "GetMapValuesAtPos"
        ]
      },
      {
        "class_name": "BaseSystem",
        "methods": [
          "InitInfo",
          "BaseSystem",
          "GetWorld",
          "Enable",
          "IsEnabled",
          "OnUpdate",
          "BeginUpdate",
          "AddEntity",
          "Update",
          "EndUpdate",
          "BeginUpdate",
          "Update",
          "EndUpdate",
          "AddEntity",
          "Rpc",
          "DependsOn",
          "OnInit",
          "OnCleanup",
          "OnStarted",
          "OnStopped",
          "OnUpdate",
          "OnDiag"
        ]
      },
      {
        "class_name": "SndSystem",
        "methods": [
          "GetSndWorld"
        ]
      },
      {
        "class_name": "WorldController",
        "methods": [
          "InitInfo",
          "WorldController",
          "GetWorld",
          "IsMyOwn",
          "Role",
          "Rpc",
          "FindSystem",
          "GetServerSideOwner",
          "FindMyController",
          "FindController",
          "GetServerSideOwners",
          "OnAuthorityReady",
          "OnAuthorityClosing"
        ]
      },
      {
        "class_name": "WorldControllerInfo",
        "methods": [
          "SetAbstract",
          "SetPublic",
          "SetSystem"
        ]
      },
      {
        "class_name": "WorldSystemInfo",
        "methods": [
          "SetAbstract",
          "SetLocation",
          "AddPoints",
          "AddExecuteBefore",
          "AddExecuteAfter"
        ]
      },
      {
        "class_name": "TransformResetParams",
        "methods": [
          "GetNewVelocity",
          "IsCorrection"
        ]
      },
      {
        "class_name": "WeatherFogPattern",
        "methods": [
          "GetMinFogAmount",
          "GetMaxFogAmount",
          "GetMinFogHeightDensity",
          "GetMaxFogHeightDensity",
          "GetMinDurationHours",
          "GetMaxDurationHours"
        ]
      },
      {
        "class_name": "WeatherLightning",
        "methods": [
          "SetPosition",
          "SetRadius",
          "AddLightningFlash"
        ]
      },
      {
        "class_name": "WeatherLightningFlash",
        "methods": [
          "SetStartTime",
          "SetDuration",
          "SetCooldown"
        ]
      },
      {
        "class_name": "WeatherLightningPattern",
        "methods": [
          "GetFrequencySeconds",
          "GetPerturbationRangeSeconds",
          "GetMinDurationHours",
          "GetMaxDurationHours"
        ]
      },
      {
        "class_name": "WeatherManager",
        "methods": [
          "WeatherManager",
          "GetRegisteredWeatherManagerEntity"
        ]
      },
      {
        "class_name": "WeatherRainPattern",
        "methods": [
          "GetMinIntensity",
          "GetMaxIntensity",
          "GetMinDurationHours",
          "GetMaxDurationHours"
        ]
      },
      {
        "class_name": "WeatherState",
        "methods": [
          "GetStateID",
          "GetStateName",
          "GetStartVariantName",
          "GetStartVariantIndex",
          "GetDurationMin",
          "GetDurationMax",
          "GetVariantsList",
          "GetTransitionsList",
          "GetLocalizedName",
          "GetLocalizedDescription",
          "GetIconPath",
          "GetNumTransitions"
        ]
      },
      {
        "class_name": "WeatherStateMachine",
        "methods": [
          "GetState",
          "GetStatesList",
          "GetNumStates",
          "GetStartStateName",
          "GetStartStateIndex"
        ]
      },
      {
        "class_name": "WeatherStateTransitionNode",
        "methods": [
          "WeatherStateTransitionNode",
          "SetLooping",
          "IsLooping",
          "SetTransitionDurationHours",
          "SetStateDurationHours",
          "GetDestinationStateIndex",
          "GetTransitionDurationHours",
          "GetStateDurationHours",
          "IsValid",
          "IsValidTransitionTo",
          "IsTransitioning"
        ]
      },
      {
        "class_name": "WeatherTransition",
        "methods": [
          "GetDestinationName",
          "GetProbability",
          "GetDurationMin",
          "GetDurationMax"
        ]
      },
      {
        "class_name": "WeatherVariant",
        "methods": [
          "GetWindPattern",
          "GetRainPattern",
          "GetFogPattern",
          "GetLightningPattern",
          "GetVariantName",
          "GetDurationMin",
          "GetDurationMax",
          "GetNumTransitions",
          "GetTransitionsList"
        ]
      },
      {
        "class_name": "WeatherWindPattern",
        "methods": [
          "GetMinSpeed",
          "GetMaxSpeed",
          "GetMinAngleRadians",
          "GetMaxAngleRadians",
          "GetMinDurationHours",
          "GetMaxDurationHours"
        ]
      },
      {
        "class_name": "WorkshopCatalogue",
        "methods": [
          "RequestPage",
          "GetTotalItemCount",
          "GetPageCount",
          "SetPageItems",
          "GetPage",
          "GetPageItemCount"
        ]
      },
      {
        "class_name": "World",
        "methods": [
          "CreateDecal",
          "CreateDecal2",
          "ReloadSystems",
          "FindSystem"
        ]
      },
      {
        "class_name": "SCR_BaseLoadingScreenComponent",
        "methods": [
          "HandlerAttached",
          "PrintFormat",
          "InitWidgets",
          "PrintFormat",
          "Update",
          "InitWidgets",
          "Update",
          "Fade",
          "OnHide",
          "SaveLoadingTime",
          "ResetLoadingTime",
          "SaveLoadingTime",
          "GetLoadingTime",
          "Fade"
        ]
      },
      {
        "class_name": "SCR_IntroSplashScreenComponent",
        "methods": [
          "HandlerAttached",
          "InitWidgets",
          "InitWidgets",
          "Update",
          "Fade",
          "Fade",
          "Fade",
          "Fade",
          "Fade"
        ]
      },
      {
        "class_name": "SCR_IntroSplashScreenWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SCR_LoadingSpinner",
        "methods": [
          "HandlerAttached",
          "Update",
          "ProgressMask",
          "RotateImage",
          "ProgressMask",
          "RotateImage"
        ]
      },
      {
        "class_name": "SCR_PreloadScreenComponent",
        "methods": [
          "HandlerAttached",
          "InitWidgets"
        ]
      },
      {
        "class_name": "SCR_ScenarioLoadingScreenWidgets",
        "methods": [
          "GetLayout",
          "Init"
        ]
      },
      {
        "class_name": "SplashScreen",
        "methods": [
          "Load",
          "PrintFormat",
          "Show",
          "PrintFormat",
          "Hide",
          "PrintFormat",
          "Update",
          "GetGameReloads"
        ]
      },
      {
        "class_name": "MenuManager",
        "methods": [
          "MenuItemCallback",
          "OpenMenu",
          "OpenDialog",
          "FindMenuByPreset",
          "FindMenuByUserData",
          "GetTopMenu",
          "GetOwnerMenu",
          "IsAnyMenuOpen",
          "IsAnyDialogOpen",
          "CloseMenuByPreset",
          "CloseMenuByUserData",
          "CloseMenu",
          "CloseAllMenus",
          "MenuManager"
        ]
      },
      {
        "class_name": "MenuBindAttribute",
        "methods": [
          "MenuBindAttribute"
        ]
      },
      {
        "class_name": "MenuBase",
        "methods": [
          "GetUserData",
          "GetRootWidget",
          "BindItem",
          "SetLabel",
          "GetItemWidget",
          "AddMenuItem",
          "RemoveMenuItem",
          "GetManager",
          "SetActionContext",
          "IsFocused",
          "IsOpen",
          "Close",
          "CloseMe",
          "OnMenuFocusGained",
          "OnMenuFocusLost",
          "OnMenuShow",
          "OnMenuHide",
          "OnMenuOpen",
          "OnMenuOpened",
          "OnMenuClose",
          "OnMenuInit",
          "OnMenuUpdate",
          "OnMenuItem",
          "MenuBase"
        ]
      },
      {
        "class_name": "MessageBox",
        "methods": [
          "Ok",
          "Close"
        ]
      },
      {
        "class_name": "DSBox",
        "methods": [
          "Name",
          "Status",
          "Request",
          "PlayerLimit",
          "PlayerCount",
          "Launch",
          "Shutdown"
        ]
      },
      {
        "class_name": "DSSessionCallback",
        "methods": [
          "OnConnect",
          "OnDisconnect",
          "OnSaving",
          "OnLoaded",
          "OnSetup",
          "OnPlayerSaveEvent",
          "OnLoadFailed",
          "OnSaveFailed",
          "OnSaveSuccess",
          "OnDeleteFailed",
          "OnDeleteSuccess",
          "OnInitialize",
          "OnNew",
          "OnReady"
        ]
      },
      {
        "class_name": "RCONCommander",
        "methods": [
          "ProcessCommand"
        ]
      },
      {
        "class_name": "SessionStorage",
        "methods": [
          "Initialized",
          "ClearScheduler",
          "EnableScheduler",
          "RequestPlayerSave",
          "RequestScheduledSave",
          "RequestSave",
          "RequestLoad",
          "LocalSave",
          "LocalLoad",
          "LocalDelete",
          "CheckFileID",
          "AssignFileIDCallback",
          "ProcessLoad",
          "ProcessSave",
          "GetOnlineWritePrivilege",
          "AvailableSaves"
        ]
      },
      {
        "class_name": "DSSession",
        "methods": [
          "Name",
          "Status",
          "PlayerLimit",
          "PlayerCount",
          "RequestShutdown",
          "RequestActive",
          "RequestFinish",
          "RequestRestart",
          "GetUpTime",
          "RoomID",
          "ScenarioID"
        ]
      },
      {
        "class_name": "BackendCallback",
        "methods": [
          "OnError",
          "OnSuccess",
          "OnTimeout"
        ]
      },
      {
        "class_name": "SavePoint",
        "methods": [
          "SavePoint",
          "Reset",
          "OnLoad"
        ]
      },
      {
        "class_name": "SaveTestCallback",
        "methods": [
          "OnInitialize",
          "OnSaving",
          "OnLoaded",
          "OnSaveSuccess"
        ]
      },
      {
        "class_name": "ServiceStatusItem",
        "methods": [
          "Name",
          "Status",
          "Message"
        ]
      },
      {
        "class_name": "NewsFeedItem",
        "methods": [
          "Title",
          "Excerpt",
          "Slug",
          "Category",
          "URL",
          "Date",
          "Path"
        ]
      },
      {
        "class_name": "BackendApi",
        "methods": [
          "BackendApi",
          "SetSessionCallback",
          "GetWorkshop",
          "GetWorldSaveApi",
          "GetClientLobby",
          "GetDSBoxcount",
          "GetDSBox",
          "GetStorage",
          "GetDSSession",
          "GetStatusCount",
          "GetStatusItem",
          "GetMainStatus",
          "GetNewsCount",
          "GetNewsItem",
          "GetNotifyCount",
          "GetNotifyItem",
          "GetLinkItem",
          "Shutdown",
          "IsAuthenticated",
          "IsAuthInProgress",
          "IsRunning",
          "IsInitializing",
          "IsActive",
          "RefreshCommStatus",
          "GetCommTestStatus",
          "GetCommResponseTime",
          "GetCommTimeLastSuccess",
          "GetCommTimeLastFail",
          "Unlink",
          "GetErrorCode",
          "OnPlatformActive",
          "OnPlatformMissing",
          "OnCannotInitiate",
          "OnCannotShutdown",
          "OnCannotAuth",
          "OnSuccess",
          "OnFail",
          "GetPlayerUID",
          "GetPlayerIdentityId",
          "GetLocalIdentityId",
          "IsLocalPlatformAssigned",
          "Request",
          "PlayerRequest",
          "PlayerData",
          "SettingsData",
          "FeedbackMessage",
          "FeedbackImage",
          "SetCredentialsItem",
          "GetCredentialsItem",
          "VerifyCredentials",
          "RemainingAccountLockedTime",
          "IsBIAccountLinked",
          "GetBackendEnv",
          "GetRunningDSConfig",
          "LoadDSConfig",
          "SaveDSConfig",
          "SetDefaultIpPort",
          "GetAvailableConfigs",
          "GetAvailableConfigPaths",
          "GetServerConfigApi",
          "GetBanServiceApi",
          "IsListedServerAdmin",
          "IsServerOwner",
          "NewSession",
          "SetDebugHandling"
        ]
      },
      {
        "class_name": "DSGameConfig",
        "methods": [
          "DSGameConfig",
          "OnPack",
          "UnregV",
          "StoreBoolean",
          "UnregV",
          "StoreBoolean",
          "OnExpand"
        ]
      },
      {
        "class_name": "DSGameProperties",
        "methods": [
          "OnPack",
          "UnregV",
          "StoreBoolean",
          "OnExpand"
        ]
      },
      {
        "class_name": "DSMod",
        "methods": [
          "DSMod"
        ]
      },
      {
        "class_name": "DSConfig",
        "methods": [
          "DSConfig"
        ]
      },
      {
        "class_name": "JsonApiStruct",
        "methods": [
          "JsonApiStruct",
          "OnExpand",
          "OnPack",
          "OnSuccess",
          "OnError",
          "OnObject",
          "OnStartArray",
          "OnEndArray",
          "OnItemObject",
          "UnregV",
          "RegAll",
          "Push",
          "StartObject",
          "EndObject",
          "StoreObject",
          "StoreFloat",
          "StoreInteger",
          "StoreBoolean",
          "StoreString",
          "StoreVector",
          "StartArray",
          "EndArray",
          "ItemObject",
          "ItemFloat",
          "ItemInteger",
          "ItemBoolean",
          "ItemString",
          "ItemVector",
          "ItemArray",
          "SetDone",
          "SetFail",
          "Pack",
          "ExpandFromRAW",
          "AsString",
          "HasData",
          "PackToFile",
          "SaveToFile",
          "LoadFromFile"
        ]
      },
      {
        "class_name": "RestCallback",
        "methods": [
          "OnError",
          "OnTimeout",
          "OnSuccess",
          "OnFileCreated"
        ]
      },
      {
        "class_name": "Room",
        "methods": [
          "Room",
          "Official",
          "PasswordProtected",
          "IsAuthorized",
          "Joinable",
          "IsModded",
          "IsFavorite",
          "PlayerLimit",
          "PlayerCount",
          "GameVersion",
          "Region",
          "Name",
          "ScenarioName",
          "HostScenarioMod",
          "HostAddress",
          "HostType",
          "OwnerName",
          "GameMode",
          "Join",
          "GetItems",
          "SetFavorite",
          "IsClientReady",
          "IsCrossPlatform",
          "HostScenario",
          "LoadDownloadList",
          "GetPing",
          "HasBattlEye",
          "VerifyPassword",
          "CheckAuthorization",
          "IsDownloadListLoaded"
        ]
      },
      {
        "class_name": "ClientLobbyApi",
        "methods": [
          "ClientLobbyApi",
          "SearchRooms",
          "Rooms",
          "GetRoomsByIds",
          "GetRoomsByHostIds",
          "Scroll",
          "SetViewSize",
          "TotalRoomCount",
          "KillGeneratedRooms",
          "GenerateRooms",
          "GetInviteRoom",
          "InvitationFailed",
          "ClearInviteRoom",
          "GetParameters",
          "ClearParams",
          "GetStrParams",
          "StoreParams",
          "SetRefreshCallback",
          "SetRefreshRate",
          "Target",
          "SearchTarget",
          "GetMyIP",
          "GetPreviousRoomId",
          "ClearPreviousRoomId",
          "GetRoomById",
          "MeasureLatency",
          "IsPingAvailable",
          "ProcessLastHostError"
        ]
      },
      {
        "class_name": "SBGetServersParams",
        "methods": [
          "GetRoomsIds"
        ]
      },
      {
        "class_name": "ServerConfigApi",
        "methods": [
          "SearchOnlineConfigs",
          "GetOnlineConfigs",
          "UploadConfig",
          "Download"
        ]
      },
      {
        "class_name": "ServerConfigMeta",
        "methods": [
          "Download",
          "Delete"
        ]
      },
      {
        "class_name": "ImageScale",
        "methods": [
          "Height",
          "Width",
          "Download",
          "Path"
        ]
      },
      {
        "class_name": "BackendImage",
        "methods": [
          "GetScales",
          "GetLocalScale",
          "GetScale"
        ]
      },
      {
        "class_name": "WorkshopTag",
        "methods": [
          "WorkshopTag",
          "Name"
        ]
      },
      {
        "class_name": "Revision",
        "methods": [
          "GetVersion",
          "GetGameVersion",
          "GetVersionArray",
          "GetGameVersionArray",
          "GetDependencies",
          "IsDownloaded",
          "GetScenarios",
          "ChangeLog",
          "GetPatchSize",
          "ComputePatchSize",
          "CompareTo",
          "GetLoadFlags",
          "AreEqual",
          "Revision",
          "GetFiles",
          "GetTotalSize",
          "GetAvailability",
          "GetSizeBytes",
          "ScanOfflineItems",
          "Cleanup",
          "GetBannedItems",
          "GetDownloads"
        ]
      },
      {
        "class_name": "Dependency",
        "methods": [
          "Dependency",
          "GetID",
          "IsOffline",
          "GetVersion",
          "GetName",
          "LoadItem",
          "GetCachedItem",
          "TotalFileSize",
          "GetRevision",
          "Download",
          "WorkshopAuthor",
          "Name",
          "IsBlocked",
          "AddBlock",
          "RemoveBlock",
          "GetPageItems",
          "GetOfflineItems"
        ]
      },
      {
        "class_name": "BaseWorkshopItem",
        "methods": [
          "Name",
          "Description",
          "Id",
          "Download",
          "AskDetail",
          "GetProgress",
          "GetProcessingProgress",
          "IsProcessing",
          "Thumbnail",
          "HasLatestVersion",
          "GetRevisions",
          "GetActiveRevision",
          "GetDownloadingRevision",
          "Cancel",
          "DeleteLocally",
          "DeleteDownloadProgress",
          "GetPendingDownload",
          "SetScriptFlag",
          "ClearScriptFlag",
          "GetScriptFlag",
          "GetLatestRevision",
          "LoadDependencies",
          "GetLocalRevision",
          "Summary",
          "GetOwner",
          "GetOwnerId",
          "GetHeader",
          "Thumbnail",
          "GetPlayerCount",
          "IsFavorite",
          "SetFavorite",
          "GetTimeSinceLastPlay",
          "Play",
          "Host",
          "Id",
          "Author",
          "WorkshopItem",
          "Author",
          "Contributors",
          "Subscribe",
          "Unsubscribe",
          "IsSubscribed",
          "LoadScenarios",
          "LoadChangelog",
          "Report",
          "CancelReport",
          "LoadReport",
          "GetReportDescription",
          "GetReportType",
          "GetStateFlags",
          "GetSizeBytes",
          "AverageRating",
          "ResetRating",
          "Rate",
          "IsRatingSet",
          "MyRating",
          "RatingCount",
          "GetTags",
          "IsProcessed",
          "Enable",
          "IsEnabled",
          "License",
          "LicenseText",
          "Gallery",
          "SetFavorite",
          "IsFavorite",
          "PauseDownload",
          "ResumeDownload",
          "EnoughLocalSpace",
          "IsLoaded",
          "HasAnyTag",
          "GetAccessState",
          "GetTimeSinceFirstDownload",
          "GetTimeSinceLastPlay",
          "NotifyPlay",
          "SetThumbnailGridScale",
          "GetBackendEnv",
          "IsReadyToRun",
          "IsUnlisted",
          "IsAuthor",
          "IsContributor",
          "WorkshopApi",
          "GetCode",
          "RegisterTag",
          "GetTags",
          "GetByName",
          "GetInGameScenario",
          "FindItem",
          "GetPageScenarios",
          "OnItemsChecked",
          "GetOfflineItems",
          "ReadDefaultScenarios",
          "ScanOfflineAddons",
          "ScanOfflineSaves",
          "NeedAddonsScan",
          "NeedSavesScan",
          "GetPageItems",
          "GetCurrentMission",
          "GetCurrentSave",
          "SetCurrentSave"
        ]
      },
      {
        "class_name": "WorldSaveManifest",
        "methods": [
          "DeleteOnline",
          "FillManifest",
          "CreatedAt",
          "DeleteOffline",
          "Save",
          "UploadWorldSave",
          "CreateLocalWorldSave"
        ]
      },
      {
        "class_name": "PlatformService",
        "methods": [
          "GetPrivilegeAsync",
          "GetPrivilege",
          "OpenBrowser",
          "GetLocalPlatformKind"
        ]
      },
      {
        "class_name": "RplSessionCallbacks",
        "methods": [
          "EOnBegan",
          "EOnEnded",
          "EOnFailed",
          "EOnConnected",
          "EOnDisconnected"
        ]
      },
      {
        "class_name": "MyAsyncTest",
        "methods": [
          "MyFooBarTest",
          "Initialize",
          "Pool",
          "FinalizeA",
          "FinalizeB",
          "Set",
          "Pool"
        ]
      },
      {
        "class_name": "Test",
        "methods": [
          "Test"
        ]
      },
      {
        "class_name": "Step",
        "methods": [
          "Step"
        ]
      },
      {
        "class_name": "TestHarness",
        "methods": [
          "Run",
          "Report",
          "GetNSuites",
          "GetSuite",
          "ActiveSuite",
          "Finished",
          "Begin",
          "End"
        ]
      },
      {
        "class_name": "TestSuite",
        "methods": [
          "SetResult",
          "GetNTests",
          "GetTest",
          "SetEnabled",
          "IsEnabled",
          "GetName"
        ]
      },
      {
        "class_name": "TestBase",
        "methods": [
          "SetResult",
          "GetResult",
          "SetEnabled",
          "IsEnabled",
          "GetName"
        ]
      },
      {
        "class_name": "TestResultBase",
        "methods": [
          "Failure",
          "FailureText",
          "NativeFailure",
          "NativeFailureText"
        ]
      },
      {
        "class_name": "TestBoolResult",
        "methods": [
          "TestBoolResult",
          "Failure",
          "FailureText"
        ]
      },
      {
        "class_name": "MyTestSuite",
        "methods": [
          "Prep",
          "Count",
          "CountUp",
          "MyTest",
          "TestBoolResult"
        ]
      },
      {
        "class_name": "TextWidgetBenchmark",
        "methods": [
          "InitTest",
          "Update"
        ]
      },
      {
        "class_name": "MyObject",
        "methods": [
          "GetCallqueue",
          "OnUpdate",
          "Hello",
          "Test",
          "Test"
        ]
      },
      {
        "class_name": "ScriptCallQueue",
        "methods": [
          "Tick",
          "Call",
          "CallByName",
          "CallLater",
          "CallLaterByName",
          "Remove",
          "GetRemainingTime",
          "RemoveByName",
          "GetRemainingTimeByName",
          "Clear",
          "Dump"
        ]
      },
      {
        "class_name": "Player",
        "methods": [
          "OnKilled",
          "LogPlayerDeath"
        ]
      },
      {
        "class_name": "Game",
        "methods": [
          "RemovePlayer",
          "GameOver",
          "OnPlayerSpaned",
          "Invoke",
          "Insert",
          "Remove",
          "Clear",
          "Dump"
        ]
      },
      {
        "class_name": "AutotestBase",
        "methods": [
          "UpdateLastProcessingTime",
          "IsLastProcessingTime_Signal",
          "ResetLastProcessingTime_Signal",
          "SetLastProcessingTime_Treshold"
        ]
      },
      {
        "class_name": "WidgetAnimationBase",
        "methods": [
          "GetProgressValue",
          "ReverseDirection",
          "SetRepeat",
          "IsRepeating",
          "Stop",
          "GetValue",
          "GetOnStopped",
          "GetOnCompleted",
          "GetOnCycleCompleted",
          "SetCurve",
          "SetDelay",
          "GetDelay",
          "SetSpeed",
          "GetSpeed",
          "GetWidget",
          "OnUpdate",
          "Animate",
          "ReverseDirection",
          "Animate",
          "WidgetAnimationBase"
        ]
      },
      {
        "class_name": "WidgetAnimationBlurIntensity",
        "methods": [
          "Animate",
          "WidgetAnimationBlurIntensity"
        ]
      },
      {
        "class_name": "WidgetAnimationOpacity",
        "methods": [
          "SetTargetValue",
          "GetTargetValue",
          "ReverseDirection",
          "Animate",
          "WidgetAnimationOpacity"
        ]
      },
      {
        "class_name": "WidgetAnimationPadding",
        "methods": [
          "ReverseDirection",
          "Animate",
          "WidgetAnimationPadding"
        ]
      },
      {
        "class_name": "WidgetAnimationLayoutFill",
        "methods": [
          "ReverseDirection",
          "Animate",
          "WidgetAnimationLayoutFill"
        ]
      },
      {
        "class_name": "WidgetAnimationAlphaMask",
        "methods": [
          "ReverseDirection",
          "Animate",
          "WidgetAnimationAlphaMask"
        ]
      },
      {
        "class_name": "WidgetAnimationImageRotation",
        "methods": [
          "ReverseDirection",
          "Animate",
          "WidgetAnimationImageRotation"
        ]
      },
      {
        "class_name": "WidgetAnimationColor",
        "methods": [
          "ReverseDirection",
          "Animate",
          "WidgetAnimationColor"
        ]
      },
      {
        "class_name": "WidgetAnimationFrameSize",
        "methods": [
          "ReverseDirection",
          "Animate",
          "WidgetAnimationFrameSize"
        ]
      },
      {
        "class_name": "WidgetAnimationPosition",
        "methods": [
          "ReverseDirection",
          "Animate",
          "WidgetAnimationPosition"
        ]
      },
      {
        "class_name": "WidgetAnimationImageSaturation",
        "methods": [
          "ReverseDirection",
          "Animate",
          "WidgetAnimationImageSaturation"
        ]
      },
      {
        "class_name": "WidgetAnimationValue",
        "methods": [
          "ReverseDirection",
          "Animate",
          "WidgetAnimationValue"
        ]
      },
      {
        "class_name": "SCR_ImageSetGenerator",
        "methods": [
          "AddTabs",
          "AddLine",
          "Generate",
          "AddLine",
          "AddTabs",
          "AddLine",
          "AddTabs",
          "AddLine",
          "AddTabs",
          "AddLine",
          "AddTabs",
          "AddLine",
          "AddTabs",
          "AddLine",
          "AddLine",
          "AddTabs",
          "AddTabs",
          "AddLine",
          "AddTabs",
          "AddTabs",
          "AddLine",
          "AddTabs",
          "AddLine",
          "AddTabs",
          "AddLine",
          "AddTabs",
          "AddLine",
          "AddTabs",
          "AddLine",
          "AddTabs",
          "AddLine",
          "Run",
          "Generate",
          "ButtonOK",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_LocModifiedPlugin",
        "methods": [
          "GetUserName",
          "Configure",
          "OkButton",
          "OnChange",
          "OnImport"
        ]
      },
      {
        "class_name": "SCR_LocExportPlugin",
        "methods": [
          "GetExportColumn"
        ]
      },
      {
        "class_name": "SCR_LocTestPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_LocLengthPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_TracyPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_WorldWindowDataDropPlugin",
        "methods": [
          "OnWorldEditWindowDataDropped",
          "SpawnCustomizedEntityAsExample",
          "SpawnParticleEffect",
          "SpawnParticleEffect",
          "SpawnCustomizedEntityAsExample"
        ]
      },
      {
        "class_name": "CheckLocalizationPlugin",
        "methods": [
          "FindTexts",
          "Run"
        ]
      },
      {
        "class_name": "EntityRelativePlugin",
        "methods": [
          "Run",
          "Configure"
        ]
      },
      {
        "class_name": "GenerateFlowMaps",
        "methods": [
          "RunCommandline"
        ]
      },
      {
        "class_name": "GenerateFlowMapsWEPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "MeasureTool",
        "methods": [
          "OnMouseMoveEvent",
          "OnMousePressEvent",
          "OnKeyPressEvent",
          "OnActivate",
          "OnDeActivate"
        ]
      },
      {
        "class_name": "ObjectImportTool",
        "methods": [
          "ImportData"
        ]
      },
      {
        "class_name": "ResaveMetaPlugin",
        "methods": [
          "Find",
          "Resave",
          "Run",
          "Resave",
          "RunCommandline",
          "Resave",
          "OK",
          "Cancel"
        ]
      },
      {
        "class_name": "ResavePlugin",
        "methods": [
          "Find",
          "Resave",
          "Run",
          "Resave",
          "RunCommandline",
          "Resave",
          "OK",
          "Cancel"
        ]
      },
      {
        "class_name": "ResourceImportPlugin",
        "methods": [
          "ResourceImportPlugin",
          "OnGetMaterialGenerateDir",
          "OnRegisterResource",
          "Configure",
          "OkButton"
        ]
      },
      {
        "class_name": "ResourceProcessorPlugin",
        "methods": [
          "ResourceProcessorPlugin",
          "OK",
          "Cancel",
          "TestAgainstFilter",
          "Find",
          "CheckContainersVar",
          "FixIssue",
          "ReportIssue",
          "FixIssue",
          "ReportIssue",
          "FixIssue",
          "ReportIssue",
          "Execute",
          "ReportIssue",
          "ReportIssue",
          "Run",
          "Execute",
          "RunCommandline",
          "ReportIssue",
          "FixIssue",
          "ReportIssue",
          "FixMeshObjectMetaFile",
          "FixSoundMetaFile",
          "FixParticleEffectMetaFile",
          "IsMeshObject",
          "IsSound",
          "IsParticleEffect"
        ]
      },
      {
        "class_name": "ResourceTestPlugin",
        "methods": [
          "Run",
          "MakeDirectory",
          "OpenResource",
          "MakeSummeryFile",
          "RunCommandline",
          "MakeSummeryFile",
          "OpenResource",
          "MakeScreenshotMetafile",
          "MakeSummeryFile",
          "MakeScreenshotMetafile"
        ]
      },
      {
        "class_name": "BuildShoreMap",
        "methods": [
          "RunCommandline"
        ]
      },
      {
        "class_name": "BuildShoreMapWEPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "TerrainImportPlugin",
        "methods": [
          "OnRegisterResource",
          "SetConfig",
          "SetConfig",
          "SetConfig",
          "SetConfig",
          "Configure",
          "OkButton"
        ]
      },
      {
        "class_name": "EntityOrientationTool",
        "methods": [
          "Run",
          "Configure"
        ]
      },
      {
        "class_name": "CameraOrientationTool",
        "methods": [
          "Run",
          "Configure"
        ]
      },
      {
        "class_name": "WorldRunPlugin",
        "methods": [
          "Run",
          "Configure",
          "OkButton"
        ]
      },
      {
        "class_name": "WorldTestPlugin",
        "methods": [
          "RunCommandline",
          "WaitForGameMode",
          "Sleep",
          "TestMap",
          "Sleep",
          "WaitForGameMode",
          "Sleep",
          "Sleep",
          "Sleep"
        ]
      },
      {
        "class_name": "EditablePrefabsComponent_Base",
        "methods": [
          "GetClassName",
          "AddComponent",
          "EOnCreate",
          "EOnDelete",
          "EOnMove",
          "EditablePrefabsComponent_Base"
        ]
      },
      {
        "class_name": "EditablePrefabsComponent_EditableEntity",
        "methods": [
          "SetUIInfo",
          "CreatePreviewImage",
          "GetEntityBudgetCostsFromVehicle",
          "SetBudgets",
          "SetBudgets",
          "GetEntityChildrenBudgetCostsFromSource",
          "SetBudgets",
          "PreserveBudgets",
          "SetBudgets",
          "PreserveBudgets",
          "PreserveBudgets",
          "CreatePreviewImage",
          "DeletePreviewImage",
          "MovePreviewImage",
          "GetImagePath",
          "SetEntityFlags",
          "GetLabelsFromSource",
          "ReadEditableEntityComponent",
          "ReadEditableEntityComponent",
          "ReadEditableEntityComponent",
          "GetEntityChildrenBudgetCostsFromSource",
          "GetEntityBudgetCostsFromGroup",
          "GetEntityBudgetCostsFromLinkComponent",
          "GetEntityBudgetCostsFromVehicle",
          "AddBudgetCostsFromEntity",
          "AddBudgetCostsFromEntity",
          "GetEntityBudgetCostsFromGroup",
          "AddBudgetCostsFromEntities",
          "GetEntityBudgetCostsFromLinkComponent",
          "AddBudgetCostsFromEntities",
          "AddBudgetCostsFromEntities",
          "AddBudgetCostsFromEntity",
          "AddBudgetCostsFromEntity",
          "EOnCreate",
          "SetEntityFlags",
          "SetUIInfo",
          "EOnDelete",
          "DeletePreviewImage",
          "EOnMove",
          "MovePreviewImage",
          "EditablePrefabsComponent_EditableEntity"
        ]
      },
      {
        "class_name": "EditablePrefabsComponent_PreviewEntity",
        "methods": [
          "EOnCreate"
        ]
      },
      {
        "class_name": "EditablePrefabsLabel_Base",
        "methods": [
          "GetLabelValid"
        ]
      },
      {
        "class_name": "EditablePrefabsLabel_CharacterRole",
        "methods": [
          "GetLabelValid",
          "CheckWeapons",
          "CheckInventory",
          "CheckLoadout",
          "GetRoleLabel",
          "CheckWeapons",
          "AddLabelForWeaponType",
          "CheckWeaponAttachments",
          "CheckWeaponAttachments",
          "AddLabelForWeaponType",
          "CheckLoadout",
          "CheckInventory",
          "GetRoleLabel"
        ]
      },
      {
        "class_name": "EditablePrefabsLabel_CompositionType",
        "methods": [
          "GetLabelValid"
        ]
      },
      {
        "class_name": "EditablePrefabsLabel_EntityType",
        "methods": [
          "GetLabelValid"
        ]
      },
      {
        "class_name": "EditablePrefabsLabel_Faction",
        "methods": [
          "GetLabelValid"
        ]
      },
      {
        "class_name": "EditablePrefabsLabel_GroupSize",
        "methods": [
          "GetLabelValid"
        ]
      },
      {
        "class_name": "EditablePrefabsLabel_Size",
        "methods": [
          "GetLabelValid",
          "GetEntitySourceBounds",
          "ContainsSlotSizeLabel",
          "ContainsSizeLabel",
          "GetFileName",
          "GetEntitySourceBounds"
        ]
      },
      {
        "class_name": "EditablePrefabsLabel_Theme",
        "methods": [
          "GetLabelValid"
        ]
      },
      {
        "class_name": "EditablePrefabsLabel_Trait",
        "methods": [
          "GetLabelValid"
        ]
      },
      {
        "class_name": "EditablePrefabsLabel_VehicleType",
        "methods": [
          "GetLabelValid"
        ]
      },
      {
        "class_name": "EditablePrefabsConfig",
        "methods": [
          "CreateEditablePrefab",
          "GetLinks",
          "UpdateEditablePrefab",
          "BackupFile",
          "CompareBackup",
          "UpdateEditablePrefab",
          "VerifyEditablePrefab",
          "CreateEditablePrefab",
          "DeleteEditablePrefab",
          "MoveEditablePrefab",
          "GetLinks",
          "DeleteEditablePrefab",
          "MoveFile",
          "LogResults",
          "UpdateChildPrefabs",
          "DisableComponent",
          "BackupFile",
          "CompareBackup",
          "GetResourceNameLink",
          "GetSettings",
          "IsBlacklisted",
          "GetSourcePath",
          "GetTargetPath",
          "GetTargetPathAuto",
          "GetPrefix",
          "GetConfig",
          "IsValid",
          "CreateDirectoryFor",
          "CreateWorld",
          "Sleep",
          "GetLinks",
          "GetLinkFromSource",
          "GetLinkFromTarget",
          "IsEditableEntity",
          "GetSourcePrefab",
          "EditablePrefabsConfig"
        ]
      },
      {
        "class_name": "EditablePrefabsSetting",
        "methods": [
          "GetTarget",
          "AddComponents",
          "Delete",
          "Move"
        ]
      },
      {
        "class_name": "SCR_ConvertEditableEntitiesPlugin",
        "methods": [
          "Convert",
          "Run",
          "ButtonToEditable",
          "Convert",
          "ButtonToNonEditable",
          "Convert",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_ConvertEditableEntitiesPluginResourceManager",
        "methods": [
          "GetSelected",
          "GetSelectedResourceBrowser"
        ]
      },
      {
        "class_name": "SCR_CreateEditablePrefabsPlugin",
        "methods": [
          "Run",
          "Configure",
          "ButtonClose"
        ]
      },
      {
        "class_name": "SCR_CreateEditablePrefabsPluginResourceManager",
        "methods": [
          "GetSelected",
          "GetSelectedResourceBrowser"
        ]
      },
      {
        "class_name": "SCR_EditableEntityMaintenancePlugin",
        "methods": [
          "Run",
          "ButtonRun",
          "ButtonClose"
        ]
      },
      {
        "class_name": "SCR_UpdateAllEditablePrefabsPlugin",
        "methods": [
          "DeleteEmptyDirectoriesCallback",
          "DeleteEmptyDirectories",
          "Run",
          "DeleteEmptyDirectories",
          "ButtonRun",
          "ButtonClose"
        ]
      },
      {
        "class_name": "SCR_ConfirmationDialogWorkbench",
        "methods": [
          "ButtonOK",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "LocParserManager",
        "methods": [
          "UpdateItem",
          "UpdateFromTemplate",
          "UpdateFromTemplate",
          "ProcessContainer",
          "ProcessContainer",
          "Run",
          "ProcessContainer",
          "Run"
        ]
      },
      {
        "class_name": "LocParserRule",
        "methods": [
          "GetID",
          "Evaluate",
          "Localize",
          "InitRule"
        ]
      },
      {
        "class_name": "LocParserRule_Custom",
        "methods": [
          "RemoveExpression",
          "Evaluate",
          "GetID",
          "RemoveExpression",
          "RemoveExpression",
          "RemoveExpression",
          "RemoveExpression",
          "RemoveExpression",
          "RemoveExpression",
          "RemoveExpression",
          "LocParserRule_Custom"
        ]
      },
      {
        "class_name": "LocParserRule_Custom_BaseParam",
        "methods": [
          "GetArguments",
          "GetParam"
        ]
      },
      {
        "class_name": "LocParserRule_Custom_IndexParam",
        "methods": [
          "GetParam"
        ]
      },
      {
        "class_name": "LocParserRule_Custom_StringParam",
        "methods": [
          "GetParam"
        ]
      },
      {
        "class_name": "LocParserRule_Custom_EnumParam",
        "methods": [
          "GetParam"
        ]
      },
      {
        "class_name": "LocParserRule_Custom_ResourceNameParam",
        "methods": [
          "GetParam"
        ]
      },
      {
        "class_name": "LocParserRule_Custom_NotificationParam",
        "methods": [
          "GetParam"
        ]
      },
      {
        "class_name": "LocParserRule_Custom_HintParam",
        "methods": [
          "GetParam"
        ]
      },
      {
        "class_name": "SCR_LocEditedTextPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_LocLinkImagePlugin",
        "methods": [
          "OnChange",
          "UpdateItem",
          "Run",
          "UpdateItem",
          "ButtonRun",
          "ButtonClose"
        ]
      },
      {
        "class_name": "SCR_LocLinkImagePluginResult",
        "methods": [
          "ButtonClose"
        ]
      },
      {
        "class_name": "SCR_LocParserPlugin",
        "methods": [
          "Run",
          "ButtonLog",
          "ButtonLocalise",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_LocStatusPlugin",
        "methods": [
          "ResetStatus",
          "OnChange",
          "ResetStatus",
          "ResetStatus",
          "ResetStatus",
          "IsReadOnly",
          "OnSelectionChanged",
          "Run",
          "ButtonClose"
        ]
      },
      {
        "class_name": "SCR_BIKIExportBasePlugin",
        "methods": [
          "Run",
          "ShowResult",
          "ButtonOK",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_BIKIExportPlugin_Result",
        "methods": [
          "ButtonClose",
          "SCR_BIKIExportPlugin_Result"
        ]
      },
      {
        "class_name": "SCR_BIKIFactionAssetsExportPlugin",
        "methods": [
          "Run",
          "ShowResult",
          "GetFactionString",
          "EnumSnakeCaseToUserFriendly",
          "ResourceNameToUserFriendly"
        ]
      },
      {
        "class_name": "SCR_Faction_BIKI",
        "methods": [
          "GetEntityCatalog"
        ]
      },
      {
        "class_name": "SCR_BIKIStringBuilder",
        "methods": [
          "AddLine",
          "AddTitle",
          "BeginTable",
          "AddTableHeadersLine",
          "AddTableHeadersLine",
          "AddTableHeader",
          "AddTableDataCellsLine",
          "AddTableDataCellsLine",
          "AddTableDataCell",
          "AddHeaderAndDataCellsLine",
          "EndTable",
          "AddCategory",
          "GetContent",
          "Clear"
        ]
      },
      {
        "class_name": "SCR_FindResourcesPlugin",
        "methods": [
          "Run",
          "OK",
          "Cancel"
        ]
      },
      {
        "class_name": "SCR_GenerateControlsSchemePlugin",
        "methods": [
          "ProcessBinding_Gamepad",
          "ProcessBinding_Keyboard",
          "ProcessBinding_Mouse",
          "Generate",
          "Run",
          "Generate",
          "ButtonOK",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_GenerateControlsSchemeGamepadLabel",
        "methods": [
          "SCR_GenerateControlsSchemeGamepadLabel",
          "AddText",
          "AddLines"
        ]
      },
      {
        "class_name": "SCR_GenerateLayoutClassPlugin",
        "methods": [
          "ButtonOK",
          "Generate",
          "ButtonCancel",
          "Run",
          "Generate",
          "BuildWidgetArray",
          "_print",
          "_print",
          "_print",
          "IsWidgetExportRequired",
          "ResolveWidgetVariableName",
          "ValidateWidget",
          "GenerateScriptClassName",
          "BuildWidgetArray",
          "GetStringPathToWidget",
          "GetWidgetName",
          "ResolveDestinationPath",
          "_print"
        ]
      },
      {
        "class_name": "SCR_MultiPhaseDestructionSoundlessPrefabSearchPlugin",
        "methods": [
          "Run",
          "DetectPrefabs",
          "DetectPrefabs",
          "ButtonOK",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_PrefabTemplateClassCheckPlugin",
        "methods": [
          "Run",
          "FindAndPrintDiscrepancies",
          "FindAndPrintDiscrepancies",
          "GetClassNameFromPrefabFile",
          "ChangeTemplateClass",
          "Configure",
          "ButtonOK"
        ]
      },
      {
        "class_name": "SCR_PrefabValidatorPlugin",
        "methods": [
          "ValidatePrefabs",
          "ValidateEntitySource",
          "Run",
          "ValidatePrefabs",
          "RunCommandline",
          "ValidatePrefabs"
        ]
      },
      {
        "class_name": "SCR_SearchXOBFunctor",
        "methods": [
          "Search",
          "PrintHeader",
          "ProcessFile",
          "PrintResults",
          "PrintHeader",
          "ProcessFile",
          "PrintResults",
          "SCR_SearchXOBFunctor"
        ]
      },
      {
        "class_name": "SCR_SearchXOBListAllFunctor",
        "methods": [
          "PrintHeader",
          "ProcessFile",
          "PrintResults"
        ]
      },
      {
        "class_name": "SCR_SearchXOBLoadAllFunctor",
        "methods": [
          "PrintHeader",
          "ProcessFile",
          "PrintResults"
        ]
      },
      {
        "class_name": "SCR_SearchXOBInvalidMaskFunctor",
        "methods": [
          "PrintHeader",
          "ProcessFile",
          "PrintResults"
        ]
      },
      {
        "class_name": "SCR_SearchXOBLayerMaskFunctor",
        "methods": [
          "PrintHeader",
          "ProcessFile",
          "PrintResults",
          "SCR_SearchXOBLayerMaskFunctor",
          "Run",
          "RunCommandline",
          "OK",
          "Cancel",
          "GetLayerMask",
          "CreateFunctor",
          "SCR_SearchXOBFunctor"
        ]
      },
      {
        "class_name": "SCR_ValidateBehaviorTreesPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_AiScriptGeneratorPlugin",
        "methods": [
          "Run",
          "RunButton",
          "_print",
          "WriteLinesToFile",
          "_print"
        ]
      },
      {
        "class_name": "SCR_AiScriptGenerator_Parser",
        "methods": [
          "ResetContext",
          "ParseLines",
          "ResetContext",
          "ParseLine",
          "FindRelatedClasses",
          "PrintListing",
          "_print",
          "_print",
          "_print",
          "_print",
          "_print",
          "ParseLine",
          "ExtractComment",
          "ExtractMacro",
          "ExtractVariable",
          "_print",
          "ExtractClass",
          "_print",
          "Unquote",
          "_print",
          "VerifyMacro_MessageClass",
          "VerifyMacroArgumentCount",
          "VerifyMacro_Variable",
          "VerifyMacroArgumentCount",
          "VerifyMacroArgumentCount"
        ]
      },
      {
        "class_name": "SCR_AiScriptGenerator_OutputFormatBuffer",
        "methods": [
          "AddLine"
        ]
      },
      {
        "class_name": "SCR_AiScriptGenerator_ClassGeneratorBase",
        "methods": [
          "Generate",
          "GenerateGetVariablesIn",
          "GenerateVariablesWithAttributes",
          "GenerateSetMessageVariables",
          "GenerateGetNodeMiddleText",
          "GenerateCommentSeparator",
          "SCR_AiScriptGenerator_ClassGeneratorBase"
        ]
      },
      {
        "class_name": "SCR_AiScriptGenerator_SendInfoMessageGenerator",
        "methods": [
          "Generate",
          "GenerateCommentSeparator",
          "GenerateVariablesWithAttributes",
          "GenerateGetVariablesIn",
          "GenerateSetMessageVariables",
          "GenerateGetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AiScriptGenerator_SendGoalMessageGenerator",
        "methods": [
          "Generate",
          "GenerateCommentSeparator",
          "GenerateVariablesWithAttributes",
          "GenerateGetVariablesIn",
          "GenerateSetMessageVariables",
          "GenerateGetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AiScriptGenerator_SendOrderGenerator",
        "methods": [
          "Generate",
          "GenerateCommentSeparator",
          "GenerateVariablesWithAttributes",
          "GenerateGetVariablesIn",
          "GenerateSetMessageVariables",
          "GenerateGetNodeMiddleText"
        ]
      },
      {
        "class_name": "SCR_AiScriptGenerator_Class",
        "methods": [
          "GetListing"
        ]
      },
      {
        "class_name": "SCR_AiScriptGenerator_Variable",
        "methods": [
          "GetListing"
        ]
      },
      {
        "class_name": "SCR_BasicCodeFormatterPlugin",
        "methods": [
          "Run",
          "Initialise",
          "RunAddonFilesBatchProcess",
          "RunCurrentFile",
          "RunForced",
          "Run",
          "Initialise",
          "RunCurrentFile",
          "PrintReport",
          "RunAddonFilesBatchProcess",
          "PrintReport",
          "ProcessFile",
          "GetIndentAndLineContentAsPieces",
          "AddFinalLineReturnToCurrentFile",
          "PrintReport",
          "PrintFinding",
          "PrintFinding",
          "PrintFinding",
          "PrintFinding",
          "PrintFinding",
          "PrintFinding",
          "PrintFinding",
          "PrintFinding",
          "PrintFinding",
          "PrintFinding",
          "GeneralFormatting",
          "AddFinalLineReturnToCurrentFile",
          "GetIndentAndLineContent",
          "GetIndentAndLineContentAsPieces",
          "GetIndentAndLineContent",
          "HasBadVariableNaming",
          "JoinLineNumbers",
          "PrintFinding",
          "Configure",
          "ButtonOK",
          "ButtonCancel",
          "SCR_BasicCodeFormatterPlugin"
        ]
      },
      {
        "class_name": "SCR_BasicCodeFormatterPluginFileReport",
        "methods": [
          "IsClean",
          "SCR_BasicCodeFormatterPluginFileReport"
        ]
      },
      {
        "class_name": "SCR_BasicCodeFormatterPluginOKCancelDialog",
        "methods": [
          "ButtonOK",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_BasicCodeFormatterForcedPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_ClassRenamingPlugin",
        "methods": [
          "Run",
          "CheckAndSetParameters",
          "CheckAndSetParameters",
          "RenameInFiles",
          "Sleep",
          "RenameInLines",
          "GetNewClassNameIfMatch",
          "ButtonRunAll",
          "ButtonRun",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_CopyClassAndMethodPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_DebugLinePlugin",
        "methods": [
          "GetDebugLine",
          "Run",
          "Configure",
          "ButtonClose"
        ]
      },
      {
        "class_name": "SCR_DoxygenFillerPlugin",
        "methods": [
          "Run",
          "ProcessCurrentFile",
          "ProcessAddon",
          "Init",
          "ProcessCurrentFile",
          "ProcessFile",
          "GetClassname",
          "GetMethodObject",
          "GetDoxygenDocumentation",
          "ConvertDoxygenBlockToSingleLines",
          "AddIndent",
          "Configure",
          "Init",
          "ButtonOK"
        ]
      },
      {
        "class_name": "SCR_DoxygenFillerPlugin_TestA",
        "methods": [
          "Method1",
          "Method2",
          "Method3",
          "Method5",
          "Method6",
          "Method7",
          "Method8",
          "Method9",
          "GetMethod",
          "SetMethod",
          "VoidMethodWithMultipleParams",
          "IntMethodWithMultipleParams",
          "SCR_DoxygenFillerPlugin_TestA"
        ]
      },
      {
        "class_name": "SCR_DoxygenFillerPlugin_TestB",
        "methods": [
          "Method9"
        ]
      },
      {
        "class_name": "SCR_DoxygenFillerPlugin_TestC",
        "methods": [
          "SetIsPlayable",
          "InitializeFaction",
          "GetOrder",
          "SetIsPlayable",
          "SCR_DoxygenFillerPlugin_TestC"
        ]
      },
      {
        "class_name": "SCR_MoveLineUpPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_MoveLineDownPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_MoveLineDownPluginHelper",
        "methods": [
          "IndentChange"
        ]
      },
      {
        "class_name": "SCR_NewScriptPlugin",
        "methods": [
          "Run",
          "TryFillFile",
          "GetConfig",
          "GetPath",
          "TryFillFile",
          "OkButton",
          "CancelButton"
        ]
      },
      {
        "class_name": "SCR_ScriptTemplatePlugin",
        "methods": [
          "Run",
          "ButtonConfirm",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_SVNPluginBase",
        "methods": [
          "Run",
          "GetCommandLine"
        ]
      },
      {
        "class_name": "SCR_SVNLogScriptEditorPlugin",
        "methods": [
          "GetCommandLine",
          "Configure",
          "OkButton"
        ]
      },
      {
        "class_name": "SCR_SVNLogResourceManagerPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_SVNDiffPlugin",
        "methods": [
          "GetCommandLine",
          "Configure"
        ]
      },
      {
        "class_name": "SCR_SVNBlamePlugin",
        "methods": [
          "GetCommandLine",
          "Configure"
        ]
      },
      {
        "class_name": "SCR_OKWorkbenchDialog",
        "methods": [
          "BtnOK"
        ]
      },
      {
        "class_name": "SCR_OKCancelWorkbenchDialog",
        "methods": [
          "BtnOK",
          "BtnCancel"
        ]
      },
      {
        "class_name": "SCR_PrefabEditingPlugin",
        "methods": [
          "GetFileName",
          "CreateEntity",
          "CreateWorldFiles",
          "SetCamera",
          "GetEntitySourceBounds",
          "GetEntitySourceBounds",
          "GetConfig",
          "Run",
          "GetEntitySourceBounds",
          "Configure",
          "ButtonClose"
        ]
      },
      {
        "class_name": "SCR_PrefabEditingPluginResourceManager",
        "methods": [
          "GetSelected",
          "GetSelectedResourceBrowser"
        ]
      },
      {
        "class_name": "PrefabEditingPluginConfig",
        "methods": [
          "GetPath",
          "GetFolderSettings"
        ]
      },
      {
        "class_name": "PrefabEditingPluginConfigFolder",
        "methods": [
          "GetFolder",
          "GetWorld",
          "UsePrefabPosition",
          "GetPosition",
          "GetRotation",
          "GetSpacing"
        ]
      },
      {
        "class_name": "SCR_PrefabEditingPluginBase",
        "methods": [
          "StartProgressWorldEditor",
          "StartProgressResourceBrowser",
          "StartProgress",
          "StartProgressWorldEditor",
          "GetSelectedWorldEditor",
          "GetSelectedResourceBrowser",
          "GetSelected",
          "GetSelectedWorldEditor",
          "GetPrefabs",
          "GetSelected"
        ]
      },
      {
        "class_name": "SCR_ReforgerEngineSettingsPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_ReforgerGameSettingsPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_WorkbenchSearchResourcesCallbackArray",
        "methods": [
          "Insert",
          "SCR_WorkbenchSearchResourcesCallbackArray"
        ]
      },
      {
        "class_name": "SCR_WorkbenchIEntityQueryCallbackArray",
        "methods": [
          "Insert",
          "SCR_WorkbenchIEntityQueryCallbackArray"
        ]
      },
      {
        "class_name": "GameModeSetupConfig",
        "methods": [
          "ValidateWorld",
          "GenerateWorld",
          "ValidateMissionHeader",
          "GenerateMissionHeader",
          "Init",
          "GameModeSetupConfig"
        ]
      },
      {
        "class_name": "GameModeSetupConfigEntry",
        "methods": [
          "CreateEntity"
        ]
      },
      {
        "class_name": "SCR_GameModeSetupPlugin",
        "methods": [
          "Run",
          "ShowPage",
          "RunValidation",
          "ShowPrevPage",
          "ShowPage",
          "ShowPage",
          "RunValidationResults",
          "ShowPrevPage",
          "ShowPage",
          "ShowPage",
          "ShowPage",
          "ShowPage",
          "RunGeneration",
          "ShowPrevPage",
          "ShowPage",
          "ShowPage",
          "RunGenerationResults",
          "ShowPrevPage",
          "ShowPage",
          "ShowPage",
          "RunMissionHeader",
          "ShowPage",
          "ShowPrevPage",
          "ShowPage",
          "ShowPage",
          "RunMissionHeaderResults",
          "ShowPrevPage",
          "ShowPage",
          "RunOutro",
          "ShowPrevPage",
          "ShowPage",
          "Run",
          "RunValidation",
          "RunValidationResults",
          "RunGeneration",
          "RunGenerationResults",
          "RunMissionHeader",
          "RunMissionHeaderResults",
          "RunOutro",
          "ShowPrevPage",
          "LoadConfig",
          "ButtonCancel",
          "ButtonNext"
        ]
      },
      {
        "class_name": "SCR_GameModeSetupPluginValidation",
        "methods": [
          "ButtonCancel",
          "ButtonSkip",
          "ButtonBack",
          "ButtonValidate"
        ]
      },
      {
        "class_name": "SCR_GameModeSetupPluginResults",
        "methods": [
          "ButtonCancel",
          "ButtonBack",
          "ButtonNext"
        ]
      },
      {
        "class_name": "SCR_GameModeSetupPluginGenerationResults",
        "methods": [
          "ButtonCancel",
          "ButtonValidate",
          "ButtonBack",
          "ButtonNext"
        ]
      },
      {
        "class_name": "SCR_GameModeSetupPluginGeneration",
        "methods": [
          "ButtonCancel",
          "ButtonSkip",
          "ButtonBack",
          "ButtonGenerate"
        ]
      },
      {
        "class_name": "SCR_GameModeSetupPluginMissionHeader",
        "methods": [
          "ButtonCancel",
          "ButtonSkip",
          "ButtonBack",
          "ButtonGenerate"
        ]
      },
      {
        "class_name": "SCR_GameModeSetupPluginOutro",
        "methods": [
          "ButtonBack",
          "ButtonClose"
        ]
      },
      {
        "class_name": "SCR_GameModeSetupPluginError",
        "methods": [
          "ButtonGenerate"
        ]
      },
      {
        "class_name": "SCR_EntitySourceHelper",
        "methods": [
          "CopyDataFromOldToNewComponent",
          "CopyVariablesFromTo"
        ]
      },
      {
        "class_name": "SCR_PrefabHelper",
        "methods": [
          "ClonePrefab",
          "CreateChildPrefab",
          "EndEntityAction",
          "EndEntityAction",
          "EndEntityAction",
          "CreatePrefabFromXOB",
          "EndEntityAction",
          "SaveEntitySourceAsPrefab",
          "CreateEntitySource",
          "EndEntityAction",
          "EndEntityAction",
          "CreateEntitySourceWithoutEntity",
          "EndEntityAction",
          "CreateEntitySourceFromXOB",
          "EndEntityAction",
          "EndEntityAction",
          "EndEntityAction",
          "EndEntityAction",
          "CreateEntitySourceComponentIfNeeded",
          "EndEntityAction",
          "GetResourceNameAbsolutePath",
          "GetRelativeParentDirectory",
          "FormatRelativePath",
          "FormatRelativePath",
          "FormatRelativePath",
          "SaveEntitySourceAsPrefab",
          "UpdatePrefab",
          "BeginEntityAction",
          "EndEntityAction"
        ]
      },
      {
        "class_name": "SCR_WorldEditorToolHelper",
        "methods": [
          "GetResourceManager",
          "GetWorldEditor",
          "GetWorldEditorAPI",
          "GetPrefabEditModeEntitySource",
          "GetPrefabEditModeResourceName",
          "GetResourceNameFromFile",
          "GetSelectedOrOpenedResources",
          "DeleteEntityFromSource",
          "EndEntityAction",
          "BeginEntityAction",
          "EndEntityAction",
          "ResourceNameCallback",
          "TraceCallbackMethod"
        ]
      },
      {
        "class_name": "SCR_WorldFilesHelper",
        "methods": [
          "CreateWorld",
          "ReplaceWorldEntity",
          "GetDefaultLayerAbsoluteFilePath"
        ]
      },
      {
        "class_name": "SCR_ObjectBrushArrayConfig",
        "methods": [
          "SCR_ObjectBrushArrayConfig"
        ]
      },
      {
        "class_name": "SCR_ObjectBrushTool",
        "methods": [
          "CreateObjects",
          "DeleteObjects",
          "DeleteObjects",
          "DeleteEntities",
          "OnActivate",
          "OnMousePressEvent",
          "CreateAndInitialiseObstacleDetector",
          "DeleteObjects",
          "CreateObjects",
          "DeleteObjects",
          "CreateObjects",
          "DeleteObjects",
          "CreateObjects",
          "DeleteObjects",
          "CreateObjects",
          "OnMouseReleaseEvent",
          "OnMouseMoveEvent",
          "DeleteObjects",
          "CreateObjects",
          "OnWheelEvent",
          "UpdatePropertyPanel",
          "UpdatePropertyPanel",
          "OnKeyPressEvent",
          "OnKeyReleaseEvent",
          "OnDeActivate",
          "OnActivate",
          "GetRandomBrushObjectData",
          "AdjustValueUsingScrollwheel",
          "CreateAndInitialiseObstacleDetector"
        ]
      },
      {
        "class_name": "SCR_AutoSpawnerTool",
        "methods": [
          "SpawnFromPrefabList",
          "ClearSelection",
          "Preload",
          "Undo",
          "ClearSelection",
          "FolderScan",
          "ClearSelection",
          "FindFilesByExtension",
          "FindFilesByExtension",
          "Preload",
          "Preload",
          "LoadEntities",
          "LoadXOBs",
          "LoadXOBs",
          "GenerateComment",
          "LoadEntities",
          "GenerateComment",
          "GenerateComment",
          "PlaceSelection",
          "OnMousePressEvent",
          "ClearSelection",
          "OnMouseMoveEvent",
          "PlaceSelection",
          "FindFilesByExtension",
          "ClearSelection",
          "FormatEntityIndex"
        ]
      },
      {
        "class_name": "SCR_BatchPrefabsOperationsTool",
        "methods": [
          "ProcessComponents",
          "ProcessAttributes",
          "ProcessAttributes",
          "Execute",
          "ProcessAttributes",
          "ProcessComponents",
          "ExecuteModify",
          "ProcessAttributes",
          "ProcessComponents"
        ]
      },
      {
        "class_name": "SCR_BatchPrefabTitle",
        "methods": [
          "SCR_BatchPrefabTitle",
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "SCR_CoordsTool",
        "methods": [
          "GetCurrentWorldEditorLink",
          "GetWorldEditorLink",
          "GetWorldEditorLink",
          "SetCamera",
          "GetCoordsFromInput",
          "AddEntry",
          "UpdatePropertyPanel",
          "CopyLinkToClipboard",
          "NavigateToClipboardLink",
          "SetCamera",
          "NavigateToCoords",
          "SetCamera"
        ]
      },
      {
        "class_name": "SCR_DedicatedServerPlugin",
        "methods": [
          "GetAddonsDirCLI",
          "GetAddonsCLI",
          "Run",
          "OnGameModeEnded",
          "ButtonRun",
          "ButtonClose"
        ]
      },
      {
        "class_name": "DedicatedServerPluginCLI",
        "methods": [
          "GetCLI"
        ]
      },
      {
        "class_name": "DedicatedServerPluginCLI_Server",
        "methods": [
          "GetCLI"
        ]
      },
      {
        "class_name": "DedicatedServerPluginCLI_Config",
        "methods": [
          "GetCLI"
        ]
      },
      {
        "class_name": "SCR_DestructiblePrefabFinderTool",
        "methods": [
          "CheckForMPDComponent",
          "CheckForDestructibleEntity",
          "FolderScan",
          "CheckForMPDComponent",
          "CheckForDestructibleEntity",
          "PrintMPDComponents",
          "PrintDestructibleEntities",
          "PrintDestructibleEntitiesWithMPD",
          "PrintMPDComponentsMissingRpl",
          "PrintMPDComponentsMissingHitZone",
          "PrintMPDComponentsWithDefaults"
        ]
      },
      {
        "class_name": "SCR_DestructionIndicesAssignTool",
        "methods": [
          "FixPhases",
          "ConvertPhases",
          "ConvertPhases",
          "PrintAllDestructibleResourceNames",
          "CalculateDensity",
          "RevertToParent",
          "UpdatePrefabs",
          "ClearArrayOfPhaseEffects",
          "ClearArrayOfPhaseEffects",
          "ClearArrayOfPhaseEffects",
          "ClearArrayOfPhaseEffects",
          "RemovePhases",
          "ClearArrayOfPhaseEffects",
          "FilterPrefabs",
          "FilterByComponents",
          "FilterByComponents",
          "ShowMass",
          "ConvertPrefabs",
          "FilterByClass",
          "CopySpawnObjectsArray",
          "GetHitZone",
          "GetPhasesTotalHealth",
          "FindComponent",
          "CopySpawnObjectsArray",
          "HasComponent",
          "FilterByClass",
          "FilterByComponents",
          "AssignIndices",
          "SCR_DestructionIndicesAssignTool"
        ]
      },
      {
        "class_name": "SCR_MassResponseIndexPair",
        "methods": [
          "GetMass",
          "GetIndexName",
          "GetIndex"
        ]
      },
      {
        "class_name": "SCR_IndicesAssignToolHandler",
        "methods": [
          "SetTool",
          "Callback"
        ]
      },
      {
        "class_name": "SCR_EntityFlagsManagerPlugin",
        "methods": [
          "Run",
          "ProcessEntitySources",
          "ProcessEntitySources",
          "BtnOK",
          "BtnCancel"
        ]
      },
      {
        "class_name": "SCR_EntityReplacerTool",
        "methods": [
          "ReplaceFromSelectedEntities",
          "ReplaceFromEntities",
          "ReplaceFromAllEntities",
          "ReplaceFromEntities",
          "ReplaceFromEntities",
          "RemoveInvalidResourceNames",
          "GetAllEntities",
          "SelectEntities",
          "OnMousePressEvent",
          "RemoveInvalidResourceNames",
          "ToReplaceOperation",
          "ReplaceWithOperation",
          "GetToReplaceIndex",
          "GetReplaceWithIndex",
          "ToReplaceOperation",
          "ReplaceWithOperation",
          "RemoveInvalidResourceNames",
          "GetAllEntities",
          "InsertEntity",
          "SelectEntities"
        ]
      },
      {
        "class_name": "SCR_EntitySpawnerPlugin",
        "methods": [
          "Run",
          "Configure",
          "ButtonOK",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_GeoPointData",
        "methods": [
          "SCR_GeoPointData"
        ]
      },
      {
        "class_name": "SCR_GeoProperty",
        "methods": [
          "SCR_GeoProperty"
        ]
      },
      {
        "class_name": "SCR_GeoExporter",
        "methods": [
          "SCR_GeoExporter",
          "Init",
          "Close",
          "GetPath",
          "Export",
          "BeginExport",
          "FeatureExport",
          "EndExport"
        ]
      },
      {
        "class_name": "SCR_GeoSVGExporter",
        "methods": [
          "BeginExport",
          "Export",
          "Export",
          "FeatureExport",
          "Export",
          "Export",
          "Export",
          "EndExport",
          "Export"
        ]
      },
      {
        "class_name": "SCR_GeoJSONExporter",
        "methods": [
          "BeginExport",
          "Export",
          "FeatureExport",
          "Export",
          "Export",
          "Export",
          "Export",
          "Export",
          "Export",
          "Export",
          "Export",
          "Export",
          "Export",
          "Export",
          "EndExport",
          "Export"
        ]
      },
      {
        "class_name": "SCR_ExportGeoJSONTool",
        "methods": [
          "Configure",
          "Run",
          "Export",
          "Execute",
          "Export",
          "Export"
        ]
      },
      {
        "class_name": "SCR_FloatersFinderPlugin",
        "methods": [
          "Run",
          "GetEntities",
          "FilterEntities",
          "SelectEntities",
          "DeleteSphereThread",
          "OutputEntitiesToFile",
          "Init",
          "GetEntities",
          "DeleteSphereThread",
          "Sleep",
          "InsertEntity",
          "FilterEntities",
          "NoVegetationFilterCallback",
          "SelectEntities",
          "OutputEntitiesToFile",
          "Configure",
          "ButtonOK"
        ]
      },
      {
        "class_name": "SCR_FloatersFixerPlugin",
        "methods": [
          "Run",
          "Init",
          "FilterNonVegetationCallback",
          "GetXYZAnglesFromNormal",
          "Configure",
          "ButtonOK"
        ]
      },
      {
        "class_name": "SCR_GenerateWindowsPrefabsTool",
        "methods": [
          "CreateGlassButton",
          "CreateGlass",
          "CreateSashesButton",
          "CreateAndFillPrefabFromXOBs",
          "CreateFramesButton",
          "CreateAndFillPrefabFromXOBs",
          "UpdateSashPrefabs",
          "RefreshPrefabs",
          "UpdateWindowPrefabs",
          "RefreshPrefabs",
          "CreateAndFillPrefabFromXOBs",
          "CreateAndSaveBaseAndDefaultPrefabFromXOB",
          "CreateEntitySourcesFromBoneNames",
          "SaveEntitySourceAsNewTemplate",
          "CreateGlass",
          "GetDestroyedGlassModelPath",
          "GetDamageMask",
          "GetDamageVariants",
          "GetGlassCount",
          "RefreshPrefabs",
          "RefreshPrefab",
          "CreateEntitySourceFromBoneName",
          "CreateResourceFromBoneName",
          "FindAdaptedPrefab"
        ]
      },
      {
        "class_name": "SCR_ImportShapefileTool",
        "methods": [
          "Execute",
          "ProcessShapes",
          "GenerateForestGeneratorPointData",
          "AttachChildren",
          "ProcessShapes",
          "Load_Point",
          "Load_Multipoint",
          "Load_Point",
          "Load_Multipoint",
          "CreateFromPoints",
          "CreateFromPoints",
          "CreateComment",
          "HasPrefabListPrefabs",
          "GetPrefab",
          "IsPointDuplicate",
          "GenerateForestGeneratorPointData",
          "AttachChildren"
        ]
      },
      {
        "class_name": "SCR_MarkShapesEditorOnlyPlugin",
        "methods": [
          "OkButton",
          "Run",
          "iter",
          "ProcessEntity",
          "SetEditorOnly",
          "ProcessEntity",
          "SetEditorOnly",
          "SetEditorOnly"
        ]
      },
      {
        "class_name": "SCR_PolylineAreaTool",
        "methods": [
          "ModifyPolyline",
          "MakeRec",
          "ModifyPolyline",
          "MakeCircle",
          "ModifyPolyline",
          "Convert",
          "GetComponentAt"
        ]
      },
      {
        "class_name": "SCR_PrefabManagementTool",
        "methods": [
          "BtnClonePrefabs",
          "CreateClonesOrChildren",
          "BtnCreateChildren",
          "CreateClonesOrChildren",
          "BtnImportXOBs",
          "CreateClonesOrChildren",
          "SanitiseAndFormatSuffix"
        ]
      },
      {
        "class_name": "SCR_SelectionBrushTool",
        "methods": [
          "OnMousePressEvent",
          "CreateBrush",
          "DeselectAroundCursor",
          "SelectAroundCursor",
          "OnMouseMoveEvent",
          "CreateBrush",
          "DeselectAroundCursor",
          "SelectAroundCursor",
          "OnWheelEvent",
          "UpdatePropertyPanel",
          "CreateBrush",
          "OnMouseReleaseEvent",
          "SetBrushColor",
          "OnKeyPressEvent",
          "DeleteSelectedEntities",
          "CreateBrush",
          "OnKeyReleaseEvent",
          "CreateBrush",
          "OnActivate",
          "OnDeActivate",
          "OnAfterLoadWorld",
          "SelectAroundCursor",
          "SetBrushColor",
          "SetBrushColor",
          "SetBrushColor",
          "CanSelectEntityFromItsLayer",
          "HasMeshObject",
          "GetTopMostParentWithMeshObject",
          "DeselectAroundCursor",
          "SetBrushColor",
          "SetBrushColor",
          "AdjustValueUsingScrollWheel",
          "DeleteSelectedEntities",
          "CreateBrush",
          "SetBrushColor",
          "SetBrushColor",
          "IsWorldValid",
          "SCR_SelectionBrushTool"
        ]
      },
      {
        "class_name": "SCR_SnapAndOrientToTerrainPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_VerifyItemsPlugin",
        "methods": [
          "Run",
          "PrintFormat"
        ]
      },
      {
        "class_name": "SCR_VerifySlotEntitiesPlugin",
        "methods": [
          "Run"
        ]
      },
      {
        "class_name": "SCR_WorldMapExportTool",
        "methods": [
          "Execute",
          "Export",
          "GetReportMessage",
          "Export",
          "RunCommandline",
          "ExportWorldData",
          "Sleep",
          "Sleep"
        ]
      },
      {
        "class_name": "SCR_WrapEntitiesPlugin",
        "methods": [
          "Run",
          "Configure",
          "ButtonClose"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkConversionPlugin_Phase1",
        "methods": [
          "Run",
          "CreateCycleWaypoints",
          "Convert",
          "CreateCycleWaypoints",
          "GetLayersAndWaypointSets",
          "GetLayersAndWaypointSets",
          "Convert",
          "TryConvertSlot",
          "TryAndConvertSlotWaypointGroups",
          "TryConvertSlot",
          "ConvertSlotTo",
          "TryAndConvertSlotWaypointGroups",
          "SCR_ScenarioFrameworkConversionPlugin_Phase1"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkConversionPlugin_Phase2",
        "methods": [
          "Run",
          "GetAllSlotWaypointWithTwoSlotWaypointComponentsAndRemoveUnsetOne",
          "GetAllSlotWaypointWithTwoSlotWaypointComponentsAndRemoveUnsetOne"
        ]
      },
      {
        "class_name": "SCR_ScenarioFrameworkConversionPlugin_Rune",
        "methods": [
          "SCR_ScenarioFrameworkConversionPlugin_Rune"
        ]
      },
      {
        "class_name": "SCR_WorldSetupPluginBasePlugin",
        "methods": [
          "CreatePrefabChildInAddon"
        ]
      },
      {
        "class_name": "SCR_WorldSetupPlugin_Entities",
        "methods": [
          "Run",
          "CreateEntities",
          "Cleanup",
          "Init",
          "LoadConfig",
          "CreateEntities",
          "CreateEntityFromEntry",
          "CreateEntityFromEntry",
          "Cleanup",
          "ButtonRun",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "SCR_WorldSetupPlugin_GenericWorldEntity",
        "methods": [
          "Run",
          "GetDefaultLayerAbsoluteFilePath",
          "ButtonOK",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "AnimExportTrackExportRequest",
        "methods": [
          "AnimExportTrackExportRequest"
        ]
      },
      {
        "class_name": "AnimExportTrackExportResponse",
        "methods": [
          "AnimExportTrackExportResponse"
        ]
      },
      {
        "class_name": "AnimExportTrackExport",
        "methods": [
          "GetRequest",
          "AnimExportTrackExportRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "AnimExportProfilesRequest",
        "methods": [
          "AnimExportProfilesRequest"
        ]
      },
      {
        "class_name": "AnimExportProfilesResponse",
        "methods": [
          "OnPack",
          "StartArray",
          "ItemString",
          "EndArray"
        ]
      },
      {
        "class_name": "AnimExportProfiles",
        "methods": [
          "GetRequest",
          "AnimExportProfilesRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "AnimExportProfileChannelsRequest",
        "methods": [
          "AnimExportProfileChannelsRequest"
        ]
      },
      {
        "class_name": "AnimExportProfileChannelsResponse",
        "methods": [
          "OnPack",
          "StartObject",
          "StartObject",
          "StoreString",
          "EndObject",
          "EndObject"
        ]
      },
      {
        "class_name": "AnimExportProfileChannels",
        "methods": [
          "GetRequest",
          "AnimExportProfileChannelsRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "CheckEmatRequest",
        "methods": [
          "CheckEmatRequest"
        ]
      },
      {
        "class_name": "CheckEmatResponse",
        "methods": [
          "CheckEmatResponse"
        ]
      },
      {
        "class_name": "CheckEmat",
        "methods": [
          "GetRequest",
          "CheckEmatRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "CheckGUIDRequest",
        "methods": [
          "CheckGUIDRequest"
        ]
      },
      {
        "class_name": "CheckGUIDResponse",
        "methods": [
          "CheckGUIDResponse"
        ]
      },
      {
        "class_name": "CheckGUID",
        "methods": [
          "GetRequest",
          "CheckGUIDRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "EBTEmatUtils",
        "methods": [
          "GetMaterials"
        ]
      },
      {
        "class_name": "ExportEmatRequest",
        "methods": [
          "ExportEmatRequest"
        ]
      },
      {
        "class_name": "ExportEmatResponse",
        "methods": [
          "ExportEmatResponse"
        ]
      },
      {
        "class_name": "ExportEmatUtils",
        "methods": [
          "FindEmat",
          "EditEmat",
          "CreateEmat"
        ]
      },
      {
        "class_name": "ExportEmat",
        "methods": [
          "GetRequest",
          "ExportEmatRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "ExportTerrainRequest",
        "methods": [
          "ExportTerrainRequest"
        ]
      },
      {
        "class_name": "ExportTerrainResponse",
        "methods": [
          "ExportTerrainResponse"
        ]
      },
      {
        "class_name": "ExportTerrain",
        "methods": [
          "GetRequest",
          "ExportTerrainRequest",
          "GetResponse",
          "ModifyTerrain",
          "ModifyTerrain"
        ]
      },
      {
        "class_name": "GamematInfoRequest",
        "methods": [
          "GamematInfoRequest"
        ]
      },
      {
        "class_name": "GamematInfoResponse",
        "methods": [
          "GamematInfoResponse"
        ]
      },
      {
        "class_name": "GamematInfoUtils",
        "methods": [
          "GetGamemat"
        ]
      },
      {
        "class_name": "GamematInfo",
        "methods": [
          "GetRequest",
          "GamematInfoRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "GetPortalMatRequest",
        "methods": [
          "GetPortalMatRequest"
        ]
      },
      {
        "class_name": "GetPortalMatResponse",
        "methods": [
          "GetPortalMatResponse"
        ]
      },
      {
        "class_name": "GetPortalMat",
        "methods": [
          "GetRequest",
          "GetPortalMatRequest",
          "GetResponse",
          "Find"
        ]
      },
      {
        "class_name": "LayerPresetsRequest",
        "methods": [
          "LayerPresetsRequest"
        ]
      },
      {
        "class_name": "LayerPresetsResponse",
        "methods": [
          "LayerPresetsResponse"
        ]
      },
      {
        "class_name": "LayerPresetsUtils",
        "methods": [
          "Getlayers"
        ]
      },
      {
        "class_name": "LayerPresets",
        "methods": [
          "GetRequest",
          "LayerPresetsRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "LoadedProjectsRequest",
        "methods": [
          "LoadedProjectsRequest"
        ]
      },
      {
        "class_name": "LoadedProjectsResponse",
        "methods": [
          "LoadedProjectsResponse"
        ]
      },
      {
        "class_name": "LoadedProjects",
        "methods": [
          "GetRequest",
          "LoadedProjectsRequest",
          "InLoadedProjects",
          "GetResponse"
        ]
      },
      {
        "class_name": "MaterialPreviewRequest",
        "methods": [
          "MaterialPreviewRequest"
        ]
      },
      {
        "class_name": "MaterialPreviewGetMapping",
        "methods": [
          "MaterialPreviewGetMapping"
        ]
      },
      {
        "class_name": "MaterialPreviewUtils",
        "methods": [
          "ReadXOB",
          "GetEmatClass"
        ]
      },
      {
        "class_name": "MaterialMapping",
        "methods": [
          "GetRequest",
          "MaterialPreviewRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "MaterialPropertiesRequest",
        "methods": [
          "MaterialPropertiesRequest"
        ]
      },
      {
        "class_name": "MaterialPropertiesResponse",
        "methods": [
          "MaterialPropertiesResponse"
        ]
      },
      {
        "class_name": "MaterialPropertiesUtils",
        "methods": [
          "GetEmatProperties"
        ]
      },
      {
        "class_name": "MaterialProperties",
        "methods": [
          "GetRequest",
          "MaterialPropertiesRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "OpenXOBRequest",
        "methods": [
          "OpenXOBRequest"
        ]
      },
      {
        "class_name": "OpenXOBResponse",
        "methods": [
          "OpenXOBResponse"
        ]
      },
      {
        "class_name": "OpenXOB",
        "methods": [
          "GetRequest",
          "OpenXOBRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "PrefabImporterRequest",
        "methods": [
          "PrefabImporterRequest"
        ]
      },
      {
        "class_name": "PrefabImporterResponse",
        "methods": [
          "PrefabImporterResponse"
        ]
      },
      {
        "class_name": "PrefabImporterUtils",
        "methods": [
          "GetPrefabParamIndex",
          "GetPrefabParams",
          "ReadAncestor",
          "ReadAncestor",
          "GetFBXPath",
          "GetPrefabEmat",
          "GetPrefabEmat",
          "ReadAncestor",
          "ReadChild",
          "ReadAncestor",
          "ReadChild",
          "GetPrefabParams",
          "ReadFirst",
          "GetPrefabParams",
          "ReadChild",
          "RemoveOverloadedPrefabs"
        ]
      },
      {
        "class_name": "PrefabImporter",
        "methods": [
          "GetRequest",
          "PrefabImporterRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "RegisterResourceRequest",
        "methods": [
          "RegisterResourceRequest"
        ]
      },
      {
        "class_name": "RegisterResourceResponse",
        "methods": [
          "RegisterResourceResponse"
        ]
      },
      {
        "class_name": "RegisterResourceUtils",
        "methods": [
          "Register"
        ]
      },
      {
        "class_name": "RegisterResource",
        "methods": [
          "GetRequest",
          "RegisterResourceRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "SendToBlenderPlugin",
        "methods": [
          "OnResourceContextMenu",
          "ImportET",
          "ImportXOB",
          "ImportXOB",
          "ImportET",
          "ButtonOK",
          "ButtonCancel"
        ]
      },
      {
        "class_name": "TerrainExportTool",
        "methods": [
          "Execute",
          "CoordsReload",
          "ScaleReload",
          "OnMouseMoveEvent",
          "OnMousePressEvent",
          "OnKeyPressEvent",
          "OnActivate",
          "OnDeActivate",
          "SnapToVertex"
        ]
      },
      {
        "class_name": "TextureRequest",
        "methods": [
          "TextureRequest"
        ]
      },
      {
        "class_name": "TextureResponse",
        "methods": [
          "TextureResponse"
        ]
      },
      {
        "class_name": "TextureInfo",
        "methods": [
          "GetRequest",
          "TextureRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "TextureValidationRequest",
        "methods": [
          "TextureValidationRequest"
        ]
      },
      {
        "class_name": "TextureValidationResponse",
        "methods": [
          "TextureValidationResponse"
        ]
      },
      {
        "class_name": "TextureValidation",
        "methods": [
          "GetRequest",
          "TextureValidationRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "NetApiHandler",
        "methods": [
          "GetRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "TxaExporter",
        "methods": [
          "LoadProfiles",
          "GetNumProfiles",
          "GetProfileIndex",
          "GetProfileName",
          "GetProfileChannelCount",
          "GetProfileChannelName",
          "GetProfileChannelGenFn",
          "TrackReset",
          "TrackSetChannels",
          "TrackExport",
          "ErrCode",
          "ErrMsg"
        ]
      },
      {
        "class_name": "SCR_MapExporterConfig",
        "methods": [
          "IsValid"
        ]
      },
      {
        "class_name": "SCR_MapExporterPlugin",
        "methods": [
          "ButtonExport",
          "Init",
          "InitVars",
          "Run",
          "InitVars",
          "PerformExport",
          "PerformExport",
          "ProcessEntityRecur",
          "OnBeforeResourceExport",
          "PerformResourceExport",
          "OnBeforeResourceExport",
          "Configure",
          "GetConfig",
          "AddAssetToMigrate",
          "HandleSpecificEntityDependencies",
          "RegisterMaterial",
          "RegisterMaterial",
          "RegisterMaterial",
          "RegisterMaterial",
          "RegisterMaterial",
          "RegisterMaterial",
          "RegisterMaterial",
          "HandleSpecificEntityData",
          "PurgeCurveData",
          "IsEntityClassBlacklisted",
          "GetAlternateClassName",
          "IsComponentClassBlacklisted",
          "IsAnyComponentIncompatible",
          "DoesEntityNeedReplacing",
          "DoesPrefabNeedReplacingFast",
          "DoesPrefabNeedReplacingFast",
          "DoesPrefabNeedReplacing",
          "RunPrefabDiscovery",
          "RegisterXob",
          "AddAssetToMigrate",
          "DiscoverMeshObjectMaterialOverrides",
          "RegisterPrefabXob",
          "RegisterXob",
          "DiscoverMeshObjectMaterialOverrides",
          "RegisterMaterial",
          "GetMaterialsFromXobs",
          "RegisterMaterial",
          "GetTexturesFromMaterials",
          "AddAssetToMigrate",
          "AddAssetToMigrate",
          "RegisterMaterial",
          "AddAssetToMigrate",
          "RegisterMaterial",
          "RunPrefabDiscovery",
          "RegisterPrefabXob",
          "RunPrefabDiscovery",
          "RunPrefabDiscovery",
          "ProcessEntityRecur",
          "HandleSpecificEntityDependencies",
          "RegisterPrefabXob",
          "HandleSpecificEntityData",
          "PurgeCurveData",
          "ProcessEntityRecur",
          "CloneEntityFull",
          "CopyComponents",
          "ClonePrefabFast",
          "IsFromPrefabLibrary",
          "ClonePrefabSlow",
          "AddAssetToMigrate",
          "RegisterNewPrefab",
          "DeepPrefabEntityCloneRecur",
          "CopyComponents",
          "DeepPrefabEntityCloneRecur",
          "RegisterNewPrefab",
          "IsPartOfPrefab",
          "GetPrefab",
          "GetPrefabName",
          "CopyComponentProperties",
          "CopyComponents",
          "CopyComponent",
          "CopyComponent",
          "CopyComponentProperties",
          "CopyComponentPropertiesSpecial",
          "CopyComponentPropertiesSpecial",
          "RegisterXob",
          "ExportFiles",
          "ExportFile",
          "ExportFile",
          "ExportMapData",
          "ExportFile",
          "ExportSharedData",
          "ExportFiles",
          "CloneSingleEntity",
          "CopyEntityProperties",
          "CopyEntityProperties",
          "CopyEntityPropertiesSpecial",
          "CopyContainerProperties",
          "CopyEntityPropertiesSpecial",
          "CopyContainerProperties",
          "FixWeatherConfig",
          "AddAssetToMigrate",
          "FixWeatherConfig",
          "ProcessDiscoveredPrefabs",
          "RegisterPrefabXob",
          "AddAssetToMigrate",
          "PerformResourceExport",
          "ProcessDiscoveredPrefabs",
          "GetMaterialsFromXobs",
          "GetTexturesFromMaterials",
          "ExportFiles",
          "ExportFiles",
          "ExportFiles",
          "ExportFiles",
          "ExportFiles",
          "ExportSharedData",
          "ExportMapData",
          "ClearExportSourceData",
          "ClearExportSourceData",
          "DeleteFilePlus",
          "DeleteFilePlus",
          "IsExportTargetFolderEmpty",
          "FindComponentSource"
        ]
      },
      {
        "class_name": "PeerConfigViewTitle",
        "methods": [
          "_WB_GetCustomTitle"
        ]
      },
      {
        "class_name": "PeerPlugin",
        "methods": [
          "GetAddonsDirCLI",
          "GetAddonsCLI",
          "Start",
          "End",
          "OnGameModeStarted",
          "Start",
          "OnGameModeEnded",
          "End",
          "Configure",
          "OkButton"
        ]
      },
      {
        "class_name": "TextureType",
        "methods": [
          "TextureType",
          "Insert",
          "AddBaseConfig",
          "GetBaseConfig",
          "CopyFrom",
          "IsType",
          "TestPostFix",
          "RegisterTypes"
        ]
      },
      {
        "class_name": "FontTextureType",
        "methods": [
          "IsType",
          "TestPostFix",
          "IsType",
          "FixTextureMetaFile"
        ]
      },
      {
        "class_name": "TextureImportPlugin",
        "methods": [
          "TextureImportPlugin",
          "IsImage",
          "OnRegisterResource",
          "FixTextureMetaFile",
          "OnRenameResource",
          "FixTextureMetaFile",
          "Configure",
          "OkButton"
        ]
      },
      {
        "class_name": "BatchTextureProcessorPlugin",
        "methods": [
          "BatchTextureProcessorPlugin",
          "OK",
          "Cancel",
          "TestAgainstFilter",
          "Find",
          "Run",
          "ReportIssue",
          "ReportIssue",
          "ReportIssue",
          "ReportIssue",
          "ReportIssue",
          "PrintFormat",
          "ReportIssue",
          "PrintFormat"
        ]
      },
      {
        "class_name": "ValidateFBXPlugin",
        "methods": [
          "GetToolPath",
          "OnResourceContextMenu",
          "GetToolPath",
          "Run",
          "GetToolPath",
          "OK",
          "GetToolPath",
          "Cancel"
        ]
      },
      {
        "class_name": "FBXReportToolRequest",
        "methods": [
          "FBXReportToolRequest"
        ]
      },
      {
        "class_name": "FBXReportToolResponse",
        "methods": [
          "FBXReportToolResponse"
        ]
      },
      {
        "class_name": "FBXReportToolMessage",
        "methods": [
          "GetRequest",
          "FBXReportToolRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "ValidateFBXUtilsReq",
        "methods": [
          "ValidateFBXUtilsReq"
        ]
      },
      {
        "class_name": "ValidateFBXUtilsRes",
        "methods": [
          "ValidateFBXUtilsRes"
        ]
      },
      {
        "class_name": "ValidateFBXUtils",
        "methods": [
          "GetRequest",
          "ValidateFBXUtilsReq",
          "GetResponse"
        ]
      },
      {
        "class_name": "ValidateMaterialPlugin",
        "methods": [
          "GetCommand",
          "FillResourceArrays",
          "OnResourceContextMenu",
          "Run",
          "OK",
          "Cancel"
        ]
      },
      {
        "class_name": "MaterialValidatorUtils",
        "methods": [
          "CheckDependencies",
          "GetValue",
          "CheckSlots",
          "CheckDefaults",
          "GetValue",
          "CheckTextures",
          "CheckSlots",
          "CheckExtremes",
          "ValidateUVs",
          "GetValue",
          "GetValue"
        ]
      },
      {
        "class_name": "TextureValidatorUtils",
        "methods": [
          "CheckSTConvention",
          "TextureImportSettings",
          "GetSuffix",
          "CheckResolution",
          "CheckExtension",
          "CheckChannelCount",
          "CheckRGBDependencies"
        ]
      },
      {
        "class_name": "MaterialValidatorRequest",
        "methods": [
          "MaterialValidatorRequest"
        ]
      },
      {
        "class_name": "MaterialValidatorResponse",
        "methods": [
          "MaterialValidatorResponse"
        ]
      },
      {
        "class_name": "MaterialValidator",
        "methods": [
          "GetRequest",
          "MaterialValidatorRequest",
          "GetResponse"
        ]
      },
      {
        "class_name": "TextureCheck",
        "methods": [
          "TextureCheck"
        ]
      },
      {
        "class_name": "TextureValidatorRequest",
        "methods": [
          "TextureValidatorRequest"
        ]
      },
      {
        "class_name": "TextureValidatorResponse",
        "methods": [
          "TextureValidatorResponse"
        ]
      },
      {
        "class_name": "TextureValidator",
        "methods": [
          "GetRequest",
          "TextureValidatorRequest",
          "GetResponse"
        ]
      }
    ]
  }